//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_eb "bufio";_e "bytes";_gb "encoding/hex";_ee "errors";_g "fmt";_cb "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/core";_cg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_d "io";_gf "sort";_a "strconv";
_f "strings";_ga "unicode/utf16";);func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fb ,_afd :=cmap ._gac [code ];return _fb ,_afd ;};func (_bgf *cMapParser )parseName ()(cmapName ,error ){_dgf :="";_dce :=false ;for {_ccaf ,_edgf :=_bgf ._dbg .Peek (1);
if _edgf ==_d .EOF {break ;};if _edgf !=nil {return cmapName {_dgf },_edgf ;};if !_dce {if _ccaf [0]=='/'{_dce =true ;_bgf ._dbg .ReadByte ();}else {_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_ccaf ,_ccaf );
return cmapName {_dgf },_g .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ccaf [0]);};}else {if _ab .IsWhiteSpace (_ccaf [0]){break ;}else if (_ccaf [0]=='/')||(_ccaf [0]=='[')||(_ccaf [0]=='(')||(_ccaf [0]==']')||(_ccaf [0]=='<')||(_ccaf [0]=='>'){break ;
}else if _ccaf [0]=='#'{_bda ,_dfba :=_bgf ._dbg .Peek (3);if _dfba !=nil {return cmapName {_dgf },_dfba ;};_bgf ._dbg .Discard (3);_ebgf ,_dfba :=_gb .DecodeString (string (_bda [1:3]));if _dfba !=nil {return cmapName {_dgf },_dfba ;};_dgf +=string (_ebgf );
}else {_fda ,_ :=_bgf ._dbg .ReadByte ();_dgf +=string (_fda );};};};return cmapName {_dgf },nil ;};func _ffbf (_ffd ,_eaf int )int {if _ffd < _eaf {return _ffd ;};return _eaf ;};func (_daab *cMapParser )parseDict ()(cmapDict ,error ){_cb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_edda :=_gadg ();_dga ,_ :=_daab ._dbg .ReadByte ();if _dga !='<'{return _edda ,ErrBadCMapDict ;};_dga ,_ =_daab ._dbg .ReadByte ();if _dga !='<'{return _edda ,ErrBadCMapDict ;};for {_daab .skipSpaces ();_ccd ,_cbd :=_daab ._dbg .Peek (2);if _cbd !=nil {return _edda ,_cbd ;
};if (_ccd [0]=='>')&&(_ccd [1]=='>'){_daab ._dbg .ReadByte ();_daab ._dbg .ReadByte ();break ;};_geab ,_cbd :=_daab .parseName ();_cb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_geab .Name );if _cbd !=nil {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cbd );
return _edda ,_cbd ;};_daab .skipSpaces ();_ecf ,_cbd :=_daab .parseObject ();if _cbd !=nil {return _edda ,_cbd ;};_edda .Dict [_geab .Name ]=_ecf ;_daab .skipSpaces ();_ccd ,_cbd =_daab ._dbg .Peek (3);if _cbd !=nil {return _edda ,_cbd ;};if string (_ccd )=="\u0064\u0065\u0066"{_daab ._dbg .Discard (3);
};};return _edda ,nil ;};func (cmap *CMap )NBits ()int {return cmap ._edd };func (_deb *CIDSystemInfo )String ()string {return _g .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_deb .Registry ,_deb .Ordering ,_deb .Supplement );
};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )parse ()error {var _dab cmapObject ;for {_fae ,_adb :=cmap .parseObject ();if _adb !=nil {if _adb ==_d .EOF {break ;};_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_adb );
return _adb ;};switch _cca :=_fae .(type ){case cmapOperand :_dae :=_cca ;switch _dae .Operand {case _dbec :_edg :=cmap .parseCodespaceRange ();if _edg !=nil {return _edg ;};case _bcb :_bcef :=cmap .parseCIDRange ();if _bcef !=nil {return _bcef ;};case _agg :_cgb :=cmap .parseBfchar ();
if _cgb !=nil {return _cgb ;};case _egcf :_dgga :=cmap .parseBfrange ();if _dgga !=nil {return _dgga ;};case _cac :if _dab ==nil {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gdg ,_agd :=_dab .(cmapName );if !_agd {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dab );
return ErrBadCMap ;};cmap ._cbb =_gdg .Name ;case _dde :_eddg :=cmap .parseSystemInfo ();if _eddg !=nil {return _eddg ;};};case cmapName :_dgcb :=_cca ;switch _dgcb .Name {case _dde :_dfb :=cmap .parseSystemInfo ();if _dfb !=nil {return _dfb ;};case _aee :_deg :=cmap .parseName ();
if _deg !=nil {return _deg ;};case _ggfa :_dfe :=cmap .parseType ();if _dfe !=nil {return _dfe ;};case _bcdd :_dbd :=cmap .parseVersion ();if _dbd !=nil {return _dbd ;};};};_dab =_fae ;};return nil ;};func _efa (_eadf cmapHexString )[]rune {if len (_eadf ._dfa )==1{return []rune {rune (_eadf ._dfa [0])};
};_fffd :=_eadf ._dfa ;if len (_fffd )%2!=0{_fffd =append (_fffd ,0);_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_eadf ,_fffd );
};_gfa :=len (_fffd )>>1;_dafg :=make ([]uint16 ,_gfa );for _decc :=0;_decc < _gfa ;_decc ++{_dafg [_decc ]=uint16 (_fffd [_decc <<1])<<8+uint16 (_fffd [_decc <<1+1]);};_aaa :=_ga .Decode (_dafg );return _aaa ;};type Codespace struct{NumBytes int ;Low CharCode ;
High CharCode ;};func (_dcbe *cMapParser )parseArray ()(cmapArray ,error ){_bad :=cmapArray {};_bad .Array =[]cmapObject {};_dcbe ._dbg .ReadByte ();for {_dcbe .skipSpaces ();_beg ,_faac :=_dcbe ._dbg .Peek (1);if _faac !=nil {return _bad ,_faac ;};if _beg [0]==']'{_dcbe ._dbg .ReadByte ();
break ;};_ageg ,_faac :=_dcbe .parseObject ();if _faac !=nil {return _bad ,_faac ;};_bad .Array =append (_bad .Array ,_ageg );};return _bad ,nil ;};func (cmap *CMap )Bytes ()[]byte {_cb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._fc )> 0{return cmap ._fc ;};cmap ._fc =[]byte (_f .Join ([]string {_fce ,cmap .toBfData (),_dcf },"\u000a"));return cmap ._fc ;};func (cmap *CMap )parseVersion ()error {_fdea :="";_fgf :=false ;for _gfc :=0;_gfc < 3&&!_fgf ;_gfc ++{_cab ,_dee :=cmap .parseObject ();
if _dee !=nil {return _dee ;};switch _bfeg :=_cab .(type ){case cmapOperand :switch _bfeg .Operand {case "\u0064\u0065\u0066":_fgf =true ;default:_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cab );
return ErrBadCMap ;};case cmapInt :_fdea =_g .Sprintf ("\u0025\u0064",_bfeg ._cdcd );case cmapFloat :_fdea =_g .Sprintf ("\u0025\u0066",_bfeg ._egb );case cmapString :_fdea =_bfeg .String ;default:_cb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cab );
};};cmap ._df =_fdea ;return nil ;};func (cmap *CMap )parseName ()error {_gaf :="";_dcb :=false ;for _gca :=0;_gca < 20&&!_dcb ;_gca ++{_ead ,_efb :=cmap .parseObject ();if _efb !=nil {return _efb ;};switch _dadb :=_ead .(type ){case cmapOperand :switch _dadb .Operand {case "\u0064\u0065\u0066":_dcb =true ;
default:_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_ead ,_gaf );
if _gaf !=""{_gaf =_g .Sprintf ("\u0025\u0073\u0020%\u0073",_gaf ,_dadb .Operand );};_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_gaf );
};case cmapName :_gaf =_dadb .Name ;};};if !_dcb {_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ad =_gaf ;return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cdf []CharCode ;
if cmap ._edd ==8{for _ ,_gacd :=range data {_cdf =append (_cdf ,CharCode (_gacd ));};return _cdf ,true ;};for _dbb :=0;_dbb < len (data );{_aadg ,_ce ,_fcb :=cmap .matchCode (data [_dbb :]);if !_fcb {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_dbb ,data ,string (data ));
return _cdf ,false ;};_cdf =append (_cdf ,_aadg );_dbb +=_ce ;};return _cdf ,true ;};func (cmap *CMap )String ()string {_acg :=cmap ._egg ;_ega :=[]string {_g .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._edd ),_g .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bd )};
if cmap ._df !=""{_ega =append (_ega ,_g .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._df ));};if cmap ._cbb !=""{_ega =append (_ega ,_g .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cbb ));
};_ega =append (_ega ,_g .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_acg .String ()));if len (cmap ._ec )> 0{_ega =append (_ega ,_g .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ec )));
};if len (cmap ._gcc )> 0{_ega =append (_ega ,_g .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._gcc )));};return _g .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ad ,_f .Join (_ega ,"\u0020"));
};type cmapFloat struct{_egb float64 };func (_dec *cMapParser )parseObject ()(cmapObject ,error ){_dec .skipSpaces ();for {_dccf ,_eag :=_dec ._dbg .Peek (2);if _eag !=nil {return nil ,_eag ;};if _dccf [0]=='%'{_dec .parseComment ();_dec .skipSpaces ();
continue ;}else if _dccf [0]=='/'{_edac ,_gbe :=_dec .parseName ();return _edac ,_gbe ;}else if _dccf [0]=='('{_aba ,_ecdf :=_dec .parseString ();return _aba ,_ecdf ;}else if _dccf [0]=='['{_fbcb ,_egcb :=_dec .parseArray ();return _fbcb ,_egcb ;}else if (_dccf [0]=='<')&&(_dccf [1]=='<'){_bgeb ,_ggc :=_dec .parseDict ();
return _bgeb ,_ggc ;}else if _dccf [0]=='<'{_ccc ,_fdc :=_dec .parseHexString ();return _ccc ,_fdc ;}else if _ab .IsDecimalDigit (_dccf [0])||(_dccf [0]=='-'&&_ab .IsDecimalDigit (_dccf [1])){_bdf ,_gcfd :=_dec .parseNumber ();if _gcfd !=nil {return nil ,_gcfd ;
};return _bdf ,nil ;}else {_agaa ,_fgg :=_dec .parseOperand ();if _fgg !=nil {return nil ,_fgg ;};return _agaa ,nil ;};};};func (cmap *CMap )parseBfrange ()error {for {var _fded CharCode ;_cbcc ,_ace :=cmap .parseObject ();if _ace !=nil {if _ace ==_d .EOF {break ;
};return _ace ;};switch _eddgb :=_cbcc .(type ){case cmapOperand :if _eddgb .Operand ==_bdd {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_fded =_degf (_eddgb );
default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _efbd CharCode ;_cbcc ,_ace =cmap .parseObject ();if _ace !=nil {if _ace ==_d .EOF {break ;};return _ace ;};switch _dddc :=_cbcc .(type ){case cmapOperand :_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_efbd =_degf (_dddc );default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cbcc );return ErrBadCMap ;};_cbcc ,_ace =cmap .parseObject ();
if _ace !=nil {if _ace ==_d .EOF {break ;};return _ace ;};switch _efe :=_cbcc .(type ){case cmapArray :if len (_efe .Array )!=int (_efbd -_fded )+1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gcf :=_fded ;_gcf <=_efbd ;_gcf ++{_efba :=_efe .Array [_gcf -_fded ];_faa ,_ced :=_efba .(cmapHexString );if !_ced {return _ee .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_fdf :=_efa (_faa );cmap ._gcc [_gcf ]=string (_fdf );};case cmapHexString :_gdge :=_efa (_efe );_ebf :=len (_gdge );for _age :=_fded ;_age <=_efbd ;_age ++{cmap ._gcc [_age ]=string (_gdge );if _ebf > 0{_gdge [_ebf -1]++;}else {_cb .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_age );
};};default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cbcc );return ErrBadCMap ;};};return nil ;};type cMapParser struct{_dbg *_eb .Reader };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_cb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bg (isSimple );cmap .cMapParser =_daf (data );_bdg :=cmap .parse ();if _bdg !=nil {return nil ,_bdg ;};if len (cmap ._ec )==0{if cmap ._cbb !=""{return cmap ,nil ;};_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func _degf (_cgga cmapHexString )CharCode {_ffb :=CharCode (0);for _ ,_dadg :=range _cgga ._dfa {_ffb <<=8;_ffb |=CharCode (_dadg );};return _ffb ;};var (ErrBadCMap =_ee .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_ee .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_ee .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (_aea *cMapParser )parseNumber ()(cmapObject ,error ){_dgcg ,_def :=_ab .ParseNumber (_aea ._dbg );if _def !=nil {return nil ,_def ;};switch _bdba :=_dgcg .(type ){case *_ab .PdfObjectFloat :return cmapFloat {float64 (*_bdba )},nil ;case *_ab .PdfObjectInteger :return cmapInt {int64 (*_bdba )},nil ;
};return nil ,_g .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dgcg );};type charRange struct{_ba CharCode ;_ff CharCode ;};func (cmap *CMap )parseType ()error {_bef :=0;
_dca :=false ;for _dgef :=0;_dgef < 3&&!_dca ;_dgef ++{_ffa ,_egag :=cmap .parseObject ();if _egag !=nil {return _egag ;};switch _acba :=_ffa .(type ){case cmapOperand :switch _acba .Operand {case "\u0064\u0065\u0066":_dca =true ;default:_cb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_ffa );
return ErrBadCMap ;};case cmapInt :_bef =int (_acba ._cdcd );};};cmap ._bd =_bef ;return nil ;};const (_ggbc =100;_fce ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_dcf ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _bfaf (_eac string )rune {_bfea :=[]rune (_eac );return _bfea [len (_bfea )-1]};func (cmap *CMap )Stream ()(*_ab .PdfObjectStream ,error ){if cmap ._da !=nil {return cmap ._da ,nil ;};_bge ,_ecd :=_ab .MakeStream (cmap .Bytes (),_ab .NewFlateEncoder ());
if _ecd !=nil {return nil ,_ecd ;};cmap ._da =_bge ;return cmap ._da ,nil ;};type fbRange struct{_ag CharCode ;_ed CharCode ;_gad string ;};func _gaaa (_ebb string )(*CMap ,error ){_geb ,_bca :=_cg .Asset (_ebb );if _bca !=nil {return nil ,_bca ;};return LoadCmapFromDataCID (_geb );
};func (_cdfg *cMapParser )parseString ()(cmapString ,error ){_cdfg ._dbg .ReadByte ();_bbd :=_e .Buffer {};_eagb :=1;for {_gcab ,_fgbe :=_cdfg ._dbg .Peek (1);if _fgbe !=nil {return cmapString {_bbd .String ()},_fgbe ;};if _gcab [0]=='\\'{_cdfg ._dbg .ReadByte ();
_cgge ,_fcge :=_cdfg ._dbg .ReadByte ();if _fcge !=nil {return cmapString {_bbd .String ()},_fcge ;};if _ab .IsOctalDigit (_cgge ){_deaa ,_fcea :=_cdfg ._dbg .Peek (2);if _fcea !=nil {return cmapString {_bbd .String ()},_fcea ;};var _decf []byte ;_decf =append (_decf ,_cgge );
for _ ,_gaeb :=range _deaa {if _ab .IsOctalDigit (_gaeb ){_decf =append (_decf ,_gaeb );}else {break ;};};_cdfg ._dbg .Discard (len (_decf )-1);_cb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_decf );
_aag ,_fcea :=_a .ParseUint (string (_decf ),8,32);if _fcea !=nil {return cmapString {_bbd .String ()},_fcea ;};_bbd .WriteByte (byte (_aag ));continue ;};switch _cgge {case 'n':_bbd .WriteByte ('\n');case 'r':_bbd .WriteByte ('\r');case 't':_bbd .WriteByte ('\t');
case 'b':_bbd .WriteByte ('\b');case 'f':_bbd .WriteByte ('\f');case '(':_bbd .WriteByte ('(');case ')':_bbd .WriteByte (')');case '\\':_bbd .WriteByte ('\\');};continue ;}else if _gcab [0]=='('{_eagb ++;}else if _gcab [0]==')'{_eagb --;if _eagb ==0{_cdfg ._dbg .ReadByte ();
break ;};};_bgfd ,_ :=_cdfg ._dbg .ReadByte ();_bbd .WriteByte (_bgfd );};return cmapString {_bbd .String ()},nil ;};func (cmap *CMap )Type ()int {return cmap ._bd };func (cmap *CMap )Name ()string {return cmap ._ad };func _gadg ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};
func (_gaag *cMapParser )parseComment ()(string ,error ){var _afa _e .Buffer ;_ ,_dag :=_gaag .skipSpaces ();if _dag !=nil {return _afa .String (),_dag ;};_bff :=true ;for {_eebf ,_dcae :=_gaag ._dbg .Peek (1);if _dcae !=nil {_cb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_dcae );
return _afa .String (),_dcae ;};if _bff &&_eebf [0]!='%'{return _afa .String (),ErrBadCMapComment ;};_bff =false ;if (_eebf [0]!='\r')&&(_eebf [0]!='\n'){_dcgd ,_ :=_gaag ._dbg .ReadByte ();_afa .WriteByte (_dcgd );}else {break ;};};return _afa .String (),nil ;
};type cmapOperand struct{Operand string ;};type cmapName struct{Name string ;};func _daf (_fbcc []byte )*cMapParser {_aed :=cMapParser {};_gacf :=_e .NewBuffer (_fbcc );_aed ._dbg =_eb .NewReader (_gacf );return &_aed ;};func (cmap *CMap )parseBfchar ()error {for {_feb ,_aac :=cmap .parseObject ();
if _aac !=nil {if _aac ==_d .EOF {break ;};return _aac ;};var _ggfd CharCode ;switch _fgc :=_feb .(type ){case cmapOperand :if _fgc .Operand ==_debf {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_ggfd =_degf (_fgc );default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_feb ,_aac =cmap .parseObject ();if _aac !=nil {if _aac ==_d .EOF {break ;};return _aac ;};var _gff []rune ;
switch _bedf :=_feb .(type ){case cmapOperand :if _bedf .Operand ==_debf {return nil ;};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bedf );
return ErrBadCMap ;case cmapHexString :_gff =_efa (_bedf );case cmapName :_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bedf );_gff =[]rune {MissingCodeRune };
default:_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_feb );return ErrBadCMap ;};cmap ._gcc [_ggfd ]=string (_gff );};return nil ;};type CMap struct{*cMapParser ;
_ad string ;_edd int ;_bd int ;_df string ;_cbb string ;_egg CIDSystemInfo ;_ec []Codespace ;_gac map[CharCode ]CharCode ;_gc map[CharCode ]CharCode ;_gcc map[CharCode ]string ;_db map[string ]CharCode ;_fc []byte ;_da *_ab .PdfObjectStream ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cdc ,_gcb :=cmap ._gc [cid ];
return _cdc ,_gcb ;};func (cmap *CMap )matchCode (_fe []byte )(_bb CharCode ,_fa int ,_eda bool ){for _aga :=0;_aga < _b ;_aga ++{if _aga < len (_fe ){_bb =_bb <<8|CharCode (_fe [_aga ]);_fa ++;};_eda =cmap .inCodespace (_bb ,_aga +1);if _eda {return _bb ,_fa ,true ;
};};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fe ,string (_fe ),cmap );
return 0,0,false ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_dd :=_gaaa (name );if _dd !=nil {return nil ,_dd ;};if cmap ._cbb ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_gg ,_dd :=_gaaa (cmap ._cbb );if _dd !=nil {return nil ,_dd ;
};for _fff ,_aa :=range _gg ._gac {if _ ,_dgg :=cmap ._gac [_fff ];!_dgg {cmap ._gac [_fff ]=_aa ;};};cmap ._ec =append (cmap ._ec ,_gg ._ec ...);cmap .computeInverseMappings ();return cmap ,nil ;};type cmapObject interface{};func NewCIDSystemInfo (obj _ab .PdfObject )(_eg CIDSystemInfo ,_ef error ){_fd ,_dg :=_ab .GetDict (obj );
if !_dg {return CIDSystemInfo {},_ab .ErrTypeError ;};_ge ,_dg :=_ab .GetStringVal (_fd .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_dg {return CIDSystemInfo {},_ab .ErrTypeError ;};_de ,_dg :=_ab .GetStringVal (_fd .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_dg {return CIDSystemInfo {},_ab .ErrTypeError ;};_bc ,_dg :=_ab .GetIntVal (_fd .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_dg {return CIDSystemInfo {},_ab .ErrTypeError ;};return CIDSystemInfo {Registry :_ge ,Ordering :_de ,Supplement :_bc },nil ;
};func (cmap *CMap )toBfData ()string {if len (cmap ._gcc )==0{return "";};_dgc :=make ([]CharCode ,0,len (cmap ._gcc ));for _ca :=range cmap ._gcc {_dgc =append (_dgc ,_ca );};_gf .Slice (_dgc ,func (_aca ,_ggb int )bool {return _dgc [_aca ]< _dgc [_ggb ]});
var _eea []charRange ;_abf :=charRange {_dgc [0],_dgc [0]};_edf :=cmap ._gcc [_dgc [0]];for _ ,_ged :=range _dgc [1:]{_bafd :=cmap ._gcc [_ged ];if _ged ==_abf ._ff +1&&_bfaf (_bafd )==_bfaf (_edf )+1{_abf ._ff =_ged ;}else {_eea =append (_eea ,_abf );
_abf ._ba ,_abf ._ff =_ged ,_ged ;};_edf =_bafd ;};_eea =append (_eea ,_abf );var _gccc []CharCode ;var _cfa []fbRange ;for _ ,_aec :=range _eea {if _aec ._ba ==_aec ._ff {_gccc =append (_gccc ,_aec ._ba );}else {_cfa =append (_cfa ,fbRange {_ag :_aec ._ba ,_ed :_aec ._ff ,_gad :cmap ._gcc [_aec ._ba ]});
};};_cb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_eea ),len (_gccc ),len (_cfa ));var _cfe []string ;if len (_gccc )> 0{_bfa :=(len (_gccc )+_ggbc -1)/_ggbc ;
for _bce :=0;_bce < _bfa ;_bce ++{_dbff :=_ffbf (len (_gccc )-_bce *_ggbc ,_ggbc );_cfe =append (_cfe ,_g .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_dbff ));for _cdd :=0;_cdd < _dbff ;_cdd ++{_cfc :=_gccc [_bce *_ggbc +_cdd ];
_fdd :=cmap ._gcc [_cfc ];_cfe =append (_cfe ,_g .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_cfc ,_eggfb (_fdd )));};_cfe =append (_cfe ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_cfa )> 0{_fga :=(len (_cfa )+_ggbc -1)/_ggbc ;
for _dea :=0;_dea < _fga ;_dea ++{_aadf :=_ffbf (len (_cfa )-_dea *_ggbc ,_ggbc );_cfe =append (_cfe ,_g .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_aadf ));for _efg :=0;_efg < _aadf ;_efg ++{_bgb :=_cfa [_dea *_ggbc +_efg ];
_cfe =append (_cfe ,_g .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_bgb ._ag ,_bgb ._ed ,_eggfb (_bgb ._gad )));};_cfe =append (_cfe ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _f .Join (_cfe ,"\u000a");
};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _gfd ,_afe :=cmap ._gcc [code ];_afe {return _gfd ,true ;};return MissingCodeString ,false ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bcca ,_afg :=cmap .BytesToCharcodes (data );
if !_afg {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_cc :=make ([]string ,len (_bcca ));var _beb []CharCode ;for _cba ,_aaf :=range _bcca {_ae ,_ea :=cmap ._gcc [_aaf ];if !_ea {_beb =append (_beb ,_aaf );_ae =MissingCodeString ;};_cc [_cba ]=_ae ;};_dbf :=_f .Join (_cc ,"");if len (_beb )> 0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bcca ,len (_beb ),_beb ,_dbf ,cmap );
};return _dbf ,len (_beb );};const (_b =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cd ,_dad :=cmap ._db [s ];return _cd ,_dad };func _eggfb (_gae string )string {_bba :=[]rune (_gae );
_ggbe :=make ([]string ,len (_bba ));for _faf ,_fcg :=range _bba {_ggbe [_faf ]=_g .Sprintf ("\u0025\u0030\u0034\u0078",_fcg );};return _g .Sprintf ("\u003c\u0025\u0073\u003e",_f .Join (_ggbe ,""));};func _cfcd (_ebc cmapHexString )rune {_bcbd :=_efa (_ebc );
if _fdfd :=len (_bcbd );_fdfd ==0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_ebc );
return MissingCodeRune ;};if len (_bcbd )> 1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_ebc ,_bcbd );
};return _bcbd [0];};type cmapDict struct{Dict map[string ]cmapObject ;};type CharCode uint32 ;func (cmap *CMap )parseCodespaceRange ()error {for {_fed ,_dgd :=cmap .parseObject ();if _dgd !=nil {if _dgd ==_d .EOF {break ;};return _dgd ;};_acf ,_daa :=_fed .(cmapHexString );
if !_daa {if _dbe ,_dfea :=_fed .(cmapOperand );_dfea {if _dbe .Operand ==_afb {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_fed ,_dgd =cmap .parseObject ();if _dgd !=nil {if _dgd ==_d .EOF {break ;
};return _dgd ;};_ebg ,_daa :=_fed .(cmapHexString );if !_daa {return _ee .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_acf ._dfa )!=len (_ebg ._dfa ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_cgg :=_degf (_acf );_daeba :=_degf (_ebg );if _daeba < _cgg {_cb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_cgg ,_daeba );
return ErrBadCMap ;};_agf :=_ebg ._fdag ;_cfg :=Codespace {NumBytes :_agf ,Low :_cgg ,High :_daeba };cmap ._ec =append (cmap ._ec ,_cfg );_cb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_cgg ,_daeba );
};if len (cmap ._ec )==0{_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_aafc *cMapParser )parseOperand ()(cmapOperand ,error ){_fee :=cmapOperand {};
_adbe :=_e .Buffer {};for {_gce ,_fbd :=_aafc ._dbg .Peek (1);if _fbd !=nil {if _fbd ==_d .EOF {break ;};return _fee ,_fbd ;};if _ab .IsDelimiter (_gce [0]){break ;};if _ab .IsWhiteSpace (_gce [0]){break ;};_aggc ,_ :=_aafc ._dbg .ReadByte ();_adbe .WriteByte (_aggc );
};if _adbe .Len ()==0{return _fee ,_g .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_fee .Operand =_adbe .String ();return _fee ,nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func (cmap *CMap )parseSystemInfo ()error {_bae :=false ;_abe :=false ;_bee :="";_geg :=false ;_eacc :=CIDSystemInfo {};for _cga :=0;_cga < 50&&!_geg ;_cga ++{_aeg ,_gbb :=cmap .parseObject ();if _gbb !=nil {return _gbb ;};switch _fdg :=_aeg .(type ){case cmapDict :_fgb :=_fdg .Dict ;
_ecb ,_daeb :=_fgb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbce ,_daeb :=_ecb .(cmapString );
if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eacc .Registry =_fbce .String ;_ecb ,_daeb =_fgb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fbce ,_daeb =_ecb .(cmapString );if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_eacc .Ordering =_fbce .String ;_egf ,_daeb :=_fgb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ddd ,_daeb :=_egf .(cmapInt );if !_daeb {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eacc .Supplement =int (_ddd ._cdcd );
_geg =true ;case cmapOperand :switch _fdg .Operand {case "\u0062\u0065\u0067i\u006e":_bae =true ;case "\u0065\u006e\u0064":_geg =true ;case "\u0064\u0065\u0066":_abe =false ;};case cmapName :if _bae {_bee =_fdg .Name ;_abe =true ;};case cmapString :if _abe {switch _bee {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_eacc .Registry =_fdg .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_eacc .Ordering =_fdg .String ;};};case cmapInt :if _abe {switch _bee {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_eacc .Supplement =int (_fdg ._cdcd );};};};};if !_geg {_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._egg =_eacc ;return nil ;};func (_bccc *cMapParser )parseHexString ()(cmapHexString ,error ){_bccc ._dbg .ReadByte ();_bccad :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_gfg :=_e .Buffer {};for {_bccc .skipSpaces ();_ecg ,_eabe :=_bccc ._dbg .Peek (1);if _eabe !=nil {return cmapHexString {},_eabe ;};if _ecg [0]=='>'{_bccc ._dbg .ReadByte ();break ;};_dbbc ,_ :=_bccc ._dbg .ReadByte ();if _e .IndexByte (_bccad ,_dbbc )>=0{_gfg .WriteByte (_dbbc );
};};if _gfg .Len ()%2==1{_cb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_gfg .String ());_gfg .WriteByte ('0');};_edc :=_gfg .Len ()/2;
_cdfe ,_ :=_gb .DecodeString (_gfg .String ());return cmapHexString {_fdag :_edc ,_dfa :_cdfe },nil ;};func _bg (_gbc bool )*CMap {_af :=16;if _gbc {_af =8;};return &CMap {_edd :_af ,_gac :make (map[CharCode ]CharCode ),_gc :make (map[CharCode ]CharCode ),_gcc :make (map[CharCode ]string ),_db :make (map[string ]CharCode )};
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_bdb :=make (map[CharCode ]string ,len (codeToRune ));for _fde ,_be :=range codeToRune {_bdb [_fde ]=string (_be );};cmap :=&CMap {_ad :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bd :2,_edd :16,_egg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ec :[]Codespace {{Low :0,High :0xffff}},_gcc :_bdb ,_db :make (map[string ]CharCode ,len (codeToRune )),_gac :make (map[CharCode ]CharCode ,len (codeToRune )),_gc :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func IsPredefinedCMap (name string )bool {return _cg .AssetExists (name )};type cmapString struct{String string ;};type cmapInt struct{_cdcd int64 };func (_fag *cMapParser )skipSpaces ()(int ,error ){_afeb :=0;
for {_cgd ,_ggea :=_fag ._dbg .Peek (1);if _ggea !=nil {return 0,_ggea ;};if _ab .IsWhiteSpace (_cgd [0]){_fag ._dbg .ReadByte ();_afeb ++;}else {break ;};};return _afeb ,nil ;};func (cmap *CMap )inCodespace (_ddb CharCode ,_dge int )bool {for _ ,_bfe :=range cmap ._ec {if _bfe .Low <=_ddb &&_ddb <=_bfe .High &&_dge ==_bfe .NumBytes {return true ;
};};return false ;};const (_dde ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_dadbb ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gfe ="\u0065n\u0064\u0063\u006d\u0061\u0070";_dbec ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_afb ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_agg ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_debf ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_egcf ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_bdd ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bcb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gea ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cac ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_aee ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_ggfa ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_bcdd ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )computeInverseMappings (){for _bag ,_gd :=range cmap ._gac {if _bf ,_acd :=cmap ._gc [_gd ];
!_acd ||(_acd &&_bf > _bag ){cmap ._gc [_gd ]=_bag ;};};for _aad ,_eggf :=range cmap ._gcc {if _ded ,_bde :=cmap ._db [_eggf ];!_bde ||(_bde &&_ded > _aad ){cmap ._db [_eggf ]=_aad ;};};_gf .Slice (cmap ._ec ,func (_bcc ,_acb int )bool {return cmap ._ec [_bcc ].Low < cmap ._ec [_acb ].Low });
};func (cmap *CMap )parseCIDRange ()error {for {_gab ,_bbg :=cmap .parseObject ();if _bbg !=nil {if _bbg ==_d .EOF {break ;};return _bbg ;};_ada ,_bccd :=_gab .(cmapHexString );if !_bccd {if _fab ,_dcg :=_gab .(cmapOperand );_dcg {if _fab .Operand ==_gea {return nil ;
};return _ee .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_daaf :=_degf (_ada );
_gab ,_bbg =cmap .parseObject ();if _bbg !=nil {if _bbg ==_d .EOF {break ;};return _bbg ;};_acaa ,_bccd :=_gab .(cmapHexString );if !_bccd {return _ee .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_ada ._dfa )!=len (_acaa ._dfa ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gde :=_degf (_acaa );
if _daaf > _gde {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_daaf ,_gde );
return ErrBadCMap ;};_gab ,_bbg =cmap .parseObject ();if _bbg !=nil {if _bbg ==_d .EOF {break ;};return _bbg ;};_ecbe ,_bccd :=_gab .(cmapInt );if !_bccd {return _ee .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ecbe ._cdcd < 0{return _ee .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cgae :=_ecbe ._cdcd ;for _fcgb :=_daaf ;_fcgb <=_gde ;_fcgb ++{cmap ._gac [_fcgb ]=CharCode (_cgae );
_cgae ++;};_cb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_daaf ,_gde ,_ecbe ._cdcd );};return nil ;};type cmapHexString struct{_fdag int ;_dfa []byte ;
};