//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ag "bufio";_da "bytes";_a "encoding/hex";_ac "errors";_d "fmt";_aa "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/core";_dgg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_e "io";_c "sort";_g "strconv";
_df "strings";_dg "unicode/utf16";);const (_eaa =100;_gff ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_cee ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (_adg *cMapParser )parseComment ()(string ,error ){var _dcfg _da .Buffer ;_ ,_faf :=_adg .skipSpaces ();if _faf !=nil {return _dcfg .String (),_faf ;};_bcg :=true ;for {_fce ,_gcc :=_adg ._cggg .Peek (1);if _gcc !=nil {_aa .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gcc );
return _dcfg .String (),_gcc ;};if _bcg &&_fce [0]!='%'{return _dcfg .String (),ErrBadCMapComment ;};_bcg =false ;if (_fce [0]!='\r')&&(_fce [0]!='\n'){_aab ,_ :=_adg ._cggg .ReadByte ();_dcfg .WriteByte (_aab );}else {break ;};};return _dcfg .String (),nil ;
};type fbRange struct{_fb CharCode ;_cd CharCode ;_dd string ;};func (cmap *CMap )parse ()error {var _eca cmapObject ;for {_agee ,_baa :=cmap .parseObject ();if _baa !=nil {if _baa ==_e .EOF {break ;};_aa .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_baa );
return _baa ;};switch _ggg :=_agee .(type ){case cmapOperand :_addd :=_ggg ;switch _addd .Operand {case _effc :_ddd :=cmap .parseCodespaceRange ();if _ddd !=nil {return _ddd ;};case _bdg :_eac :=cmap .parseCIDRange ();if _eac !=nil {return _eac ;};case _eacd :_eaac :=cmap .parseBfchar ();
if _eaac !=nil {return _eaac ;};case _eced :_cab :=cmap .parseBfrange ();if _cab !=nil {return _cab ;};case _beba :if _eca ==nil {_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gca ,_afc :=_eca .(cmapName );if !_afc {_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_eca );
return ErrBadCMap ;};cmap ._ddf =_gca .Name ;case _fdf :_dca :=cmap .parseSystemInfo ();if _dca !=nil {return _dca ;};};case cmapName :_ebb :=_ggg ;switch _ebb .Name {case _fdf :_fgea :=cmap .parseSystemInfo ();if _fgea !=nil {return _fgea ;};case _feg :_dfb :=cmap .parseName ();
if _dfb !=nil {return _dfb ;};case _fadf :_bec :=cmap .parseType ();if _bec !=nil {return _bec ;};case _ebdb :_edd :=cmap .parseVersion ();if _edd !=nil {return _edd ;};};};_eca =_agee ;};return nil ;};func _bba (_aaa bool )*CMap {_cg :=16;if _aaa {_cg =8;
};return &CMap {_ec :_cg ,_ge :make (map[CharCode ]CharCode ),_gec :make (map[CharCode ]CharCode ),_bg :make (map[CharCode ]string ),_gf :make (map[string ]CharCode )};};type CMap struct{*cMapParser ;_aae string ;_ec int ;_bb int ;_ff string ;_ddf string ;
_fg CIDSystemInfo ;_cdf []Codespace ;_ge map[CharCode ]CharCode ;_gec map[CharCode ]CharCode ;_bg map[CharCode ]string ;_gf map[string ]CharCode ;_abc []byte ;_cc *_ab .PdfObjectStream ;};func _ddbc (_eee []byte )*cMapParser {_fede :=cMapParser {};_eeee :=_da .NewBuffer (_eee );
_fede ._cggg =_ag .NewReader (_eeee );return &_fede ;};func _fbc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fcc ,_gfd :=cmap ._ge [code ];return _fcc ,_gfd ;};func IsPredefinedCMap (name string )bool {return _dgg .AssetExists (name )};
func (cmap *CMap )Bytes ()[]byte {_aa .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._abc )> 0{return cmap ._abc ;};cmap ._abc =[]byte (_df .Join ([]string {_gff ,cmap .toBfData (),_cee },"\u000a"));
return cmap ._abc ;};func (_cbaa *cMapParser )skipSpaces ()(int ,error ){_eaf :=0;for {_dcdf ,_ggfd :=_cbaa ._cggg .Peek (1);if _ggfd !=nil {return 0,_ggfd ;};if _ab .IsWhiteSpace (_dcdf [0]){_cbaa ._cggg .ReadByte ();_eaf ++;}else {break ;};};return _eaf ,nil ;
};func (cmap *CMap )parseBfrange ()error {for {var _gfef CharCode ;_ccbf ,_fdaf :=cmap .parseObject ();if _fdaf !=nil {if _fdaf ==_e .EOF {break ;};return _fdaf ;};switch _ceec :=_ccbf .(type ){case cmapOperand :if _ceec .Operand ==_bffe {return nil ;};
return _ac .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_gfef =_eacc (_ceec );default:return _ac .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _cgc CharCode ;_ccbf ,_fdaf =cmap .parseObject ();if _fdaf !=nil {if _fdaf ==_e .EOF {break ;};return _fdaf ;};switch _cedc :=_ccbf .(type ){case cmapOperand :_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cgc =_eacc (_cedc );default:_aa .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ccbf );return ErrBadCMap ;};_ccbf ,_fdaf =cmap .parseObject ();
if _fdaf !=nil {if _fdaf ==_e .EOF {break ;};return _fdaf ;};switch _dfg :=_ccbf .(type ){case cmapArray :if len (_dfg .Array )!=int (_cgc -_gfef )+1{_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fagc :=_gfef ;_fagc <=_cgc ;_fagc ++{_ccge :=_dfg .Array [_fagc -_gfef ];_gab ,_adf :=_ccge .(cmapHexString );if !_adf {return _ac .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_gdaf :=_fbec (_gab );cmap ._bg [_fagc ]=string (_gdaf );};case cmapHexString :_bcf :=_fbec (_dfg );_aef :=len (_bcf );for _fab :=_gfef ;_fab <=_cgc ;_fab ++{cmap ._bg [_fab ]=string (_bcf );if _aef > 0{_bcf [_aef -1]++;}else {_aa .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_fab );
};};default:_aa .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_ccbf );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )inCodespace (_dfaf CharCode ,_ffg int )bool {for _ ,_bee :=range cmap ._cdf {if _bee .Low <=_dfaf &&_dfaf <=_bee .High &&_ffg ==_bee .NumBytes {return true ;
};};return false ;};const (_b =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_aa .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bba (isSimple );cmap .cMapParser =_ddbc (data );_db :=cmap .parse ();if _db !=nil {return nil ,_db ;};if len (cmap ._cdf )==0{if cmap ._ddf !=""{return cmap ,nil ;};_aa .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type cmapHexString struct{_cbca int ;_gfgdg []byte ;};func (cmap *CMap )matchCode (_efa []byte )(_fccf CharCode ,_bbd int ,_bbaa bool ){for _efd :=0;_efd < _b ;_efd ++{if _efd < len (_efa ){_fccf =_fccf <<8|CharCode (_efa [_efd ]);
_bbd ++;};_bbaa =cmap .inCodespace (_fccf ,_efd +1);if _bbaa {return _fccf ,_bbd ,true ;};};_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_efa ,string (_efa ),cmap );
return 0,0,false ;};func _decb (_bffef cmapHexString )rune {_fcg :=_fbec (_bffef );if _agead :=len (_fcg );_agead ==0{_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_bffef );
return MissingCodeRune ;};if len (_fcg )> 1{_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_bffef ,_fcg );
};return _fcg [0];};func _dbb (_fa string )(*CMap ,error ){_ce ,_cdb :=_dgg .Asset (_fa );if _cdb !=nil {return nil ,_cdb ;};return LoadCmapFromDataCID (_ce );};type cmapArray struct{Array []cmapObject ;};func (_fde *cMapParser )parseNumber ()(cmapObject ,error ){_abfb ,_ffdg :=_ab .ParseNumber (_fde ._cggg );
if _ffdg !=nil {return nil ,_ffdg ;};switch _eefd :=_abfb .(type ){case *_ab .PdfObjectFloat :return cmapFloat {float64 (*_eefd )},nil ;case *_ab .PdfObjectInteger :return cmapInt {int64 (*_eefd )},nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_abfb );
};func (cmap *CMap )parseVersion ()error {_fagf :="";_bge :=false ;for _gga :=0;_gga < 3&&!_bge ;_gga ++{_gffa ,_gfgg :=cmap .parseObject ();if _gfgg !=nil {return _gfgg ;};switch _dcf :=_gffa .(type ){case cmapOperand :switch _dcf .Operand {case "\u0064\u0065\u0066":_bge =true ;
default:_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gffa );
return ErrBadCMap ;};case cmapInt :_fagf =_d .Sprintf ("\u0025\u0064",_dcf ._ceef );case cmapFloat :_fagf =_d .Sprintf ("\u0025\u0066",_dcf ._cggb );case cmapString :_fagf =_dcf .String ;default:_aa .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gffa );
};};cmap ._ff =_fagf ;return nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_ee :=_dbb (name );if _ee !=nil {return nil ,_ee ;};if cmap ._ddf ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_fga ,_ee :=_dbb (cmap ._ddf );if _ee !=nil {return nil ,_ee ;
};for _gbe ,_ae :=range _fga ._ge {if _ ,_cff :=cmap ._ge [_gbe ];!_cff {cmap ._ge [_gbe ]=_ae ;};};cmap ._cdf =append (cmap ._cdf ,_fga ._cdf ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (_cfa *cMapParser )parseObject ()(cmapObject ,error ){_cfa .skipSpaces ();
for {_aac ,_cfee :=_cfa ._cggg .Peek (2);if _cfee !=nil {return nil ,_cfee ;};if _aac [0]=='%'{_cfa .parseComment ();_cfa .skipSpaces ();continue ;}else if _aac [0]=='/'{_dcg ,_agcd :=_cfa .parseName ();return _dcg ,_agcd ;}else if _aac [0]=='('{_dbag ,_cfc :=_cfa .parseString ();
return _dbag ,_cfc ;}else if _aac [0]=='['{_fdfg ,_edc :=_cfa .parseArray ();return _fdfg ,_edc ;}else if (_aac [0]=='<')&&(_aac [1]=='<'){_efdg ,_aeg :=_cfa .parseDict ();return _efdg ,_aeg ;}else if _aac [0]=='<'{_gdec ,_cge :=_cfa .parseHexString ();
return _gdec ,_cge ;}else if _ab .IsDecimalDigit (_aac [0])||(_aac [0]=='-'&&_ab .IsDecimalDigit (_aac [1])){_efbb ,_fffb :=_cfa .parseNumber ();if _fffb !=nil {return nil ,_fffb ;};return _efbb ,nil ;}else {_fcda ,_bgd :=_cfa .parseOperand ();if _bgd !=nil {return nil ,_bgd ;
};return _fcda ,nil ;};};};type cmapName struct{Name string ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_ccb ,_gcg :=cmap ._gf [s ];return _ccb ,_gcg ;};func (cmap *CMap )parseSystemInfo ()error {_begc :=false ;_gfed :=false ;_ecbf :="";
_bcd :=false ;_acg :=CIDSystemInfo {};for _cdfb :=0;_cdfb < 50&&!_bcd ;_cdfb ++{_bdfe ,_dbf :=cmap .parseObject ();if _dbf !=nil {return _dbf ;};switch _bfe :=_bdfe .(type ){case cmapDict :_ece :=_bfe .Dict ;_eef ,_ggf :=_ece ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_egae ,_ggf :=_eef .(cmapString );if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_acg .Registry =_egae .String ;_eef ,_ggf =_ece ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_egae ,_ggf =_eef .(cmapString );if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_acg .Ordering =_egae .String ;
_eae ,_ggf :=_ece ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};
_eff ,_ggf :=_eae .(cmapInt );if !_ggf {_aa .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_acg .Supplement =int (_eff ._ceef );_bcd =true ;case cmapOperand :switch _bfe .Operand {case "\u0062\u0065\u0067i\u006e":_begc =true ;
case "\u0065\u006e\u0064":_bcd =true ;case "\u0064\u0065\u0066":_gfed =false ;};case cmapName :if _begc {_ecbf =_bfe .Name ;_gfed =true ;};case cmapString :if _gfed {switch _ecbf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_acg .Registry =_bfe .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_acg .Ordering =_bfe .String ;};};case cmapInt :if _gfed {switch _ecbf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_acg .Supplement =int (_bfe ._ceef );};};};};if !_bcd {_aa .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fg =_acg ;return nil ;};func (_gbg *cMapParser )parseHexString ()(cmapHexString ,error ){_gbg ._cggg .ReadByte ();_aeb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_acgc :=_da .Buffer {};for {_gbg .skipSpaces ();_cdee ,_ecdb :=_gbg ._cggg .Peek (1);if _ecdb !=nil {return cmapHexString {},_ecdb ;};if _cdee [0]=='>'{_gbg ._cggg .ReadByte ();break ;};_dfba ,_ :=_gbg ._cggg .ReadByte ();if _da .IndexByte (_aeb ,_dfba )>=0{_acgc .WriteByte (_dfba );
};};if _acgc .Len ()%2==1{_aa .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_acgc .String ());_acgc .WriteByte ('0');};_fgc :=_acgc .Len ()/2;
_ffef ,_ :=_a .DecodeString (_acgc .String ());return cmapHexString {_cbca :_fgc ,_gfgdg :_ffef },nil ;};func (_edg *cMapParser )parseName ()(cmapName ,error ){_cbe :="";_dbagb :=false ;for {_eeed ,_bac :=_edg ._cggg .Peek (1);if _bac ==_e .EOF {break ;
};if _bac !=nil {return cmapName {_cbe },_bac ;};if !_dbagb {if _eeed [0]=='/'{_dbagb =true ;_edg ._cggg .ReadByte ();}else {_aa .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_eeed ,_eeed );
return cmapName {_cbe },_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_eeed [0]);};}else {if _ab .IsWhiteSpace (_eeed [0]){break ;}else if (_eeed [0]=='/')||(_eeed [0]=='[')||(_eeed [0]=='(')||(_eeed [0]==']')||(_eeed [0]=='<')||(_eeed [0]=='>'){break ;
}else if _eeed [0]=='#'{_abf ,_bgeb :=_edg ._cggg .Peek (3);if _bgeb !=nil {return cmapName {_cbe },_bgeb ;};_edg ._cggg .Discard (3);_dgd ,_bgeb :=_a .DecodeString (string (_abf [1:3]));if _bgeb !=nil {return cmapName {_cbe },_bgeb ;};_cbe +=string (_dgd );
}else {_gcba ,_ :=_edg ._cggg .ReadByte ();_cbe +=string (_gcba );};};};return cmapName {_cbe },nil ;};func _eacc (_edcd cmapHexString )CharCode {_bae :=CharCode (0);for _ ,_fafb :=range _edcd ._gfgdg {_bae <<=8;_bae |=CharCode (_fafb );};return _bae ;
};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cce ,_fbe :=cmap ._gec [cid ];return _cce ,_fbe ;};func (cmap *CMap )parseType ()error {_caa :=0;_ecd :=false ;for _fcdf :=0;_fcdf < 3&&!_ecd ;_fcdf ++{_eddb ,_gcb :=cmap .parseObject ();
if _gcb !=nil {return _gcb ;};switch _gac :=_eddb .(type ){case cmapOperand :switch _gac .Operand {case "\u0064\u0065\u0066":_ecd =true ;default:_aa .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_eddb );
return ErrBadCMap ;};case cmapInt :_caa =int (_gac ._ceef );};};cmap ._bb =_caa ;return nil ;};func _fbec (_aegg cmapHexString )[]rune {if len (_aegg ._gfgdg )==1{return []rune {rune (_aegg ._gfgdg [0])};};_eba :=_aegg ._gfgdg ;if len (_eba )%2!=0{_eba =append (_eba ,0);
_aa .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_aegg ,_eba );
};_feef :=len (_eba )>>1;_gecb :=make ([]uint16 ,_feef );for _baf :=0;_baf < _feef ;_baf ++{_gecb [_baf ]=uint16 (_eba [_baf <<1])<<8+uint16 (_eba [_baf <<1+1]);};_abff :=_dg .Decode (_gecb );return _abff ;};func (cmap *CMap )parseCIDRange ()error {for {_dbd ,_ceeg :=cmap .parseObject ();
if _ceeg !=nil {if _ceeg ==_e .EOF {break ;};return _ceeg ;};_eeb ,_efc :=_dbd .(cmapHexString );if !_efc {if _aee ,_cdgd :=_dbd .(cmapOperand );_cdgd {if _aee .Operand ==_dga {return nil ;};return _ac .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_bgea :=_eacc (_eeb );_dbd ,_ceeg =cmap .parseObject ();if _ceeg !=nil {if _ceeg ==_e .EOF {break ;};return _ceeg ;};_ceee ,_efc :=_dbd .(cmapHexString );if !_efc {return _ac .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_eeb ._gfgdg )!=len (_ceee ._gfgdg ){return _ac .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};
_geb :=_eacc (_ceee );if _bgea > _geb {_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_bgea ,_geb );
return ErrBadCMap ;};_dbd ,_ceeg =cmap .parseObject ();if _ceeg !=nil {if _ceeg ==_e .EOF {break ;};return _ceeg ;};_ecc ,_efc :=_dbd .(cmapInt );if !_efc {return _ac .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ecc ._ceef < 0{return _ac .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_dbc :=_ecc ._ceef ;for _ddg :=_bgea ;_ddg <=_geb ;_ddg ++{cmap ._ge [_ddg ]=CharCode (_dbc );
_dbc ++;};_aa .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_bgea ,_geb ,_ecc ._ceef );};return nil ;};func _ccc (_fda string )rune {_fac :=[]rune (_fda );
return _fac [len (_fac )-1]};func (cmap *CMap )parseBfchar ()error {for {_ced ,_aadg :=cmap .parseObject ();if _aadg !=nil {if _aadg ==_e .EOF {break ;};return _aadg ;};var _bca CharCode ;switch _dgfb :=_ced .(type ){case cmapOperand :if _dgfb .Operand ==_fcbc {return nil ;
};return _ac .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bca =_eacc (_dgfb );default:return _ac .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_ced ,_aadg =cmap .parseObject ();if _aadg !=nil {if _aadg ==_e .EOF {break ;};return _aadg ;};var _dda []rune ;switch _dba :=_ced .(type ){case cmapOperand :if _dba .Operand ==_fcbc {return nil ;};_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_dba );
return ErrBadCMap ;case cmapHexString :_dda =_fbec (_dba );case cmapName :_aa .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_dba );_dda =[]rune {MissingCodeRune };
default:_aa .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_ced );return ErrBadCMap ;};cmap ._bg [_bca ]=string (_dda );};return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cbc []CharCode ;
if cmap ._ec ==8{for _ ,_cde :=range data {_cbc =append (_cbc ,CharCode (_cde ));};return _cbc ,true ;};for _bdc :=0;_bdc < len (data );{_aec ,_gdb ,_beg :=cmap .matchCode (data [_bdc :]);if !_beg {_aa .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_bdc ,data ,string (data ));
return _cbc ,false ;};_cbc =append (_cbc ,_aec );_bdc +=_gdb ;};return _cbc ,true ;};type cmapString struct{String string ;};func NewCIDSystemInfo (obj _ab .PdfObject )(_gb CIDSystemInfo ,_gbd error ){_ddb ,_cf :=_ab .GetDict (obj );if !_cf {return CIDSystemInfo {},_ab .ErrTypeError ;
};_dfa ,_cf :=_ab .GetStringVal (_ddb .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_cf {return CIDSystemInfo {},_ab .ErrTypeError ;};_cb ,_cf :=_ab .GetStringVal (_ddb .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_cf {return CIDSystemInfo {},_ab .ErrTypeError ;
};_ca ,_cf :=_ab .GetIntVal (_ddb .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_cf {return CIDSystemInfo {},_ab .ErrTypeError ;};return CIDSystemInfo {Registry :_dfa ,Ordering :_cb ,Supplement :_ca },nil ;};type CharCode uint32 ;
func (cmap *CMap )Stream ()(*_ab .PdfObjectStream ,error ){if cmap ._cc !=nil {return cmap ._cc ,nil ;};_cbaf ,_fge :=_ab .MakeStream (cmap .Bytes (),_ab .NewFlateEncoder ());if _fge !=nil {return nil ,_fge ;};cmap ._cc =_cbaf ;return cmap ._cc ,nil ;};
type cMapParser struct{_cggg *_ag .Reader };func (_gbef *cMapParser )parseOperand ()(cmapOperand ,error ){_afd :=cmapOperand {};_cegd :=_da .Buffer {};for {_bacg ,_cefd :=_gbef ._cggg .Peek (1);if _cefd !=nil {if _cefd ==_e .EOF {break ;};return _afd ,_cefd ;
};if _ab .IsDelimiter (_bacg [0]){break ;};if _ab .IsWhiteSpace (_bacg [0]){break ;};_fdab ,_ :=_gbef ._cggg .ReadByte ();_cegd .WriteByte (_fdab );};if _cegd .Len ()==0{return _afd ,_d .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_afd .Operand =_cegd .String ();return _afd ,nil ;};func (cmap *CMap )parseName ()error {_daf :="";_gaa :=false ;for _ggb :=0;_ggb < 20&&!_gaa ;_ggb ++{_cabf ,_beb :=cmap .parseObject ();if _beb !=nil {return _beb ;};switch _gda :=_cabf .(type ){case cmapOperand :switch _gda .Operand {case "\u0064\u0065\u0066":_gaa =true ;
default:_aa .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cabf ,_daf );
if _daf !=""{_daf =_d .Sprintf ("\u0025\u0073\u0020%\u0073",_daf ,_gda .Operand );};_aa .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_daf );
};case cmapName :_daf =_gda .Name ;};};if !_gaa {_aa .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._aae =_daf ;return nil ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_afg ,_bd :=cmap .BytesToCharcodes (data );
if !_bd {_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_gfg :=make ([]string ,len (_afg ));var _fe []CharCode ;for _ecb ,_bbe :=range _afg {_cba ,_ebe :=cmap ._bg [_bbe ];if !_ebe {_fe =append (_fe ,_bbe );_cba =MissingCodeString ;};_gfg [_ecb ]=_cba ;};_dgf :=_df .Join (_gfg ,"");if len (_fe )> 0{_aa .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_afg ,len (_fe ),_fe ,_dgf ,cmap );
};return _dgf ,len (_fe );};func (cmap *CMap )NBits ()int {return cmap ._ec };func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func _dgc (_bab ,_fdb int )int {if _bab < _fdb {return _bab ;};return _fdb ;};type cmapInt struct{_ceef int64 };
func _efba (_gbb string )string {_cdfd :=[]rune (_gbb );_ega :=make ([]string ,len (_cdfd ));for _ceb ,_abb :=range _cdfd {_ega [_ceb ]=_d .Sprintf ("\u0025\u0030\u0034\u0078",_abb );};return _d .Sprintf ("\u003c\u0025\u0073\u003e",_df .Join (_ega ,""));
};func (_ed *CIDSystemInfo )String ()string {return _d .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ed .Registry ,_ed .Ordering ,_ed .Supplement );};type cmapOperand struct{Operand string ;};type Codespace struct{NumBytes int ;
Low CharCode ;High CharCode ;};func (cmap *CMap )Type ()int {return cmap ._bb };type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};const (_fdf ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_dfc ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_eegg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_effc ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_ade ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_eacd ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_fcbc ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_eced ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bffe ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_bdg ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dga ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_beba ="\u0075s\u0065\u0063\u006d\u0061\u0070";_feg ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_fadf ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_ebdb ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (_aecf *cMapParser )parseString ()(cmapString ,error ){_aecf ._cggg .ReadByte ();_cfd :=_da .Buffer {};_ffa :=1;for {_gcce ,_fdc :=_aecf ._cggg .Peek (1);
if _fdc !=nil {return cmapString {_cfd .String ()},_fdc ;};if _gcce [0]=='\\'{_aecf ._cggg .ReadByte ();_gdd ,_ddc :=_aecf ._cggg .ReadByte ();if _ddc !=nil {return cmapString {_cfd .String ()},_ddc ;};if _ab .IsOctalDigit (_gdd ){_bdcd ,_ecg :=_aecf ._cggg .Peek (2);
if _ecg !=nil {return cmapString {_cfd .String ()},_ecg ;};var _abe []byte ;_abe =append (_abe ,_gdd );for _ ,_eccb :=range _bdcd {if _ab .IsOctalDigit (_eccb ){_abe =append (_abe ,_eccb );}else {break ;};};_aecf ._cggg .Discard (len (_abe )-1);_aa .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_abe );
_fgf ,_ecg :=_g .ParseUint (string (_abe ),8,32);if _ecg !=nil {return cmapString {_cfd .String ()},_ecg ;};_cfd .WriteByte (byte (_fgf ));continue ;};switch _gdd {case 'n':_cfd .WriteByte ('\n');case 'r':_cfd .WriteByte ('\r');case 't':_cfd .WriteByte ('\t');
case 'b':_cfd .WriteByte ('\b');case 'f':_cfd .WriteByte ('\f');case '(':_cfd .WriteByte ('(');case ')':_cfd .WriteByte (')');case '\\':_cfd .WriteByte ('\\');};continue ;}else if _gcce [0]=='('{_ffa ++;}else if _gcce [0]==')'{_ffa --;if _ffa ==0{_aecf ._cggg .ReadByte ();
break ;};};_bfd ,_ :=_aecf ._cggg .ReadByte ();_cfd .WriteByte (_bfd );};return cmapString {_cfd .String ()},nil ;};func (_efdc *cMapParser )parseArray ()(cmapArray ,error ){_gfb :=cmapArray {};_gfb .Array =[]cmapObject {};_efdc ._cggg .ReadByte ();for {_efdc .skipSpaces ();
_eaad ,_eaeb :=_efdc ._cggg .Peek (1);if _eaeb !=nil {return _gfb ,_eaeb ;};if _eaad [0]==']'{_efdc ._cggg .ReadByte ();break ;};_dbdg ,_eaeb :=_efdc .parseObject ();if _eaeb !=nil {return _gfb ,_eaeb ;};_gfb .Array =append (_gfb .Array ,_dbdg );};return _gfb ,nil ;
};func (cmap *CMap )computeInverseMappings (){for _fc ,_gfe :=range cmap ._ge {if _dbbg ,_cdg :=cmap ._gec [_gfe ];!_cdg ||(_cdg &&_dbbg > _fc ){cmap ._gec [_gfe ]=_fc ;};};for _fd ,_af :=range cmap ._bg {if _bf ,_aca :=cmap ._gf [_af ];!_aca ||(_aca &&_bf > _fd ){cmap ._gf [_af ]=_fd ;
};};_c .Slice (cmap ._cdf ,func (_ffd ,_gde int )bool {return cmap ._cdf [_ffd ].Low < cmap ._cdf [_gde ].Low });};func (cmap *CMap )parseCodespaceRange ()error {for {_ebg ,_dcd :=cmap .parseObject ();if _dcd !=nil {if _dcd ==_e .EOF {break ;};return _dcd ;
};_bdcc ,_cdbg :=_ebg .(cmapHexString );if !_cdbg {if _adbb ,_aged :=_ebg .(cmapOperand );_aged {if _adbb .Operand ==_ade {return nil ;};return _ac .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ebg ,_dcd =cmap .parseObject ();
if _dcd !=nil {if _dcd ==_e .EOF {break ;};return _dcd ;};_cdc ,_cdbg :=_ebg .(cmapHexString );if !_cdbg {return _ac .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_bdcc ._gfgdg )!=len (_cdc ._gfgdg ){return _ac .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_dab :=_eacc (_bdcc );_egc :=_eacc (_cdc );if _egc < _dab {_aa .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_dab ,_egc );
return ErrBadCMap ;};_cfe :=_cdc ._cbca ;_dde :=Codespace {NumBytes :_cfe ,Low :_dab ,High :_egc };cmap ._cdf =append (cmap ._cdf ,_dde );_aa .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_dab ,_egc );
};if len (cmap ._cdf )==0{_aa .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._bg )==0{return "";
};_bega :=make ([]CharCode ,0,len (cmap ._bg ));for _ffge :=range cmap ._bg {_bega =append (_bega ,_ffge );};_c .Slice (_bega ,func (_cfff ,_bde int )bool {return _bega [_cfff ]< _bega [_bde ]});var _bfb []charRange ;_gg :=charRange {_bega [0],_bega [0]};
_gbdc :=cmap ._bg [_bega [0]];for _ ,_fee :=range _bega [1:]{_abd :=cmap ._bg [_fee ];if _fee ==_gg ._dc +1&&_ccc (_abd )==_ccc (_gbdc )+1{_gg ._dc =_fee ;}else {_bfb =append (_bfb ,_gg );_gg ._eb ,_gg ._dc =_fee ,_fee ;};_gbdc =_abd ;};_bfb =append (_bfb ,_gg );
var _gcge []CharCode ;var _eg []fbRange ;for _ ,_acd :=range _bfb {if _acd ._eb ==_acd ._dc {_gcge =append (_gcge ,_acd ._eb );}else {_eg =append (_eg ,fbRange {_fb :_acd ._eb ,_cd :_acd ._dc ,_dd :cmap ._bg [_acd ._eb ]});};};_aa .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_bfb ),len (_gcge ),len (_eg ));
var _fag []string ;if len (_gcge )> 0{_efb :=(len (_gcge )+_eaa -1)/_eaa ;for _fcb :=0;_fcb < _efb ;_fcb ++{_cda :=_dgc (len (_gcge )-_fcb *_eaa ,_eaa );_fag =append (_fag ,_d .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cda ));
for _ceg :=0;_ceg < _cda ;_ceg ++{_fad :=_gcge [_fcb *_eaa +_ceg ];_dgb :=cmap ._bg [_fad ];_fag =append (_fag ,_d .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fad ,_efba (_dgb )));};_fag =append (_fag ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_eg )> 0{_add :=(len (_eg )+_eaa -1)/_eaa ;for _bc :=0;_bc < _add ;_bc ++{_agc :=_dgc (len (_eg )-_bc *_eaa ,_eaa );_fag =append (_fag ,_d .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_agc ));
for _ea :=0;_ea < _agc ;_ea ++{_cdaf :=_eg [_bc *_eaa +_ea ];_fag =append (_fag ,_d .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_cdaf ._fb ,_cdaf ._cd ,_efba (_cdaf ._dd )));};_fag =append (_fag ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _df .Join (_fag ,"\u000a");};func (cmap *CMap )String ()string {_bda :=cmap ._fg ;_bdf :=[]string {_d .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ec ),_d .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bb )};
if cmap ._ff !=""{_bdf =append (_bdf ,_d .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ff ));};if cmap ._ddf !=""{_bdf =append (_bdf ,_d .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ddf ));
};_bdf =append (_bdf ,_d .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_bda .String ()));if len (cmap ._cdf )> 0{_bdf =append (_bdf ,_d .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cdf )));
};if len (cmap ._bg )> 0{_bdf =append (_bdf ,_d .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bg )));};return _d .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._aae ,_df .Join (_bdf ,"\u0020"));
};type cmapFloat struct{_cggb float64 };type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _gc ,_cef :=cmap ._bg [code ];_cef {return _gc ,true ;};return MissingCodeString ,false ;
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gd :=make (map[CharCode ]string ,len (codeToRune ));for _cbf ,_be :=range codeToRune {_gd [_cbf ]=string (_be );};cmap :=&CMap {_aae :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bb :2,_ec :16,_fg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cdf :[]Codespace {{Low :0,High :0xffff}},_bg :_gd ,_gf :make (map[string ]CharCode ,len (codeToRune )),_ge :make (map[CharCode ]CharCode ,len (codeToRune )),_gec :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (_cfeb *cMapParser )parseDict ()(cmapDict ,error ){_aa .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_bgg :=_fbc ();_efbf ,_ :=_cfeb ._cggg .ReadByte ();
if _efbf !='<'{return _bgg ,ErrBadCMapDict ;};_efbf ,_ =_cfeb ._cggg .ReadByte ();if _efbf !='<'{return _bgg ,ErrBadCMapDict ;};for {_cfeb .skipSpaces ();_dag ,_cfdb :=_cfeb ._cggg .Peek (2);if _cfdb !=nil {return _bgg ,_cfdb ;};if (_dag [0]=='>')&&(_dag [1]=='>'){_cfeb ._cggg .ReadByte ();
_cfeb ._cggg .ReadByte ();break ;};_cbfa ,_cfdb :=_cfeb .parseName ();_aa .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cbfa .Name );if _cfdb !=nil {_aa .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cfdb );
return _bgg ,_cfdb ;};_cfeb .skipSpaces ();_dea ,_cfdb :=_cfeb .parseObject ();if _cfdb !=nil {return _bgg ,_cfdb ;};_bgg .Dict [_cbfa .Name ]=_dea ;_cfeb .skipSpaces ();_dag ,_cfdb =_cfeb ._cggg .Peek (3);if _cfdb !=nil {return _bgg ,_cfdb ;};if string (_dag )=="\u0064\u0065\u0066"{_cfeb ._cggg .Discard (3);
};};return _bgg ,nil ;};type cmapObject interface{};var (ErrBadCMap =_ac .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ac .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_ac .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )Name ()string {return cmap ._aae };type charRange struct{_eb CharCode ;_dc CharCode ;};