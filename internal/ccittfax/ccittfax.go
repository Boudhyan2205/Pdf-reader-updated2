//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_fd "errors";_c "github.com/unidoc/unipdf/v3/common";_b "math";);func _cgf (_ggcac ,_ceg []byte ,_baf int ,_feb bool )int {_ebc :=_cbga (_ceg ,_baf );if _ebc < len (_ceg )&&(_baf ==-1&&_ceg [_ebc ]==_fcb ||_baf >=0&&_baf < len (_ggcac )&&_ggcac [_baf ]==_ceg [_ebc ]||_baf >=len (_ggcac )&&_feb &&_ceg [_ebc ]==_fcb ||_baf >=len (_ggcac )&&!_feb &&_ceg [_ebc ]==_ebace ){_ebc =_cbga (_ceg ,_ebc );
};return _ebc ;};func _ceag (_dffd []byte ,_cbd bool ,_dedc int )[]byte {if _dedc < 0{return _dffd ;};_dea :=make ([]byte ,_dedc );if _cbd {for _gda :=0;_gda < len (_dea );_gda ++{_dea [_gda ]=_fcb ;};}else {for _aag :=0;_aag < len (_dea );_aag ++{_dea [_aag ]=_ebace ;
};};_dffd =append (_dffd ,_dea ...);return _dffd ;};func init (){_d =make (map[int ]code );_d [0]=code {Code :13<<8|3<<6,BitsWritten :10};_d [1]=code {Code :2<<(5+8),BitsWritten :3};_d [2]=code {Code :3<<(6+8),BitsWritten :2};_d [3]=code {Code :2<<(6+8),BitsWritten :2};
_d [4]=code {Code :3<<(5+8),BitsWritten :3};_d [5]=code {Code :3<<(4+8),BitsWritten :4};_d [6]=code {Code :2<<(4+8),BitsWritten :4};_d [7]=code {Code :3<<(3+8),BitsWritten :5};_d [8]=code {Code :5<<(2+8),BitsWritten :6};_d [9]=code {Code :4<<(2+8),BitsWritten :6};
_d [10]=code {Code :4<<(1+8),BitsWritten :7};_d [11]=code {Code :5<<(1+8),BitsWritten :7};_d [12]=code {Code :7<<(1+8),BitsWritten :7};_d [13]=code {Code :4<<8,BitsWritten :8};_d [14]=code {Code :7<<8,BitsWritten :8};_d [15]=code {Code :12<<8,BitsWritten :9};
_d [16]=code {Code :5<<8|3<<6,BitsWritten :10};_d [17]=code {Code :6<<8,BitsWritten :10};_d [18]=code {Code :2<<8,BitsWritten :10};_d [19]=code {Code :12<<8|7<<5,BitsWritten :11};_d [20]=code {Code :13<<8,BitsWritten :11};_d [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_d [22]=code {Code :6<<8|7<<5,BitsWritten :11};_d [23]=code {Code :5<<8,BitsWritten :11};_d [24]=code {Code :2<<8|7<<5,BitsWritten :11};_d [25]=code {Code :3<<8,BitsWritten :11};_d [26]=code {Code :12<<8|10<<4,BitsWritten :12};_d [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_d [28]=code {Code :12<<8|12<<4,BitsWritten :12};_d [29]=code {Code :12<<8|13<<4,BitsWritten :12};_d [30]=code {Code :6<<8|8<<4,BitsWritten :12};_d [31]=code {Code :6<<8|9<<4,BitsWritten :12};_d [32]=code {Code :6<<8|10<<4,BitsWritten :12};_d [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_d [34]=code {Code :13<<8|2<<4,BitsWritten :12};_d [35]=code {Code :13<<8|3<<4,BitsWritten :12};_d [36]=code {Code :13<<8|4<<4,BitsWritten :12};_d [37]=code {Code :13<<8|5<<4,BitsWritten :12};_d [38]=code {Code :13<<8|6<<4,BitsWritten :12};_d [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_d [40]=code {Code :6<<8|12<<4,BitsWritten :12};_d [41]=code {Code :6<<8|13<<4,BitsWritten :12};_d [42]=code {Code :13<<8|10<<4,BitsWritten :12};_d [43]=code {Code :13<<8|11<<4,BitsWritten :12};_d [44]=code {Code :5<<8|4<<4,BitsWritten :12};_d [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_d [46]=code {Code :5<<8|6<<4,BitsWritten :12};_d [47]=code {Code :5<<8|7<<4,BitsWritten :12};_d [48]=code {Code :6<<8|4<<4,BitsWritten :12};_d [49]=code {Code :6<<8|5<<4,BitsWritten :12};_d [50]=code {Code :5<<8|2<<4,BitsWritten :12};_d [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_d [52]=code {Code :2<<8|4<<4,BitsWritten :12};_d [53]=code {Code :3<<8|7<<4,BitsWritten :12};_d [54]=code {Code :3<<8|8<<4,BitsWritten :12};_d [55]=code {Code :2<<8|7<<4,BitsWritten :12};_d [56]=code {Code :2<<8|8<<4,BitsWritten :12};_d [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_d [58]=code {Code :5<<8|9<<4,BitsWritten :12};_d [59]=code {Code :2<<8|11<<4,BitsWritten :12};_d [60]=code {Code :2<<8|12<<4,BitsWritten :12};_d [61]=code {Code :5<<8|10<<4,BitsWritten :12};_d [62]=code {Code :6<<8|6<<4,BitsWritten :12};_d [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_fe =make (map[int ]code );_fe [0]=code {Code :53<<8,BitsWritten :8};_fe [1]=code {Code :7<<(2+8),BitsWritten :6};_fe [2]=code {Code :7<<(4+8),BitsWritten :4};_fe [3]=code {Code :8<<(4+8),BitsWritten :4};_fe [4]=code {Code :11<<(4+8),BitsWritten :4};_fe [5]=code {Code :12<<(4+8),BitsWritten :4};
_fe [6]=code {Code :14<<(4+8),BitsWritten :4};_fe [7]=code {Code :15<<(4+8),BitsWritten :4};_fe [8]=code {Code :19<<(3+8),BitsWritten :5};_fe [9]=code {Code :20<<(3+8),BitsWritten :5};_fe [10]=code {Code :7<<(3+8),BitsWritten :5};_fe [11]=code {Code :8<<(3+8),BitsWritten :5};
_fe [12]=code {Code :8<<(2+8),BitsWritten :6};_fe [13]=code {Code :3<<(2+8),BitsWritten :6};_fe [14]=code {Code :52<<(2+8),BitsWritten :6};_fe [15]=code {Code :53<<(2+8),BitsWritten :6};_fe [16]=code {Code :42<<(2+8),BitsWritten :6};_fe [17]=code {Code :43<<(2+8),BitsWritten :6};
_fe [18]=code {Code :39<<(1+8),BitsWritten :7};_fe [19]=code {Code :12<<(1+8),BitsWritten :7};_fe [20]=code {Code :8<<(1+8),BitsWritten :7};_fe [21]=code {Code :23<<(1+8),BitsWritten :7};_fe [22]=code {Code :3<<(1+8),BitsWritten :7};_fe [23]=code {Code :4<<(1+8),BitsWritten :7};
_fe [24]=code {Code :40<<(1+8),BitsWritten :7};_fe [25]=code {Code :43<<(1+8),BitsWritten :7};_fe [26]=code {Code :19<<(1+8),BitsWritten :7};_fe [27]=code {Code :36<<(1+8),BitsWritten :7};_fe [28]=code {Code :24<<(1+8),BitsWritten :7};_fe [29]=code {Code :2<<8,BitsWritten :8};
_fe [30]=code {Code :3<<8,BitsWritten :8};_fe [31]=code {Code :26<<8,BitsWritten :8};_fe [32]=code {Code :27<<8,BitsWritten :8};_fe [33]=code {Code :18<<8,BitsWritten :8};_fe [34]=code {Code :19<<8,BitsWritten :8};_fe [35]=code {Code :20<<8,BitsWritten :8};
_fe [36]=code {Code :21<<8,BitsWritten :8};_fe [37]=code {Code :22<<8,BitsWritten :8};_fe [38]=code {Code :23<<8,BitsWritten :8};_fe [39]=code {Code :40<<8,BitsWritten :8};_fe [40]=code {Code :41<<8,BitsWritten :8};_fe [41]=code {Code :42<<8,BitsWritten :8};
_fe [42]=code {Code :43<<8,BitsWritten :8};_fe [43]=code {Code :44<<8,BitsWritten :8};_fe [44]=code {Code :45<<8,BitsWritten :8};_fe [45]=code {Code :4<<8,BitsWritten :8};_fe [46]=code {Code :5<<8,BitsWritten :8};_fe [47]=code {Code :10<<8,BitsWritten :8};
_fe [48]=code {Code :11<<8,BitsWritten :8};_fe [49]=code {Code :82<<8,BitsWritten :8};_fe [50]=code {Code :83<<8,BitsWritten :8};_fe [51]=code {Code :84<<8,BitsWritten :8};_fe [52]=code {Code :85<<8,BitsWritten :8};_fe [53]=code {Code :36<<8,BitsWritten :8};
_fe [54]=code {Code :37<<8,BitsWritten :8};_fe [55]=code {Code :88<<8,BitsWritten :8};_fe [56]=code {Code :89<<8,BitsWritten :8};_fe [57]=code {Code :90<<8,BitsWritten :8};_fe [58]=code {Code :91<<8,BitsWritten :8};_fe [59]=code {Code :74<<8,BitsWritten :8};
_fe [60]=code {Code :75<<8,BitsWritten :8};_fe [61]=code {Code :50<<8,BitsWritten :8};_fe [62]=code {Code :51<<8,BitsWritten :8};_fe [63]=code {Code :52<<8,BitsWritten :8};_bg =make (map[int ]code );_bg [64]=code {Code :3<<8|3<<6,BitsWritten :10};_bg [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_bg [192]=code {Code :12<<8|9<<4,BitsWritten :12};_bg [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bg [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bg [384]=code {Code :3<<8|4<<4,BitsWritten :12};_bg [448]=code {Code :3<<8|5<<4,BitsWritten :12};_bg [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_bg [576]=code {Code :3<<8|13<<3,BitsWritten :13};_bg [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bg [704]=code {Code :2<<8|11<<3,BitsWritten :13};_bg [768]=code {Code :2<<8|12<<3,BitsWritten :13};_bg [832]=code {Code :2<<8|13<<3,BitsWritten :13};_bg [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_bg [960]=code {Code :3<<8|19<<3,BitsWritten :13};_bg [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_bg [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_bg [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_bg [1216]=code {Code :119<<3,BitsWritten :13};_bg [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_bg [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_bg [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_bg [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_bg [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bg [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_bg [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_bg [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_a =make (map[int ]code );_a [64]=code {Code :27<<(3+8),BitsWritten :5};_a [128]=code {Code :18<<(3+8),BitsWritten :5};_a [192]=code {Code :23<<(2+8),BitsWritten :6};
_a [256]=code {Code :55<<(1+8),BitsWritten :7};_a [320]=code {Code :54<<8,BitsWritten :8};_a [384]=code {Code :55<<8,BitsWritten :8};_a [448]=code {Code :100<<8,BitsWritten :8};_a [512]=code {Code :101<<8,BitsWritten :8};_a [576]=code {Code :104<<8,BitsWritten :8};
_a [640]=code {Code :103<<8,BitsWritten :8};_a [704]=code {Code :102<<8,BitsWritten :9};_a [768]=code {Code :102<<8|1<<7,BitsWritten :9};_a [832]=code {Code :105<<8,BitsWritten :9};_a [896]=code {Code :105<<8|1<<7,BitsWritten :9};_a [960]=code {Code :106<<8,BitsWritten :9};
_a [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_a [1088]=code {Code :107<<8,BitsWritten :9};_a [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_a [1216]=code {Code :108<<8,BitsWritten :9};_a [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_a [1344]=code {Code :109<<8,BitsWritten :9};
_a [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_a [1472]=code {Code :76<<8,BitsWritten :9};_a [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_a [1600]=code {Code :77<<8,BitsWritten :9};_a [1664]=code {Code :24<<(2+8),BitsWritten :6};_a [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_g =make (map[int ]code );_g [1792]=code {Code :1<<8,BitsWritten :11};_g [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_g [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_g [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_g [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_g [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_g [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_g [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_g [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_g [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_g [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_g [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_g [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_aa =make (map[int ]byte );_aa [0]=0xFF;_aa [1]=0xFE;_aa [2]=0xFC;_aa [3]=0xF8;_aa [4]=0xF0;_aa [5]=0xE0;_aa [6]=0xC0;_aa [7]=0x80;_aa [8]=0x00;};type code struct{Code uint16 ;
BitsWritten int ;};func (_edg *Encoder )decodeRow1D (_cgd []byte ,_eca int )([]byte ,int ){var _aacc []byte ;_fca :=true ;var _afg int ;_afg ,_eca =_cea (_cgd ,_eca ,_fca );for _afg !=-1{_aacc =_ceag (_aacc ,_fca ,_afg );if _afg < 64{if len (_aacc )>=_edg .Columns {break ;
};_fca =!_fca ;};_afg ,_eca =_cea (_cgd ,_eca ,_fca );};return _aacc ,_eca ;};func init (){for _ae ,_bb :=range _fe {_dfag (_eg ,_bb ,0,_ae );};for _gb ,_ab :=range _a {_dfag (_eg ,_ab ,0,_gb );};for _abb ,_ca :=range _d {_dfag (_ec ,_ca ,0,_abb );};for _ff ,_eb :=range _bg {_dfag (_ec ,_eb ,0,_ff );
};for _fae ,_bdc :=range _g {_dfag (_eg ,_bdc ,0,_fae );_dfag (_ec ,_bdc ,0,_fae );};_dfag (_cde ,_da ,0,0);_dfag (_cde ,_bd ,0,0);_dfag (_cde ,_gaf ,0,0);_dfag (_cde ,_cd ,0,0);_dfag (_cde ,_ee ,0,0);_dfag (_cde ,_df ,0,0);_dfag (_cde ,_gg ,0,0);_dfag (_cde ,_gf ,0,0);
_dfag (_cde ,_cf ,0,0);};func _dfag (_bc *decodingTreeNode ,_bffe code ,_gdag int ,_bfd int ){_fbf :=_dgbb (_bffe .Code ,_gdag );_gdag ++;if _fbf ==1{if _bc .Right ==nil {_bc .Right =&decodingTreeNode {Val :_fbf };};if _gdag ==_bffe .BitsWritten {_bc .Right .RunLen =&_bfd ;
_bc .Right .Code =&_bffe ;}else {_dfag (_bc .Right ,_bffe ,_gdag ,_bfd );};}else {if _bc .Left ==nil {_bc .Left =&decodingTreeNode {Val :_fbf };};if _gdag ==_bffe .BitsWritten {_bc .Left .RunLen =&_bfd ;_bc .Left .Code =&_bffe ;}else {_dfag (_bc .Left ,_bffe ,_gdag ,_bfd );
};};};func _fga (_ecc []byte ,_edge int )(bool ,int ){return _aff (_ecc ,_edge ,_fdc )};func _bdg (_ceb ,_gfga []byte ,_cfb int ,_ggb bool )([]byte ,int ,error ){_fec :=_cfb ;var _gafe int ;for _gafe ,_cfb =_cea (_ceb ,_cfb ,_ggb );_gafe !=-1;_gafe ,_cfb =_cea (_ceb ,_cfb ,_ggb ){_gfga =_ceag (_gfga ,_ggb ,_gafe );
if _gafe < 64{break ;};};if _gafe ==-1{return _gfga ,_fec ,_fa ;};return _gfga ,_cfb ,nil ;};func (_ecag *Encoder )appendEncodedRow (_daa ,_dfb []byte ,_faa int )[]byte {if len (_daa )> 0&&_faa !=0&&!_ecag .EncodedByteAlign {_daa [len (_daa )-1]=_daa [len (_daa )-1]|_dfb [0];
_daa =append (_daa ,_dfb [1:]...);}else {_daa =append (_daa ,_dfb ...);};return _daa ;};var (_fcb byte =1;_ebace byte =0;);type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _aff (_afb []byte ,_ada int ,_ecg code )(bool ,int ){_eaf :=_ada ;
var (_adec uint16 ;_affc int ;);_adec ,_affc ,_ada =_dfdb (_afb ,_ada );if _affc > 3{return false ,_eaf ;};_adec >>=uint (3-_affc );_adec <<=3;if _adec !=_ecg .Code {return false ,_eaf ;};return true ,_ada -3+_affc ;};func _cea (_egb []byte ,_fcg int ,_edda bool )(int ,int ){var (_aeb uint16 ;
_gdb int ;_fef int ;);_fef =_fcg ;_aeb ,_gdb ,_ =_dfdb (_egb ,_fcg );_feg ,_ead :=_gcd (_aeb ,_gdb ,_edda );if _feg ==-1{return -1,_fef ;};return _feg ,_fef +_ead .BitsWritten ;};func _gcd (_adf uint16 ,_fdg int ,_dgg bool )(int ,code ){var _dbf *int ;
var _bff *code ;if _dgg {_dbf ,_bff =_aab (_eg ,_adf ,_fdg );}else {_dbf ,_bff =_aab (_ec ,_adf ,_fdg );};if _dbf ==nil {return -1,code {};};return *_dbf ,*_bff ;};var (_dc =_fd .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");
_cfc =_fd .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_fa =_fd .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");
_ba =_fd .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_fc =_fd .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_eed =_fd .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _gdd (_deab ,_age []byte ,_dfaa int )int {_afd :=_cbga (_age ,_dfaa );
if _afd < len (_age )&&(_dfaa ==-1&&_age [_afd ]==_fcb ||_dfaa >=0&&_dfaa < len (_deab )&&_deab [_dfaa ]==_age [_afd ]||_dfaa >=len (_deab )&&_deab [_dfaa -1]!=_age [_afd ]){_afd =_cbga (_age ,_afd );};return _afd ;};func (_edb *Encoder )decodeG4 (_dgb []byte )([][]byte ,error ){_aega :=make ([]byte ,_edb .Columns );
for _eeda :=range _aega {_aega [_eeda ]=_fcb ;};_aac :=make ([][]byte ,1);_aac [0]=_aega ;var (_ebd bool ;_ea error ;_ag int ;);for (_ag /8)< len (_dgb ){_ebd ,_ag ,_ea =_dga (_dgb ,_ag );if _ea !=nil {return nil ,_ea ;};if _ebd {break ;};var (_dcba code ;
_ffaa bool ;);_faf :=true ;var _ge []byte ;_gad :=-1;_gff :=true ;for _gad < _edb .Columns {_dcba ,_ag ,_ffaa =_cdee (_dgb ,_ag );if !_ffaa {_c .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_eed );
_gff =false ;break ;};switch _dcba {case _da :_ge ,_gad =_gd (_aac ,_ge ,_faf ,_gad );case _bd :_ge ,_ag ,_gad ,_ea =_gc (_dgb ,_ge ,_ag ,_faf ,_gad );if _ea !=nil {_c .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_ea );
_gff =false ;break ;};case _gaf :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,0);_faf =!_faf ;case _cd :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,1);_faf =!_faf ;case _ee :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,2);_faf =!_faf ;case _df :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,3);
_faf =!_faf ;case _gg :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,-1);_faf =!_faf ;case _gf :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,-2);_faf =!_faf ;case _cf :_ge ,_gad =_bac (_aac ,_ge ,_faf ,_gad ,-3);_faf =!_faf ;};if len (_ge )>=_edb .Columns {break ;
};};if !_gff {_ag +=8-_ag %8;continue ;};if _edb .EncodedByteAlign &&_ag %8!=0{_ag +=8-_ag %8;};_aac =append (_aac ,_ge );if _edb .Rows > 0&&!_edb .EndOfBlock &&len (_aac )>=(_edb .Rows +1){break ;};};_aac =_aac [1:];return _aac ,nil ;};func _cdee (_dcc []byte ,_aaf int )(code ,int ,bool ){var (_cge uint16 ;
_ede int ;_ade int ;);_ade =_aaf ;_cge ,_ede ,_ =_dfdb (_dcc ,_aaf );_dfac ,_ffdg :=_fb (_cge ,_ede );if !_ffdg {return code {},_ade ,false ;};return _dfac ,_ade +_dfac .BitsWritten ,true ;};func _dfdb (_fad []byte ,_fdga int )(uint16 ,int ,int ){_ccg :=_fdga ;
_cfbb :=_fdga /8;_fdga %=8;if _cfbb >=len (_fad ){return 0,16,_ccg ;};_ege :=byte (0xFF>>uint (_fdga ));_caa :=uint16 ((_fad [_cfbb ]&_ege )<<uint (_fdga ))<<8;_egdb :=8-_fdga ;_cfbb ++;_fdga =0;if _cfbb >=len (_fad ){return _caa >>(16-uint (_egdb )),16-_egdb ,_ccg +_egdb ;
};_caa |=uint16 (_fad [_cfbb ])<<(8-uint (_egdb ));_egdb +=8;_cfbb ++;_fdga =0;if _cfbb >=len (_fad ){return _caa >>(16-uint (_egdb )),16-_egdb ,_ccg +_egdb ;};if _egdb ==16{return _caa ,0,_ccg +_egdb ;};_ffaf :=16-_egdb ;_caa |=uint16 (_fad [_cfbb ]>>(8-uint (_ffaf )));
return _caa ,0,_ccg +16;};func (_bgg *Encoder )encodeG31D (_fegc [][]byte )[]byte {var _cfdb []byte ;_bfg :=0;for _dbe :=range _fegc {if _bgg .Rows > 0&&!_bgg .EndOfBlock &&_dbe ==_bgg .Rows {break ;};_dfdf ,_bcc :=_aea (_fegc [_dbe ],_bfg ,_ga );_cfdb =_bgg .appendEncodedRow (_cfdb ,_dfdf ,_bfg );
if _bgg .EncodedByteAlign {_bcc =0;};_bfg =_bcc ;};if _bgg .EndOfBlock {_afc ,_ :=_cdb (_bfg );_cfdb =_bgg .appendEncodedRow (_cfdb ,_afc ,_bfg );};return _cfdb ;};func (_ggg *Encoder )Decode (encoded []byte )([][]byte ,error ){if _ggg .BlackIs1 {_fcb =0;
_ebace =1;}else {_fcb =1;_ebace =0;};if _ggg .K ==0{return _ggg .decodeG31D (encoded );};if _ggg .K > 0{return _ggg .decodeG32D (encoded );};if _ggg .K < 4{return _ggg .decodeG4 (encoded );};return nil ,nil ;};func _dgbb (_dff uint16 ,_dbc int )byte {if _dbc < 8{_dff >>=8;
};_dbc %=8;_cba :=byte (0x01<<(7-uint (_dbc )));return (byte (_dff )&_cba )>>(7-uint (_dbc ));};func (_bag *Encoder )decodeG31D (_de []byte )([][]byte ,error ){var _aeg [][]byte ;var _eba int ;for (_eba /8)< len (_de ){var _db bool ;_db ,_eba =_cbc (_de ,_eba );
if !_db {if _bag .EndOfLine {return nil ,_ba ;};}else {for _dg :=0;_dg < 5;_dg ++{_db ,_eba =_cbc (_de ,_eba );if !_db {if _dg ==0{break ;};return nil ,_fc ;};};if _db {break ;};};var _bbc []byte ;_bbc ,_eba =_bag .decodeRow1D (_de ,_eba );if _bag .EncodedByteAlign &&_eba %8!=0{_eba +=8-_eba %8;
};_aeg =append (_aeg ,_bbc );if _bag .Rows > 0&&!_bag .EndOfBlock &&len (_aeg )>=_bag .Rows {break ;};};return _aeg ,nil ;};func _cdb (_adg int )([]byte ,int ){var _ggga []byte ;for _eag :=0;_eag < 6;_eag ++{_ggga ,_adg =_aded (_ggga ,_adg ,_ga );};return _ggga ,_adg %8;
};func _ceee (_ebae [][]byte )[][]byte {_dgf :=make ([]byte ,len (_ebae [0]));for _adb :=range _dgf {_dgf [_adb ]=_fcb ;};_ebae =append (_ebae ,[]byte {});for _ebb :=len (_ebae )-1;_ebb > 0;_ebb --{_ebae [_ebb ]=_ebae [_ebb -1];};_ebae [0]=_dgf ;return _ebae ;
};func _fgcb (_bcb ,_dfbc []byte ,_bcdd ,_gefb ,_fege int )([]byte ,int ,int ){_aec :=_cbga (_bcb ,_fege );_dceb :=_gefb >=0&&_bcb [_gefb ]==_fcb ||_gefb ==-1;_dfbc ,_bcdd =_aded (_dfbc ,_bcdd ,_bd );var _cead int ;if _gefb > -1{_cead =_fege -_gefb ;}else {_cead =_fege -_gefb -1;
};_dfbc ,_bcdd =_eac (_dfbc ,_bcdd ,_cead ,_dceb );_dceb =!_dceb ;_gdf :=_aec -_fege ;_dfbc ,_bcdd =_eac (_dfbc ,_bcdd ,_gdf ,_dceb );_gefb =_aec ;return _dfbc ,_bcdd ,_gefb ;};func _cbga (_fgc []byte ,_fgg int )int {if _fgg >=len (_fgc ){return _fgg ;
};if _fgg < -1{_fgg =-1;};var _cbcf byte ;if _fgg > -1{_cbcf =_fgc [_fgg ];}else {_cbcf =_fcb ;};_caf :=_fgg +1;for _caf < len (_fgc ){if _fgc [_caf ]!=_cbcf {break ;};_caf ++;};return _caf ;};func _ggcd (_afba []byte ,_cdf bool ,_abaa int )(int ,int ){_eadc :=0;
for _abaa < len (_afba ){if _cdf {if _afba [_abaa ]!=_fcb {break ;};}else {if _afba [_abaa ]!=_ebace {break ;};};_eadc ++;_abaa ++;};return _eadc ,_abaa ;};func (_daf *Encoder )encodeG4 (_agg [][]byte )[]byte {_cee :=make ([][]byte ,len (_agg ));copy (_cee ,_agg );
_cee =_ceee (_cee );var _bagg []byte ;var _geg int ;for _bde :=1;_bde < len (_cee );_bde ++{if _daf .Rows > 0&&!_daf .EndOfBlock &&_bde ==(_daf .Rows +1){break ;};var _daee []byte ;var _ggbe ,_aabc ,_cfda int ;_bgc :=_geg ;_ega :=-1;for _ega < len (_cee [_bde ]){_ggbe =_cbga (_cee [_bde ],_ega );
_aabc =_gdd (_cee [_bde ],_cee [_bde -1],_ega );_cfda =_cbga (_cee [_bde -1],_aabc );if _cfda < _ggbe {_daee ,_bgc =_aded (_daee ,_bgc ,_da );_ega =_cfda ;}else {if _b .Abs (float64 (_aabc -_ggbe ))> 3{_daee ,_bgc ,_ega =_fgcb (_cee [_bde ],_daee ,_bgc ,_ega ,_ggbe );
}else {_daee ,_bgc =_ddb (_daee ,_bgc ,_ggbe ,_aabc );_ega =_ggbe ;};};};_bagg =_daf .appendEncodedRow (_bagg ,_daee ,_geg );if _daf .EncodedByteAlign {_bgc =0;};_geg =_bgc %8;};if _daf .EndOfBlock {_ggcg ,_ :=_bec (_geg );_bagg =_daf .appendEncodedRow (_bagg ,_ggcg ,_geg );
};return _bagg ;};func _egag (_bcf int )([]byte ,int ){var _gbg []byte ;for _fba :=0;_fba < 6;_fba ++{_gbg ,_bcf =_aded (_gbg ,_bcf ,_fdc );};return _gbg ,_bcf %8;};func (_dcb *Encoder )decodeG32D (_dad []byte )([][]byte ,error ){var (_dd [][]byte ;_cc int ;
_cb error ;);_ed :for (_cc /8)< len (_dad ){var _be bool ;_be ,_cc ,_cb =_aef (_dad ,_cc );if _cb !=nil {return nil ,_cb ;};if _be {break ;};_be ,_cc =_fga (_dad ,_cc );if !_be {if _dcb .EndOfLine {return nil ,_ba ;};};var _edd []byte ;_edd ,_cc =_dcb .decodeRow1D (_dad ,_cc );
if _dcb .EncodedByteAlign &&_cc %8!=0{_cc +=8-_cc %8;};if _edd !=nil {_dd =append (_dd ,_edd );};if _dcb .Rows > 0&&!_dcb .EndOfBlock &&len (_dd )>=_dcb .Rows {break ;};for _ggc :=1;_ggc < _dcb .K &&(_cc /8)< len (_dad );_ggc ++{_be ,_cc =_cgb (_dad ,_cc );
if !_be {_be ,_cc ,_cb =_aef (_dad ,_cc );if _cb !=nil {return nil ,_cb ;};if _be {break _ed ;}else {if _dcb .EndOfLine {return nil ,_ba ;};};};var (_bdb code ;_edf bool ;);_aba :=true ;var _ffa []byte ;_edc :=-1;for _bdb ,_cc ,_edf =_cdee (_dad ,_cc );
_edf ;_bdb ,_cc ,_edf =_cdee (_dad ,_cc ){switch _bdb {case _da :_ffa ,_edc =_gd (_dd ,_ffa ,_aba ,_edc );case _bd :_ffa ,_cc ,_edc ,_cb =_gc (_dad ,_ffa ,_cc ,_aba ,_edc );if _cb !=nil {return nil ,_cb ;};case _gaf :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,0);
_aba =!_aba ;case _cd :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,1);_aba =!_aba ;case _ee :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,2);_aba =!_aba ;case _df :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,3);_aba =!_aba ;case _gg :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,-1);
_aba =!_aba ;case _gf :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,-2);_aba =!_aba ;case _cf :_ffa ,_edc =_bac (_dd ,_ffa ,_aba ,_edc ,-3);_aba =!_aba ;};if len (_ffa )>=_dcb .Columns {break ;};};if _dcb .EncodedByteAlign &&_cc %8!=0{_cc +=8-_cc %8;};if _ffa !=nil {_dd =append (_dd ,_ffa );
};if _dcb .Rows > 0&&!_dcb .EndOfBlock &&len (_dd )>=_dcb .Rows {break _ed ;};};};return _dd ,nil ;};func _fb (_cfd uint16 ,_ded int )(code ,bool ){_ ,_dce :=_aab (_cde ,_cfd ,_ded );if _dce ==nil {return code {},false ;};return *_dce ,true ;};func _aab (_edfd *decodingTreeNode ,_aad uint16 ,_acd int )(*int ,*code ){if _edfd ==nil {return nil ,nil ;
};if _acd ==16{return _edfd .RunLen ,_edfd .Code ;};_gfb :=_dgbb (_aad ,_acd );_acd ++;var _dde *int ;var _cdg *code ;if _gfb ==1{_dde ,_cdg =_aab (_edfd .Right ,_aad ,_acd );}else {_dde ,_cdg =_aab (_edfd .Left ,_aad ,_acd );};if _dde ==nil {_dde =_edfd .RunLen ;
_cdg =_edfd .Code ;};return _dde ,_cdg ;};func _dga (_ebac []byte ,_geb int )(bool ,int ,error ){_fg :=_geb ;var _gee bool ;_gee ,_geb =_cbc (_ebac ,_geb );if _gee {_gee ,_geb =_cbc (_ebac ,_geb );if _gee {return true ,_geb ,nil ;};return false ,_fg ,_dc ;
};return false ,_fg ,nil ;};func _eac (_gef []byte ,_bcd int ,_gba int ,_gcfg bool )([]byte ,int ){var (_bffb code ;_bce bool ;);for !_bce {_bffb ,_gba ,_bce =_cbb (_gba ,_gcfg );_gef ,_bcd =_aded (_gef ,_bcd ,_bffb );};return _gef ,_bcd ;};func _aef (_bbd []byte ,_dfa int )(bool ,int ,error ){_baga :=_dfa ;
var _dba =false ;for _efd :=0;_efd < 6;_efd ++{_dba ,_dfa =_fga (_bbd ,_dfa );if !_dba {if _efd > 1{return false ,_baga ,_cfc ;};_dfa =_baga ;break ;};};return _dba ,_dfa ,nil ;};func _dcfg (_egbf []byte ,_aaa int )([]byte ,int ){return _aded (_egbf ,_aaa ,_da )};
func _bac (_bf [][]byte ,_egd []byte ,_ef bool ,_ffd ,_gbd int )([]byte ,int ){_ad :=_cgf (_egd ,_bf [len (_bf )-1],_ffd ,_ef );_bfc :=_ad +_gbd ;if _ffd ==-1{_egd =_ceag (_egd ,_ef ,_bfc -_ffd -1);}else {_egd =_ceag (_egd ,_ef ,_bfc -_ffd );};_ffd =_bfc ;
return _egd ,_ffd ;};func _cbb (_egf int ,_cgba bool )(code ,int ,bool ){if _egf < 64{if _cgba {return _fe [_egf ],0,true ;};return _d [_egf ],0,true ;};_bcg :=_egf /64;if _bcg > 40{return _g [2560],_egf -2560,false ;};if _bcg > 27{return _g [_bcg *64],_egf -_bcg *64,false ;
};if _cgba {return _a [_bcg *64],_egf -_bcg *64,false ;};return _bg [_bcg *64],_egf -_bcg *64,false ;};func _abab (_abg ,_bffeg int )code {var _gege code ;switch _bffeg -_abg {case -1:_gege =_cd ;case -2:_gege =_ee ;case -3:_gege =_df ;case 0:_gege =_gaf ;
case 1:_gege =_gg ;case 2:_gege =_gf ;case 3:_gege =_cf ;};return _gege ;};func _cbc (_bbdf []byte ,_def int )(bool ,int ){_bgf :=_def ;var (_bdgb uint16 ;_cef int ;);_bdgb ,_cef ,_def =_dfdb (_bbdf ,_def );if _cef > 4{return false ,_bgf ;};_bdgb >>=uint (4-_cef );
_bdgb <<=4;if _bdgb !=_ga .Code {return false ,_bgf ;};return true ,_def -4+_cef ;};func (_bdgg *Encoder )Encode (pixels [][]byte )[]byte {if _bdgg .BlackIs1 {_fcb =0;_ebace =1;}else {_fcb =1;_ebace =0;};if _bdgg .K ==0{return _bdgg .encodeG31D (pixels );
};if _bdgg .K > 0{return _bdgg .encodeG32D (pixels );};if _bdgg .K < 0{return _bdgg .encodeG4 (pixels );};return nil ;};func _bec (_ffab int )([]byte ,int ){var _feff []byte ;for _agb :=0;_agb < 2;_agb ++{_feff ,_ffab =_aded (_feff ,_ffab ,_ga );};return _feff ,_ffab %8;
};func _aea (_dedd []byte ,_efde int ,_bfff code )([]byte ,int ){_ggca :=true ;var _gcdd []byte ;_gcdd ,_efde =_aded (nil ,_efde ,_bfff );_cfbd :=0;var _fgb int ;for _cfbd < len (_dedd ){_fgb ,_cfbd =_ggcd (_dedd ,_ggca ,_cfbd );_gcdd ,_efde =_eac (_gcdd ,_efde ,_fgb ,_ggca );
_ggca =!_ggca ;};return _gcdd ,_efde %8;};func _gc (_abbc ,_dfc []byte ,_gfg int ,_faeg bool ,_ced int )([]byte ,int ,int ,error ){_af :=_gfg ;var _deg error ;_dfc ,_gfg ,_deg =_bdg (_abbc ,_dfc ,_gfg ,_faeg );if _deg !=nil {return _dfc ,_af ,_ced ,_deg ;
};_faeg =!_faeg ;_dfc ,_gfg ,_deg =_bdg (_abbc ,_dfc ,_gfg ,_faeg );if _deg !=nil {return _dfc ,_af ,_ced ,_deg ;};_ced =len (_dfc );return _dfc ,_gfg ,_ced ,nil ;};func _cgb (_ffg []byte ,_edbe int )(bool ,int ){return _aff (_ffg ,_edbe ,_e )};func _aded (_fda []byte ,_gbb int ,_efda code )([]byte ,int ){_adfa :=0;
for _adfa < _efda .BitsWritten {_dac :=_gbb /8;_gcb :=_gbb %8;if _dac >=len (_fda ){_fda =append (_fda ,0);};_ccge :=8-_gcb ;_eeg :=_efda .BitsWritten -_adfa ;if _ccge > _eeg {_ccge =_eeg ;};if _adfa < 8{_fda [_dac ]=_fda [_dac ]|byte (_efda .Code >>uint (8+_gcb -_adfa ))&_aa [8-_ccge -_gcb ];
}else {_fda [_dac ]=_fda [_dac ]|(byte (_efda .Code <<uint (_adfa -8))&_aa [8-_ccge ])>>uint (_gcb );};_gbb +=_ccge ;_adfa +=_ccge ;};return _fda ,_gbb ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;
BlackIs1 bool ;DamagedRowsBeforeError int ;};var (_eg =&decodingTreeNode {Val :255};_ec =&decodingTreeNode {Val :255};_cde =&decodingTreeNode {Val :255};);func (_cec *Encoder )encodeG32D (_cab [][]byte )[]byte {var _gga []byte ;var _egee int ;for _cbg :=0;
_cbg < len (_cab );_cbg +=_cec .K {if _cec .Rows > 0&&!_cec .EndOfBlock &&_cbg ==_cec .Rows {break ;};_dae ,_cff :=_aea (_cab [_cbg ],_egee ,_fdc );_gga =_cec .appendEncodedRow (_gga ,_dae ,_egee );if _cec .EncodedByteAlign {_cff =0;};_egee =_cff ;for _ebacb :=_cbg +1;
_ebacb < (_cbg +_cec .K )&&_ebacb < len (_cab );_ebacb ++{if _cec .Rows > 0&&!_cec .EndOfBlock &&_ebacb ==_cec .Rows {break ;};_ecf ,_gcf :=_aded (nil ,_egee ,_e );var _fdb ,_cede ,_cbda int ;_agc :=-1;for _agc < len (_cab [_ebacb ]){_fdb =_cbga (_cab [_ebacb ],_agc );
_cede =_gdd (_cab [_ebacb ],_cab [_ebacb -1],_agc );_cbda =_cbga (_cab [_ebacb -1],_cede );if _cbda < _fdb {_ecf ,_gcf =_dcfg (_ecf ,_gcf );_agc =_cbda ;}else {if _b .Abs (float64 (_cede -_fdb ))> 3{_ecf ,_gcf ,_agc =_fgcb (_cab [_ebacb ],_ecf ,_gcf ,_agc ,_fdb );
}else {_ecf ,_gcf =_ddb (_ecf ,_gcf ,_fdb ,_cede );_agc =_fdb ;};};};_gga =_cec .appendEncodedRow (_gga ,_ecf ,_egee );if _cec .EncodedByteAlign {_gcf =0;};_egee =_gcf %8;};};if _cec .EndOfBlock {_deaf ,_ :=_egag (_egee );_gga =_cec .appendEncodedRow (_gga ,_deaf ,_egee );
};return _gga ;};func _gd (_cg [][]byte ,_gfd []byte ,_dfd bool ,_ce int )([]byte ,int ){_ffc :=_cgf (_gfd ,_cg [len (_cg )-1],_ce ,_dfd );_abbg :=_cbga (_cg [len (_cg )-1],_ffc );if _ce ==-1{_gfd =_ceag (_gfd ,_dfd ,_abbg -_ce -1);}else {_gfd =_ceag (_gfd ,_dfd ,_abbg -_ce );
};_ce =_abbg ;return _gfd ,_ce ;};var (_d map[int ]code ;_fe map[int ]code ;_bg map[int ]code ;_a map[int ]code ;_g map[int ]code ;_aa map[int ]byte ;_ga =code {Code :1<<4,BitsWritten :12};_fdc =code {Code :3<<3,BitsWritten :13};_e =code {Code :2<<3,BitsWritten :13};
_da =code {Code :1<<12,BitsWritten :4};_bd =code {Code :1<<13,BitsWritten :3};_gaf =code {Code :1<<15,BitsWritten :1};_cd =code {Code :3<<13,BitsWritten :3};_ee =code {Code :3<<10,BitsWritten :6};_df =code {Code :3<<9,BitsWritten :7};_gg =code {Code :2<<13,BitsWritten :3};
_gf =code {Code :2<<10,BitsWritten :6};_cf =code {Code :2<<9,BitsWritten :7};);func _ddb (_cfcb []byte ,_bcfc ,_dgad ,_cae int )([]byte ,int ){_cbbb :=_abab (_dgad ,_cae );_cfcb ,_bcfc =_aded (_cfcb ,_bcfc ,_cbbb );return _cfcb ,_bcfc ;};