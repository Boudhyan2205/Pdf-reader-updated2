//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_d "math";);func (_eeg *Encoder )Decode (encoded []byte )([][]byte ,error ){if _eeg .BlackIs1 {_efa =0;_cga =1;}else {_efa =1;_cga =0;};if _eeg .K ==0{return _eeg .decodeG31D (encoded );};if _eeg .K > 0{return _eeg .decodeG32D (encoded );};if _eeg .K < 4{return _eeg .decodeG4 (encoded );};return nil ,nil ;};func _gegc (_gcde ,_dbb []byte ,_befa int ,_ebf bool )int {_agaa :=_fabb (_dbb ,_befa );if _agaa < len (_dbb )&&(_befa ==-1&&_dbb [_agaa ]==_efa ||_befa >=0&&_befa < len (_gcde )&&_gcde [_befa ]==_dbb [_agaa ]||_befa >=len (_gcde )&&_ebf &&_dbb [_agaa ]==_efa ||_befa >=len (_gcde )&&!_ebf &&_dbb [_agaa ]==_cga ){_agaa =_fabb (_dbb ,_agaa );};return _agaa ;};func init (){_ag =make (map[int ]code );_ag [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ag [1]=code {Code :2<<(5+8),BitsWritten :3};_ag [2]=code {Code :3<<(6+8),BitsWritten :2};_ag [3]=code {Code :2<<(6+8),BitsWritten :2};_ag [4]=code {Code :3<<(5+8),BitsWritten :3};_ag [5]=code {Code :3<<(4+8),BitsWritten :4};_ag [6]=code {Code :2<<(4+8),BitsWritten :4};_ag [7]=code {Code :3<<(3+8),BitsWritten :5};_ag [8]=code {Code :5<<(2+8),BitsWritten :6};_ag [9]=code {Code :4<<(2+8),BitsWritten :6};_ag [10]=code {Code :4<<(1+8),BitsWritten :7};_ag [11]=code {Code :5<<(1+8),BitsWritten :7};_ag [12]=code {Code :7<<(1+8),BitsWritten :7};_ag [13]=code {Code :4<<8,BitsWritten :8};_ag [14]=code {Code :7<<8,BitsWritten :8};_ag [15]=code {Code :12<<8,BitsWritten :9};_ag [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ag [17]=code {Code :6<<8,BitsWritten :10};_ag [18]=code {Code :2<<8,BitsWritten :10};_ag [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ag [20]=code {Code :13<<8,BitsWritten :11};_ag [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ag [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ag [23]=code {Code :5<<8,BitsWritten :11};_ag [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ag [25]=code {Code :3<<8,BitsWritten :11};_ag [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ag [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ag [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ag [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ag [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ag [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ag [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ag [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ag [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ag [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ag [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ag [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ag [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ag [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ag [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ag [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ag [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ag [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ag [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ag [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ag [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ag [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ag [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ag [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ag [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ag [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ag [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ag [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ag [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ag [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ag [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ag [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ag [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ag [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ag [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ag [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ag [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ag [63]=code {Code :6<<8|7<<4,BitsWritten :12};_dc =make (map[int ]code );_dc [0]=code {Code :53<<8,BitsWritten :8};_dc [1]=code {Code :7<<(2+8),BitsWritten :6};_dc [2]=code {Code :7<<(4+8),BitsWritten :4};_dc [3]=code {Code :8<<(4+8),BitsWritten :4};_dc [4]=code {Code :11<<(4+8),BitsWritten :4};_dc [5]=code {Code :12<<(4+8),BitsWritten :4};_dc [6]=code {Code :14<<(4+8),BitsWritten :4};_dc [7]=code {Code :15<<(4+8),BitsWritten :4};_dc [8]=code {Code :19<<(3+8),BitsWritten :5};_dc [9]=code {Code :20<<(3+8),BitsWritten :5};_dc [10]=code {Code :7<<(3+8),BitsWritten :5};_dc [11]=code {Code :8<<(3+8),BitsWritten :5};_dc [12]=code {Code :8<<(2+8),BitsWritten :6};_dc [13]=code {Code :3<<(2+8),BitsWritten :6};_dc [14]=code {Code :52<<(2+8),BitsWritten :6};_dc [15]=code {Code :53<<(2+8),BitsWritten :6};_dc [16]=code {Code :42<<(2+8),BitsWritten :6};_dc [17]=code {Code :43<<(2+8),BitsWritten :6};_dc [18]=code {Code :39<<(1+8),BitsWritten :7};_dc [19]=code {Code :12<<(1+8),BitsWritten :7};_dc [20]=code {Code :8<<(1+8),BitsWritten :7};_dc [21]=code {Code :23<<(1+8),BitsWritten :7};_dc [22]=code {Code :3<<(1+8),BitsWritten :7};_dc [23]=code {Code :4<<(1+8),BitsWritten :7};_dc [24]=code {Code :40<<(1+8),BitsWritten :7};_dc [25]=code {Code :43<<(1+8),BitsWritten :7};_dc [26]=code {Code :19<<(1+8),BitsWritten :7};_dc [27]=code {Code :36<<(1+8),BitsWritten :7};_dc [28]=code {Code :24<<(1+8),BitsWritten :7};_dc [29]=code {Code :2<<8,BitsWritten :8};_dc [30]=code {Code :3<<8,BitsWritten :8};_dc [31]=code {Code :26<<8,BitsWritten :8};_dc [32]=code {Code :27<<8,BitsWritten :8};_dc [33]=code {Code :18<<8,BitsWritten :8};_dc [34]=code {Code :19<<8,BitsWritten :8};_dc [35]=code {Code :20<<8,BitsWritten :8};_dc [36]=code {Code :21<<8,BitsWritten :8};_dc [37]=code {Code :22<<8,BitsWritten :8};_dc [38]=code {Code :23<<8,BitsWritten :8};_dc [39]=code {Code :40<<8,BitsWritten :8};_dc [40]=code {Code :41<<8,BitsWritten :8};_dc [41]=code {Code :42<<8,BitsWritten :8};_dc [42]=code {Code :43<<8,BitsWritten :8};_dc [43]=code {Code :44<<8,BitsWritten :8};_dc [44]=code {Code :45<<8,BitsWritten :8};_dc [45]=code {Code :4<<8,BitsWritten :8};_dc [46]=code {Code :5<<8,BitsWritten :8};_dc [47]=code {Code :10<<8,BitsWritten :8};_dc [48]=code {Code :11<<8,BitsWritten :8};_dc [49]=code {Code :82<<8,BitsWritten :8};_dc [50]=code {Code :83<<8,BitsWritten :8};_dc [51]=code {Code :84<<8,BitsWritten :8};_dc [52]=code {Code :85<<8,BitsWritten :8};_dc [53]=code {Code :36<<8,BitsWritten :8};_dc [54]=code {Code :37<<8,BitsWritten :8};_dc [55]=code {Code :88<<8,BitsWritten :8};_dc [56]=code {Code :89<<8,BitsWritten :8};_dc [57]=code {Code :90<<8,BitsWritten :8};_dc [58]=code {Code :91<<8,BitsWritten :8};_dc [59]=code {Code :74<<8,BitsWritten :8};_dc [60]=code {Code :75<<8,BitsWritten :8};_dc [61]=code {Code :50<<8,BitsWritten :8};_dc [62]=code {Code :51<<8,BitsWritten :8};_dc [63]=code {Code :52<<8,BitsWritten :8};_e =make (map[int ]code );_e [64]=code {Code :3<<8|3<<6,BitsWritten :10};_e [128]=code {Code :12<<8|8<<4,BitsWritten :12};_e [192]=code {Code :12<<8|9<<4,BitsWritten :12};_e [256]=code {Code :5<<8|11<<4,BitsWritten :12};_e [320]=code {Code :3<<8|3<<4,BitsWritten :12};_e [384]=code {Code :3<<8|4<<4,BitsWritten :12};_e [448]=code {Code :3<<8|5<<4,BitsWritten :12};_e [512]=code {Code :3<<8|12<<3,BitsWritten :13};_e [576]=code {Code :3<<8|13<<3,BitsWritten :13};_e [640]=code {Code :2<<8|10<<3,BitsWritten :13};_e [704]=code {Code :2<<8|11<<3,BitsWritten :13};_e [768]=code {Code :2<<8|12<<3,BitsWritten :13};_e [832]=code {Code :2<<8|13<<3,BitsWritten :13};_e [896]=code {Code :3<<8|18<<3,BitsWritten :13};_e [960]=code {Code :3<<8|19<<3,BitsWritten :13};_e [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_e [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_e [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_e [1216]=code {Code :119<<3,BitsWritten :13};_e [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_e [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_e [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_e [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_e [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_e [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_e [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_e [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_f =make (map[int ]code );_f [64]=code {Code :27<<(3+8),BitsWritten :5};_f [128]=code {Code :18<<(3+8),BitsWritten :5};_f [192]=code {Code :23<<(2+8),BitsWritten :6};_f [256]=code {Code :55<<(1+8),BitsWritten :7};_f [320]=code {Code :54<<8,BitsWritten :8};_f [384]=code {Code :55<<8,BitsWritten :8};_f [448]=code {Code :100<<8,BitsWritten :8};_f [512]=code {Code :101<<8,BitsWritten :8};_f [576]=code {Code :104<<8,BitsWritten :8};_f [640]=code {Code :103<<8,BitsWritten :8};_f [704]=code {Code :102<<8,BitsWritten :9};_f [768]=code {Code :102<<8|1<<7,BitsWritten :9};_f [832]=code {Code :105<<8,BitsWritten :9};_f [896]=code {Code :105<<8|1<<7,BitsWritten :9};_f [960]=code {Code :106<<8,BitsWritten :9};_f [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_f [1088]=code {Code :107<<8,BitsWritten :9};_f [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_f [1216]=code {Code :108<<8,BitsWritten :9};_f [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_f [1344]=code {Code :109<<8,BitsWritten :9};_f [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_f [1472]=code {Code :76<<8,BitsWritten :9};_f [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_f [1600]=code {Code :77<<8,BitsWritten :9};_f [1664]=code {Code :24<<(2+8),BitsWritten :6};_f [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ee =make (map[int ]code );_ee [1792]=code {Code :1<<8,BitsWritten :11};_ee [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ee [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ee [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ee [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ee [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ee [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ee [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ee [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ee [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ee [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ee [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ee [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_bd =make (map[int ]byte );_bd [0]=0xFF;_bd [1]=0xFE;_bd [2]=0xFC;_bd [3]=0xF8;_bd [4]=0xF0;_bd [5]=0xE0;_bd [6]=0xC0;_bd [7]=0x80;_bd [8]=0x00;};var (_ag map[int ]code ;_dc map[int ]code ;_e map[int ]code ;_f map[int ]code ;_ee map[int ]code ;_bd map[int ]byte ;_ac =code {Code :1<<4,BitsWritten :12};_g =code {Code :3<<3,BitsWritten :13};_c =code {Code :2<<3,BitsWritten :13};_fd =code {Code :1<<12,BitsWritten :4};_ec =code {Code :1<<13,BitsWritten :3};_af =code {Code :1<<15,BitsWritten :1};_fb =code {Code :3<<13,BitsWritten :3};_aa =code {Code :3<<10,BitsWritten :6};_ece =code {Code :3<<9,BitsWritten :7};_cd =code {Code :2<<13,BitsWritten :3};_ba =code {Code :2<<10,BitsWritten :6};_aaa =code {Code :2<<9,BitsWritten :7};);func _bf (_acf ,_egb []byte ,_bea int ,_fdad bool )([]byte ,int ,error ){_afa :=_bea ;var _gfeb int ;for _gfeb ,_bea =_dgg (_acf ,_bea ,_fdad );_gfeb !=-1;_gfeb ,_bea =_dgg (_acf ,_bea ,_fdad ){_egb =_bff (_egb ,_fdad ,_gfeb );if _gfeb < 64{break ;};};if _gfeb ==-1{return _egb ,_afa ,_dbd ;};return _egb ,_bea ,nil ;};func init (){for _gb ,_eg :=range _dc {_dfb (_cc ,_eg ,0,_gb );};for _eef ,_bg :=range _f {_dfb (_cc ,_bg ,0,_eef );};for _de ,_gcd :=range _ag {_dfb (_fa ,_gcd ,0,_de );};for _daa ,_eed :=range _e {_dfb (_fa ,_eed ,0,_daa );};for _ea ,_fbd :=range _ee {_dfb (_cc ,_fbd ,0,_ea );_dfb (_fa ,_fbd ,0,_ea );};_dfb (_ge ,_fd ,0,0);_dfb (_ge ,_ec ,0,0);_dfb (_ge ,_af ,0,0);_dfb (_ge ,_fb ,0,0);_dfb (_ge ,_aa ,0,0);_dfb (_ge ,_ece ,0,0);_dfb (_ge ,_cd ,0,0);_dfb (_ge ,_ba ,0,0);_dfb (_ge ,_aaa ,0,0);};func (_baa *Encoder )decodeG31D (_ab []byte )([][]byte ,error ){var _gf [][]byte ;var _fg int ;for (_fg /8)< len (_ab ){var _ccg bool ;_ccg ,_fg =_fcce (_ab ,_fg );if !_ccg {if _baa .EndOfLine {return nil ,_ff ;};}else {for _age :=0;_age < 5;_age ++{_ccg ,_fg =_fcce (_ab ,_fg );if !_ccg {if _age ==0{break ;};return nil ,_fbg ;};};if _ccg {break ;};};var _aaac []byte ;_aaac ,_fg =_baa .decodeRow1D (_ab ,_fg );if _baa .EncodedByteAlign &&_fg %8!=0{_fg +=8-_fg %8;};_gf =append (_gf ,_aaac );if _baa .Rows > 0&&!_baa .EndOfBlock &&len (_gf )>=_baa .Rows {break ;};};return _gf ,nil ;};func _cag (_bbd []byte ,_eba int )(uint16 ,int ,int ){_ccdd :=_eba ;_fadf :=_eba /8;_eba %=8;if _fadf >=len (_bbd ){return 0,16,_ccdd ;};_ggc :=byte (0xFF>>uint (_eba ));_cfd :=uint16 ((_bbd [_fadf ]&_ggc )<<uint (_eba ))<<8;_bfd :=8-_eba ;_fadf ++;_eba =0;if _fadf >=len (_bbd ){return _cfd >>(16-uint (_bfd )),16-_bfd ,_ccdd +_bfd ;};_cfd |=uint16 (_bbd [_fadf ])<<(8-uint (_bfd ));_bfd +=8;_fadf ++;_eba =0;if _fadf >=len (_bbd ){return _cfd >>(16-uint (_bfd )),16-_bfd ,_ccdd +_bfd ;};if _bfd ==16{return _cfd ,0,_ccdd +_bfd ;};_fga :=16-_bfd ;_cfd |=uint16 (_bbd [_fadf ]>>(8-uint (_fga )));return _cfd ,0,_ccdd +16;};func (_bgfg *Encoder )encodeG31D (_def [][]byte )[]byte {var _gcfd []byte ;_dbf :=0;for _dbdc :=range _def {if _bgfg .Rows > 0&&!_bgfg .EndOfBlock &&_dbdc ==_bgfg .Rows {break ;};_fcb ,_bge :=_gab (_def [_dbdc ],_dbf ,_ac );_gcfd =_bgfg .appendEncodedRow (_gcfd ,_fcb ,_dbf );if _bgfg .EncodedByteAlign {_bge =0;};_dbf =_bge ;};if _bgfg .EndOfBlock {_cee ,_ :=_fgab (_dbf );_gcfd =_bgfg .appendEncodedRow (_gcfd ,_cee ,_dbf );};return _gcfd ;};func (_edc *Encoder )encodeG4 (_fbf [][]byte )[]byte {_gfcf :=make ([][]byte ,len (_fbf ));copy (_gfcf ,_fbf );_gfcf =_fbge (_gfcf );var _geg []byte ;var _dcg int ;for _gade :=1;_gade < len (_gfcf );_gade ++{if _edc .Rows > 0&&!_edc .EndOfBlock &&_gade ==(_edc .Rows +1){break ;};var _cb []byte ;var _dcbfc ,_ddb ,_gac int ;_gee :=_dcg ;_gfgf :=-1;for _gfgf < len (_gfcf [_gade ]){_dcbfc =_fabb (_gfcf [_gade ],_gfgf );_ddb =_adf (_gfcf [_gade ],_gfcf [_gade -1],_gfgf );_gac =_fabb (_gfcf [_gade -1],_ddb );if _gac < _dcbfc {_cb ,_gee =_fecb (_cb ,_gee ,_fd );_gfgf =_gac ;}else {if _d .Abs (float64 (_ddb -_dcbfc ))> 3{_cb ,_gee ,_gfgf =_ead (_gfcf [_gade ],_cb ,_gee ,_gfgf ,_dcbfc );}else {_cb ,_gee =_ecfd (_cb ,_gee ,_dcbfc ,_ddb );_gfgf =_dcbfc ;};};};_geg =_edc .appendEncodedRow (_geg ,_cb ,_dcg );if _edc .EncodedByteAlign {_gee =0;};_dcg =_gee %8;};if _edc .EndOfBlock {_cfc ,_ :=_aae (_dcg );_geg =_edc .appendEncodedRow (_geg ,_cfc ,_dcg );};return _geg ;};func _ffb (_gga []byte ,_fec int )(bool ,int ){return _ffg (_gga ,_fec ,_g )};func _bff (_dccb []byte ,_fcc bool ,_acg int )[]byte {if _acg < 0{return _dccb ;};_gba :=make ([]byte ,_acg );if _fcc {for _cfa :=0;_cfa < len (_gba );_cfa ++{_gba [_cfa ]=_efa ;};}else {for _cgdf :=0;_cgdf < len (_gba );_cgdf ++{_gba [_cgdf ]=_cga ;};};_dccb =append (_dccb ,_gba ...);return _dccb ;};func _eca (_bacf int )([]byte ,int ){var _geb []byte ;for _ddc :=0;_ddc < 6;_ddc ++{_geb ,_bacf =_fecb (_geb ,_bacf ,_g );};return _geb ,_bacf %8;};func _dce (_bgf [][]byte ,_gcf []byte ,_aga bool ,_fbe int )([]byte ,int ){_abf :=_gegc (_gcf ,_bgf [len (_bgf )-1],_fbe ,_aga );_dbe :=_fabb (_bgf [len (_bgf )-1],_abf );if _fbe ==-1{_gcf =_bff (_gcf ,_aga ,_dbe -_fbe -1);}else {_gcf =_bff (_gcf ,_aga ,_dbe -_fbe );};_fbe =_dbe ;return _gcf ,_fbe ;};func _ffg (_bbdb []byte ,_agb int ,_febb code )(bool ,int ){_cfea :=_agb ;var (_fgb uint16 ;_eebf int ;);_fgb ,_eebf ,_agb =_cag (_bbdb ,_agb );if _eebf > 3{return false ,_cfea ;};_fgb >>=uint (3-_eebf );_fgb <<=3;if _fgb !=_febb .Code {return false ,_cfea ;}else {return true ,_agb -3+_eebf ;};};func _aae (_add int )([]byte ,int ){var _cba []byte ;for _bcg :=0;_bcg < 2;_bcg ++{_cba ,_add =_fecb (_cba ,_add ,_ac );};return _cba ,_add %8;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _fabc (_bbdd *decodingTreeNode ,_ffgg uint16 ,_bfe int )(*int ,*code ){if _bbdd ==nil {return nil ,nil ;};if _bfe ==16{return _bbdd .RunLen ,_bbdd .Code ;};_eag :=_afd (_ffgg ,_bfe );_bfe ++;var _bagc *int ;var _cce *code ;if _eag ==1{_bagc ,_cce =_fabc (_bbdd .Right ,_ffgg ,_bfe );}else {_bagc ,_cce =_fabc (_bbdd .Left ,_ffgg ,_bfe );};if _bagc ==nil {_bagc =_bbdd .RunLen ;_cce =_bbdd .Code ;};return _bagc ,_cce ;};func _acfe (_aba []byte ,_fedb bool ,_beff int )(int ,int ){_gadc :=0;for _beff < len (_aba ){if _fedb {if _aba [_beff ]!=_efa {break ;};}else {if _aba [_beff ]!=_cga {break ;};};_gadc ++;_beff ++;};return _gadc ,_beff ;};func _cae (_df []byte ,_bga int )(bool ,int ,error ){_bfc :=_bga ;var _dda =false ;for _dcb :=0;_dcb < 6;_dcb ++{_dda ,_bga =_ffb (_df ,_bga );if !_dda {if _dcb > 1{return false ,_bfc ,_db ;}else {_bga =_bfc ;break ;};};};return _dda ,_bga ,nil ;};func (_ccgbd *Encoder )encodeG32D (_ebc [][]byte )[]byte {var _beb []byte ;var _gbf int ;for _ccb :=0;_ccb < len (_ebc );_ccb +=_ccgbd .K {if _ccgbd .Rows > 0&&!_ccgbd .EndOfBlock &&_ccb ==_ccgbd .Rows {break ;};_aaaa ,_gbd :=_gab (_ebc [_ccb ],_gbf ,_g );_beb =_ccgbd .appendEncodedRow (_beb ,_aaaa ,_gbf );if _ccgbd .EncodedByteAlign {_gbd =0;};_gbf =_gbd ;for _affd :=_ccb +1;_affd < (_ccb +_ccgbd .K )&&_affd < len (_ebc );_affd ++{if _ccgbd .Rows > 0&&!_ccgbd .EndOfBlock &&_affd ==_ccgbd .Rows {break ;};_fdcc ,_eea :=_fecb (nil ,_gbf ,_c );var _dee ,_gef ,_bbe int ;_deed :=-1;for _deed < len (_ebc [_affd ]){_dee =_fabb (_ebc [_affd ],_deed );_gef =_adf (_ebc [_affd ],_ebc [_affd -1],_deed );_bbe =_fabb (_ebc [_affd -1],_gef );if _bbe < _dee {_fdcc ,_eea =_defe (_fdcc ,_eea );_deed =_bbe ;}else {if _d .Abs (float64 (_gef -_dee ))> 3{_fdcc ,_eea ,_deed =_ead (_ebc [_affd ],_fdcc ,_eea ,_deed ,_dee );}else {_fdcc ,_eea =_ecfd (_fdcc ,_eea ,_dee ,_gef );_deed =_dee ;};};};_beb =_ccgbd .appendEncodedRow (_beb ,_fdcc ,_gbf );if _ccgbd .EncodedByteAlign {_eea =0;};_gbf =_eea %8;};};if _ccgbd .EndOfBlock {_bfg ,_ :=_eca (_gbf );_beb =_ccgbd .appendEncodedRow (_beb ,_bfg ,_gbf );};return _beb ;};func _dab (_dfe []byte ,_acfg int )(code ,int ,bool ){var (_cgd uint16 ;_fed int ;_beg int ;);_beg =_acfg ;_cgd ,_fed ,_acfg =_cag (_dfe ,_acfg );_fee ,_fdbc :=_gg (_cgd ,_fed );if !_fdbc {return code {},_beg ,false ;};return _fee ,_beg +_fee .BitsWritten ,true ;};func _dfb (_abd *decodingTreeNode ,_ccfg code ,_bef int ,_eae int ){_bgaf :=_afd (_ccfg .Code ,_bef );_bef ++;if _bgaf ==1{if _abd .Right ==nil {_abd .Right =&decodingTreeNode {Val :_bgaf };};if _bef ==_ccfg .BitsWritten {_abd .Right .RunLen =&_eae ;_abd .Right .Code =&_ccfg ;}else {_dfb (_abd .Right ,_ccfg ,_bef ,_eae );};}else {if _abd .Left ==nil {_abd .Left =&decodingTreeNode {Val :_bgaf };};if _bef ==_ccfg .BitsWritten {_abd .Left .RunLen =&_eae ;_abd .Left .Code =&_ccfg ;}else {_dfb (_abd .Left ,_ccfg ,_bef ,_eae );};};};func _bcea (_bfdf []byte ,_edce int ,_ffe int ,_ada bool )([]byte ,int ){var (_daf code ;_afe bool ;);for !_afe {_daf ,_ffe ,_afe =_agec (_ffe ,_ada );_bfdf ,_edce =_fecb (_bfdf ,_edce ,_daf );};return _bfdf ,_edce ;};func _ead (_gea ,_efab []byte ,_ggee ,_cca ,_bcge int )([]byte ,int ,int ){_fedg :=_fabb (_gea ,_bcge );_gfcd :=_cca >=0&&_gea [_cca ]==_efa ||_cca ==-1;_efab ,_ggee =_fecb (_efab ,_ggee ,_ec );var _babe int ;if _cca > -1{_babe =_bcge -_cca ;}else {_babe =_bcge -_cca -1;};_efab ,_ggee =_bcea (_efab ,_ggee ,_babe ,_gfcd );_gfcd =!_gfcd ;_cfeg :=_fedg -_bcge ;_efab ,_ggee =_bcea (_efab ,_ggee ,_cfeg ,_gfcd );_cca =_fedg ;return _efab ,_ggee ,_cca ;};func (_gaa *Encoder )appendEncodedRow (_eefa ,_fcf []byte ,_edfb int )[]byte {if len (_eefa )> 0&&_edfb !=0&&!_gaa .EncodedByteAlign {_eefa [len (_eefa )-1]=_eefa [len (_eefa )-1]|_fcf [0];_eefa =append (_eefa ,_fcf [1:]...);}else {_eefa =append (_eefa ,_fcf ...);};return _eefa ;};func (_ebe *Encoder )Encode (pixels [][]byte )[]byte {if _ebe .BlackIs1 {_efa =0;_cga =1;}else {_efa =1;_cga =0;};if _ebe .K ==0{return _ebe .encodeG31D (pixels );};if _ebe .K > 0{return _ebe .encodeG32D (pixels );};if _ebe .K < 0{return _ebe .encodeG4 (pixels );};return nil ;};func _dccg (_afc uint16 ,_dgf int ,_dfee bool )(int ,code ){var _feb *int ;var _fae *code ;if _dfee {_feb ,_fae =_fabc (_cc ,_afc ,_dgf );}else {_feb ,_fae =_fabc (_fa ,_afc ,_dgf );};if _feb ==nil {return -1,code {};};return *_feb ,*_fae ;};func (_dba *Encoder )decodeG4 (_aff []byte )([][]byte ,error ){_gfe :=make ([]byte ,_dba .Columns );for _eb :=range _gfe {_gfe [_eb ]=_efa ;};_ddg :=make ([][]byte ,1);_ddg [0]=_gfe ;var (_fdc bool ;_dag error ;_fad int ;);for (_fad /8)< len (_aff ){_fdc ,_fad ,_dag =_cef (_aff ,_fad );if _dag !=nil {return nil ,_dag ;};if _fdc {break ;};var (_ced code ;_cf bool ;);_fce :=true ;var _bec []byte ;_gd :=-1;for _gd < _dba .Columns {_ced ,_fad ,_cf =_dab (_aff ,_fad );if !_cf {return nil ,_gcc ;};switch _ced {case _fd :_bec ,_gd =_dce (_ddg ,_bec ,_fce ,_gd );case _ec :_bec ,_fad ,_gd ,_dag =_gfc (_aff ,_bec ,_fad ,_fce ,_gd );if _dag !=nil {return nil ,_dag ;};case _af :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,0);_fce =!_fce ;case _fb :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,1);_fce =!_fce ;case _aa :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,2);_fce =!_fce ;case _ece :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,3);_fce =!_fce ;case _cd :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,-1);_fce =!_fce ;case _ba :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,-2);_fce =!_fce ;case _aaa :_bec ,_gd =_cda (_ddg ,_bec ,_fce ,_gd ,-3);_fce =!_fce ;};if len (_bec )>=_dba .Columns {break ;};};if _dba .EncodedByteAlign &&_fad %8!=0{_fad +=8-_fad %8;};_ddg =append (_ddg ,_bec );if _dba .Rows > 0&&!_dba .EndOfBlock &&len (_ddg )>=(_dba .Rows +1){break ;};};_ddg =_ddg [1:];return _ddg ,nil ;};func _agec (_aag int ,_dcbe bool )(code ,int ,bool ){if _aag < 64{if _dcbe {return _dc [_aag ],0,true ;}else {return _ag [_aag ],0,true ;};}else {_ffa :=_aag /64;if _ffa > 40{return _ee [2560],_aag -2560,false ;};if _ffa > 27{return _ee [_ffa *64],_aag -_ffa *64,false ;};if _dcbe {return _f [_ffa *64],_aag -_ffa *64,false ;}else {return _e [_ffa *64],_aag -_ffa *64,false ;};};};func _fbge (_ddac [][]byte )[][]byte {_ggf :=make ([]byte ,len (_ddac [0]));for _abe :=range _ggf {_ggf [_abe ]=_efa ;};_ddac =append (_ddac ,[]byte {});for _cbf :=len (_ddac )-1;_cbf > 0;_cbf --{_ddac [_cbf ]=_ddac [_cbf -1];};_ddac [0]=_ggf ;return _ddac ;};func _defe (_cge []byte ,_acgb int )([]byte ,int ){return _fecb (_cge ,_acgb ,_fd )};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};var (_cc =&decodingTreeNode {Val :255};_fa =&decodingTreeNode {Val :255};_ge =&decodingTreeNode {Val :255};);func (_ga *Encoder )decodeG32D (_cdf []byte )([][]byte ,error ){var (_ef [][]byte ;_ce int ;_dcc error ;);_fda :for (_ce /8)< len (_cdf ){var _ccgb bool ;_ccgb ,_ce ,_dcc =_cae (_cdf ,_ce );if _dcc !=nil {return nil ,_dcc ;};if _ccgb {break ;};_ccgb ,_ce =_ffb (_cdf ,_ce );if !_ccgb {if _ga .EndOfLine {return nil ,_ff ;};};var _be []byte ;_be ,_ce =_ga .decodeRow1D (_cdf ,_ce );if _ga .EncodedByteAlign &&_ce %8!=0{_ce +=8-_ce %8;};if _be !=nil {_ef =append (_ef ,_be );};if _ga .Rows > 0&&!_ga .EndOfBlock &&len (_ef )>=_ga .Rows {break ;};for _fc :=1;_fc < _ga .K &&(_ce /8)< len (_cdf );_fc ++{_ccgb ,_ce =_ccf (_cdf ,_ce );if !_ccgb {_ccgb ,_ce ,_dcc =_cae (_cdf ,_ce );if _dcc !=nil {return nil ,_dcc ;};if _ccgb {break _fda ;}else {if _ga .EndOfLine {return nil ,_ff ;};};};var (_gbe code ;_dd bool ;);_bb :=true ;var _eeb []byte ;_ad :=-1;for _gbe ,_ce ,_dd =_dab (_cdf ,_ce );_dd ;_gbe ,_ce ,_dd =_dab (_cdf ,_ce ){switch _gbe {case _fd :_eeb ,_ad =_dce (_ef ,_eeb ,_bb ,_ad );case _ec :_eeb ,_ce ,_ad ,_dcc =_gfc (_cdf ,_eeb ,_ce ,_bb ,_ad );if _dcc !=nil {return nil ,_dcc ;};case _af :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,0);_bb =!_bb ;case _fb :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,1);_bb =!_bb ;case _aa :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,2);_bb =!_bb ;case _ece :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,3);_bb =!_bb ;case _cd :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,-1);_bb =!_bb ;case _ba :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,-2);_bb =!_bb ;case _aaa :_eeb ,_ad =_cda (_ef ,_eeb ,_bb ,_ad ,-3);_bb =!_bb ;};if len (_eeb )>=_ga .Columns {break ;};};if _ga .EncodedByteAlign &&_ce %8!=0{_ce +=8-_ce %8;};if _eeb !=nil {_ef =append (_ef ,_eeb );};if _ga .Rows > 0&&!_ga .EndOfBlock &&len (_ef )>=_ga .Rows {break _fda ;};};};return _ef ,nil ;};func _fgab (_gffa int )([]byte ,int ){var _ae []byte ;for _cgbe :=0;_cgbe < 6;_cgbe ++{_ae ,_gffa =_fecb (_ae ,_gffa ,_ac );};return _ae ,_gffa %8;};func _gg (_agef uint16 ,_feeb int )(code ,bool ){_ ,_egd :=_fabc (_ge ,_agef ,_feeb );if _egd ==nil {return code {},false ;};return *_egd ,true ;};func _gfc (_cg ,_cfe []byte ,_agab int ,_agag bool ,_ecf int )([]byte ,int ,int ,error ){_ccdg :=_agab ;var _ca error ;_cfe ,_agab ,_ca =_bf (_cg ,_cfe ,_agab ,_agag );if _ca !=nil {return _cfe ,_ccdg ,_ecf ,_ca ;};_agag =!_agag ;_cfe ,_agab ,_ca =_bf (_cg ,_cfe ,_agab ,_agag );if _ca !=nil {return _cfe ,_ccdg ,_ecf ,_ca ;};_ecf =len (_cfe );return _cfe ,_agab ,_ecf ,nil ;};func _caed (_deb ,_bfgg int )code {var _bfdd code ;switch _bfgg -_deb {case -1:_bfdd =_fb ;case -2:_bfdd =_aa ;case -3:_bfdd =_ece ;case 0:_bfdd =_af ;case 1:_bfdd =_cd ;case 2:_bfdd =_ba ;case 3:_bfdd =_aaa ;};return _bfdd ;};var (_efa byte =1;_cga byte =0;);func _adf (_fccc ,_afeg []byte ,_defb int )int {_bebb :=_fabb (_afeg ,_defb );if _bebb < len (_afeg )&&(_defb ==-1&&_afeg [_bebb ]==_efa ||_defb >=0&&_defb < len (_fccc )&&_fccc [_defb ]==_afeg [_bebb ]||_defb >=len (_fccc )&&_fccc [_defb -1]!=_afeg [_bebb ]){_bebb =_fabb (_afeg ,_bebb );};return _bebb ;};func _ecfd (_cgf []byte ,_cbb ,_edd ,_fgag int )([]byte ,int ){_gbfc :=_caed (_edd ,_fgag );_cgf ,_cbb =_fecb (_cgf ,_cbb ,_gbfc );return _cgf ,_cbb ;};type code struct{Code uint16 ;BitsWritten int ;};func _gab (_fdd []byte ,_cfef int ,_gge code )([]byte ,int ){_fbde :=true ;var _ddd []byte ;_ddd ,_cfef =_fecb (nil ,_cfef ,_gge );_ebag :=0;var _ggcf int ;for _ebag < len (_fdd ){_ggcf ,_ebag =_acfe (_fdd ,_fbde ,_ebag );_ddd ,_cfef =_bcea (_ddd ,_cfef ,_ggcf ,_fbde );_fbde =!_fbde ;};return _ddd ,_cfef %8;};func _cef (_bbc []byte ,_fe int )(bool ,int ,error ){_acd :=_fe ;var _bgg bool ;_bgg ,_fe =_fcce (_bbc ,_fe );if _bgg {_bgg ,_fe =_fcce (_bbc ,_fe );if _bgg {return true ,_fe ,nil ;}else {return false ,_acd ,_da ;};};return false ,_acd ,nil ;};func _cda (_ed [][]byte ,_fff []byte ,_ccd bool ,_bac ,_dg int )([]byte ,int ){_gfg :=_gegc (_fff ,_ed [len (_ed )-1],_bac ,_ccd );_faf :=_gfg +_dg ;if _bac ==-1{_fff =_bff (_fff ,_ccd ,_faf -_bac -1);}else {_fff =_bff (_fff ,_ccd ,_faf -_bac );};_bac =_faf ;return _fff ,_bac ;};func _ccf (_bce []byte ,_fbdf int )(bool ,int ){return _ffg (_bce ,_fbdf ,_c )};func _fecb (_dge []byte ,_adb int ,_cfgg code )([]byte ,int ){_ege :=0;for _ege < _cfgg .BitsWritten {_efe :=_adb /8;_cea :=_adb %8;if _efe >=len (_dge ){_dge =append (_dge ,0);};_cage :=8-_cea ;_bcf :=_cfgg .BitsWritten -_ege ;if _cage > _bcf {_cage =_bcf ;};if _ege < 8{_dge [_efe ]=_dge [_efe ]|byte (_cfgg .Code >>uint (8+_cea -_ege ))&_bd [8-_cage -_cea ];}else {_dge [_efe ]=_dge [_efe ]|(byte (_cfgg .Code <<uint (_ege -8))&_bd [8-_cage ])>>uint (_cea );};_adb +=_cage ;_ege +=_cage ;};return _dge ,_adb ;};func (_gdb *Encoder )decodeRow1D (_bc []byte ,_gff int )([]byte ,int ){var _dac []byte ;_dgd :=true ;var _baf int ;_baf ,_gff =_dgg (_bc ,_gff ,_dgd );for _baf !=-1{_dac =_bff (_dac ,_dgd ,_baf );if _baf < 64{if len (_dac )>=_gdb .Columns {break ;};_dgd =!_dgd ;};_baf ,_gff =_dgg (_bc ,_gff ,_dgd );};return _dac ,_gff ;};func _afd (_fabd uint16 ,_cfg int )byte {if _cfg < 8{_fabd >>=8;};_cfg %=8;_gbec :=byte (0x01<<(7-uint (_cfg )));return (byte (_fabd )&_gbec )>>(7-uint (_cfg ));};func _fcce (_dcbf []byte ,_ggb int )(bool ,int ){_edf :=_ggb ;var (_eedc uint16 ;_bab int ;);_eedc ,_bab ,_ggb =_cag (_dcbf ,_ggb );if _bab > 4{return false ,_edf ;};_eedc >>=uint (4-_bab );_eedc <<=4;if _eedc !=_ac .Code {return false ,_edf ;}else {return true ,_ggb -4+_bab ;};};var (_da =_a .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_db =_a .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_dbd =_a .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_ff =_a .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_fbg =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_gcc =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _fabb (_fgc []byte ,_beac int )int {if _beac >=len (_fgc ){return _beac ;};if _beac < -1{_beac =-1;};var _aef byte ;if _beac > -1{_aef =_fgc [_beac ];}else {_aef =_efa ;};_egf :=_beac +1;for _egf < len (_fgc ){if _fgc [_egf ]!=_aef {break ;};_egf ++;};return _egf ;};func _dgg (_eff []byte ,_cec int ,_cgb bool )(int ,int ){var (_efc uint16 ;_bag int ;_deg int ;);_deg =_cec ;_efc ,_bag ,_cec =_cag (_eff ,_cec );_fdb ,_ged :=_dccg (_efc ,_bag ,_cgb );if _fdb ==-1{return -1,_deg ;};return _fdb ,_deg +_ged .BitsWritten ;};