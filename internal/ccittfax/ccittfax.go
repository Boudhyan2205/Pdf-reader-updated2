//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_gg "github.com/unidoc/unipdf/v3/common";_b "math";);var (_gb map[int ]code ;_a map[int ]code ;_ec map[int ]code ;_ac map[int ]code ;_d map[int ]code ;_c map[int ]byte ;_ea =code {Code :1<<4,BitsWritten :12};_f =code {Code :3<<3,BitsWritten :13};
_ad =code {Code :2<<3,BitsWritten :13};_ca =code {Code :1<<12,BitsWritten :4};_bd =code {Code :1<<13,BitsWritten :3};_ce =code {Code :1<<15,BitsWritten :1};_de =code {Code :3<<13,BitsWritten :3};_fb =code {Code :3<<10,BitsWritten :6};_gc =code {Code :3<<9,BitsWritten :7};
_fbg =code {Code :2<<13,BitsWritten :3};_ae =code {Code :2<<10,BitsWritten :6};_ed =code {Code :2<<9,BitsWritten :7};);func _abc (_dgdb []byte ,_eac int ,_eec code )(bool ,int ){_gdd :=_eac ;var (_dbgb uint16 ;_fegd int ;);_dbgb ,_fegd ,_eac =_cfd (_dgdb ,_eac );
if _fegd > 3{return false ,_gdd ;};_dbgb >>=uint (3-_fegd );_dbgb <<=3;if _dbgb !=_eec .Code {return false ,_gdd ;};return true ,_eac -3+_fegd ;};func init (){_gb =make (map[int ]code );_gb [0]=code {Code :13<<8|3<<6,BitsWritten :10};_gb [1]=code {Code :2<<(5+8),BitsWritten :3};
_gb [2]=code {Code :3<<(6+8),BitsWritten :2};_gb [3]=code {Code :2<<(6+8),BitsWritten :2};_gb [4]=code {Code :3<<(5+8),BitsWritten :3};_gb [5]=code {Code :3<<(4+8),BitsWritten :4};_gb [6]=code {Code :2<<(4+8),BitsWritten :4};_gb [7]=code {Code :3<<(3+8),BitsWritten :5};
_gb [8]=code {Code :5<<(2+8),BitsWritten :6};_gb [9]=code {Code :4<<(2+8),BitsWritten :6};_gb [10]=code {Code :4<<(1+8),BitsWritten :7};_gb [11]=code {Code :5<<(1+8),BitsWritten :7};_gb [12]=code {Code :7<<(1+8),BitsWritten :7};_gb [13]=code {Code :4<<8,BitsWritten :8};
_gb [14]=code {Code :7<<8,BitsWritten :8};_gb [15]=code {Code :12<<8,BitsWritten :9};_gb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_gb [17]=code {Code :6<<8,BitsWritten :10};_gb [18]=code {Code :2<<8,BitsWritten :10};_gb [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_gb [20]=code {Code :13<<8,BitsWritten :11};_gb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_gb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_gb [23]=code {Code :5<<8,BitsWritten :11};_gb [24]=code {Code :2<<8|7<<5,BitsWritten :11};_gb [25]=code {Code :3<<8,BitsWritten :11};
_gb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_gb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_gb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_gb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_gb [30]=code {Code :6<<8|8<<4,BitsWritten :12};_gb [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_gb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_gb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_gb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_gb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_gb [36]=code {Code :13<<8|4<<4,BitsWritten :12};_gb [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_gb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_gb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_gb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_gb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_gb [42]=code {Code :13<<8|10<<4,BitsWritten :12};_gb [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_gb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_gb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_gb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_gb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_gb [48]=code {Code :6<<8|4<<4,BitsWritten :12};_gb [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_gb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_gb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_gb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_gb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_gb [54]=code {Code :3<<8|8<<4,BitsWritten :12};_gb [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_gb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_gb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_gb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_gb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_gb [60]=code {Code :2<<8|12<<4,BitsWritten :12};_gb [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_gb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_gb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_a =make (map[int ]code );_a [0]=code {Code :53<<8,BitsWritten :8};_a [1]=code {Code :7<<(2+8),BitsWritten :6};_a [2]=code {Code :7<<(4+8),BitsWritten :4};_a [3]=code {Code :8<<(4+8),BitsWritten :4};
_a [4]=code {Code :11<<(4+8),BitsWritten :4};_a [5]=code {Code :12<<(4+8),BitsWritten :4};_a [6]=code {Code :14<<(4+8),BitsWritten :4};_a [7]=code {Code :15<<(4+8),BitsWritten :4};_a [8]=code {Code :19<<(3+8),BitsWritten :5};_a [9]=code {Code :20<<(3+8),BitsWritten :5};
_a [10]=code {Code :7<<(3+8),BitsWritten :5};_a [11]=code {Code :8<<(3+8),BitsWritten :5};_a [12]=code {Code :8<<(2+8),BitsWritten :6};_a [13]=code {Code :3<<(2+8),BitsWritten :6};_a [14]=code {Code :52<<(2+8),BitsWritten :6};_a [15]=code {Code :53<<(2+8),BitsWritten :6};
_a [16]=code {Code :42<<(2+8),BitsWritten :6};_a [17]=code {Code :43<<(2+8),BitsWritten :6};_a [18]=code {Code :39<<(1+8),BitsWritten :7};_a [19]=code {Code :12<<(1+8),BitsWritten :7};_a [20]=code {Code :8<<(1+8),BitsWritten :7};_a [21]=code {Code :23<<(1+8),BitsWritten :7};
_a [22]=code {Code :3<<(1+8),BitsWritten :7};_a [23]=code {Code :4<<(1+8),BitsWritten :7};_a [24]=code {Code :40<<(1+8),BitsWritten :7};_a [25]=code {Code :43<<(1+8),BitsWritten :7};_a [26]=code {Code :19<<(1+8),BitsWritten :7};_a [27]=code {Code :36<<(1+8),BitsWritten :7};
_a [28]=code {Code :24<<(1+8),BitsWritten :7};_a [29]=code {Code :2<<8,BitsWritten :8};_a [30]=code {Code :3<<8,BitsWritten :8};_a [31]=code {Code :26<<8,BitsWritten :8};_a [32]=code {Code :27<<8,BitsWritten :8};_a [33]=code {Code :18<<8,BitsWritten :8};
_a [34]=code {Code :19<<8,BitsWritten :8};_a [35]=code {Code :20<<8,BitsWritten :8};_a [36]=code {Code :21<<8,BitsWritten :8};_a [37]=code {Code :22<<8,BitsWritten :8};_a [38]=code {Code :23<<8,BitsWritten :8};_a [39]=code {Code :40<<8,BitsWritten :8};
_a [40]=code {Code :41<<8,BitsWritten :8};_a [41]=code {Code :42<<8,BitsWritten :8};_a [42]=code {Code :43<<8,BitsWritten :8};_a [43]=code {Code :44<<8,BitsWritten :8};_a [44]=code {Code :45<<8,BitsWritten :8};_a [45]=code {Code :4<<8,BitsWritten :8};_a [46]=code {Code :5<<8,BitsWritten :8};
_a [47]=code {Code :10<<8,BitsWritten :8};_a [48]=code {Code :11<<8,BitsWritten :8};_a [49]=code {Code :82<<8,BitsWritten :8};_a [50]=code {Code :83<<8,BitsWritten :8};_a [51]=code {Code :84<<8,BitsWritten :8};_a [52]=code {Code :85<<8,BitsWritten :8};
_a [53]=code {Code :36<<8,BitsWritten :8};_a [54]=code {Code :37<<8,BitsWritten :8};_a [55]=code {Code :88<<8,BitsWritten :8};_a [56]=code {Code :89<<8,BitsWritten :8};_a [57]=code {Code :90<<8,BitsWritten :8};_a [58]=code {Code :91<<8,BitsWritten :8};
_a [59]=code {Code :74<<8,BitsWritten :8};_a [60]=code {Code :75<<8,BitsWritten :8};_a [61]=code {Code :50<<8,BitsWritten :8};_a [62]=code {Code :51<<8,BitsWritten :8};_a [63]=code {Code :52<<8,BitsWritten :8};_ec =make (map[int ]code );_ec [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_ec [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ec [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ec [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ec [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ec [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ec [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_ec [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ec [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ec [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ec [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ec [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ec [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_ec [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ec [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ec [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ec [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ec [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_ec [1216]=code {Code :119<<3,BitsWritten :13};_ec [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ec [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ec [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ec [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ec [1536]=code {Code :2<<8|26<<3,BitsWritten :13};
_ec [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ec [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ec [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ac =make (map[int ]code );_ac [64]=code {Code :27<<(3+8),BitsWritten :5};_ac [128]=code {Code :18<<(3+8),BitsWritten :5};
_ac [192]=code {Code :23<<(2+8),BitsWritten :6};_ac [256]=code {Code :55<<(1+8),BitsWritten :7};_ac [320]=code {Code :54<<8,BitsWritten :8};_ac [384]=code {Code :55<<8,BitsWritten :8};_ac [448]=code {Code :100<<8,BitsWritten :8};_ac [512]=code {Code :101<<8,BitsWritten :8};
_ac [576]=code {Code :104<<8,BitsWritten :8};_ac [640]=code {Code :103<<8,BitsWritten :8};_ac [704]=code {Code :102<<8,BitsWritten :9};_ac [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ac [832]=code {Code :105<<8,BitsWritten :9};_ac [896]=code {Code :105<<8|1<<7,BitsWritten :9};
_ac [960]=code {Code :106<<8,BitsWritten :9};_ac [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ac [1088]=code {Code :107<<8,BitsWritten :9};_ac [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ac [1216]=code {Code :108<<8,BitsWritten :9};_ac [1280]=code {Code :108<<8|1<<7,BitsWritten :9};
_ac [1344]=code {Code :109<<8,BitsWritten :9};_ac [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ac [1472]=code {Code :76<<8,BitsWritten :9};_ac [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ac [1600]=code {Code :77<<8,BitsWritten :9};_ac [1664]=code {Code :24<<(2+8),BitsWritten :6};
_ac [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_d =make (map[int ]code );_d [1792]=code {Code :1<<8,BitsWritten :11};_d [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_d [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_d [1984]=code {Code :1<<8|2<<4,BitsWritten :12};
_d [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_d [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_d [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_d [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_d [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_d [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_d [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_d [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_d [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_c =make (map[int ]byte );_c [0]=0xFF;_c [1]=0xFE;_c [2]=0xFC;_c [3]=0xF8;_c [4]=0xF0;_c [5]=0xE0;_c [6]=0xC0;
_c [7]=0x80;_c [8]=0x00;};func _fdeb (_eddb [][]byte )[][]byte {_bbd :=make ([]byte ,len (_eddb [0]));for _bdg :=range _bbd {_bbd [_bdg ]=_dbed ;};_eddb =append (_eddb ,[]byte {});for _ebc :=len (_eddb )-1;_ebc > 0;_ebc --{_eddb [_ebc ]=_eddb [_ebc -1];
};_eddb [0]=_bbd ;return _eddb ;};func _geg (_eagb []byte ,_caa int )(code ,int ,bool ){var (_dgdc uint16 ;_dbgc int ;_ffb int ;);_ffb =_caa ;_dgdc ,_dbgc ,_ =_cfd (_eagb ,_caa );_bgbf ,_dfb :=_baff (_dgdc ,_dbgc );if !_dfb {return code {},_ffb ,false ;
};return _bgbf ,_ffb +_bgbf .BitsWritten ,true ;};func init (){for _bc ,_cad :=range _a {_afg (_cb ,_cad ,0,_bc );};for _bf ,_egd :=range _ac {_afg (_cb ,_egd ,0,_bf );};for _bda ,_dc :=range _gb {_afg (_eg ,_dc ,0,_bda );};for _bg ,_gf :=range _ec {_afg (_eg ,_gf ,0,_bg );
};for _df ,_eag :=range _d {_afg (_cb ,_eag ,0,_df );_afg (_eg ,_eag ,0,_df );};_afg (_be ,_ca ,0,0);_afg (_be ,_bd ,0,0);_afg (_be ,_ce ,0,0);_afg (_be ,_de ,0,0);_afg (_be ,_fb ,0,0);_afg (_be ,_gc ,0,0);_afg (_be ,_fbg ,0,0);_afg (_be ,_ae ,0,0);_afg (_be ,_ed ,0,0);
};func _fba (_bgb []byte ,_fdgd int )(bool ,int ,error ){_bfc :=_fdgd ;var _aca =false ;for _da :=0;_da < 6;_da ++{_aca ,_fdgd =_gcf (_bgb ,_fdgd );if !_aca {if _da > 1{return false ,_bfc ,_af ;};_fdgd =_bfc ;break ;};};return _aca ,_fdgd ,nil ;};func _ag (_bfg ,_dcd []byte ,_gcac int ,_cfg bool )([]byte ,int ,error ){_egg :=_gcac ;
var _ecd int ;for _ecd ,_gcac =_afc (_bfg ,_gcac ,_cfg );_ecd !=-1;_ecd ,_gcac =_afc (_bfg ,_gcac ,_cfg ){_dcd =_faac (_dcd ,_cfg ,_ecd );if _ecd < 64{break ;};};if _ecd ==-1{return _dcd ,_egg ,_fe ;};return _dcd ,_gcac ,nil ;};func _cffb (_acb []byte ,_gddab ,_gdc ,_fagd int )([]byte ,int ){_edaa :=_fbe (_gdc ,_fagd );
_acb ,_gddab =_deg (_acb ,_gddab ,_edaa );return _acb ,_gddab ;};func (_eagg *Encoder )encodeG31D (_abcb [][]byte )[]byte {var _cfc []byte ;_ggb :=0;for _eeg :=range _abcb {if _eagg .Rows > 0&&!_eagg .EndOfBlock &&_eeg ==_eagg .Rows {break ;};_cadg ,_egde :=_egf (_abcb [_eeg ],_ggb ,_ea );
_cfc =_eagg .appendEncodedRow (_cfc ,_cadg ,_ggb );if _eagg .EncodedByteAlign {_egde =0;};_ggb =_egde ;};if _eagg .EndOfBlock {_dfc ,_ :=_bad (_ggb );_cfc =_eagg .appendEncodedRow (_cfc ,_dfc ,_ggb );};return _cfc ;};func (_cbb *Encoder )Decode (encoded []byte )([][]byte ,error ){if _cbb .BlackIs1 {_dbed =0;
_gac =1;}else {_dbed =1;_gac =0;};if _cbb .K ==0{return _cbb .decodeG31D (encoded );};if _cbb .K > 0{return _cbb .decodeG32D (encoded );};if _cbb .K < 4{return _cbb .decodeG4 (encoded );};return nil ,nil ;};func _baff (_bgd uint16 ,_ceff int )(code ,bool ){_ ,_bdaf :=_abcd (_be ,_bgd ,_ceff );
if _bdaf ==nil {return code {},false ;};return *_bdaf ,true ;};func _faac (_cbf []byte ,_dcb bool ,_bcdg int )[]byte {if _bcdg < 0{return _cbf ;};_cdfc :=make ([]byte ,_bcdg );if _dcb {for _fec :=0;_fec < len (_cdfc );_fec ++{_cdfc [_fec ]=_dbed ;};}else {for _cfb :=0;
_cfb < len (_cdfc );_cfb ++{_cdfc [_cfb ]=_gac ;};};_cbf =append (_cbf ,_cdfc ...);return _cbf ;};var (_cb =&decodingTreeNode {Val :255};_eg =&decodingTreeNode {Val :255};_be =&decodingTreeNode {Val :255};);func _egf (_add []byte ,_dcc int ,_dcac code )([]byte ,int ){_geda :=true ;
var _dbab []byte ;_dbab ,_dcc =_deg (nil ,_dcc ,_dcac );_ggbc :=0;var _edc int ;for _ggbc < len (_add ){_edc ,_ggbc =_aad (_add ,_geda ,_ggbc );_dbab ,_dcc =_cab (_dbab ,_dcc ,_edc ,_geda );_geda =!_geda ;};return _dbab ,_dcc %8;};func _eggf (_ff uint16 ,_abdd int )byte {if _abdd < 8{_ff >>=8;
};_abdd %=8;_fde :=byte (0x01<<(7-uint (_abdd )));return (byte (_ff )&_fde )>>(7-uint (_abdd ));};func _bcb (_cdf [][]byte ,_gfg []byte ,_fce bool ,_defe int )([]byte ,int ){_abe :=_ecda (_gfg ,_cdf [len (_cdf )-1],_defe ,_fce );_baf :=_fgd (_cdf [len (_cdf )-1],_abe );
if _defe ==-1{_gfg =_faac (_gfg ,_fce ,_baf -_defe -1);}else {_gfg =_faac (_gfg ,_fce ,_baf -_defe );};_defe =_baf ;return _gfg ,_defe ;};func _abd (_fcf ,_abec []byte ,_fgg int ,_cacd bool ,_fggc int )([]byte ,int ,int ,error ){_cf :=_fgg ;var _dgd error ;
_abec ,_fgg ,_dgd =_ag (_fcf ,_abec ,_fgg ,_cacd );if _dgd !=nil {return _abec ,_cf ,_fggc ,_dgd ;};_cacd =!_cacd ;_abec ,_fgg ,_dgd =_ag (_fcf ,_abec ,_fgg ,_cacd );if _dgd !=nil {return _abec ,_cf ,_fggc ,_dgd ;};_fggc =len (_abec );return _abec ,_fgg ,_fggc ,nil ;
};func (_cac *Encoder )decodeG32D (_ece []byte )([][]byte ,error ){var (_cbe [][]byte ;_ace int ;_eca error ;);_fd :for (_ace /8)< len (_ece ){var _def bool ;_def ,_ace ,_eca =_fba (_ece ,_ace );if _eca !=nil {return nil ,_eca ;};if _def {break ;};_def ,_ace =_gcf (_ece ,_ace );
if !_def {if _cac .EndOfLine {return nil ,_gd ;};};var _acd []byte ;_acd ,_ace =_cac .decodeRow1D (_ece ,_ace );if _cac .EncodedByteAlign &&_ace %8!=0{_ace +=8-_ace %8;};if _acd !=nil {_cbe =append (_cbe ,_acd );};if _cac .Rows > 0&&!_cac .EndOfBlock &&len (_cbe )>=_cac .Rows {break ;
};for _ga :=1;_ga < _cac .K &&(_ace /8)< len (_ece );_ga ++{_def ,_ace =_ccc (_ece ,_ace );if !_def {_def ,_ace ,_eca =_fba (_ece ,_ace );if _eca !=nil {return nil ,_eca ;};if _def {break _fd ;}else {if _cac .EndOfLine {return nil ,_gd ;};};};var (_ba code ;
_bee bool ;);_aee :=true ;var _eda []byte ;_fc :=-1;for _ba ,_ace ,_bee =_geg (_ece ,_ace );_bee ;_ba ,_ace ,_bee =_geg (_ece ,_ace ){switch _ba {case _ca :_eda ,_fc =_bcb (_cbe ,_eda ,_aee ,_fc );case _bd :_eda ,_ace ,_fc ,_eca =_abd (_ece ,_eda ,_ace ,_aee ,_fc );
if _eca !=nil {return nil ,_eca ;};case _ce :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,0);_aee =!_aee ;case _de :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,1);_aee =!_aee ;case _fb :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,2);_aee =!_aee ;case _gc :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,3);
_aee =!_aee ;case _fbg :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,-1);_aee =!_aee ;case _ae :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,-2);_aee =!_aee ;case _ed :_eda ,_fc =_bb (_cbe ,_eda ,_aee ,_fc ,-3);_aee =!_aee ;};if len (_eda )>=_cac .Columns {break ;
};};if _cac .EncodedByteAlign &&_ace %8!=0{_ace +=8-_ace %8;};if _eda !=nil {_cbe =append (_cbe ,_eda );};if _cac .Rows > 0&&!_cac .EndOfBlock &&len (_cbe )>=_cac .Rows {break _fd ;};};};return _cbe ,nil ;};type decodingTreeNode struct{Val byte ;RunLen *int ;
Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _abcd (_adg *decodingTreeNode ,_feea uint16 ,_ecbc int )(*int ,*code ){if _adg ==nil {return nil ,nil ;};if _ecbc ==16{return _adg .RunLen ,_adg .Code ;};_gagd :=_eggf (_feea ,_ecbc );
_ecbc ++;var _agg *int ;var _ffbg *code ;if _gagd ==1{_agg ,_ffbg =_abcd (_adg .Right ,_feea ,_ecbc );}else {_agg ,_ffbg =_abcd (_adg .Left ,_feea ,_ecbc );};if _agg ==nil {_agg =_adg .RunLen ;_ffbg =_adg .Code ;};return _agg ,_ffbg ;};func (_cd *Encoder )decodeG4 (_dca []byte )([][]byte ,error ){_ef :=make ([]byte ,_cd .Columns );
for _gga :=range _ef {_ef [_gga ]=_dbed ;};_fg :=make ([][]byte ,1);_fg [0]=_ef ;var (_bcd bool ;_fdf error ;_aced int ;);for (_aced /8)< len (_dca ){_bcd ,_aced ,_fdf =_dbg (_dca ,_aced );if _fdf !=nil {return nil ,_fdf ;};if _bcd {break ;};var (_gaf code ;
_ge bool ;);_feg :=true ;var _edd []byte ;_ab :=-1;_db :=true ;for _ab < _cd .Columns {_gaf ,_aced ,_ge =_geg (_dca ,_aced );if !_ge {_gg .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_gdg );
_db =false ;break ;};switch _gaf {case _ca :_edd ,_ab =_bcb (_fg ,_edd ,_feg ,_ab );case _bd :_edd ,_aced ,_ab ,_fdf =_abd (_dca ,_edd ,_aced ,_feg ,_ab );if _fdf !=nil {_gg .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_fdf );
_db =false ;break ;};case _ce :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,0);_feg =!_feg ;case _de :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,1);_feg =!_feg ;case _fb :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,2);_feg =!_feg ;case _gc :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,3);
_feg =!_feg ;case _fbg :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,-1);_feg =!_feg ;case _ae :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,-2);_feg =!_feg ;case _ed :_edd ,_ab =_bb (_fg ,_edd ,_feg ,_ab ,-3);_feg =!_feg ;};if len (_edd )>=_cd .Columns {break ;};};
if !_db {_aced +=8-_aced %8;continue ;};if _cd .EncodedByteAlign &&_aced %8!=0{_aced +=8-_aced %8;};_fg =append (_fg ,_edd );if _cd .Rows > 0&&!_cd .EndOfBlock &&len (_fg )>=(_cd .Rows +1){break ;};};_fg =_fg [1:];return _fg ,nil ;};func _fgd (_fegf []byte ,_gcacc int )int {if _gcacc >=len (_fegf ){return _gcacc ;
};if _gcacc < -1{_gcacc =-1;};var _ada byte ;if _gcacc > -1{_ada =_fegf [_gcacc ];}else {_ada =_dbed ;};_abdc :=_gcacc +1;for _abdc < len (_fegf ){if _fegf [_abdc ]!=_ada {break ;};_abdc ++;};return _abdc ;};func _dbg (_eddd []byte ,_gbe int )(bool ,int ,error ){_cc :=_gbe ;
var _afa bool ;_afa ,_gbe =_eb (_eddd ,_gbe );if _afa {_afa ,_gbe =_eb (_eddd ,_gbe );if _afa {return true ,_gbe ,nil ;};return false ,_cc ,_eab ;};return false ,_cc ,nil ;};func _gfe (_badd ,_eeef []byte ,_bbf int )int {_gafg :=_fgd (_eeef ,_bbf );if _gafg < len (_eeef )&&(_bbf ==-1&&_eeef [_gafg ]==_dbed ||_bbf >=0&&_bbf < len (_badd )&&_badd [_bbf ]==_eeef [_gafg ]||_bbf >=len (_badd )&&_badd [_bbf -1]!=_eeef [_gafg ]){_gafg =_fgd (_eeef ,_gafg );
};return _gafg ;};func _cab (_gbb []byte ,_dbea int ,_bce int ,_ffe bool )([]byte ,int ){var (_bgg code ;_fff bool ;);for !_fff {_bgg ,_bce ,_fff =_becd (_bce ,_ffe );_gbb ,_dbea =_deg (_gbb ,_dbea ,_bgg );};return _gbb ,_dbea ;};func (_bbg *Encoder )appendEncodedRow (_fceg ,_gaba []byte ,_aeaa int )[]byte {if len (_fceg )> 0&&_aeaa !=0&&!_bbg .EncodedByteAlign {_fceg [len (_fceg )-1]=_fceg [len (_fceg )-1]|_gaba [0];
_fceg =append (_fceg ,_gaba [1:]...);}else {_fceg =append (_fceg ,_gaba ...);};return _fceg ;};func _cfd (_gfd []byte ,_bea int )(uint16 ,int ,int ){_ecae :=_bea ;_fcc :=_bea /8;_bea %=8;if _fcc >=len (_gfd ){return 0,16,_ecae ;};_ecg :=byte (0xFF>>uint (_bea ));
_bga :=uint16 ((_gfd [_fcc ]&_ecg )<<uint (_bea ))<<8;_fae :=8-_bea ;_fcc ++;_bea =0;if _fcc >=len (_gfd ){return _bga >>(16-uint (_fae )),16-_fae ,_ecae +_fae ;};_bga |=uint16 (_gfd [_fcc ])<<(8-uint (_fae ));_fae +=8;_fcc ++;_bea =0;if _fcc >=len (_gfd ){return _bga >>(16-uint (_fae )),16-_fae ,_ecae +_fae ;
};if _fae ==16{return _bga ,0,_ecae +_fae ;};_faa :=16-_fae ;_bga |=uint16 (_gfd [_fcc ]>>(8-uint (_faa )));return _bga ,0,_ecae +16;};func (_fda *Encoder )encodeG4 (_cae [][]byte )[]byte {_fag :=make ([][]byte ,len (_cae ));copy (_fag ,_cae );_fag =_fdeb (_fag );
var _bdc []byte ;var _dba int ;for _bgbb :=1;_bgbb < len (_fag );_bgbb ++{if _fda .Rows > 0&&!_fda .EndOfBlock &&_bgbb ==(_fda .Rows +1){break ;};var _ebe []byte ;var _dfg ,_faaf ,_fcd int ;_ecbg :=_dba ;_ged :=-1;for _ged < len (_fag [_bgbb ]){_dfg =_fgd (_fag [_bgbb ],_ged );
_faaf =_gfe (_fag [_bgbb ],_fag [_bgbb -1],_ged );_fcd =_fgd (_fag [_bgbb -1],_faaf );if _fcd < _dfg {_ebe ,_ecbg =_deg (_ebe ,_ecbg ,_ca );_ged =_fcd ;}else {if _b .Abs (float64 (_faaf -_dfg ))> 3{_ebe ,_ecbg ,_ged =_ggd (_fag [_bgbb ],_ebe ,_ecbg ,_ged ,_dfg );
}else {_ebe ,_ecbg =_cffb (_ebe ,_ecbg ,_dfg ,_faaf );_ged =_dfg ;};};};_bdc =_fda .appendEncodedRow (_bdc ,_ebe ,_dba );if _fda .EncodedByteAlign {_ecbg =0;};_dba =_ecbg %8;};if _fda .EndOfBlock {_ecbcc ,_ :=_bdf (_dba );_bdc =_fda .appendEncodedRow (_bdc ,_ecbcc ,_dba );
};return _bdc ;};func (_cba *Encoder )encodeG32D (_bgdd [][]byte )[]byte {var _beae []byte ;var _ffc int ;for _efb :=0;_efb < len (_bgdd );_efb +=_cba .K {if _cba .Rows > 0&&!_cba .EndOfBlock &&_efb ==_cba .Rows {break ;};_ccg ,_gcg :=_egf (_bgdd [_efb ],_ffc ,_f );
_beae =_cba .appendEncodedRow (_beae ,_ccg ,_ffc );if _cba .EncodedByteAlign {_gcg =0;};_ffc =_gcg ;for _egdg :=_efb +1;_egdg < (_efb +_cba .K )&&_egdg < len (_bgdd );_egdg ++{if _cba .Rows > 0&&!_cba .EndOfBlock &&_egdg ==_cba .Rows {break ;};_ddf ,_bgc :=_deg (nil ,_ffc ,_ad );
var _bec ,_fga ,_eff int ;_aea :=-1;for _aea < len (_bgdd [_egdg ]){_bec =_fgd (_bgdd [_egdg ],_aea );_fga =_gfe (_bgdd [_egdg ],_bgdd [_egdg -1],_aea );_eff =_fgd (_bgdd [_egdg -1],_fga );if _eff < _bec {_ddf ,_bgc =_fggg (_ddf ,_bgc );_aea =_eff ;}else {if _b .Abs (float64 (_fga -_bec ))> 3{_ddf ,_bgc ,_aea =_ggd (_bgdd [_egdg ],_ddf ,_bgc ,_aea ,_bec );
}else {_ddf ,_bgc =_cffb (_ddf ,_bgc ,_bec ,_fga );_aea =_bec ;};};};_beae =_cba .appendEncodedRow (_beae ,_ddf ,_ffc );if _cba .EncodedByteAlign {_bgc =0;};_ffc =_bgc %8;};};if _cba .EndOfBlock {_dcg ,_ :=_cdd (_ffc );_beae =_cba .appendEncodedRow (_beae ,_dcg ,_ffc );
};return _beae ;};func (_adf *Encoder )Encode (pixels [][]byte )[]byte {if _adf .BlackIs1 {_dbed =0;_gac =1;}else {_dbed =1;_gac =0;};if _adf .K ==0{return _adf .encodeG31D (pixels );};if _adf .K > 0{return _adf .encodeG32D (pixels );};if _adf .K < 0{return _adf .encodeG4 (pixels );
};return nil ;};func _becd (_eee int ,_ceb bool )(code ,int ,bool ){if _eee < 64{if _ceb {return _a [_eee ],0,true ;};return _gb [_eee ],0,true ;};_gcfa :=_eee /64;if _gcfa > 40{return _d [2560],_eee -2560,false ;};if _gcfa > 27{return _d [_gcfa *64],_eee -_gcfa *64,false ;
};if _ceb {return _ac [_gcfa *64],_eee -_gcfa *64,false ;};return _ec [_gcfa *64],_eee -_gcfa *64,false ;};func _fggg (_acc []byte ,_afge int )([]byte ,int ){return _deg (_acc ,_afge ,_ca )};func _gcf (_afb []byte ,_bbc int )(bool ,int ){return _abc (_afb ,_bbc ,_f )};
func _bb (_gag [][]byte ,_ee []byte ,_dg bool ,_fdg ,_ddc int )([]byte ,int ){_eabe :=_ecda (_ee ,_gag [len (_gag )-1],_fdg ,_dg );_fbc :=_eabe +_ddc ;if _fdg ==-1{_ee =_faac (_ee ,_dg ,_fbc -_fdg -1);}else {_ee =_faac (_ee ,_dg ,_fbc -_fdg );};_fdg =_fbc ;
return _ee ,_fdg ;};func _bad (_ffdg int )([]byte ,int ){var _fdfc []byte ;for _abee :=0;_abee < 6;_abee ++{_fdfc ,_ffdg =_deg (_fdfc ,_ffdg ,_ea );};return _fdfc ,_ffdg %8;};func _ggd (_aed ,_dgg []byte ,_bdad ,_aeac ,_fac int )([]byte ,int ,int ){_afgf :=_fgd (_aed ,_fac );
_abb :=_aeac >=0&&_aed [_aeac ]==_dbed ||_aeac ==-1;_dgg ,_bdad =_deg (_dgg ,_bdad ,_bd );var _bcf int ;if _aeac > -1{_bcf =_fac -_aeac ;}else {_bcf =_fac -_aeac -1;};_dgg ,_bdad =_cab (_dgg ,_bdad ,_bcf ,_abb );_abb =!_abb ;_gabd :=_afgf -_fac ;_dgg ,_bdad =_cab (_dgg ,_bdad ,_gabd ,_abb );
_aeac =_afgf ;return _dgg ,_bdad ,_aeac ;};func _ecda (_eaea ,_ffbd []byte ,_bgf int ,_abda bool )int {_gaffc :=_fgd (_ffbd ,_bgf );if _gaffc < len (_ffbd )&&(_bgf ==-1&&_ffbd [_gaffc ]==_dbed ||_bgf >=0&&_bgf < len (_eaea )&&_eaea [_bgf ]==_ffbd [_gaffc ]||_bgf >=len (_eaea )&&_abda &&_ffbd [_gaffc ]==_dbed ||_bgf >=len (_eaea )&&!_abda &&_ffbd [_gaffc ]==_gac ){_gaffc =_fgd (_ffbd ,_gaffc );
};return _gaffc ;};func _aad (_egb []byte ,_gfa bool ,_bde int )(int ,int ){_gbgg :=0;for _bde < len (_egb ){if _gfa {if _egb [_bde ]!=_dbed {break ;};}else {if _egb [_bde ]!=_gac {break ;};};_gbgg ++;_bde ++;};return _gbgg ,_bde ;};func _afc (_dcad []byte ,_gbg int ,_bac bool )(int ,int ){var (_eae uint16 ;
_bfb int ;_fee int ;);_fee =_gbg ;_eae ,_bfb ,_ =_cfd (_dcad ,_gbg );_gab ,_aa :=_gaff (_eae ,_bfb ,_bac );if _gab ==-1{return -1,_fee ;};return _gab ,_fee +_aa .BitsWritten ;};func (_ded *Encoder )decodeG31D (_cg []byte )([][]byte ,error ){var _cbc [][]byte ;
var _fa int ;for (_fa /8)< len (_cg ){var _afd bool ;_afd ,_fa =_eb (_cg ,_fa );if !_afd {if _ded .EndOfLine {return nil ,_gd ;};}else {for _gcc :=0;_gcc < 5;_gcc ++{_afd ,_fa =_eb (_cg ,_fa );if !_afd {if _gcc ==0{break ;};return nil ,_cef ;};};if _afd {break ;
};};var _gca []byte ;_gca ,_fa =_ded .decodeRow1D (_cg ,_fa );if _ded .EncodedByteAlign &&_fa %8!=0{_fa +=8-_fa %8;};_cbc =append (_cbc ,_gca );if _ded .Rows > 0&&!_ded .EndOfBlock &&len (_cbc )>=_ded .Rows {break ;};};return _cbc ,nil ;};type Encoder struct{K int ;
EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};type code struct{Code uint16 ;BitsWritten int ;};func (_cff *Encoder )decodeRow1D (_afdg []byte ,_feb int )([]byte ,int ){var _gbd []byte ;
_efd :=true ;var _caf int ;_caf ,_feb =_afc (_afdg ,_feb ,_efd );for _caf !=-1{_gbd =_faac (_gbd ,_efd ,_caf );if _caf < 64{if len (_gbd )>=_cff .Columns {break ;};_efd =!_efd ;};_caf ,_feb =_afc (_afdg ,_feb ,_efd );};return _gbd ,_feb ;};func _cdd (_cbcf int )([]byte ,int ){var _ccb []byte ;
for _ecbcg :=0;_ecbcg < 6;_ecbcg ++{_ccb ,_cbcf =_deg (_ccb ,_cbcf ,_f );};return _ccb ,_cbcf %8;};func _fbe (_dbd ,_gedc int )code {var _agga code ;switch _gedc -_dbd {case -1:_agga =_de ;case -2:_agga =_fb ;case -3:_agga =_gc ;case 0:_agga =_ce ;case 1:_agga =_fbg ;
case 2:_agga =_ae ;case 3:_agga =_ed ;};return _agga ;};func _gaff (_beb uint16 ,_dad int ,_geb bool )(int ,code ){var _efc *int ;var _ffd *code ;if _geb {_efc ,_ffd =_abcd (_cb ,_beb ,_dad );}else {_efc ,_ffd =_abcd (_eg ,_beb ,_dad );};if _efc ==nil {return -1,code {};
};return *_efc ,*_ffd ;};func _ccc (_ecb []byte ,_gaffe int )(bool ,int ){return _abc (_ecb ,_gaffe ,_ad )};var (_eab =_e .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_af =_e .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_fe =_e .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_gd =_e .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_cef =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_gdg =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _afg (_faea *decodingTreeNode ,_efa code ,_gge int ,_bbcg int ){_gffb :=_eggf (_efa .Code ,_gge );
_gge ++;if _gffb ==1{if _faea .Right ==nil {_faea .Right =&decodingTreeNode {Val :_gffb };};if _gge ==_efa .BitsWritten {_faea .Right .RunLen =&_bbcg ;_faea .Right .Code =&_efa ;}else {_afg (_faea .Right ,_efa ,_gge ,_bbcg );};}else {if _faea .Left ==nil {_faea .Left =&decodingTreeNode {Val :_gffb };
};if _gge ==_efa .BitsWritten {_faea .Left .RunLen =&_bbcg ;_faea .Left .Code =&_efa ;}else {_afg (_faea .Left ,_efa ,_gge ,_bbcg );};};};var (_dbed byte =1;_gac byte =0;);func _deg (_ddd []byte ,_fgc int ,_caaa code )([]byte ,int ){_beec :=0;for _beec < _caaa .BitsWritten {_eaa :=_fgc /8;
_dcda :=_fgc %8;if _eaa >=len (_ddd ){_ddd =append (_ddd ,0);};_ffbe :=8-_dcda ;_bdce :=_caaa .BitsWritten -_beec ;if _ffbe > _bdce {_ffbe =_bdce ;};if _beec < 8{_ddd [_eaa ]=_ddd [_eaa ]|byte (_caaa .Code >>uint (8+_dcda -_beec ))&_c [8-_ffbe -_dcda ];
}else {_ddd [_eaa ]=_ddd [_eaa ]|(byte (_caaa .Code <<uint (_beec -8))&_c [8-_ffbe ])>>uint (_dcda );};_fgc +=_ffbe ;_beec +=_ffbe ;};return _ddd ,_fgc ;};func _eb (_dbef []byte ,_ecf int )(bool ,int ){_fdd :=_ecf ;var (_gff uint16 ;_febf int ;);_gff ,_febf ,_ecf =_cfd (_dbef ,_ecf );
if _febf > 4{return false ,_fdd ;};_gff >>=uint (4-_febf );_gff <<=4;if _gff !=_ea .Code {return false ,_fdd ;};return true ,_ecf -4+_febf ;};func _bdf (_gef int )([]byte ,int ){var _gdda []byte ;for _gba :=0;_gba < 2;_gba ++{_gdda ,_gef =_deg (_gdda ,_gef ,_ea );
};return _gdda ,_gef %8;};