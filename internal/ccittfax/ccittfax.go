//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_cb "io";_g "math";);func _cbac (_adad int )([]byte ,int ){var _ccfe []byte ;for _ebc :=0;_ebc < 6;_ebc ++{_ccfe ,_adad =_dgda (_ccfe ,_adad ,_ec );};return _ccfe ,_adad %8;
};func init (){_dg =&treeNode {_dag :true ,_eec :_ef };_b =&treeNode {_eec :_cbc ,_cff :_dg };_b ._fcg =_b ;_f =&tree {_aee :&treeNode {}};if _ff :=_f .fillWithNode (12,0,_b );_ff !=nil {panic (_ff .Error ());};if _fa :=_f .fillWithNode (12,1,_dg );_fa !=nil {panic (_fa .Error ());
};_ce =&tree {_aee :&treeNode {}};for _cef :=0;_cef < len (_ae );_cef ++{for _da :=0;_da < len (_ae [_cef ]);_da ++{if _dgg :=_ce .fill (_cef +2,int (_ae [_cef ][_da ]),int (_afe [_cef ][_da ]));_dgg !=nil {panic (_dgg .Error ());};};};if _ca :=_ce .fillWithNode (12,0,_b );
_ca !=nil {panic (_ca .Error ());};if _ffd :=_ce .fillWithNode (12,1,_dg );_ffd !=nil {panic (_ffd .Error ());};_de =&tree {_aee :&treeNode {}};for _cec :=0;_cec < len (_afa );_cec ++{for _cf :=0;_cf < len (_afa [_cec ]);_cf ++{if _gg :=_de .fill (_cec +4,int (_afa [_cec ][_cf ]),int (_eg [_cec ][_cf ]));
_gg !=nil {panic (_gg .Error ());};};};if _af :=_de .fillWithNode (12,0,_b );_af !=nil {panic (_af .Error ());};if _dba :=_de .fillWithNode (12,1,_dg );_dba !=nil {panic (_dba .Error ());};_e =&tree {_aee :&treeNode {}};if _ac :=_e .fill (4,1,_ad );_ac !=nil {panic (_ac .Error ());
};if _ggd :=_e .fill (3,1,_db );_ggd !=nil {panic (_ggd .Error ());};if _fe :=_e .fill (1,1,0);_fe !=nil {panic (_fe .Error ());};if _gc :=_e .fill (3,3,1);_gc !=nil {panic (_gc .Error ());};if _ceg :=_e .fill (6,3,2);_ceg !=nil {panic (_ceg .Error ());
};if _gce :=_e .fill (7,3,3);_gce !=nil {panic (_gce .Error ());};if _cae :=_e .fill (3,2,-1);_cae !=nil {panic (_cae .Error ());};if _def :=_e .fill (6,2,-2);_def !=nil {panic (_def .Error ());};if _fd :=_e .fill (7,2,-3);_fd !=nil {panic (_fd .Error ());
};};func (_ecg *Encoder )encodeG32D (_ebfa [][]byte )[]byte {var _ggcg []byte ;var _bac int ;for _eca :=0;_eca < len (_ebfa );_eca +=_ecg .K {if _ecg .Rows > 0&&!_ecg .EndOfBlock &&_eca ==_ecg .Rows {break ;};_fbg ,_edg :=_ede (_ebfa [_eca ],_bac ,_fb );
_ggcg =_ecg .appendEncodedRow (_ggcg ,_fbg ,_bac );if _ecg .EncodedByteAlign {_edg =0;};_bac =_edg ;for _ccb :=_eca +1;_ccb < (_eca +_ecg .K )&&_ccb < len (_ebfa );_ccb ++{if _ecg .Rows > 0&&!_ecg .EndOfBlock &&_ccb ==_ecg .Rows {break ;};_efa ,_fg :=_dgda (nil ,_bac ,_ee );
var _bcdc ,_aace ,_ecbb int ;_eda :=-1;for _eda < len (_ebfa [_ccb ]){_bcdc =_fgc (_ebfa [_ccb ],_eda );_aace =_fecg (_ebfa [_ccb ],_ebfa [_ccb -1],_eda );_ecbb =_fgc (_ebfa [_ccb -1],_aace );if _ecbb < _bcdc {_efa ,_fg =_bedf (_efa ,_fg );_eda =_ecbb ;
}else {if _g .Abs (float64 (_aace -_bcdc ))> 3{_efa ,_fg ,_eda =_dfe (_ebfa [_ccb ],_efa ,_fg ,_eda ,_bcdc );}else {_efa ,_fg =_geab (_efa ,_fg ,_bcdc ,_aace );_eda =_bcdc ;};};};_ggcg =_ecg .appendEncodedRow (_ggcg ,_efa ,_bac );if _ecg .EncodedByteAlign {_fg =0;
};_bac =_fg %8;};};if _ecg .EndOfBlock {_afb ,_ :=_deb (_bac );_ggcg =_ecg .appendEncodedRow (_ggcg ,_afb ,_bac );};return _ggcg ;};func _fdece (_gcde []byte ,_bcdg bool ,_ebd int )(int ,int ){_ccd :=0;for _ebd < len (_gcde ){if _bcdg {if _gcde [_ebd ]!=_ffe {break ;
};}else {if _gcde [_ebd ]!=_aea {break ;};};_ccd ++;_ebd ++;};return _ccd ,_ebd ;};func _deb (_abgd int )([]byte ,int ){var _ecd []byte ;for _fcb :=0;_fcb < 6;_fcb ++{_ecd ,_abgd =_dgda (_ecd ,_abgd ,_fb );};return _ecd ,_abgd %8;};func (_abc *Decoder )Read (in []byte )(int ,error ){if _abc ._fab !=nil {return 0,_abc ._fab ;
};_ada :=len (in );var (_bed int ;_aeb int ;);for _ada !=0{if _abc ._bb >=_abc ._fc {if _fae :=_abc .fetch ();_fae !=nil {_abc ._fab =_fae ;return 0,_fae ;};};if _abc ._fc ==-1{return _bed ,_cb .EOF ;};switch {case _ada <=_abc ._fc -_abc ._bb :_adf :=_abc ._dbc [_abc ._bb :_abc ._bb +_ada ];
for _ ,_ed :=range _adf {if !_abc ._gcb {_ed =^_ed ;};in [_aeb ]=_ed ;_aeb ++;};_bed +=len (_adf );_abc ._bb +=len (_adf );return _bed ,nil ;default:_dgde :=_abc ._dbc [_abc ._bb :];for _ ,_bgc :=range _dgde {if !_abc ._gcb {_bgc =^_bgc ;};in [_aeb ]=_bgc ;
_aeb ++;};_bed +=len (_dgde );_abc ._bb +=len (_dgde );_ada -=len (_dgde );};};return _bed ,nil ;};func (_cbd tiffType )String ()string {switch _cbd {case _daf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _dd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _dbab :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};var _afa =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func init (){_dgd =make (map[int ]code );_dgd [0]=code {Code :13<<8|3<<6,BitsWritten :10};_dgd [1]=code {Code :2<<(5+8),BitsWritten :3};_dgd [2]=code {Code :3<<(6+8),BitsWritten :2};_dgd [3]=code {Code :2<<(6+8),BitsWritten :2};_dgd [4]=code {Code :3<<(5+8),BitsWritten :3};
_dgd [5]=code {Code :3<<(4+8),BitsWritten :4};_dgd [6]=code {Code :2<<(4+8),BitsWritten :4};_dgd [7]=code {Code :3<<(3+8),BitsWritten :5};_dgd [8]=code {Code :5<<(2+8),BitsWritten :6};_dgd [9]=code {Code :4<<(2+8),BitsWritten :6};_dgd [10]=code {Code :4<<(1+8),BitsWritten :7};
_dgd [11]=code {Code :5<<(1+8),BitsWritten :7};_dgd [12]=code {Code :7<<(1+8),BitsWritten :7};_dgd [13]=code {Code :4<<8,BitsWritten :8};_dgd [14]=code {Code :7<<8,BitsWritten :8};_dgd [15]=code {Code :12<<8,BitsWritten :9};_dgd [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_dgd [17]=code {Code :6<<8,BitsWritten :10};_dgd [18]=code {Code :2<<8,BitsWritten :10};_dgd [19]=code {Code :12<<8|7<<5,BitsWritten :11};_dgd [20]=code {Code :13<<8,BitsWritten :11};_dgd [21]=code {Code :13<<8|4<<5,BitsWritten :11};_dgd [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_dgd [23]=code {Code :5<<8,BitsWritten :11};_dgd [24]=code {Code :2<<8|7<<5,BitsWritten :11};_dgd [25]=code {Code :3<<8,BitsWritten :11};_dgd [26]=code {Code :12<<8|10<<4,BitsWritten :12};_dgd [27]=code {Code :12<<8|11<<4,BitsWritten :12};_dgd [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_dgd [29]=code {Code :12<<8|13<<4,BitsWritten :12};_dgd [30]=code {Code :6<<8|8<<4,BitsWritten :12};_dgd [31]=code {Code :6<<8|9<<4,BitsWritten :12};_dgd [32]=code {Code :6<<8|10<<4,BitsWritten :12};_dgd [33]=code {Code :6<<8|11<<4,BitsWritten :12};_dgd [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_dgd [35]=code {Code :13<<8|3<<4,BitsWritten :12};_dgd [36]=code {Code :13<<8|4<<4,BitsWritten :12};_dgd [37]=code {Code :13<<8|5<<4,BitsWritten :12};_dgd [38]=code {Code :13<<8|6<<4,BitsWritten :12};_dgd [39]=code {Code :13<<8|7<<4,BitsWritten :12};_dgd [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_dgd [41]=code {Code :6<<8|13<<4,BitsWritten :12};_dgd [42]=code {Code :13<<8|10<<4,BitsWritten :12};_dgd [43]=code {Code :13<<8|11<<4,BitsWritten :12};_dgd [44]=code {Code :5<<8|4<<4,BitsWritten :12};_dgd [45]=code {Code :5<<8|5<<4,BitsWritten :12};_dgd [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_dgd [47]=code {Code :5<<8|7<<4,BitsWritten :12};_dgd [48]=code {Code :6<<8|4<<4,BitsWritten :12};_dgd [49]=code {Code :6<<8|5<<4,BitsWritten :12};_dgd [50]=code {Code :5<<8|2<<4,BitsWritten :12};_dgd [51]=code {Code :5<<8|3<<4,BitsWritten :12};_dgd [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_dgd [53]=code {Code :3<<8|7<<4,BitsWritten :12};_dgd [54]=code {Code :3<<8|8<<4,BitsWritten :12};_dgd [55]=code {Code :2<<8|7<<4,BitsWritten :12};_dgd [56]=code {Code :2<<8|8<<4,BitsWritten :12};_dgd [57]=code {Code :5<<8|8<<4,BitsWritten :12};_dgd [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_dgd [59]=code {Code :2<<8|11<<4,BitsWritten :12};_dgd [60]=code {Code :2<<8|12<<4,BitsWritten :12};_dgd [61]=code {Code :5<<8|10<<4,BitsWritten :12};_dgd [62]=code {Code :6<<8|6<<4,BitsWritten :12};_dgd [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ggc =make (map[int ]code );
_ggc [0]=code {Code :53<<8,BitsWritten :8};_ggc [1]=code {Code :7<<(2+8),BitsWritten :6};_ggc [2]=code {Code :7<<(4+8),BitsWritten :4};_ggc [3]=code {Code :8<<(4+8),BitsWritten :4};_ggc [4]=code {Code :11<<(4+8),BitsWritten :4};_ggc [5]=code {Code :12<<(4+8),BitsWritten :4};
_ggc [6]=code {Code :14<<(4+8),BitsWritten :4};_ggc [7]=code {Code :15<<(4+8),BitsWritten :4};_ggc [8]=code {Code :19<<(3+8),BitsWritten :5};_ggc [9]=code {Code :20<<(3+8),BitsWritten :5};_ggc [10]=code {Code :7<<(3+8),BitsWritten :5};_ggc [11]=code {Code :8<<(3+8),BitsWritten :5};
_ggc [12]=code {Code :8<<(2+8),BitsWritten :6};_ggc [13]=code {Code :3<<(2+8),BitsWritten :6};_ggc [14]=code {Code :52<<(2+8),BitsWritten :6};_ggc [15]=code {Code :53<<(2+8),BitsWritten :6};_ggc [16]=code {Code :42<<(2+8),BitsWritten :6};_ggc [17]=code {Code :43<<(2+8),BitsWritten :6};
_ggc [18]=code {Code :39<<(1+8),BitsWritten :7};_ggc [19]=code {Code :12<<(1+8),BitsWritten :7};_ggc [20]=code {Code :8<<(1+8),BitsWritten :7};_ggc [21]=code {Code :23<<(1+8),BitsWritten :7};_ggc [22]=code {Code :3<<(1+8),BitsWritten :7};_ggc [23]=code {Code :4<<(1+8),BitsWritten :7};
_ggc [24]=code {Code :40<<(1+8),BitsWritten :7};_ggc [25]=code {Code :43<<(1+8),BitsWritten :7};_ggc [26]=code {Code :19<<(1+8),BitsWritten :7};_ggc [27]=code {Code :36<<(1+8),BitsWritten :7};_ggc [28]=code {Code :24<<(1+8),BitsWritten :7};_ggc [29]=code {Code :2<<8,BitsWritten :8};
_ggc [30]=code {Code :3<<8,BitsWritten :8};_ggc [31]=code {Code :26<<8,BitsWritten :8};_ggc [32]=code {Code :27<<8,BitsWritten :8};_ggc [33]=code {Code :18<<8,BitsWritten :8};_ggc [34]=code {Code :19<<8,BitsWritten :8};_ggc [35]=code {Code :20<<8,BitsWritten :8};
_ggc [36]=code {Code :21<<8,BitsWritten :8};_ggc [37]=code {Code :22<<8,BitsWritten :8};_ggc [38]=code {Code :23<<8,BitsWritten :8};_ggc [39]=code {Code :40<<8,BitsWritten :8};_ggc [40]=code {Code :41<<8,BitsWritten :8};_ggc [41]=code {Code :42<<8,BitsWritten :8};
_ggc [42]=code {Code :43<<8,BitsWritten :8};_ggc [43]=code {Code :44<<8,BitsWritten :8};_ggc [44]=code {Code :45<<8,BitsWritten :8};_ggc [45]=code {Code :4<<8,BitsWritten :8};_ggc [46]=code {Code :5<<8,BitsWritten :8};_ggc [47]=code {Code :10<<8,BitsWritten :8};
_ggc [48]=code {Code :11<<8,BitsWritten :8};_ggc [49]=code {Code :82<<8,BitsWritten :8};_ggc [50]=code {Code :83<<8,BitsWritten :8};_ggc [51]=code {Code :84<<8,BitsWritten :8};_ggc [52]=code {Code :85<<8,BitsWritten :8};_ggc [53]=code {Code :36<<8,BitsWritten :8};
_ggc [54]=code {Code :37<<8,BitsWritten :8};_ggc [55]=code {Code :88<<8,BitsWritten :8};_ggc [56]=code {Code :89<<8,BitsWritten :8};_ggc [57]=code {Code :90<<8,BitsWritten :8};_ggc [58]=code {Code :91<<8,BitsWritten :8};_ggc [59]=code {Code :74<<8,BitsWritten :8};
_ggc [60]=code {Code :75<<8,BitsWritten :8};_ggc [61]=code {Code :50<<8,BitsWritten :8};_ggc [62]=code {Code :51<<8,BitsWritten :8};_ggc [63]=code {Code :52<<8,BitsWritten :8};_cbg =make (map[int ]code );_cbg [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_cbg [128]=code {Code :12<<8|8<<4,BitsWritten :12};_cbg [192]=code {Code :12<<8|9<<4,BitsWritten :12};_cbg [256]=code {Code :5<<8|11<<4,BitsWritten :12};_cbg [320]=code {Code :3<<8|3<<4,BitsWritten :12};_cbg [384]=code {Code :3<<8|4<<4,BitsWritten :12};
_cbg [448]=code {Code :3<<8|5<<4,BitsWritten :12};_cbg [512]=code {Code :3<<8|12<<3,BitsWritten :13};_cbg [576]=code {Code :3<<8|13<<3,BitsWritten :13};_cbg [640]=code {Code :2<<8|10<<3,BitsWritten :13};_cbg [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_cbg [768]=code {Code :2<<8|12<<3,BitsWritten :13};_cbg [832]=code {Code :2<<8|13<<3,BitsWritten :13};_cbg [896]=code {Code :3<<8|18<<3,BitsWritten :13};_cbg [960]=code {Code :3<<8|19<<3,BitsWritten :13};_cbg [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_cbg [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_cbg [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_cbg [1216]=code {Code :119<<3,BitsWritten :13};_cbg [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_cbg [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_cbg [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_cbg [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_cbg [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_cbg [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_cbg [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_cbg [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_aa =make (map[int ]code );_aa [64]=code {Code :27<<(3+8),BitsWritten :5};_aa [128]=code {Code :18<<(3+8),BitsWritten :5};_aa [192]=code {Code :23<<(2+8),BitsWritten :6};_aa [256]=code {Code :55<<(1+8),BitsWritten :7};
_aa [320]=code {Code :54<<8,BitsWritten :8};_aa [384]=code {Code :55<<8,BitsWritten :8};_aa [448]=code {Code :100<<8,BitsWritten :8};_aa [512]=code {Code :101<<8,BitsWritten :8};_aa [576]=code {Code :104<<8,BitsWritten :8};_aa [640]=code {Code :103<<8,BitsWritten :8};
_aa [704]=code {Code :102<<8,BitsWritten :9};_aa [768]=code {Code :102<<8|1<<7,BitsWritten :9};_aa [832]=code {Code :105<<8,BitsWritten :9};_aa [896]=code {Code :105<<8|1<<7,BitsWritten :9};_aa [960]=code {Code :106<<8,BitsWritten :9};_aa [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_aa [1088]=code {Code :107<<8,BitsWritten :9};_aa [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_aa [1216]=code {Code :108<<8,BitsWritten :9};_aa [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_aa [1344]=code {Code :109<<8,BitsWritten :9};_aa [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_aa [1472]=code {Code :76<<8,BitsWritten :9};_aa [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_aa [1600]=code {Code :77<<8,BitsWritten :9};_aa [1664]=code {Code :24<<(2+8),BitsWritten :6};_aa [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_fdb =make (map[int ]code );
_fdb [1792]=code {Code :1<<8,BitsWritten :11};_fdb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_fdb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_fdb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_fdb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_fdb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_fdb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_fdb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_fdb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_fdb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_fdb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_fdb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_fdb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ga =make (map[int ]byte );_ga [0]=0xFF;_ga [1]=0xFE;_ga [2]=0xFC;_ga [3]=0xF8;_ga [4]=0xF0;_ga [5]=0xE0;_ga [6]=0xC0;_ga [7]=0x80;_ga [8]=0x00;};func _gacd (_cde int )([]byte ,int ){var _agc []byte ;
for _dcf :=0;_dcf < 2;_dcf ++{_agc ,_cde =_dgda (_agc ,_cde ,_ec );};return _agc ,_cde %8;};func (_aab *Decoder )decode2D ()error {_aab ._aac =_aab ._ade ;_aab ._gba ,_aab ._gbc =_aab ._gbc ,_aab ._gba ;_cbf :=true ;var (_fff bool ;_bda int ;_abb error ;
);_aab ._ade =0;_acc :for _bda < _aab ._dbaf {_fdg :=_e ._aee ;for {_fff ,_abb =_aab ._fdbg .ReadBool ();if _abb !=nil {return _abb ;};_fdg =_fdg .walk (_fff );if _fdg ==nil {continue _acc ;};if !_fdg ._dag {continue ;};switch _fdg ._eec {case _db :var _aaa int ;
if _cbf {_aaa ,_abb =_aab .decodeRun (_de );}else {_aaa ,_abb =_aab .decodeRun (_ce );};if _abb !=nil {return _abb ;};_bda +=_aaa ;_aab ._gba [_aab ._ade ]=_bda ;_aab ._ade ++;if _cbf {_aaa ,_abb =_aab .decodeRun (_ce );}else {_aaa ,_abb =_aab .decodeRun (_de );
};if _abb !=nil {return _abb ;};_bda +=_aaa ;_aab ._gba [_aab ._ade ]=_bda ;_aab ._ade ++;case _ad :_cebf :=_aab .getNextChangingElement (_bda ,_cbf )+1;if _cebf >=_aab ._aac {_bda =_aab ._dbaf ;}else {_bda =_aab ._gbc [_cebf ];};default:_abd :=_aab .getNextChangingElement (_bda ,_cbf );
if _abd >=_aab ._aac ||_abd ==-1{_bda =_aab ._dbaf +_fdg ._eec ;}else {_bda =_aab ._gbc [_abd ]+_fdg ._eec ;};_aab ._gba [_aab ._ade ]=_bda ;_aab ._ade ++;_cbf =!_cbf ;};continue _acc ;};};return nil ;};const (_ tiffType =iota ;_daf ;_dd ;_dbab ;);func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_cc :=&Decoder {_fdbg :_d .NewReader (data ),_dbaf :options .Columns ,_gb :options .Rows ,_cee :options .DamagedRowsBeforeError ,_dbc :make ([]byte ,(options .Columns +7)/8),_gbc :make ([]int ,options .Columns +2),_gba :make ([]int ,options .Columns +2),_bf :options .EncodedByteAligned ,_gcb :options .BlackIsOne ,_afd :options .EndOfLine ,_bdbc :options .EndOfBlock };
switch {case options .K ==0:_cc ._afg =_dd ;if len (data )< 20{return nil ,_a .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ab :=data [:20];if _ab [0]!=0||(_ab [1]>>4!=1&&_ab [1]!=1){_cc ._afg =_daf ;
_bgg :=(uint16 (_ab [0])<<8+uint16 (_ab [1]&0xff))>>4;for _ba :=12;_ba < 160;_ba ++{_bgg =(_bgg <<1)+uint16 ((_ab [_ba /8]>>uint16 (7-(_ba %8)))&0x01);if _bgg &0xfff==1{_cc ._afg =_dd ;break ;};};};case options .K < 0:_cc ._afg =_dbab ;case options .K > 0:_cc ._afg =_dd ;
_cc ._ffc =true ;};switch _cc ._afg {case _daf ,_dd ,_dbab :default:return nil ,_a .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _cc ,nil ;};func (_eaa *Decoder )tryFetchEOL ()(bool ,error ){_ccc ,_bbc :=_eaa ._fdbg .ReadBits (12);if _bbc !=nil {return false ,_bbc ;};return _ccc ==0x1,nil ;};func (_accg *treeNode )set (_beff bool ,_aeae *treeNode ){if !_beff {_accg ._fcg =_aeae ;
}else {_accg ._cff =_aeae ;};};func (_dad *Decoder )fetch ()error {if _dad ._fc ==-1{return nil ;};if _dad ._bb < _dad ._fc {return nil ;};_dad ._fc =0;_dbd :=_dad .decodeRow ();if _dbd !=nil {if !_a .Is (_dbd ,_cb .EOF ){return _dbd ;};if _dad ._fc !=0{return _dbd ;
};_dad ._fc =-1;};_dad ._bb =0;return nil ;};func (_cab *Decoder )tryFetchEOL1 ()(bool ,error ){_dab ,_bef :=_cab ._fdbg .ReadBits (13);if _bef !=nil {return false ,_bef ;};return _dab ==0x3,nil ;};func _fgc (_cge []byte ,_bdaf int )int {if _bdaf >=len (_cge ){return _bdaf ;
};if _bdaf < -1{_bdaf =-1;};var _egf byte ;if _bdaf > -1{_egf =_cge [_bdaf ];}else {_egf =_ffe ;};_fed :=_bdaf +1;for _fed < len (_cge ){if _cge [_fed ]!=_egf {break ;};_fed ++;};return _fed ;};func (_abe *tree )fill (_baac ,_bfa ,_abec int )error {_cggb :=_abe ._aee ;
for _acb :=0;_acb < _baac ;_acb ++{_cbaf :=_baac -1-_acb ;_bgcf :=((_bfa >>uint (_cbaf ))&1)!=0;_cgeb :=_cggb .walk (_bgcf );if _cgeb !=nil {if _cgeb ._dag {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cggb =_cgeb ;continue ;};_cgeb =&treeNode {};if _acb ==_baac -1{_cgeb ._eec =_abec ;_cgeb ._dag =true ;};if _bfa ==0{_cgeb ._agb =true ;};_cggb .set (_bgcf ,_cgeb );_cggb =_cgeb ;};return nil ;};type Decoder struct{_dbaf int ;_gb int ;_bc int ;_dbc []byte ;
_cee int ;_ffc bool ;_gec bool ;_gf bool ;_gcb bool ;_afd bool ;_bdbc bool ;_bf bool ;_fc int ;_bb int ;_gbc []int ;_gba []int ;_aac int ;_ade int ;_dec int ;_ddb int ;_fdbg *_d .Reader ;_afg tiffType ;_fab error ;};type DecodeOptions struct{Columns int ;
Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_gbda *Decoder )looseFetchEOL ()(bool ,error ){_fcd ,_feb :=_gbda ._fdbg .ReadBits (12);if _feb !=nil {return false ,_feb ;};
switch _fcd {case 0x1:return true ,nil ;case 0x0:for {_faee ,_ece :=_gbda ._fdbg .ReadBool ();if _ece !=nil {return false ,_ece ;};if _faee {return true ,nil ;};};default:return false ,nil ;};};func (_ccf *Decoder )decodeRun (_fdd *tree )(int ,error ){var _adc int ;
_gge :=_fdd ._aee ;for {_ggg ,_ccfc :=_ccf ._fdbg .ReadBool ();if _ccfc !=nil {return 0,_ccfc ;};_gge =_gge .walk (_ggg );if _gge ==nil {return 0,_a .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _gge ._dag {_adc +=_gge ._eec ;switch {case _gge ._eec >=64:_gge =_fdd ._aee ;case _gge ._eec >=0:return _adc ,nil ;default:return _ccf ._dbaf ,nil ;};};};};var _afe =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
type code struct{Code uint16 ;BitsWritten int ;};func _abbc (_dbdfe []byte ,_gdf int ,_cbdf int ,_bgb bool )([]byte ,int ){var (_ecgd code ;_adadc bool ;);for !_adadc {_ecgd ,_cbdf ,_adadc =_ecc (_cbdf ,_bgb );_dbdfe ,_gdf =_dgda (_dbdfe ,_gdf ,_ecgd );
};return _dbdfe ,_gdf ;};func _dfe (_ffa ,_dce []byte ,_dgdea ,_addd ,_dcd int )([]byte ,int ,int ){_dgac :=_fgc (_ffa ,_dcd );_edb :=_addd >=0&&_ffa [_addd ]==_ffe ||_addd ==-1;_dce ,_dgdea =_dgda (_dce ,_dgdea ,_dge );var _faga int ;if _addd > -1{_faga =_dcd -_addd ;
}else {_faga =_dcd -_addd -1;};_dce ,_dgdea =_abbc (_dce ,_dgdea ,_faga ,_edb );_edb =!_edb ;_ggge :=_dgac -_dcd ;_dce ,_dgdea =_abbc (_dce ,_dgdea ,_ggge ,_edb );_addd =_dgac ;return _dce ,_dgdea ,_addd ;};func _ega (_acf ,_adce []byte ,_dac int ,_cegd bool )int {_cead :=_fgc (_adce ,_dac );
if _cead < len (_adce )&&(_dac ==-1&&_adce [_cead ]==_ffe ||_dac >=0&&_dac < len (_acf )&&_acf [_dac ]==_adce [_cead ]||_dac >=len (_acf )&&_cegd &&_adce [_cead ]==_ffe ||_dac >=len (_acf )&&!_cegd &&_adce [_cead ]==_aea ){_cead =_fgc (_adce ,_cead );};
return _cead ;};func (_gdd *Decoder )decode1D ()error {var (_ea int ;_ceb error ;);_efe :=true ;_gdd ._ade =0;for {var _add int ;if _efe {_add ,_ceb =_gdd .decodeRun (_de );}else {_add ,_ceb =_gdd .decodeRun (_ce );};if _ceb !=nil {return _ceb ;};_ea +=_add ;
_gdd ._gba [_gdd ._ade ]=_ea ;_gdd ._ade ++;_efe =!_efe ;if _ea >=_gdd ._dbaf {break ;};};return nil ;};func _ecc (_cfg int ,_decb bool )(code ,int ,bool ){if _cfg < 64{if _decb {return _ggc [_cfg ],0,true ;};return _dgd [_cfg ],0,true ;};_bgdc :=_cfg /64;
if _bgdc > 40{return _fdb [2560],_cfg -2560,false ;};if _bgdc > 27{return _fdb [_bgdc *64],_cfg -_bgdc *64,false ;};if _decb {return _aa [_bgdc *64],_cfg -_bgdc *64,false ;};return _cbg [_bgdc *64],_cfg -_bgdc *64,false ;};var (_ffe byte =1;_aea byte =0;
);type treeNode struct{_fcg *treeNode ;_cff *treeNode ;_eec int ;_agb bool ;_dag bool ;};func _aeg (_bdc ,_cebcd int )code {var _dda code ;switch _cebcd -_bdc {case -1:_dda =_bd ;case -2:_dda =_bdb ;case -3:_dda =_fea ;case 0:_dda =_bg ;case 1:_dda =_dgea ;
case 2:_dda =_be ;case 3:_dda =_ggb ;};return _dda ;};func _dgda (_dga []byte ,_gdg int ,_dgaa code )([]byte ,int ){_gcf :=0;for _gcf < _dgaa .BitsWritten {_bee :=_gdg /8;_feae :=_gdg %8;if _bee >=len (_dga ){_dga =append (_dga ,0);};_ebcg :=8-_feae ;_gdc :=_dgaa .BitsWritten -_gcf ;
if _ebcg > _gdc {_ebcg =_gdc ;};if _gcf < 8{_dga [_bee ]=_dga [_bee ]|byte (_dgaa .Code >>uint (8+_feae -_gcf ))&_ga [8-_ebcg -_feae ];}else {_dga [_bee ]=_dga [_bee ]|(byte (_dgaa .Code <<uint (_gcf -8))&_ga [8-_ebcg ])>>uint (_feae );};_gdg +=_ebcg ;
_gcf +=_ebcg ;};return _dga ,_gdg ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_bggb *Encoder )encodeG31D (_gfd [][]byte )[]byte {var _bfb []byte ;
_agf :=0;for _fdec :=range _gfd {if _bggb .Rows > 0&&!_bggb .EndOfBlock &&_fdec ==_bggb .Rows {break ;};_bcd ,_bde :=_ede (_gfd [_fdec ],_agf ,_ec );_bfb =_bggb .appendEncodedRow (_bfb ,_bcd ,_agf );if _bggb .EncodedByteAlign {_bde =0;};_agf =_bde ;};if _bggb .EndOfBlock {_baa ,_ :=_cbac (_agf );
_bfb =_bggb .appendEncodedRow (_bfb ,_baa ,_agf );};return _bfb ;};func (_cd *Decoder )tryFetchRTC2D ()(_beg error ){_cd ._fdbg .Mark ();var _caf bool ;for _bce :=0;_bce < 5;_bce ++{_caf ,_beg =_cd .tryFetchEOL1 ();if _beg !=nil {if _a .Is (_beg ,_cb .EOF ){if _bce ==0{break ;
};return _adg ;};};if _caf {continue ;};if _bce > 0{return _adg ;};break ;};if _caf {return _cb .EOF ;};_cd ._fdbg .Reset ();return _beg ;};func (_cg *Decoder )decoderRowType41D ()error {if _cg ._bf {_cg ._fdbg .Align ();};_cg ._fdbg .Mark ();var (_abg bool ;
_gfa error ;);if _cg ._afd {_abg ,_gfa =_cg .tryFetchEOL ();if _gfa !=nil {return _gfa ;};if !_abg {return _dbb ;};}else {_abg ,_gfa =_cg .looseFetchEOL ();if _gfa !=nil {return _gfa ;};};if !_abg {_cg ._fdbg .Reset ();};if _abg &&_cg ._bdbc {_cg ._fdbg .Mark ();
for _fag :=0;_fag < 5;_fag ++{_abg ,_gfa =_cg .tryFetchEOL ();if _gfa !=nil {if _a .Is (_gfa ,_cb .EOF ){if _fag ==0{break ;};return _adg ;};};if _abg {continue ;};if _fag > 0{return _adg ;};break ;};if _abg {return _cb .EOF ;};_cg ._fdbg .Reset ();};if _gfa =_cg .decode1D ();
_gfa !=nil {return _gfa ;};return nil ;};func (_ag *Decoder )decodeRow ()(_ggdf error ){if !_ag ._bdbc &&_ag ._gb > 0&&_ag ._gb ==_ag ._bc {return _cb .EOF ;};switch _ag ._afg {case _daf :_ggdf =_ag .decodeRowType2 ();case _dd :_ggdf =_ag .decodeRowType4 ();
case _dbab :_ggdf =_ag .decodeRowType6 ();};if _ggdf !=nil {return _ggdf ;};_ecb :=0;_bfe :=true ;_ag ._ddb =0;for _abf :=0;_abf < _ag ._ade ;_abf ++{_bba :=_ag ._dbaf ;if _abf !=_ag ._ade {_bba =_ag ._gba [_abf ];};if _bba > _ag ._dbaf {_bba =_ag ._dbaf ;
};_afdb :=_ecb /8;for _ecb %8!=0&&_bba -_ecb > 0{var _gag byte ;if !_bfe {_gag =1<<uint (7-(_ecb %8));};_ag ._dbc [_afdb ]|=_gag ;_ecb ++;};if _ecb %8==0{_afdb =_ecb /8;var _aebg byte ;if !_bfe {_aebg =0xff;};for _bba -_ecb > 7{_ag ._dbc [_afdb ]=_aebg ;
_ecb +=8;_afdb ++;};};for _bba -_ecb > 0{if _ecb %8==0{_ag ._dbc [_afdb ]=0;};var _cac byte ;if !_bfe {_cac =1<<uint (7-(_ecb %8));};_ag ._dbc [_afdb ]|=_cac ;_ecb ++;};_bfe =!_bfe ;};if _ecb !=_ag ._dbaf {return _a .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ag ._fc =(_ecb +7)/8;_ag ._bc ++;return nil ;};func _bedf (_ageg []byte ,_aabe int )([]byte ,int ){return _dgda (_ageg ,_aabe ,_gca )};func _geab (_acg []byte ,_accd ,_agg ,_ddba int )([]byte ,int ){_ebdc :=_aeg (_agg ,_ddba );_acg ,_accd =_dgda (_acg ,_accd ,_ebdc );
return _acg ,_accd ;};var (_adg =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_dbb =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);type tiffType int ;func _aega (_bca [][]byte )[][]byte {_gga :=make ([]byte ,len (_bca [0]));for _fddf :=range _gga {_gga [_fddf ]=_ffe ;};_bca =append (_bca ,[]byte {});for _aff :=len (_bca )-1;_aff > 0;_aff --{_bca [_aff ]=_bca [_aff -1];};_bca [0]=_gga ;
return _bca ;};func _ede (_baf []byte ,_ddbd int ,_bdd code )([]byte ,int ){_cebc :=true ;var _ggce []byte ;_ggce ,_ddbd =_dgda (nil ,_ddbd ,_bdd );_efg :=0;var _ffcb int ;for _efg < len (_baf ){_ffcb ,_efg =_fdece (_baf ,_cebc ,_efg );_ggce ,_ddbd =_abbc (_ggce ,_ddbd ,_ffcb ,_cebc );
_cebc =!_cebc ;};return _ggce ,_ddbd %8;};func (_fdfb *Encoder )Encode (pixels [][]byte )[]byte {if _fdfb .BlackIs1 {_ffe =0;_aea =1;}else {_ffe =1;_aea =0;};if _fdfb .K ==0{return _fdfb .encodeG31D (pixels );};if _fdfb .K > 0{return _fdfb .encodeG32D (pixels );
};if _fdfb .K < 0{return _fdfb .encodeG4 (pixels );};return nil ;};func (_dabc *Encoder )appendEncodedRow (_cbgd ,_gea []byte ,_fec int )[]byte {if len (_cbgd )> 0&&_fec !=0&&!_dabc .EncodedByteAlign {_cbgd [len (_cbgd )-1]=_cbgd [len (_cbgd )-1]|_gea [0];
_cbgd =append (_cbgd ,_gea [1:]...);}else {_cbgd =append (_cbgd ,_gea ...);};return _cbgd ;};func (_dgb *Encoder )encodeG4 (_ffdb [][]byte )[]byte {_ccfa :=make ([][]byte ,len (_ffdb ));copy (_ccfa ,_ffdb );_ccfa =_aega (_ccfa );var _cba []byte ;var _bcec int ;
for _dgdef :=1;_dgdef < len (_ccfa );_dgdef ++{if _dgb .Rows > 0&&!_dgb .EndOfBlock &&_dgdef ==(_dgb .Rows +1){break ;};var _gac []byte ;var _eea ,_eeg ,_acca int ;_bfg :=_bcec ;_fabe :=-1;for _fabe < len (_ccfa [_dgdef ]){_eea =_fgc (_ccfa [_dgdef ],_fabe );
_eeg =_fecg (_ccfa [_dgdef ],_ccfa [_dgdef -1],_fabe );_acca =_fgc (_ccfa [_dgdef -1],_eeg );if _acca < _eea {_gac ,_bfg =_dgda (_gac ,_bfg ,_gca );_fabe =_acca ;}else {if _g .Abs (float64 (_eeg -_eea ))> 3{_gac ,_bfg ,_fabe =_dfe (_ccfa [_dgdef ],_gac ,_bfg ,_fabe ,_eea );
}else {_gac ,_bfg =_geab (_gac ,_bfg ,_eea ,_eeg );_fabe =_eea ;};};};_cba =_dgb .appendEncodedRow (_cba ,_gac ,_bcec );if _dgb .EncodedByteAlign {_bfg =0;};_bcec =_bfg %8;};if _dgb .EndOfBlock {_gcd ,_ :=_gacd (_bcec );_cba =_dgb .appendEncodedRow (_cba ,_gcd ,_bcec );
};return _cba ;};func (_aaf *Decoder )decodeRowType6 ()error {if _aaf ._bf {_aaf ._fdbg .Align ();};if _aaf ._bdbc {_aaf ._fdbg .Mark ();_cfc ,_dbcc :=_aaf .tryFetchEOL ();if _dbcc !=nil {return _dbcc ;};if _cfc {_cfc ,_dbcc =_aaf .tryFetchEOL ();if _dbcc !=nil {return _dbcc ;
};if _cfc {return _cb .EOF ;};};_aaf ._fdbg .Reset ();};return _aaf .decode2D ();};var _eg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
type tree struct{_aee *treeNode };func (_gee *Decoder )decodeRowType2 ()error {if _gee ._bf {_gee ._fdbg .Align ();};if _dbdf :=_gee .decode1D ();_dbdf !=nil {return _dbdf ;};return nil ;};func (_aad *Decoder )decodeG32D ()error {_aad ._aac =_aad ._ade ;
_aad ._gba ,_aad ._gbc =_aad ._gbc ,_aad ._gba ;_adb :=true ;var (_geg bool ;_age int ;_dcg error ;);_aad ._ade =0;_gagc :for _age < _aad ._dbaf {_ebf :=_e ._aee ;for {_geg ,_dcg =_aad ._fdbg .ReadBool ();if _dcg !=nil {return _dcg ;};_ebf =_ebf .walk (_geg );
if _ebf ==nil {continue _gagc ;};if !_ebf ._dag {continue ;};switch _ebf ._eec {case _db :var _bdbg int ;if _adb {_bdbg ,_dcg =_aad .decodeRun (_de );}else {_bdbg ,_dcg =_aad .decodeRun (_ce );};if _dcg !=nil {return _dcg ;};_age +=_bdbg ;_aad ._gba [_aad ._ade ]=_age ;
_aad ._ade ++;if _adb {_bdbg ,_dcg =_aad .decodeRun (_ce );}else {_bdbg ,_dcg =_aad .decodeRun (_de );};if _dcg !=nil {return _dcg ;};_age +=_bdbg ;_aad ._gba [_aad ._ade ]=_age ;_aad ._ade ++;case _ad :_gd :=_aad .getNextChangingElement (_age ,_adb )+1;
if _gd >=_aad ._aac {_age =_aad ._dbaf ;}else {_age =_aad ._gbc [_gd ];};default:_bcb :=_aad .getNextChangingElement (_age ,_adb );if _bcb >=_aad ._aac ||_bcb ==-1{_age =_aad ._dbaf +_ebf ._eec ;}else {_age =_aad ._gbc [_bcb ]+_ebf ._eec ;};_aad ._gba [_aad ._ade ]=_age ;
_aad ._ade ++;_adb =!_adb ;};continue _gagc ;};};return nil ;};func (_egb *tree )fillWithNode (_gcbd ,_cag int ,_fcba *treeNode )error {_gegd :=_egb ._aee ;for _caa :=0;_caa < _gcbd ;_caa ++{_cbgf :=uint (_gcbd -1-_caa );_aga :=((_cag >>_cbgf )&1)!=0;_aaab :=_gegd .walk (_aga );
if _aaab !=nil {if _aaab ._dag {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_gegd =_aaab ;continue ;
};if _caa ==_gcbd -1{_aaab =_fcba ;}else {_aaab =&treeNode {};};if _cag ==0{_aaab ._agb =true ;};_gegd .set (_aga ,_aaab );_gegd =_aaab ;};return nil ;};func (_ffb *Decoder )decodeRowType4 ()error {if !_ffb ._ffc {return _ffb .decoderRowType41D ();};if _ffb ._bf {_ffb ._fdbg .Align ();
};_ffb ._fdbg .Mark ();_afaa ,_fde :=_ffb .tryFetchEOL ();if _fde !=nil {return _fde ;};if !_afaa &&_ffb ._afd {_ffb ._dec ++;if _ffb ._dec > _ffb ._cee {return _dbb ;};_ffb ._fdbg .Reset ();};if !_afaa {_ffb ._fdbg .Reset ();};_aba ,_fde :=_ffb ._fdbg .ReadBool ();
if _fde !=nil {return _fde ;};if _aba {if _afaa &&_ffb ._bdbc {if _fde =_ffb .tryFetchRTC2D ();_fde !=nil {return _fde ;};};_fde =_ffb .decode1D ();}else {_fde =_ffb .decode2D ();};if _fde !=nil {return _fde ;};return nil ;};func (_fbb *Decoder )getNextChangingElement (_cgg int ,_cea bool )int {_cbfe :=0;
if !_cea {_cbfe =1;};_fdf :=int (uint32 (_fbb ._ddb )&0xFFFFFFFE)+_cbfe ;if _fdf > 2{_fdf -=2;};if _cgg ==0{return _fdf ;};for _bgd :=_fdf ;_bgd < _fbb ._aac ;_bgd +=2{if _cgg < _fbb ._gbc [_bgd ]{_fbb ._ddb =_bgd ;return _bgd ;};};return -1;};var (_dgd map[int ]code ;
_ggc map[int ]code ;_cbg map[int ]code ;_aa map[int ]code ;_fdb map[int ]code ;_ga map[int ]byte ;_ec =code {Code :1<<4,BitsWritten :12};_fb =code {Code :3<<3,BitsWritten :13};_ee =code {Code :2<<3,BitsWritten :13};_gca =code {Code :1<<12,BitsWritten :4};
_dge =code {Code :1<<13,BitsWritten :3};_bg =code {Code :1<<15,BitsWritten :1};_bd =code {Code :3<<13,BitsWritten :3};_bdb =code {Code :3<<10,BitsWritten :6};_fea =code {Code :3<<9,BitsWritten :7};_dgea =code {Code :2<<13,BitsWritten :3};_be =code {Code :2<<10,BitsWritten :6};
_ggb =code {Code :2<<9,BitsWritten :7};);func (_dbcf *treeNode )walk (_debf bool )*treeNode {if _debf {return _dbcf ._cff ;};return _dbcf ._fcg ;};func _fecg (_adec ,_gagcd []byte ,_df int )int {_dgbg :=_fgc (_gagcd ,_df );if _dgbg < len (_gagcd )&&(_df ==-1&&_gagcd [_dgbg ]==_ffe ||_df >=0&&_df < len (_adec )&&_adec [_df ]==_gagcd [_dgbg ]||_df >=len (_adec )&&_adec [_df -1]!=_gagcd [_dgbg ]){_dgbg =_fgc (_gagcd ,_dgbg );
};return _dgbg ;};var _ae =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
var (_dg *treeNode ;_b *treeNode ;_ce *tree ;_de *tree ;_f *tree ;_e *tree ;_ef =-2000;_cbc =-1000;_ad =-3000;_db =-4000;);