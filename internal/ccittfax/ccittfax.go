//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_fe "github.com/unidoc/unipdf/v3/internal/bitwise";_f "io";_a "math";);func _eac (_dcec ,_afeg int )code {var _dddc code ;switch _afeg -_dcec {case -1:_dddc =_efc ;case -2:_dddc =_acb ;case -3:_dddc =_gcc ;case 0:_dddc =_gbd ;
case 1:_dddc =_df ;case 2:_dddc =_cggg ;case 3:_dddc =_dce ;};return _dddc ;};func init (){_fb =&treeNode {_fbb :true ,_bfa :_d };_g =&treeNode {_bfa :_dg ,_bff :_fb };_g ._efdc =_g ;_bf =&tree {_ddfe :&treeNode {}};if _ed :=_bf .fillWithNode (12,0,_g );
_ed !=nil {panic (_ed .Error ());};if _gd :=_bf .fillWithNode (12,1,_fb );_gd !=nil {panic (_gd .Error ());};_cg =&tree {_ddfe :&treeNode {}};for _ac :=0;_ac < len (_cf );_ac ++{for _cb :=0;_cb < len (_cf [_ac ]);_cb ++{if _cgc :=_cg .fill (_ac +2,int (_cf [_ac ][_cb ]),int (_dgb [_ac ][_cb ]));
_cgc !=nil {panic (_cgc .Error ());};};};if _ge :=_cg .fillWithNode (12,0,_g );_ge !=nil {panic (_ge .Error ());};if _gb :=_cg .fillWithNode (12,1,_fb );_gb !=nil {panic (_gb .Error ());};_ba =&tree {_ddfe :&treeNode {}};for _dd :=0;_dd < len (_fg );_dd ++{for _gc :=0;
_gc < len (_fg [_dd ]);_gc ++{if _fd :=_ba .fill (_dd +4,int (_fg [_dd ][_gc ]),int (_bg [_dd ][_gc ]));_fd !=nil {panic (_fd .Error ());};};};if _bad :=_ba .fillWithNode (12,0,_g );_bad !=nil {panic (_bad .Error ());};if _be :=_ba .fillWithNode (12,1,_fb );
_be !=nil {panic (_be .Error ());};_e =&tree {_ddfe :&treeNode {}};if _dgg :=_e .fill (4,1,_gg );_dgg !=nil {panic (_dgg .Error ());};if _ea :=_e .fill (3,1,_dc );_ea !=nil {panic (_ea .Error ());};if _cgg :=_e .fill (1,1,0);_cgg !=nil {panic (_cgg .Error ());
};if _gga :=_e .fill (3,3,1);_gga !=nil {panic (_gga .Error ());};if _dggc :=_e .fill (6,3,2);_dggc !=nil {panic (_dggc .Error ());};if _ee :=_e .fill (7,3,3);_ee !=nil {panic (_ee .Error ());};if _ab :=_e .fill (3,2,-1);_ab !=nil {panic (_ab .Error ());
};if _bd :=_e .fill (6,2,-2);_bd !=nil {panic (_bd .Error ());};if _dcb :=_e .fill (7,2,-3);_dcb !=nil {panic (_dcb .Error ());};};func _gdc (_gfdb []byte ,_cgd int ,_dfg int ,_cee bool )([]byte ,int ){var (_abc code ;_ccg bool ;);for !_ccg {_abc ,_dfg ,_ccg =_eca (_dfg ,_cee );
_gfdb ,_cgd =_fdgcd (_gfdb ,_cgd ,_abc );};return _gfdb ,_cgd ;};var _cf =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _ada (_fdeg ,_eadc []byte ,_geb int ,_beb bool )int {_acaf :=_agc (_eadc ,_geb );if _acaf < len (_eadc )&&(_geb ==-1&&_eadc [_acaf ]==_afe ||_geb >=0&&_geb < len (_fdeg )&&_fdeg [_geb ]==_eadc [_acaf ]||_geb >=len (_fdeg )&&_beb &&_eadc [_acaf ]==_afe ||_geb >=len (_fdeg )&&!_beb &&_eadc [_acaf ]==_gfed ){_acaf =_agc (_eadc ,_acaf );
};return _acaf ;};func _afb (_bec int )([]byte ,int ){var _cfa []byte ;for _gfg :=0;_gfg < 2;_gfg ++{_cfa ,_bec =_fdgcd (_cfa ,_bec ,_ef );};return _cfa ,_bec %8;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;
EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_abac *Decoder )decodeRow ()(_ga error ){if !_abac ._edb &&_abac ._dgfb > 0&&_abac ._dgfb ==_abac ._gcb {return _f .EOF ;};switch _abac ._af {case _cgf :_ga =_abac .decodeRowType2 ();
case _fdg :_ga =_abac .decodeRowType4 ();case _cbf :_ga =_abac .decodeRowType6 ();};if _ga !=nil {return _ga ;};_fga :=0;_fgab :=true ;_abac ._ce =0;for _feg :=0;_feg < _abac ._gde ;_feg ++{_dgfbc :=_abac ._eee ;if _feg !=_abac ._gde {_dgfbc =_abac ._dca [_feg ];
};if _dgfbc > _abac ._eee {_dgfbc =_abac ._eee ;};_abd :=_fga /8;for _fga %8!=0&&_dgfbc -_fga > 0{var _gbf byte ;if !_fgab {_gbf =1<<uint (7-(_fga %8));};_abac ._agf [_abd ]|=_gbf ;_fga ++;};if _fga %8==0{_abd =_fga /8;var _eff byte ;if !_fgab {_eff =0xff;
};for _dgfbc -_fga > 7{_abac ._agf [_abd ]=_eff ;_fga +=8;_abd ++;};};for _dgfbc -_fga > 0{if _fga %8==0{_abac ._agf [_abd ]=0;};var _acd byte ;if !_fgab {_acd =1<<uint (7-(_fga %8));};_abac ._agf [_abd ]|=_acd ;_fga ++;};_fgab =!_fgab ;};if _fga !=_abac ._eee {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_abac ._gfd =(_fga +7)/8;_abac ._gcb ++;return nil ;};func init (){_feb =make (map[int ]code );_feb [0]=code {Code :13<<8|3<<6,BitsWritten :10};_feb [1]=code {Code :2<<(5+8),BitsWritten :3};_feb [2]=code {Code :3<<(6+8),BitsWritten :2};_feb [3]=code {Code :2<<(6+8),BitsWritten :2};
_feb [4]=code {Code :3<<(5+8),BitsWritten :3};_feb [5]=code {Code :3<<(4+8),BitsWritten :4};_feb [6]=code {Code :2<<(4+8),BitsWritten :4};_feb [7]=code {Code :3<<(3+8),BitsWritten :5};_feb [8]=code {Code :5<<(2+8),BitsWritten :6};_feb [9]=code {Code :4<<(2+8),BitsWritten :6};
_feb [10]=code {Code :4<<(1+8),BitsWritten :7};_feb [11]=code {Code :5<<(1+8),BitsWritten :7};_feb [12]=code {Code :7<<(1+8),BitsWritten :7};_feb [13]=code {Code :4<<8,BitsWritten :8};_feb [14]=code {Code :7<<8,BitsWritten :8};_feb [15]=code {Code :12<<8,BitsWritten :9};
_feb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_feb [17]=code {Code :6<<8,BitsWritten :10};_feb [18]=code {Code :2<<8,BitsWritten :10};_feb [19]=code {Code :12<<8|7<<5,BitsWritten :11};_feb [20]=code {Code :13<<8,BitsWritten :11};_feb [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_feb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_feb [23]=code {Code :5<<8,BitsWritten :11};_feb [24]=code {Code :2<<8|7<<5,BitsWritten :11};_feb [25]=code {Code :3<<8,BitsWritten :11};_feb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_feb [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_feb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_feb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_feb [30]=code {Code :6<<8|8<<4,BitsWritten :12};_feb [31]=code {Code :6<<8|9<<4,BitsWritten :12};_feb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_feb [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_feb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_feb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_feb [36]=code {Code :13<<8|4<<4,BitsWritten :12};_feb [37]=code {Code :13<<8|5<<4,BitsWritten :12};_feb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_feb [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_feb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_feb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_feb [42]=code {Code :13<<8|10<<4,BitsWritten :12};_feb [43]=code {Code :13<<8|11<<4,BitsWritten :12};_feb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_feb [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_feb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_feb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_feb [48]=code {Code :6<<8|4<<4,BitsWritten :12};_feb [49]=code {Code :6<<8|5<<4,BitsWritten :12};_feb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_feb [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_feb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_feb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_feb [54]=code {Code :3<<8|8<<4,BitsWritten :12};_feb [55]=code {Code :2<<8|7<<4,BitsWritten :12};_feb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_feb [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_feb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_feb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_feb [60]=code {Code :2<<8|12<<4,BitsWritten :12};_feb [61]=code {Code :5<<8|10<<4,BitsWritten :12};_feb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_feb [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_fdb =make (map[int ]code );_fdb [0]=code {Code :53<<8,BitsWritten :8};_fdb [1]=code {Code :7<<(2+8),BitsWritten :6};_fdb [2]=code {Code :7<<(4+8),BitsWritten :4};_fdb [3]=code {Code :8<<(4+8),BitsWritten :4};_fdb [4]=code {Code :11<<(4+8),BitsWritten :4};
_fdb [5]=code {Code :12<<(4+8),BitsWritten :4};_fdb [6]=code {Code :14<<(4+8),BitsWritten :4};_fdb [7]=code {Code :15<<(4+8),BitsWritten :4};_fdb [8]=code {Code :19<<(3+8),BitsWritten :5};_fdb [9]=code {Code :20<<(3+8),BitsWritten :5};_fdb [10]=code {Code :7<<(3+8),BitsWritten :5};
_fdb [11]=code {Code :8<<(3+8),BitsWritten :5};_fdb [12]=code {Code :8<<(2+8),BitsWritten :6};_fdb [13]=code {Code :3<<(2+8),BitsWritten :6};_fdb [14]=code {Code :52<<(2+8),BitsWritten :6};_fdb [15]=code {Code :53<<(2+8),BitsWritten :6};_fdb [16]=code {Code :42<<(2+8),BitsWritten :6};
_fdb [17]=code {Code :43<<(2+8),BitsWritten :6};_fdb [18]=code {Code :39<<(1+8),BitsWritten :7};_fdb [19]=code {Code :12<<(1+8),BitsWritten :7};_fdb [20]=code {Code :8<<(1+8),BitsWritten :7};_fdb [21]=code {Code :23<<(1+8),BitsWritten :7};_fdb [22]=code {Code :3<<(1+8),BitsWritten :7};
_fdb [23]=code {Code :4<<(1+8),BitsWritten :7};_fdb [24]=code {Code :40<<(1+8),BitsWritten :7};_fdb [25]=code {Code :43<<(1+8),BitsWritten :7};_fdb [26]=code {Code :19<<(1+8),BitsWritten :7};_fdb [27]=code {Code :36<<(1+8),BitsWritten :7};_fdb [28]=code {Code :24<<(1+8),BitsWritten :7};
_fdb [29]=code {Code :2<<8,BitsWritten :8};_fdb [30]=code {Code :3<<8,BitsWritten :8};_fdb [31]=code {Code :26<<8,BitsWritten :8};_fdb [32]=code {Code :27<<8,BitsWritten :8};_fdb [33]=code {Code :18<<8,BitsWritten :8};_fdb [34]=code {Code :19<<8,BitsWritten :8};
_fdb [35]=code {Code :20<<8,BitsWritten :8};_fdb [36]=code {Code :21<<8,BitsWritten :8};_fdb [37]=code {Code :22<<8,BitsWritten :8};_fdb [38]=code {Code :23<<8,BitsWritten :8};_fdb [39]=code {Code :40<<8,BitsWritten :8};_fdb [40]=code {Code :41<<8,BitsWritten :8};
_fdb [41]=code {Code :42<<8,BitsWritten :8};_fdb [42]=code {Code :43<<8,BitsWritten :8};_fdb [43]=code {Code :44<<8,BitsWritten :8};_fdb [44]=code {Code :45<<8,BitsWritten :8};_fdb [45]=code {Code :4<<8,BitsWritten :8};_fdb [46]=code {Code :5<<8,BitsWritten :8};
_fdb [47]=code {Code :10<<8,BitsWritten :8};_fdb [48]=code {Code :11<<8,BitsWritten :8};_fdb [49]=code {Code :82<<8,BitsWritten :8};_fdb [50]=code {Code :83<<8,BitsWritten :8};_fdb [51]=code {Code :84<<8,BitsWritten :8};_fdb [52]=code {Code :85<<8,BitsWritten :8};
_fdb [53]=code {Code :36<<8,BitsWritten :8};_fdb [54]=code {Code :37<<8,BitsWritten :8};_fdb [55]=code {Code :88<<8,BitsWritten :8};_fdb [56]=code {Code :89<<8,BitsWritten :8};_fdb [57]=code {Code :90<<8,BitsWritten :8};_fdb [58]=code {Code :91<<8,BitsWritten :8};
_fdb [59]=code {Code :74<<8,BitsWritten :8};_fdb [60]=code {Code :75<<8,BitsWritten :8};_fdb [61]=code {Code :50<<8,BitsWritten :8};_fdb [62]=code {Code :51<<8,BitsWritten :8};_fdb [63]=code {Code :52<<8,BitsWritten :8};_bgd =make (map[int ]code );_bgd [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_bgd [128]=code {Code :12<<8|8<<4,BitsWritten :12};_bgd [192]=code {Code :12<<8|9<<4,BitsWritten :12};_bgd [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bgd [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bgd [384]=code {Code :3<<8|4<<4,BitsWritten :12};
_bgd [448]=code {Code :3<<8|5<<4,BitsWritten :12};_bgd [512]=code {Code :3<<8|12<<3,BitsWritten :13};_bgd [576]=code {Code :3<<8|13<<3,BitsWritten :13};_bgd [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bgd [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_bgd [768]=code {Code :2<<8|12<<3,BitsWritten :13};_bgd [832]=code {Code :2<<8|13<<3,BitsWritten :13};_bgd [896]=code {Code :3<<8|18<<3,BitsWritten :13};_bgd [960]=code {Code :3<<8|19<<3,BitsWritten :13};_bgd [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_bgd [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_bgd [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_bgd [1216]=code {Code :119<<3,BitsWritten :13};_bgd [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_bgd [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_bgd [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_bgd [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_bgd [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bgd [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_bgd [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_bgd [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_gf =make (map[int ]code );_gf [64]=code {Code :27<<(3+8),BitsWritten :5};_gf [128]=code {Code :18<<(3+8),BitsWritten :5};_gf [192]=code {Code :23<<(2+8),BitsWritten :6};_gf [256]=code {Code :55<<(1+8),BitsWritten :7};
_gf [320]=code {Code :54<<8,BitsWritten :8};_gf [384]=code {Code :55<<8,BitsWritten :8};_gf [448]=code {Code :100<<8,BitsWritten :8};_gf [512]=code {Code :101<<8,BitsWritten :8};_gf [576]=code {Code :104<<8,BitsWritten :8};_gf [640]=code {Code :103<<8,BitsWritten :8};
_gf [704]=code {Code :102<<8,BitsWritten :9};_gf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_gf [832]=code {Code :105<<8,BitsWritten :9};_gf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_gf [960]=code {Code :106<<8,BitsWritten :9};_gf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_gf [1088]=code {Code :107<<8,BitsWritten :9};_gf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_gf [1216]=code {Code :108<<8,BitsWritten :9};_gf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_gf [1344]=code {Code :109<<8,BitsWritten :9};_gf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_gf [1472]=code {Code :76<<8,BitsWritten :9};_gf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_gf [1600]=code {Code :77<<8,BitsWritten :9};_gf [1664]=code {Code :24<<(2+8),BitsWritten :6};_gf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_db =make (map[int ]code );
_db [1792]=code {Code :1<<8,BitsWritten :11};_db [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_db [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_db [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_db [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_db [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_db [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_db [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_db [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_db [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_db [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_db [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_db [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ggb =make (map[int ]byte );_ggb [0]=0xFF;_ggb [1]=0xFE;_ggb [2]=0xFC;_ggb [3]=0xF8;_ggb [4]=0xF0;_ggb [5]=0xE0;_ggb [6]=0xC0;_ggb [7]=0x80;_ggb [8]=0x00;
};func _ddge (_gdg []byte ,_fbce int ,_affd code )([]byte ,int ){_bgdd :=true ;var _gcgd []byte ;_gcgd ,_fbce =_fdgcd (nil ,_fbce ,_affd );_ccc :=0;var _bba int ;for _ccc < len (_gdg ){_bba ,_ccc =_eab (_gdg ,_bgdd ,_ccc );_gcgd ,_fbce =_gdc (_gcgd ,_fbce ,_bba ,_bgdd );
_bgdd =!_bgdd ;};return _gcgd ,_fbce %8;};func (_cba *Decoder )decodeRowType6 ()error {if _cba ._febe {_cba ._eb .Align ();};if _cba ._edb {_cba ._eb .Mark ();_dff ,_ggfd :=_cba .tryFetchEOL ();if _ggfd !=nil {return _ggfd ;};if _dff {_dff ,_ggfd =_cba .tryFetchEOL ();
if _ggfd !=nil {return _ggfd ;};if _dff {return _f .EOF ;};};_cba ._eb .Reset ();};return _cba .decode2D ();};var (_gec =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_de =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_aaaf *Decoder )getNextChangingElement (_dbg int ,_aaafd bool )int {_ffa :=0;if !_aaafd {_ffa =1;};_cce :=int (uint32 (_aaaf ._ce )&0xFFFFFFFE)+_ffa ;if _cce > 2{_cce -=2;};if _dbg ==0{return _cce ;};for _gcg :=_cce ;_gcg < _aaaf ._ccf ;_gcg +=2{if _dbg < _aaaf ._bgg [_gcg ]{_aaaf ._ce =_gcg ;
return _gcg ;};};return -1;};func (_eegf *Decoder )decode1D ()error {var (_dec int ;_fdbb error ;);_bce :=true ;_eegf ._gde =0;for {var _ff int ;if _bce {_ff ,_fdbb =_eegf .decodeRun (_ba );}else {_ff ,_fdbb =_eegf .decodeRun (_cg );};if _fdbb !=nil {return _fdbb ;
};_dec +=_ff ;_eegf ._dca [_eegf ._gde ]=_dec ;_eegf ._gde ++;_bce =!_bce ;if _dec >=_eegf ._eee {break ;};};return nil ;};func _aef (_aga int )([]byte ,int ){var _edd []byte ;for _ega :=0;_ega < 6;_ega ++{_edd ,_aga =_fdgcd (_edd ,_aga ,_dgf );};return _edd ,_aga %8;
};func (_cfe tiffType )String ()string {switch _cfe {case _cgf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _fdg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _cbf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_aba :=&Decoder {_eb :_fe .NewReader (data ),_eee :options .Columns ,_dgfb :options .Rows ,_ggf :options .DamagedRowsBeforeError ,_agf :make ([]byte ,(options .Columns +7)/8),_bgg :make ([]int ,options .Columns +2),_dca :make ([]int ,options .Columns +2),_febe :options .EncodedByteAligned ,_gcbb :options .BlackIsOne ,_dbc :options .EndOfLine ,_edb :options .EndOfBlock };
switch {case options .K ==0:_aba ._af =_fdg ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_cff :=data [:20];if _cff [0]!=0||(_cff [1]>>4!=1&&_cff [1]!=1){_aba ._af =_cgf ;
_gfeb :=(uint16 (_cff [0])<<8+uint16 (_cff [1]&0xff))>>4;for _bggd :=12;_bggd < 160;_bggd ++{_gfeb =(_gfeb <<1)+uint16 ((_cff [_bggd /8]>>uint16 (7-(_bggd %8)))&0x01);if _gfeb &0xfff==1{_aba ._af =_fdg ;break ;};};};case options .K < 0:_aba ._af =_cbf ;
case options .K > 0:_aba ._af =_fdg ;_aba ._cc =true ;};switch _aba ._af {case _cgf ,_fdg ,_cbf :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _aba ,nil ;};func (_aa *Decoder )decoderRowType41D ()error {if _aa ._febe {_aa ._eb .Align ();};_aa ._eb .Mark ();var (_dcf bool ;_gdd error ;);if _aa ._dbc {_dcf ,_gdd =_aa .tryFetchEOL ();if _gdd !=nil {return _gdd ;};if !_dcf {return _de ;};
}else {_dcf ,_gdd =_aa .looseFetchEOL ();if _gdd !=nil {return _gdd ;};};if !_dcf {_aa ._eb .Reset ();};if _dcf &&_aa ._edb {_aa ._eb .Mark ();for _gfda :=0;_gfda < 5;_gfda ++{_dcf ,_gdd =_aa .tryFetchEOL ();if _gdd !=nil {if _c .Is (_gdd ,_f .EOF ){if _gfda ==0{break ;
};return _gec ;};};if _dcf {continue ;};if _gfda > 0{return _gec ;};break ;};if _dcf {return _f .EOF ;};_aa ._eb .Reset ();};if _gdd =_aa .decode1D ();_gdd !=nil {return _gdd ;};return nil ;};func (_cefa *Encoder )Encode (pixels [][]byte )[]byte {if _cefa .BlackIs1 {_afe =0;
_gfed =1;}else {_afe =1;_gfed =0;};if _cefa .K ==0{return _cefa .encodeG31D (pixels );};if _cefa .K > 0{return _cefa .encodeG32D (pixels );};if _cefa .K < 0{return _cefa .encodeG4 (pixels );};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;
Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_agb *Decoder )tryFetchRTC2D ()(_dad error ){_agb ._eb .Mark ();var _ebaa bool ;for _dfd :=0;_dfd < 5;_dfd ++{_ebaa ,_dad =_agb .tryFetchEOL1 ();if _dad !=nil {if _c .Is (_dad ,_f .EOF ){if _dfd ==0{break ;
};return _gec ;};};if _ebaa {continue ;};if _dfd > 0{return _gec ;};break ;};if _ebaa {return _f .EOF ;};_agb ._eb .Reset ();return _dad ;};func _eca (_deb int ,_gecg bool )(code ,int ,bool ){if _deb < 64{if _gecg {return _fdb [_deb ],0,true ;};return _feb [_deb ],0,true ;
};_acea :=_deb /64;if _acea > 40{return _db [2560],_deb -2560,false ;};if _acea > 27{return _db [_acea *64],_deb -_acea *64,false ;};if _gecg {return _gf [_acea *64],_deb -_acea *64,false ;};return _bgd [_acea *64],_deb -_acea *64,false ;};func _dade (_bbcf []byte ,_efg ,_ege ,_dcab int )([]byte ,int ){_ffb :=_eac (_ege ,_dcab );
_bbcf ,_efg =_fdgcd (_bbcf ,_efg ,_ffb );return _bbcf ,_efg ;};func (_aaa *Decoder )decode2D ()error {_aaa ._ccf =_aaa ._gde ;_aaa ._dca ,_aaa ._bgg =_aaa ._bgg ,_aaa ._dca ;_ad :=true ;var (_ddb bool ;_da int ;_ebe error ;);_aaa ._gde =0;_bac :for _da < _aaa ._eee {_fed :=_e ._ddfe ;
for {_ddb ,_ebe =_aaa ._eb .ReadBool ();if _ebe !=nil {return _ebe ;};_fed =_fed .walk (_ddb );if _fed ==nil {continue _bac ;};if !_fed ._fbb {continue ;};switch _fed ._bfa {case _dc :var _aaf int ;if _ad {_aaf ,_ebe =_aaa .decodeRun (_ba );}else {_aaf ,_ebe =_aaa .decodeRun (_cg );
};if _ebe !=nil {return _ebe ;};_da +=_aaf ;_aaa ._dca [_aaa ._gde ]=_da ;_aaa ._gde ++;if _ad {_aaf ,_ebe =_aaa .decodeRun (_cg );}else {_aaf ,_ebe =_aaa .decodeRun (_ba );};if _ebe !=nil {return _ebe ;};_da +=_aaf ;_aaa ._dca [_aaa ._gde ]=_da ;_aaa ._gde ++;
case _gg :_fee :=_aaa .getNextChangingElement (_da ,_ad )+1;if _fee >=_aaa ._ccf {_da =_aaa ._eee ;}else {_da =_aaa ._bgg [_fee ];};default:_caf :=_aaa .getNextChangingElement (_da ,_ad );if _caf >=_aaa ._ccf ||_caf ==-1{_da =_aaa ._eee +_fed ._bfa ;}else {_da =_aaa ._bgg [_caf ]+_fed ._bfa ;
};_aaa ._dca [_aaa ._gde ]=_da ;_aaa ._gde ++;_ad =!_ad ;};continue _bac ;};};return nil ;};func _gbc (_feba [][]byte )[][]byte {_egb :=make ([]byte ,len (_feba [0]));for _dbf :=range _egb {_egb [_dbf ]=_afe ;};_feba =append (_feba ,[]byte {});for _cbg :=len (_feba )-1;
_cbg > 0;_cbg --{_feba [_cbg ]=_feba [_cbg -1];};_feba [0]=_egb ;return _feba ;};func (_gce *Decoder )tryFetchEOL1 ()(bool ,error ){_abf ,_fbd :=_gce ._eb .ReadBits (13);if _fbd !=nil {return false ,_fbd ;};return _abf ==0x3,nil ;};func _eebc (_abcb []byte ,_dcef int )([]byte ,int ){return _fdgcd (_abcb ,_dcef ,_bc )};
type code struct{Code uint16 ;BitsWritten int ;};func _ebfc (_gdb ,_cede []byte ,_def ,_agbc ,_bfd int )([]byte ,int ,int ){_ddd :=_agc (_gdb ,_bfd );_ccfc :=_agbc >=0&&_gdb [_agbc ]==_afe ||_agbc ==-1;_cede ,_def =_fdgcd (_cede ,_def ,_ace );var _fbf int ;
if _agbc > -1{_fbf =_bfd -_agbc ;}else {_fbf =_bfd -_agbc -1;};_cede ,_def =_gdc (_cede ,_def ,_fbf ,_ccfc );_ccfc =!_ccfc ;_cffd :=_ddd -_bfd ;_cede ,_def =_gdc (_cede ,_def ,_cffd ,_ccfc );_agbc =_ddd ;return _cede ,_def ,_agbc ;};func (_eeb *Decoder )Read (in []byte )(int ,error ){if _eeb ._afd !=nil {return 0,_eeb ._afd ;
};_cef :=len (in );var (_ae int ;_fbee int ;);for _cef !=0{if _eeb ._acf >=_eeb ._gfd {if _eeg :=_eeb .fetch ();_eeg !=nil {_eeb ._afd =_eeg ;return 0,_eeg ;};};if _eeb ._gfd ==-1{return _ae ,_f .EOF ;};switch {case _cef <=_eeb ._gfd -_eeb ._acf :_ca :=_eeb ._agf [_eeb ._acf :_eeb ._acf +_cef ];
for _ ,_dga :=range _ca {if !_eeb ._gcbb {_dga =^_dga ;};in [_fbee ]=_dga ;_fbee ++;};_ae +=len (_ca );_eeb ._acf +=len (_ca );return _ae ,nil ;default:_fgd :=_eeb ._agf [_eeb ._acf :];for _ ,_efe :=range _fgd {if !_eeb ._gcbb {_efe =^_efe ;};in [_fbee ]=_efe ;
_fbee ++;};_ae +=len (_fgd );_eeb ._acf +=len (_fgd );_cef -=len (_fgd );};};return _ae ,nil ;};func _ebc (_fbg int )([]byte ,int ){var _daga []byte ;for _gfb :=0;_gfb < 6;_gfb ++{_daga ,_fbg =_fdgcd (_daga ,_fbg ,_ef );};return _daga ,_fbg %8;};func _eab (_bafe []byte ,_ccfe bool ,_edbd int )(int ,int ){_bda :=0;
for _edbd < len (_bafe ){if _ccfe {if _bafe [_edbd ]!=_afe {break ;};}else {if _bafe [_edbd ]!=_gfed {break ;};};_bda ++;_edbd ++;};return _bda ,_edbd ;};func (_baf *Encoder )encodeG4 (_cad [][]byte )[]byte {_cgga :=make ([][]byte ,len (_cad ));copy (_cgga ,_cad );
_cgga =_gbc (_cgga );var _edca []byte ;var _fdgc int ;for _adc :=1;_adc < len (_cgga );_adc ++{if _baf .Rows > 0&&!_baf .EndOfBlock &&_adc ==(_baf .Rows +1){break ;};var _dagf []byte ;var _babg ,_gba ,_efd int ;_fge :=_fdgc ;_ddfb :=-1;for _ddfb < len (_cgga [_adc ]){_babg =_agc (_cgga [_adc ],_ddfb );
_gba =_ecg (_cgga [_adc ],_cgga [_adc -1],_ddfb );_efd =_agc (_cgga [_adc -1],_gba );if _efd < _babg {_dagf ,_fge =_fdgcd (_dagf ,_fge ,_bc );_ddfb =_efd ;}else {if _a .Abs (float64 (_gba -_babg ))> 3{_dagf ,_fge ,_ddfb =_ebfc (_cgga [_adc ],_dagf ,_fge ,_ddfb ,_babg );
}else {_dagf ,_fge =_dade (_dagf ,_fge ,_babg ,_gba );_ddfb =_babg ;};};};_edca =_baf .appendEncodedRow (_edca ,_dagf ,_fdgc );if _baf .EncodedByteAlign {_fge =0;};_fdgc =_fge %8;};if _baf .EndOfBlock {_bade ,_ :=_afb (_fdgc );_edca =_baf .appendEncodedRow (_edca ,_bade ,_fdgc );
};return _edca ;};func (_ebf *Decoder )tryFetchEOL ()(bool ,error ){_dab ,_bcf :=_ebf ._eb .ReadBits (12);if _bcf !=nil {return false ,_bcf ;};return _dab ==0x1,nil ;};func (_geg *Decoder )decodeG32D ()error {_geg ._ccf =_geg ._gde ;_geg ._dca ,_geg ._bgg =_geg ._bgg ,_geg ._dca ;
_bed :=true ;var (_fegd bool ;_dgc int ;_fbc error ;);_geg ._gde =0;_bef :for _dgc < _geg ._eee {_fab :=_e ._ddfe ;for {_fegd ,_fbc =_geg ._eb .ReadBool ();if _fbc !=nil {return _fbc ;};_fab =_fab .walk (_fegd );if _fab ==nil {continue _bef ;};if !_fab ._fbb {continue ;
};switch _fab ._bfa {case _dc :var _cdd int ;if _bed {_cdd ,_fbc =_geg .decodeRun (_ba );}else {_cdd ,_fbc =_geg .decodeRun (_cg );};if _fbc !=nil {return _fbc ;};_dgc +=_cdd ;_geg ._dca [_geg ._gde ]=_dgc ;_geg ._gde ++;if _bed {_cdd ,_fbc =_geg .decodeRun (_cg );
}else {_cdd ,_fbc =_geg .decodeRun (_ba );};if _fbc !=nil {return _fbc ;};_dgc +=_cdd ;_geg ._dca [_geg ._gde ]=_dgc ;_geg ._gde ++;case _gg :_bb :=_geg .getNextChangingElement (_dgc ,_bed )+1;if _bb >=_geg ._ccf {_dgc =_geg ._eee ;}else {_dgc =_geg ._bgg [_bb ];
};default:_dcc :=_geg .getNextChangingElement (_dgc ,_bed );if _dcc >=_geg ._ccf ||_dcc ==-1{_dgc =_geg ._eee +_fab ._bfa ;}else {_dgc =_geg ._bgg [_dcc ]+_fab ._bfa ;};_geg ._dca [_geg ._gde ]=_dgc ;_geg ._gde ++;_bed =!_bed ;};continue _bef ;};};return nil ;
};func (_ec *Decoder )decodeRowType2 ()error {if _ec ._febe {_ec ._eb .Align ();};if _bge :=_ec .decode1D ();_bge !=nil {return _bge ;};return nil ;};func (_fcc *Encoder )encodeG32D (_dag [][]byte )[]byte {var _bcff []byte ;var _afef int ;for _dcaf :=0;
_dcaf < len (_dag );_dcaf +=_fcc .K {if _fcc .Rows > 0&&!_fcc .EndOfBlock &&_dcaf ==_fcc .Rows {break ;};_fda ,_dfdf :=_ddge (_dag [_dcaf ],_afef ,_dgf );_bcff =_fcc .appendEncodedRow (_bcff ,_fda ,_afef );if _fcc .EncodedByteAlign {_dfdf =0;};_afef =_dfdf ;
for _fad :=_dcaf +1;_fad < (_dcaf +_fcc .K )&&_fad < len (_dag );_fad ++{if _fcc .Rows > 0&&!_fcc .EndOfBlock &&_fad ==_fcc .Rows {break ;};_bab ,_fgae :=_fdgcd (nil ,_afef ,_fbe );var _faf ,_aff ,_dea int ;_cffe :=-1;for _cffe < len (_dag [_fad ]){_faf =_agc (_dag [_fad ],_cffe );
_aff =_ecg (_dag [_fad ],_dag [_fad -1],_cffe );_dea =_agc (_dag [_fad -1],_aff );if _dea < _faf {_bab ,_fgae =_eebc (_bab ,_fgae );_cffe =_dea ;}else {if _a .Abs (float64 (_aff -_faf ))> 3{_bab ,_fgae ,_cffe =_ebfc (_dag [_fad ],_bab ,_fgae ,_cffe ,_faf );
}else {_bab ,_fgae =_dade (_bab ,_fgae ,_faf ,_aff );_cffe =_faf ;};};};_bcff =_fcc .appendEncodedRow (_bcff ,_bab ,_afef );if _fcc .EncodedByteAlign {_fgae =0;};_afef =_fgae %8;};};if _fcc .EndOfBlock {_afg ,_ :=_aef (_afef );_bcff =_fcc .appendEncodedRow (_bcff ,_afg ,_afef );
};return _bcff ;};func (_gcea *tree )fillWithNode (_eebb ,_fgfb int ,_cag *treeNode )error {_ebag :=_gcea ._ddfe ;for _ceef :=0;_ceef < _eebb ;_ceef ++{_dcbf :=uint (_eebb -1-_ceef );_gebb :=((_fgfb >>_dcbf )&1)!=0;_gfebd :=_ebag .walk (_gebb );if _gfebd !=nil {if _gfebd ._fbb {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ebag =_gfebd ;continue ;};if _ceef ==_eebb -1{_gfebd =_cag ;}else {_gfebd =&treeNode {};};if _fgfb ==0{_gfebd ._dde =true ;};_ebag .set (_gebb ,_gfebd );_ebag =_gfebd ;};return nil ;};func (_ebce *treeNode )set (_gab bool ,_cfg *treeNode ){if !_gab {_ebce ._efdc =_cfg ;
}else {_ebce ._bff =_cfg ;};};func (_ccbf *tree )fill (_cfaf ,_afdc ,_dfa int )error {_aead :=_ccbf ._ddfe ;for _bca :=0;_bca < _cfaf ;_bca ++{_gebd :=_cfaf -1-_bca ;_bdde :=((_afdc >>uint (_gebd ))&1)!=0;_gcee :=_aead .walk (_bdde );if _gcee !=nil {if _gcee ._fbb {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_aead =_gcee ;continue ;};_gcee =&treeNode {};if _bca ==_cfaf -1{_gcee ._bfa =_dfa ;_gcee ._fbb =true ;};if _afdc ==0{_gcee ._dde =true ;};_aead .set (_bdde ,_gcee );_aead =_gcee ;};return nil ;};func (_ecf *treeNode )walk (_bae bool )*treeNode {if _bae {return _ecf ._bff ;
};return _ecf ._efdc ;};func _fdgcd (_fafb []byte ,_bdd int ,_eae code )([]byte ,int ){_bcbc :=0;for _bcbc < _eae .BitsWritten {_efcg :=_bdd /8;_fca :=_bdd %8;if _efcg >=len (_fafb ){_fafb =append (_fafb ,0);};_eadf :=8-_fca ;_edf :=_eae .BitsWritten -_bcbc ;
if _eadf > _edf {_eadf =_edf ;};if _bcbc < 8{_fafb [_efcg ]=_fafb [_efcg ]|byte (_eae .Code >>uint (8+_fca -_bcbc ))&_ggb [8-_eadf -_fca ];}else {_fafb [_efcg ]=_fafb [_efcg ]|(byte (_eae .Code <<uint (_bcbc -8))&_ggb [8-_eadf ])>>uint (_fca );};_bdd +=_eadf ;
_bcbc +=_eadf ;};return _fafb ,_bdd ;};var _dgb =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
var (_feb map[int ]code ;_fdb map[int ]code ;_bgd map[int ]code ;_gf map[int ]code ;_db map[int ]code ;_ggb map[int ]byte ;_ef =code {Code :1<<4,BitsWritten :12};_dgf =code {Code :3<<3,BitsWritten :13};_fbe =code {Code :2<<3,BitsWritten :13};_bc =code {Code :1<<12,BitsWritten :4};
_ace =code {Code :1<<13,BitsWritten :3};_gbd =code {Code :1<<15,BitsWritten :1};_efc =code {Code :3<<13,BitsWritten :3};_acb =code {Code :3<<10,BitsWritten :6};_gcc =code {Code :3<<9,BitsWritten :7};_df =code {Code :2<<13,BitsWritten :3};_cggg =code {Code :2<<10,BitsWritten :6};
_dce =code {Code :2<<9,BitsWritten :7};);type tree struct{_ddfe *treeNode };var (_fb *treeNode ;_g *treeNode ;_cg *tree ;_ba *tree ;_bf *tree ;_e *tree ;_d =-2000;_dg =-1000;_gg =-3000;_dc =-4000;);func _ecg (_ffad ,_cada []byte ,_cde int )int {_cfeb :=_agc (_cada ,_cde );
if _cfeb < len (_cada )&&(_cde ==-1&&_cada [_cfeb ]==_afe ||_cde >=0&&_cde < len (_ffad )&&_ffad [_cde ]==_cada [_cfeb ]||_cde >=len (_ffad )&&_ffad [_cde -1]!=_cada [_cfeb ]){_cfeb =_agc (_cada ,_cfeb );};return _cfeb ;};func (_aca *Decoder )looseFetchEOL ()(bool ,error ){_eba ,_edaa :=_aca ._eb .ReadBits (12);
if _edaa !=nil {return false ,_edaa ;};switch _eba {case 0x1:return true ,nil ;case 0x0:for {_dgca ,_ddg :=_aca ._eb .ReadBool ();if _ddg !=nil {return false ,_ddg ;};if _dgca {return true ,nil ;};};default:return false ,nil ;};};type treeNode struct{_efdc *treeNode ;
_bff *treeNode ;_bfa int ;_dde bool ;_fbb bool ;};type tiffType int ;var _bg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var (_afe byte =1;_gfed byte =0;);func (_gfgg *Encoder )appendEncodedRow (_bbc ,_bcec []byte ,_fabc int )[]byte {if len (_bbc )> 0&&_fabc !=0&&!_gfgg .EncodedByteAlign {_bbc [len (_bbc )-1]=_bbc [len (_bbc )-1]|_bcec [0];_bbc =append (_bbc ,_bcec [1:]...);
}else {_bbc =append (_bbc ,_bcec ...);};return _bbc ;};var _fg =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_fde *Encoder )encodeG31D (_fc [][]byte )[]byte {var _bgdc []byte ;_egc :=0;for _aea :=range _fc {if _fde .Rows > 0&&!_fde .EndOfBlock &&_aea ==_fde .Rows {break ;};_bbf ,_egf :=_ddge (_fc [_aea ],_egc ,_ef );_bgdc =_fde .appendEncodedRow (_bgdc ,_bbf ,_egc );
if _fde .EncodedByteAlign {_egf =0;};_egc =_egf ;};if _fde .EndOfBlock {_ged ,_ :=_ebc (_egc );_bgdc =_fde .appendEncodedRow (_bgdc ,_ged ,_egc );};return _bgdc ;};const (_ tiffType =iota ;_cgf ;_fdg ;_cbf ;);func (_cbe *Decoder )fetch ()error {if _cbe ._gfd ==-1{return nil ;
};if _cbe ._acf < _cbe ._gfd {return nil ;};_cbe ._gfd =0;_cd :=_cbe .decodeRow ();if _cd !=nil {if !_c .Is (_cd ,_f .EOF ){return _cd ;};if _cbe ._gfd !=0{return _cd ;};_cbe ._gfd =-1;};_cbe ._acf =0;return nil ;};type Decoder struct{_eee int ;_dgfb int ;
_gcb int ;_agf []byte ;_ggf int ;_cc bool ;_fgf bool ;_gfe bool ;_gcbb bool ;_dbc bool ;_edb bool ;_febe bool ;_gfd int ;_acf int ;_bgg []int ;_dca []int ;_ccf int ;_gde int ;_bcb int ;_ce int ;_eb *_fe .Reader ;_af tiffType ;_afd error ;};func (_aec *Decoder )decodeRun (_ccb *tree )(int ,error ){var _dgfd int ;
_ddc :=_ccb ._ddfe ;for {_edc ,_eg :=_aec ._eb .ReadBool ();if _eg !=nil {return 0,_eg ;};_ddc =_ddc .walk (_edc );if _ddc ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _ddc ._fbb {_dgfd +=_ddc ._bfa ;switch {case _ddc ._bfa >=64:_ddc =_ccb ._ddfe ;case _ddc ._bfa >=0:return _dgfd ,nil ;default:return _aec ._eee ,nil ;};};};};func (_eea *Decoder )decodeRowType4 ()error {if !_eea ._cc {return _eea .decoderRowType41D ();
};if _eea ._febe {_eea ._eb .Align ();};_eea ._eb .Mark ();_ced ,_dgd :=_eea .tryFetchEOL ();if _dgd !=nil {return _dgd ;};if !_ced &&_eea ._dbc {_eea ._bcb ++;if _eea ._bcb > _eea ._ggf {return _de ;};_eea ._eb .Reset ();};if !_ced {_eea ._eb .Reset ();
};_ddf ,_dgd :=_eea ._eb .ReadBool ();if _dgd !=nil {return _dgd ;};if _ddf {if _ced &&_eea ._edb {if _dgd =_eea .tryFetchRTC2D ();_dgd !=nil {return _dgd ;};};_dgd =_eea .decode1D ();}else {_dgd =_eea .decode2D ();};if _dgd !=nil {return _dgd ;};return nil ;
};func _agc (_cgcc []byte ,_ddcf int )int {if _ddcf >=len (_cgcc ){return _ddcf ;};if _ddcf < -1{_ddcf =-1;};var _fae byte ;if _ddcf > -1{_fae =_cgcc [_ddcf ];}else {_fae =_afe ;};_gbfe :=_ddcf +1;for _gbfe < len (_cgcc ){if _cgcc [_gbfe ]!=_fae {break ;
};_gbfe ++;};return _gbfe ;};