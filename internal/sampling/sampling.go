//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/imageutil";_e "io";);type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_ea []uint32 )error ;};func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _df []uint32 ;_af :=bitsPerSample ;var _ef uint32 ;var _ce byte ;_fb :=0;_da :=0;_bb :=0;for _bb < len (data ){if _fb > 0{_efe :=_fb ;if _af < _efe {_efe =_af ;};_ef =(_ef <<uint (_efe ))|uint32 (_ce >>uint (8-_efe ));_fb -=_efe ;if _fb > 0{_ce =_ce <<uint (_efe );}else {_ce =0;};_af -=_efe ;if _af ==0{_df =append (_df ,_ef );_af =bitsPerSample ;_ef =0;_da ++;};}else {_bbb :=data [_bb ];_bb ++;_bg :=8;if _af < _bg {_bg =_af ;};_fb =8-_bg ;_ef =(_ef <<uint (_bg ))|uint32 (_bbb >>uint (_fb ));if _bg < 8{_ce =_bbb <<uint (_bg );};_af -=_bg ;if _af ==0{_df =append (_df ,_ef );_af =bitsPerSample ;_ef =0;_da ++;};};};for _fb >=bitsPerSample {_eg :=_fb ;if _af < _eg {_eg =_af ;};_ef =(_ef <<uint (_eg ))|uint32 (_ce >>uint (8-_eg ));_fb -=_eg ;if _fb > 0{_ce =_ce <<uint (_eg );}else {_ce =0;};_af -=_eg ;if _af ==0{_df =append (_df ,_ef );_af =bitsPerSample ;_ef =0;_da ++;};};return _df ;};func NewReader (img _c .ImageBase )*Reader {return &Reader {_a :_f .NewReader (img .Data ),_dd :img ,_cd :img .ColorComponents ,_dc :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func (_ae *Reader )ReadSamples (samples []uint32 )(_ag error ){for _be :=0;_be < len (samples );_be ++{samples [_be ],_ag =_ae .ReadSample ();if _ag !=nil {return _ag ;};};return nil ;};type SampleWriter interface{WriteSample (_efg uint32 )error ;WriteSamples (_agf []uint32 )error ;};func (_b *Reader )ReadSample ()(uint32 ,error ){if _b ._g ==_b ._dd .Height {return 0,_e .EOF ;};_ffb ,_fd :=_b ._a .ReadBits (byte (_b ._dd .BitsPerComponent ));if _fd !=nil {return 0,_fd ;};_b ._cd --;if _b ._cd ==0{_b ._cd =_b ._dd .ColorComponents ;_b ._ff ++;};if _b ._ff ==_b ._dd .Width {if _b ._dc {_b ._a .ConsumeRemainingBits ();};_b ._ff =0;_b ._g ++;};return uint32 (_ffb ),nil ;};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _gb []uint32 ;_bd :=bitsPerOutputSample ;var _bge uint32 ;var _bga uint32 ;_fa :=0;_fc :=0;_fg :=0;for _fg < len (data ){if _fa > 0{_eb :=_fa ;if _bd < _eb {_eb =_bd ;};_bge =(_bge <<uint (_eb ))|uint32 (_bga >>uint (bitsPerInputSample -_eb ));_fa -=_eb ;if _fa > 0{_bga =_bga <<uint (_eb );}else {_bga =0;};_bd -=_eb ;if _bd ==0{_gb =append (_gb ,_bge );_bd =bitsPerOutputSample ;_bge =0;_fc ++;};}else {_aea :=data [_fg ];_fg ++;_dcf :=bitsPerInputSample ;if _bd < _dcf {_dcf =_bd ;};_fa =bitsPerInputSample -_dcf ;_bge =(_bge <<uint (_dcf ))|uint32 (_aea >>uint (_fa ));if _dcf < bitsPerInputSample {_bga =_aea <<uint (_dcf );};_bd -=_dcf ;if _bd ==0{_gb =append (_gb ,_bge );_bd =bitsPerOutputSample ;_bge =0;_fc ++;};};};for _fa >=bitsPerOutputSample {_ba :=_fa ;if _bd < _ba {_ba =_bd ;};_bge =(_bge <<uint (_ba ))|uint32 (_bga >>uint (bitsPerInputSample -_ba ));_fa -=_ba ;if _fa > 0{_bga =_bga <<uint (_ba );}else {_bga =0;};_bd -=_ba ;if _bd ==0{_gb =append (_gb ,_bge );_bd =bitsPerOutputSample ;_bge =0;_fc ++;};};if _bd > 0&&_bd < bitsPerOutputSample {_bge <<=uint (_bd );_gb =append (_gb ,_bge );};return _gb ;};type Writer struct{_dg _c .ImageBase ;_ddb *_f .Writer ;_bged ,_cf int ;_gbd bool ;};type Reader struct{_dd _c .ImageBase ;_a *_f .Reader ;_ff ,_g ,_cd int ;_dc bool ;};func (_ee *Writer )WriteSample (sample uint32 )error {if _ ,_cc :=_ee ._ddb .WriteBits (uint64 (sample ),_ee ._dg .BitsPerComponent );_cc !=nil {return _cc ;};_ee ._cf --;if _ee ._cf ==0{_ee ._cf =_ee ._dg .ColorComponents ;_ee ._bged ++;};if _ee ._bged ==_ee ._dg .Width {if _ee ._gbd {_ee ._ddb .FinishByte ();};_ee ._bged =0;};return nil ;};func (_ge *Writer )WriteSamples (samples []uint32 )error {for _bac :=0;_bac < len (samples );_bac ++{if _dcd :=_ge .WriteSample (samples [_bac ]);_dcd !=nil {return _dcd ;};};return nil ;};func NewWriter (img _c .ImageBase )*Writer {return &Writer {_ddb :_f .NewWriterMSB (img .Data ),_dg :img ,_cf :img .ColorComponents ,_gbd :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};