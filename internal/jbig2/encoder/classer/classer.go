//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_e "github.com/unidoc/unipdf/v3/common";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fc "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_g "image";_f "math";
);type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_ea .IntSlice ;TemplateAreas *_ea .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_c .BitmapsArray ;UndilatedTemplates *_c .Bitmaps ;DilatedTemplates *_c .Bitmaps ;
TemplatesSize _ea .IntsMap ;FgTemplates *_ea .NumSlice ;CentroidPoints *_c .Points ;CentroidPointsTemplates *_c .Points ;ClassIDs *_ea .IntSlice ;ComponentPageNumbers *_ea .IntSlice ;PtaUL *_c .Points ;PtaLL *_c .Points ;};func (_aag *Classer )verifyMethod (_ccd Method )error {if _ccd !=RankHaus &&_ccd !=Correlation {return _fc .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_cdf *similarTemplatesFinder )Next ()int {var (_bfg ,_edea ,_cgb ,_gebg int ;_ggd bool ;_dgfad *_c .Bitmap ;_ebe error ;);for {if _cdf .Index >=25{return -1;};_edea =_cdf .Width +TwoByTwoWalk [2*_cdf .Index ];_bfg =_cdf .Height +TwoByTwoWalk [2*_cdf .Index +1];
if _bfg < 1||_edea < 1{_cdf .Index ++;continue ;};if len (_cdf .CurrentNumbers )==0{_cdf .CurrentNumbers ,_ggd =_cdf .Classer .TemplatesSize .GetSlice (uint64 (_edea )*uint64 (_bfg ));if !_ggd {_cdf .Index ++;continue ;};_cdf .N =0;};_cgb =len (_cdf .CurrentNumbers );
for ;_cdf .N < _cgb ;_cdf .N ++{_gebg =_cdf .CurrentNumbers [_cdf .N ];_dgfad ,_ebe =_cdf .Classer .DilatedTemplates .GetBitmap (_gebg );if _ebe !=nil {_e .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _dgfad .Width -2*JbAddedPixels ==_edea &&_dgfad .Height -2*JbAddedPixels ==_bfg {return _gebg ;};};_cdf .Index ++;_cdf .CurrentNumbers =nil ;};};func (_fd *Classer )getULCorners (_ee *_c .Bitmap ,_ge *_c .Boxes )error {const _ef ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _ee ==nil {return _fc .Error (_ef ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ge ==nil {return _fc .Error (_ef ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _fd .PtaUL ==nil {_fd .PtaUL =&_c .Points {};
};_cb :=len (*_ge );var (_fg ,_gae ,_db ,_dd int ;_ade ,_fcg ,_fff ,_ce float32 ;_de error ;_ca *_g .Rectangle ;_ddg *_c .Bitmap ;_dfd _g .Point ;);for _ffg :=0;_ffg < _cb ;_ffg ++{_fg =_fd .BaseIndex +_ffg ;if _ade ,_fcg ,_de =_fd .CentroidPoints .GetGeometry (_fg );
_de !=nil {return _fc .Wrap (_de ,_ef ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _gae ,_de =_fd .ClassIDs .Get (_fg );_de !=nil {return _fc .Wrap (_de ,_ef ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _fff ,_ce ,_de =_fd .CentroidPointsTemplates .GetGeometry (_gae );_de !=nil {return _fc .Wrap (_de ,_ef ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_gef :=_fff -_ade ;
_cca :=_ce -_fcg ;if _gef >=0{_db =int (_gef +0.5);}else {_db =int (_gef -0.5);};if _cca >=0{_dd =int (_cca +0.5);}else {_dd =int (_cca -0.5);};if _ca ,_de =_ge .Get (_ffg );_de !=nil {return _fc .Wrap (_de ,_ef ,"");};_gbdc ,_caf :=_ca .Min .X ,_ca .Min .Y ;
_ddg ,_de =_fd .UndilatedTemplates .GetBitmap (_gae );if _de !=nil {return _fc .Wrap (_de ,_ef ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_dfd ,_de =_ab (_ee ,_gbdc ,_caf ,_db ,_dd ,_ddg );if _de !=nil {return _fc .Wrap (_de ,_ef ,"");};_fd .PtaUL .AddPoint (float32 (_gbdc -_db +_dfd .X ),float32 (_caf -_dd +_dfd .Y ));};return nil ;};func DefaultSettings ()Settings {_fgb :=&Settings {};
_fgb .SetDefault ();return *_fgb };const JbAddedPixels =6;func (_aa *Classer )ComputeLLCorners ()(_bd error ){const _ed ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _aa .PtaUL ==nil {return _fc .Error (_ed ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};_dc :=len (*_aa .PtaUL );_aa .PtaLL =&_c .Points {};var (_ga ,_gb float32 ;_ff ,_bf int ;
_eaf *_c .Bitmap ;);for _da :=0;_da < _dc ;_da ++{_ga ,_gb ,_bd =_aa .PtaUL .GetGeometry (_da );if _bd !=nil {_e .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bd );
return _fc .Wrap (_bd ,_ed ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ff ,_bd =_aa .ClassIDs .Get (_da );if _bd !=nil {_e .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_bd );
return _fc .Wrap (_bd ,_ed ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_eaf ,_bd =_aa .UndilatedTemplates .GetBitmap (_ff );if _bd !=nil {_e .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_bd );
return _fc .Wrap (_bd ,_ed ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_bf =_eaf .Height ;_aa .PtaLL .AddPoint (_ga ,_gb +float32 (_bf ));};return nil ;};const (MaxDiffWidth =2;MaxDiffHeight =2;
);func Init (settings Settings )(*Classer ,error ){const _cc ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";_b :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_ea .IntsMap {},TemplateAreas :&_ea .IntSlice {},ComponentPageNumbers :&_ea .IntSlice {},ClassIDs :&_ea .IntSlice {},ComponentsNumber :&_ea .IntSlice {},CentroidPoints :&_c .Points {},CentroidPointsTemplates :&_c .Points {},UndilatedTemplates :&_c .Bitmaps {},DilatedTemplates :&_c .Bitmaps {},ClassInstances :&_c .BitmapsArray {},FgTemplates :&_ea .NumSlice {}};
if _a :=_b .Settings .Validate ();_a !=nil {return nil ,_fc .Wrap (_a ,_cc ,"");};return _b ,nil ;};func (_fa *Classer )classifyCorrelation (_edb *_c .Boxes ,_gde *_c .Bitmaps ,_dgd int )error {const _geg ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _edb ==nil {return _fc .Error (_geg ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _gde ==nil {return _fc .Error (_geg ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_cab :=len (_gde .Values );if _cab ==0{_e .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_ffe ,_eegc *_c .Bitmap ;_baa error ;);_ffa :=&_c .Bitmaps {Values :make ([]*_c .Bitmap ,_cab )};for _fgd ,_faa :=range _gde .Values {_eegc ,_baa =_faa .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);
if _baa !=nil {return _fc .Wrap (_baa ,_geg ,"");};_ffa .Values [_fgd ]=_eegc ;};_bfc :=_fa .FgTemplates ;_deb :=_c .MakePixelSumTab8 ();_bg :=_c .MakePixelCentroidTab8 ();_bff :=make ([]int ,_cab );_gf :=make ([][]int ,_cab );_bdc :=_c .Points (make ([]_c .Point ,_cab ));
_dee :=&_bdc ;var (_fdc ,_faf int ;_ccb ,_ac ,_daf int ;_eec ,_acc int ;_edc byte ;);for _ggc ,_eda :=range _ffa .Values {_gf [_ggc ]=make ([]int ,_eda .Height );_fdc =0;_faf =0;_ac =(_eda .Height -1)*_eda .RowStride ;_ccb =0;for _acc =_eda .Height -1;
_acc >=0;_acc ,_ac =_acc -1,_ac -_eda .RowStride {_gf [_ggc ][_acc ]=_ccb ;_daf =0;for _eec =0;_eec < _eda .RowStride ;_eec ++{_edc =_eda .Data [_ac +_eec ];_daf +=_deb [_edc ];_fdc +=_bg [_edc ]+_eec *8*_deb [_edc ];};_ccb +=_daf ;_faf +=_daf *_acc ;};
_bff [_ggc ]=_ccb ;if _ccb > 0{(*_dee )[_ggc ]=_c .Point {X :float32 (_fdc )/float32 (_ccb ),Y :float32 (_faf )/float32 (_ccb )};}else {(*_dee )[_ggc ]=_c .Point {X :float32 (_eda .Width )/float32 (2),Y :float32 (_eda .Height )/float32 (2)};};};if _baa =_fa .CentroidPoints .Add (_dee );
_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");};var (_gfe ,_ecd ,_caa int ;_abed float64 ;_eggb ,_gfa ,_gge ,_eea float32 ;_fge ,_abc _c .Point ;_geda bool ;_bde *similarTemplatesFinder ;
_gff int ;_cec *_c .Bitmap ;_debe *_g .Rectangle ;_ae *_c .Bitmaps ;);for _gff ,_eegc =range _ffa .Values {_ecd =_bff [_gff ];if _eggb ,_gfa ,_baa =_dee .GetGeometry (_gff );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0070t\u0061\u0020\u002d\u0020\u0069");
};_geda =false ;_beg :=len (_fa .UndilatedTemplates .Values );_bde =_edff (_fa ,_eegc );for _egb :=_bde .Next ();_egb > -1;{if _cec ,_baa =_fa .UndilatedTemplates .GetBitmap (_egb );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");
};if _caa ,_baa =_bfc .GetInt (_egb );_baa !=nil {_e .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_baa );};if _gge ,_eea ,_baa =_fa .CentroidPointsTemplates .GetGeometry (_egb );
_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _fa .Settings .WeightFactor > 0.0{if _gfe ,_baa =_fa .TemplateAreas .Get (_egb );_baa !=nil {_e .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_baa );
};_abed =_fa .Settings .Thresh +(1.0-_fa .Settings .Thresh )*_fa .Settings .WeightFactor *float64 (_caa )/float64 (_gfe );}else {_abed =_fa .Settings .Thresh ;};_gcf ,_aba :=_c .CorrelationScoreThresholded (_eegc ,_cec ,_ecd ,_caa ,_fge .X -_abc .X ,_fge .Y -_abc .Y ,MaxDiffWidth ,MaxDiffHeight ,_deb ,_gf [_gff ],float32 (_abed ));
if _aba !=nil {return _fc .Wrap (_aba ,_geg ,"");};if _ceb {var (_bfa ,_egd float64 ;_cef ,_faaf int ;);_bfa ,_aba =_c .CorrelationScore (_eegc ,_cec ,_ecd ,_caa ,_eggb -_gge ,_gfa -_eea ,MaxDiffWidth ,MaxDiffHeight ,_deb );if _aba !=nil {return _fc .Wrap (_aba ,_geg ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_egd ,_aba =_c .CorrelationScoreSimple (_eegc ,_cec ,_ecd ,_caa ,_eggb -_gge ,_gfa -_eea ,MaxDiffWidth ,MaxDiffHeight ,_deb );if _aba !=nil {return _fc .Wrap (_aba ,_geg ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_cef =int (_f .Sqrt (_bfa *float64 (_ecd )*float64 (_caa )));_faaf =int (_f .Sqrt (_egd *float64 (_ecd )*float64 (_caa )));if (_bfa >=_abed )!=(_egd >=_abed ){return _fc .Errorf (_geg ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_cef ,_bfa ,_bfa >=_abed ,_faaf ,_egd ,_egd >=_abed ,_bfa -_egd );
};if _bfa >=_abed !=_gcf {return _fc .Errorf (_geg ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_bfa ,_bfa *float64 (_ecd )*float64 (_caa ),_cef ,_abed ,float32 (_abed )*float32 (_ecd )*float32 (_caa ),_gcf );
};};if _gcf {_geda =true ;if _aba =_fa .ClassIDs .Add (_egb );_aba !=nil {return _fc .Wrap (_aba ,_geg ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _aba =_fa .ComponentPageNumbers .Add (_dgd );_aba !=nil {return _fc .Wrap (_aba ,_geg ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _fa .Settings .KeepClassInstances {if _ffe ,_aba =_gde .GetBitmap (_gff );_aba !=nil {return _fc .Wrap (_aba ,_geg ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _ae ,_aba =_fa .ClassInstances .GetBitmaps (_egb );
_aba !=nil {return _fc .Wrap (_aba ,_geg ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_ae .AddBitmap (_ffe );if _debe ,_aba =_edb .Get (_gff );_aba !=nil {return _fc .Wrap (_aba ,_geg ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_ae .AddBox (_debe );};break ;};};if !_geda {if _baa =_fa .ClassIDs .Add (_beg );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _baa =_fa .ComponentPageNumbers .Add (_dgd );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ae =&_c .Bitmaps {};if _ffe ,_baa =_gde .GetBitmap (_gff );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ae .AddBitmap (_ffe );_cac ,_cgf :=_ffe .Width ,_ffe .Height ;_dfb :=uint64 (_cgf )*uint64 (_cac );_fa .TemplatesSize .Add (_dfb ,_beg );
if _debe ,_baa =_edb .Get (_gff );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_ae .AddBox (_debe );_fa .ClassInstances .AddBitmaps (_ae );_fa .CentroidPointsTemplates .AddPoint (_eggb ,_gfa );_fa .FgTemplates .AddInt (_ecd );
_fa .UndilatedTemplates .AddBitmap (_ffe );_gfe =(_eegc .Width -2*JbAddedPixels )*(_eegc .Height -2*JbAddedPixels );if _baa =_fa .TemplateAreas .Add (_gfe );_baa !=nil {return _fc .Wrap (_baa ,_geg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_fa .NumberOfClasses =len (_fa .UndilatedTemplates .Values );
return nil ;};func _edff (_cdc *Classer ,_edfa *_c .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_edfa .Width ,Height :_edfa .Height ,Classer :_cdc };};const (RankHaus Method =iota ;Correlation ;);var _ceb bool ;func (_gc *Classer )addPageComponents (_ag *_c .Bitmap ,_gd *_c .Boxes ,_cg *_c .Bitmaps ,_fe int ,_dab Method )error {const _gbd ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _ag ==nil {return _fc .Error (_gbd ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _gd ==nil ||_cg ==nil ||len (*_gd )==0{_e .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_ag );
return nil ;};var _bb error ;switch _dab {case RankHaus :_bb =_gc .classifyRankHaus (_gd ,_cg ,_fe );case Correlation :_bb =_gc .classifyCorrelation (_gd ,_cg ,_fe );default:_e .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_dab );
return _fc .Error (_gbd ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _bb !=nil {return _fc .Wrap (_bb ,_gbd ,"");};if _bb =_gc .getULCorners (_ag ,_gd );_bb !=nil {return _fc .Wrap (_bb ,_gbd ,"");
};_bc :=len (*_gd );_gc .BaseIndex +=_bc ;if _bb =_gc .ComponentsNumber .Add (_bc );_bb !=nil {return _fc .Wrap (_bb ,_gbd ,"");};return nil ;};func (_daff *Classer )classifyRankHouseNonOne (_dge *_c .Boxes ,_ddge ,_dgdc ,_edf *_c .Bitmaps ,_cgc *_c .Points ,_aad *_ea .NumSlice ,_adf int )(_dff error ){const _ace ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_ffff ,_efd ,_ebf ,_efc float32 ;_fea ,_fag ,_adb int ;_fbgg ,_fdd ,_ddd ,_bbdc ,_fgfg *_c .Bitmap ;_gcb ,_dcg bool ;);_fbfb :=_c .MakePixelSumTab8 ();for _dca :=0;_dca < len (_ddge .Values );_dca ++{if _fdd ,_dff =_dgdc .GetBitmap (_dca );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _fea ,_dff =_aad .GetInt (_dca );_dff !=nil {_e .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_dca ,_dff );
};if _ddd ,_dff =_edf .GetBitmap (_dca );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _ffff ,_efd ,_dff =_cgc .GetGeometry (_dca );_dff !=nil {return _fc .Wrapf (_dff ,_ace ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_fbe :=len (_daff .UndilatedTemplates .Values );_gcb =false ;_bbc :=_edff (_daff ,_fdd );for _adb =_bbc .Next ();_adb > -1;{if _bbdc ,_dff =_daff .UndilatedTemplates .GetBitmap (_adb );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _fag ,_dff =_daff .FgTemplates .GetInt (_adb );_dff !=nil {_e .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_adb ,_dff );
};if _fgfg ,_dff =_daff .DilatedTemplates .GetBitmap (_adb );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _ebf ,_efc ,_dff =_daff .CentroidPointsTemplates .GetGeometry (_adb );
_dff !=nil {return _fc .Wrap (_dff ,_ace ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_dcg ,_dff =_c .RankHausTest (_fdd ,_ddd ,_bbdc ,_fgfg ,_ffff -_ebf ,_efd -_efc ,MaxDiffWidth ,MaxDiffHeight ,_fea ,_fag ,float32 (_daff .Settings .RankHaus ),_fbfb );
if _dff !=nil {return _fc .Wrap (_dff ,_ace ,"");};if _dcg {_gcb =true ;if _dff =_daff .ClassIDs .Add (_adb );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"");};if _dff =_daff .ComponentPageNumbers .Add (_adf );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"");
};if _daff .Settings .KeepClassInstances {_bbcd ,_daad :=_daff .ClassInstances .GetBitmaps (_adb );if _daad !=nil {return _fc .Wrap (_daad ,_ace ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _fbgg ,_daad =_ddge .GetBitmap (_dca );_daad !=nil {return _fc .Wrap (_daad ,_ace ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_bbcd .Values =append (_bbcd .Values ,_fbgg );_ccc ,_daad :=_dge .Get (_dca );if _daad !=nil {return _fc .Wrap (_daad ,_ace ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_bbcd .Boxes =append (_bbcd .Boxes ,_ccc );};break ;};};if !_gcb {if _dff =_daff .ClassIDs .Add (_fbe );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _dff =_daff .ComponentPageNumbers .Add (_adf );_dff !=nil {return _fc .Wrap (_dff ,_ace ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ebd :=&_c .Bitmaps {};_fbgg =_ddge .Values [_dca ];_ebd .AddBitmap (_fbgg );_ede ,_gag :=_fbgg .Width ,_fbgg .Height ;_daff .TemplatesSize .Add (uint64 (_ede )*uint64 (_gag ),_fbe );_dfab ,_dea :=_dge .Get (_dca );if _dea !=nil {return _fc .Wrap (_dea ,_ace ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_ebd .AddBox (_dfab );_daff .ClassInstances .AddBitmaps (_ebd );_daff .CentroidPointsTemplates .AddPoint (_ffff ,_efd );_daff .UndilatedTemplates .AddBitmap (_fdd );_daff .DilatedTemplates .AddBitmap (_ddd );_daff .FgTemplates .AddInt (_fea );};};_daff .NumberOfClasses =len (_daff .UndilatedTemplates .Values );
return nil ;};func (_gbg *Settings )SetDefault (){if _gbg .MaxCompWidth ==0{switch _gbg .Components {case _c .ComponentConn :_gbg .MaxCompWidth =MaxConnCompWidth ;case _c .ComponentCharacters :_gbg .MaxCompWidth =MaxCharCompWidth ;case _c .ComponentWords :_gbg .MaxCompWidth =MaxWordCompWidth ;
};};if _gbg .MaxCompHeight ==0{_gbg .MaxCompHeight =MaxCompHeight ;};if _gbg .Thresh ==0.0{_gbg .Thresh =0.9;};if _gbg .WeightFactor ==0.0{_gbg .WeightFactor =0.75;};if _gbg .RankHaus ==0.0{_gbg .RankHaus =0.97;};if _gbg .SizeHaus ==0{_gbg .SizeHaus =2;
};};const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);type Method int ;type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};type Settings struct{MaxCompWidth int ;
MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _c .Component ;Method Method ;};func _ab (_gdb *_c .Bitmap ,_eg ,_gg ,_eeg ,_dfa int ,_cbb *_c .Bitmap )(_fgf _g .Point ,_ba error ){const _be ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _gdb ==nil {return _fgf ,_fc .Error (_be ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _cbb ==nil {return _fgf ,_fc .Error (_be ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_ged ,_egg :=_cbb .Width ,_cbb .Height ;_bbd ,_dcc :=_eg -_eeg -JbAddedPixels ,_gg -_dfa -JbAddedPixels ;_e .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_eg ,_gg ,_ged ,_egg ,_bbd ,_dcc );
_ec ,_ba :=_c .Rect (_bbd ,_dcc ,_ged ,_egg );if _ba !=nil {return _fgf ,_fc .Wrap (_ba ,_be ,"");};_gdbc ,_ ,_ba :=_gdb .ClipRectangle (_ec );if _ba !=nil {_e .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_ec );
return _fgf ,_fc .Wrap (_ba ,_be ,"");};_abe :=_c .New (_gdbc .Width ,_gdbc .Height );_daa :=_f .MaxInt32 ;var _gbf ,_cgg ,_ddb ,_dbf ,_gaed int ;for _gbf =-1;_gbf <=1;_gbf ++{for _cgg =-1;_cgg <=1;_cgg ++{if _ ,_ba =_c .Copy (_abe ,_gdbc );_ba !=nil {return _fgf ,_fc .Wrap (_ba ,_be ,"");
};if _ba =_abe .RasterOperation (_cgg ,_gbf ,_ged ,_egg ,_c .PixSrcXorDst ,_cbb ,0,0);_ba !=nil {return _fgf ,_fc .Wrap (_ba ,_be ,"");};_ddb =_abe .CountPixels ();if _ddb < _daa {_dbf =_cgg ;_gaed =_gbf ;_daa =_ddb ;};};};_fgf .X =_dbf ;_fgf .Y =_gaed ;
return _fgf ,nil ;};func (_bge Settings )Validate ()error {const _dgdg ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";if _bge .Thresh < 0.4||_bge .Thresh > 0.98{return _fc .Error (_dgdg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _bge .WeightFactor < 0.0||_bge .WeightFactor > 1.0{return _fc .Error (_dgdg ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bge .RankHaus < 0.5||_bge .RankHaus > 1.0{return _fc .Error (_dgdg ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bge .SizeHaus < 1||_bge .SizeHaus > 10{return _fc .Error (_dgdg ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _bge .Components {case _c .ComponentConn ,_c .ComponentCharacters ,_c .ComponentWords :default:return _fc .Error (_dgdg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_bfcb *Classer )classifyRankHouseOne (_eege *_c .Boxes ,_aca ,_ffae ,_ead *_c .Bitmaps ,_efb *_c .Points ,_ege int )(_cag error ){const _feb ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_ggea ,_bee ,_bdg ,_fab float32 ;_aae int ;_gac ,_deeg ,_ecb ,_cd ,_bbb *_c .Bitmap ;_def ,_fgc bool ;);for _fffe :=0;_fffe < len (_aca .Values );_fffe ++{_deeg =_ffae .Values [_fffe ];_ecb =_ead .Values [_fffe ];_ggea ,_bee ,_cag =_efb .GetGeometry (_fffe );
if _cag !=nil {return _fc .Wrapf (_cag ,_feb ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_abd :=len (_bfcb .UndilatedTemplates .Values );_def =false ;_ccbb :=_edff (_bfcb ,_deeg );for _aae =_ccbb .Next ();_aae > -1;
{_cd ,_cag =_bfcb .UndilatedTemplates .GetBitmap (_aae );if _cag !=nil {return _fc .Wrap (_cag ,_feb ,"\u0062\u006d\u0033");};_bbb ,_cag =_bfcb .DilatedTemplates .GetBitmap (_aae );if _cag !=nil {return _fc .Wrap (_cag ,_feb ,"\u0062\u006d\u0034");};_bdg ,_fab ,_cag =_bfcb .CentroidPointsTemplates .GetGeometry (_aae );
if _cag !=nil {return _fc .Wrap (_cag ,_feb ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_fgc ,_cag =_c .HausTest (_deeg ,_ecb ,_cd ,_bbb ,_ggea -_bdg ,_bee -_fab ,MaxDiffWidth ,MaxDiffHeight );
if _cag !=nil {return _fc .Wrap (_cag ,_feb ,"");};if _fgc {_def =true ;if _cag =_bfcb .ClassIDs .Add (_aae );_cag !=nil {return _fc .Wrap (_cag ,_feb ,"");};if _cag =_bfcb .ComponentPageNumbers .Add (_ege );_cag !=nil {return _fc .Wrap (_cag ,_feb ,"");
};if _bfcb .Settings .KeepClassInstances {_gca ,_dae :=_bfcb .ClassInstances .GetBitmaps (_aae );if _dae !=nil {return _fc .Wrap (_dae ,_feb ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_gac ,_dae =_aca .GetBitmap (_fffe );if _dae !=nil {return _fc .Wrap (_dae ,_feb ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_gca .AddBitmap (_gac );_abeb ,_dae :=_eege .Get (_fffe );if _dae !=nil {return _fc .Wrap (_dae ,_feb ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_gca .AddBox (_abeb );};break ;};};if !_def {if _cag =_bfcb .ClassIDs .Add (_abd );_cag !=nil {return _fc .Wrap (_cag ,_feb ,"");
};if _cag =_bfcb .ComponentPageNumbers .Add (_ege );_cag !=nil {return _fc .Wrap (_cag ,_feb ,"");};_gba :=&_c .Bitmaps {};_gac ,_cag =_aca .GetBitmap (_fffe );if _cag !=nil {return _fc .Wrap (_cag ,_feb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_gba .Values =append (_gba .Values ,_gac );
_fbf ,_eged :=_gac .Width ,_gac .Height ;_bfcb .TemplatesSize .Add (uint64 (_eged )*uint64 (_fbf ),_abd );_cfg ,_dce :=_eege .Get (_fffe );if _dce !=nil {return _fc .Wrap (_dce ,_feb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_gba .AddBox (_cfg );_bfcb .ClassInstances .AddBitmaps (_gba );
_bfcb .CentroidPointsTemplates .AddPoint (_ggea ,_bee );_bfcb .UndilatedTemplates .AddBitmap (_deeg );_bfcb .DilatedTemplates .AddBitmap (_ecb );};};return nil ;};func (_ad *Classer )AddPage (inputPage *_c .Bitmap ,pageNumber int ,method Method )(_dg error ){const _df ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_ad .Widths [pageNumber ]=inputPage .Width ;_ad .Heights [pageNumber ]=inputPage .Height ;if _dg =_ad .verifyMethod (method );_dg !=nil {return _fc .Wrap (_dg ,_df ,"");};_cf ,_dgf ,_dg :=inputPage .GetComponents (_ad .Settings .Components ,_ad .Settings .MaxCompWidth ,_ad .Settings .MaxCompHeight );
if _dg !=nil {return _fc .Wrap (_dg ,_df ,"");};_e .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_cf );if _dg =_ad .addPageComponents (inputPage ,_dgf ,_cf ,pageNumber ,method );_dg !=nil {return _fc .Wrap (_dg ,_df ,"");
};return nil ;};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};func (_bag *Classer )classifyRankHaus (_fcb *_c .Boxes ,_cba *_c .Bitmaps ,_fef int )error {const _dfg ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _fcb ==nil {return _fc .Error (_dfg ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cba ==nil {return _fc .Error (_dfg ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_bga :=len (_cba .Values );if _bga ==0{return _fc .Error (_dfg ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_eb :=_cba .CountPixels ();_deed :=_bag .Settings .SizeHaus ;_fbg :=_c .SelCreateBrick (_deed ,_deed ,_deed /2,_deed /2,_c .SelHit );
_bad :=&_c .Bitmaps {Values :make ([]*_c .Bitmap ,_bga )};_geb :=&_c .Bitmaps {Values :make ([]*_c .Bitmap ,_bga )};var (_dgfa ,_bagd ,_gaa *_c .Bitmap ;_eca error ;);for _bcb :=0;_bcb < _bga ;_bcb ++{_dgfa ,_eca =_cba .GetBitmap (_bcb );if _eca !=nil {return _fc .Wrap (_eca ,_dfg ,"");
};_bagd ,_eca =_dgfa .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _eca !=nil {return _fc .Wrap (_eca ,_dfg ,"");};_gaa ,_eca =_c .Dilate (nil ,_bagd ,_fbg );if _eca !=nil {return _fc .Wrap (_eca ,_dfg ,"");};_bad .Values [_bga ]=_bagd ;
_geb .Values [_bga ]=_gaa ;};_bfab ,_eca :=_c .Centroids (_bad .Values );if _eca !=nil {return _fc .Wrap (_eca ,_dfg ,"");};if _eca =_bfab .Add (_bag .CentroidPoints );_eca !=nil {_e .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _bag .Settings .RankHaus ==1.0{_eca =_bag .classifyRankHouseOne (_fcb ,_cba ,_bad ,_geb ,_bfab ,_fef );}else {_eca =_bag .classifyRankHouseNonOne (_fcb ,_cba ,_bad ,_geb ,_bfab ,_eb ,_fef );};if _eca !=nil {return _fc .Wrap (_eca ,_dfg ,"");};return nil ;
};