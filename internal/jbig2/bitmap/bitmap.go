//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ec "encoding/binary";_ac "github.com/stretchr/testify/require";_ab "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_ee "github.com/unidoc/unipdf/v3/internal/imageutil";_b "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_be "image";_fd "math";_g "sort";_e "strings";_f "testing";);func (_ead *Bitmap )ClipRectangle (box *_be .Rectangle )(_aagf *Bitmap ,_agdb *_be .Rectangle ,_dfgb error ){const _eca ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_d .Error (_eca ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bca ,_acf :=_ead .Width ,_ead .Height ;_gfeg :=_be .Rect (0,0,_bca ,_acf );if !box .Overlaps (_gfeg ){return nil ,nil ,_d .Error (_eca ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_edgd :=box .Intersect (_gfeg );_ddcc ,_edgf :=_edgd .Min .X ,_edgd .Min .Y ;_efc ,_gabf :=_edgd .Dx (),_edgd .Dy ();_aagf =New (_efc ,_gabf );_aagf .Text =_ead .Text ;if _dfgb =_aagf .RasterOperation (0,0,_efc ,_gabf ,PixSrc ,_ead ,_ddcc ,_edgf );_dfgb !=nil {return nil ,nil ,_d .Wrap (_dfgb ,_eca ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_agdb =&_edgd ;return _aagf ,_agdb ,nil ;};var (_dadec =_dcb ();_cede =_aded ();_aacd =_af (););func TstAddSymbol (t *_f .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_gdda :=_be .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_gdda );*x +=sym .Width +space ;};func _ebcf (_fddd *Bitmap ,_gfdd *Bitmap ,_ecega *Selection )(*Bitmap ,error ){var (_baaf *Bitmap ;_cdccb error ;);_fddd ,_cdccb =_dggcc (_fddd ,_gfdd ,_ecega ,&_baaf );if _cdccb !=nil {return nil ,_cdccb ;};if _cdccb =_fddd .clearAll ();_cdccb !=nil {return nil ,_cdccb ;};var _aege SelectionValue ;for _cdgf :=0;_cdgf < _ecega .Height ;_cdgf ++{for _ddbb :=0;_ddbb < _ecega .Width ;_ddbb ++{_aege =_ecega .Data [_cdgf ][_ddbb ];if _aege ==SelHit {if _cdccb =_fddd .RasterOperation (_ddbb -_ecega .Cx ,_cdgf -_ecega .Cy ,_gfdd .Width ,_gfdd .Height ,PixSrcOrDst ,_baaf ,0,0);_cdccb !=nil {return nil ,_cdccb ;};};};};return _fddd ,nil ;};func TstWriteSymbols (t *_f .T ,bms *Bitmaps ,src *Bitmap ){for _cegff :=0;_cegff < bms .Size ();_cegff ++{_bebg :=bms .Values [_cegff ];_fabca :=bms .Boxes [_cegff ];_cfcd :=src .RasterOperation (_fabca .Min .X ,_fabca .Min .Y ,_bebg .Width ,_bebg .Height ,PixSrc ,_bebg ,0,0);_ac .NoError (t ,_cfcd );};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _caeb (d ,s )};func (_efe *Bitmap )InverseData (){_efe .inverseData ()};func (_geda *byHeight )Swap (i ,j int ){_geda .Values [i ],_geda .Values [j ]=_geda .Values [j ],_geda .Values [i ];if _geda .Boxes !=nil {_geda .Boxes [i ],_geda .Boxes [j ]=_geda .Boxes [j ],_geda .Boxes [i ];};};func (_cedef *Bitmaps )AddBox (box *_be .Rectangle ){_cedef .Boxes =append (_cedef .Boxes ,box )};func (_fbcgg *BitmapsArray )GetBox (i int )(*_be .Rectangle ,error ){const _ggcff ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _fbcgg ==nil {return nil ,_d .Error (_ggcff ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fbcgg .Boxes )-1{return nil ,_d .Errorf (_ggcff ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fbcgg .Boxes [i ],nil ;};func (_gdefa *Points )Add (pt *Points )error {const _afdfd ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _gdefa ==nil {return _d .Error (_afdfd ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _d .Error (_afdfd ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_gdefa =append (*_gdefa ,*pt ...);return nil ;};func _cbdb (_adbf ,_fddb ,_abaf *Bitmap ,_edcc int )(*Bitmap ,error ){const _beced ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _fddb ==nil {return nil ,_d .Error (_beced ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _abaf ==nil {return nil ,_d .Error (_beced ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _edcc !=4&&_edcc !=8{return nil ,_d .Error (_beced ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _cddfg error ;_adbf ,_cddfg =_caeb (_adbf ,_fddb );if _cddfg !=nil {return nil ,_d .Wrap (_cddfg ,_beced ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_gfb :=_fddb .createTemplate ();_abaf .setPadBits (0);for _aebca :=0;_aebca < _eadee ;_aebca ++{_gfb ,_cddfg =_caeb (_gfb ,_adbf );if _cddfg !=nil {return nil ,_d .Wrapf (_cddfg ,_beced ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aebca );};if _cddfg =_adba (_adbf ,_abaf ,_edcc );_cddfg !=nil {return nil ,_d .Wrapf (_cddfg ,_beced ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aebca );};if _gfb .Equals (_adbf ){break ;};};return _adbf ,nil ;};type Point struct{X ,Y float32 ;};func (_cbc *Bitmap )GetUnpaddedData ()([]byte ,error ){_bcdf :=uint (_cbc .Width &0x07);if _bcdf ==0{return _cbc .Data ,nil ;};_edf :=_cbc .Width *_cbc .Height ;if _edf %8!=0{_edf >>=3;_edf ++;}else {_edf >>=3;};_ccdc :=make ([]byte ,_edf );_fag :=_c .NewWriterMSB (_ccdc );const _cfgf ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _dga :=0;_dga < _cbc .Height ;_dga ++{for _eec :=0;_eec < _cbc .RowStride ;_eec ++{_dade :=_cbc .Data [_dga *_cbc .RowStride +_eec ];if _eec !=_cbc .RowStride -1{_gecf :=_fag .WriteByte (_dade );if _gecf !=nil {return nil ,_d .Wrap (_gecf ,_cfgf ,"");};continue ;};for _cdc :=uint (0);_cdc < _bcdf ;_cdc ++{_gafc :=_fag .WriteBit (int (_dade >>(7-_cdc )&0x01));if _gafc !=nil {return nil ,_d .Wrap (_gafc ,_cfgf ,"");};};};};return _ccdc ,nil ;};func (_cgd *Bitmap )ToImage ()_be .Image {_fef ,_eee :=_ee .NewImage (_cgd .Width ,_cgd .Height ,1,1,_cgd .Data ,nil ,nil );if _eee !=nil {_ab .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eee );};return _fef ;};func (_agag *Bitmap )GetByte (index int )(byte ,error ){if index > len (_agag .Data )-1||index < 0{return 0,_d .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _agag .Data [index ],nil ;};func (_cff *Bitmap )GetChocolateData ()[]byte {if _cff .Color ==Vanilla {_cff .inverseData ();};return _cff .Data ;};func init (){for _bdd :=0;_bdd < 256;_bdd ++{_eeda [_bdd ]=uint8 (_bdd &0x1)+(uint8 (_bdd >>1)&0x1)+(uint8 (_bdd >>2)&0x1)+(uint8 (_bdd >>3)&0x1)+(uint8 (_bdd >>4)&0x1)+(uint8 (_bdd >>5)&0x1)+(uint8 (_bdd >>6)&0x1)+(uint8 (_bdd >>7)&0x1);};};func (_gbdfc Points )GetIntX (i int )(int ,error ){if i >=len (_gbdfc ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_gbdfc [i ].X ),nil ;};func (_efb *Bitmap )GetPixel (x ,y int )bool {_dfbe :=_efb .GetByteIndex (x ,y );_fda :=_efb .GetBitOffset (x );_ccag :=uint (7-_fda );if _dfbe > len (_efb .Data )-1{_ab .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_efb );return false ;};if (_efb .Data [_dfbe ]>>_ccag )&0x01>=1{return true ;};return false ;};func (_cccgf *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _fadcc ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _cccgf ==nil {return nil ,_d .Error (_fadcc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cccgf .Values )-1{return nil ,_d .Errorf (_fadcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cccgf .Values [i ],nil ;};func _bce (_dfdd *Bitmap ,_gcb int ,_cggf []byte )(_ede *Bitmap ,_agec error ){const _bfa ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _dfdd ==nil {return nil ,_d .Error (_bfa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gcb < 1||_gcb > 4{return nil ,_d .Error (_bfa ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dfdd .Height <=1{return nil ,_d .Errorf (_bfa ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dfdd .Height );};_ede =New (_dfdd .Width /2,_dfdd .Height /2);if _cggf ==nil {_cggf =_dfe ();};_cd :=_gebe (_dfdd .RowStride ,2*_ede .RowStride );switch _gcb {case 1:_agec =_gfg (_dfdd ,_ede ,_gcb ,_cggf ,_cd );case 2:_agec =_cdfe (_dfdd ,_ede ,_gcb ,_cggf ,_cd );case 3:_agec =_ecea (_dfdd ,_ede ,_gcb ,_cggf ,_cd );case 4:_agec =_fc (_dfdd ,_ede ,_gcb ,_cggf ,_cd );};if _agec !=nil {return nil ,_agec ;};return _ede ,nil ;};type Boxes []*_be .Rectangle ;func (_cdd *Bitmap )Equivalent (s *Bitmap )bool {return _cdd .equivalent (s )};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ggbg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func Centroids (bms []*Bitmap )(*Points ,error ){_dbaac :=make ([]Point ,len (bms ));_aagea :=_dbgd ();_ecec :=_bfef ();var _cbde error ;for _abadd ,_affg :=range bms {_dbaac [_abadd ],_cbde =_affg .centroid (_aagea ,_ecec );if _cbde !=nil {return nil ,_cbde ;};};_cage :=Points (_dbaac );return &_cage ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _fcdg (_bgea ,_faa *Bitmap ,_bcccb ,_gabe int )(*Bitmap ,error ){const _cgeg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _faa ==nil {return nil ,_d .Error (_cgeg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bcccb < 1||_gabe < 1{return nil ,_d .Error (_cgeg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bcccb ==1&&_gabe ==1{return _caeb (_bgea ,_faa );};if MorphBC ==SymmetricMorphBC {_aaeb ,_cgcc :=_ebgbe (_bgea ,_faa ,_bcccb ,_gabe );if _cgcc !=nil {return nil ,_d .Wrap (_cgcc ,_cgeg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _aaeb ,nil ;};_egag :=_dgcc (_bcccb /2,_gabe /2);_fafa :=8*((_egag +7)/8);_bggc ,_gbcff :=_faa .AddBorder (_fafa ,0);if _gbcff !=nil {return nil ,_d .Wrapf (_gbcff ,_cgeg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_fafa );};var _efa ,_dbb *Bitmap ;if _bcccb ==1||_gabe ==1{_afe :=SelCreateBrick (_gabe ,_bcccb ,_gabe /2,_bcccb /2,SelHit );_efa ,_gbcff =_gabb (nil ,_bggc ,_afe );if _gbcff !=nil {return nil ,_d .Wrap (_gbcff ,_cgeg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_dge :=SelCreateBrick (1,_bcccb ,0,_bcccb /2,SelHit );_gaba ,_abde :=_ebcf (nil ,_bggc ,_dge );if _abde !=nil {return nil ,_d .Wrap (_abde ,_cgeg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_dbeb :=SelCreateBrick (_gabe ,1,_gabe /2,0,SelHit );_efa ,_abde =_ebcf (nil ,_gaba ,_dbeb );if _abde !=nil {return nil ,_d .Wrap (_abde ,_cgeg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_abde =_afcca (_gaba ,_efa ,_dge );_abde !=nil {return nil ,_d .Wrap (_abde ,_cgeg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_abde =_afcca (_efa ,_gaba ,_dbeb );_abde !=nil {return nil ,_d .Wrap (_abde ,_cgeg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _dbb ,_gbcff =_efa .RemoveBorder (_fafa );_gbcff !=nil {return nil ,_d .Wrap (_gbcff ,_cgeg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _bgea ==nil {return _dbb ,nil ;};if _ ,_gbcff =_caeb (_bgea ,_dbb );_gbcff !=nil {return nil ,_gbcff ;};return _bgea ,nil ;};func _bfef ()[]int {_gdcd :=make ([]int ,256);for _ggcg :=0;_ggcg <=0xff;_ggcg ++{_caeg :=byte (_ggcg );_gdcd [_caeg ]=int (_caeg &0x1)+(int (_caeg >>1)&0x1)+(int (_caeg >>2)&0x1)+(int (_caeg >>3)&0x1)+(int (_caeg >>4)&0x1)+(int (_caeg >>5)&0x1)+(int (_caeg >>6)&0x1)+(int (_caeg >>7)&0x1);};return _gdcd ;};const (Vanilla Color =iota ;Chocolate ;);func _dfe ()(_gba []byte ){_gba =make ([]byte ,256);for _dgc :=0;_dgc < 256;_dgc ++{_ffc :=byte (_dgc );_gba [_ffc ]=(_ffc &0x01)|((_ffc &0x04)>>1)|((_ffc &0x10)>>2)|((_ffc &0x40)>>3)|((_ffc &0x02)<<3)|((_ffc &0x08)<<2)|((_ffc &0x20)<<1)|(_ffc &0x80);};return _gba ;};func (_fbgg *ClassedPoints )SortByX (){_fbgg ._fbd =_fbgg .xSortFunction ();_g .Sort (_fbgg )};func Extract (roi _be .Rectangle ,src *Bitmap )(*Bitmap ,error ){_bffe :=New (roi .Dx (),roi .Dy ());_egcb :=roi .Min .X &0x07;_fgba :=8-_egcb ;_afdf :=uint (8-_bffe .Width &0x07);_edce :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_gdag :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fegg :=_bffe .RowStride ==_gdag +1-_edce ;var _afgc int ;for _fdae :=roi .Min .Y ;_fdae < roi .Max .Y ;_fdae ++{_feed :=_edce ;_bdfc :=_afgc ;switch {case _edce ==_gdag :_cfbb ,_dgdd :=src .GetByte (_feed );if _dgdd !=nil {return nil ,_dgdd ;};_cfbb <<=uint (_egcb );_dgdd =_bffe .SetByte (_bdfc ,_cdae (_afdf ,_cfbb ));if _dgdd !=nil {return nil ,_dgdd ;};case _egcb ==0:for _ccef :=_edce ;_ccef <=_gdag ;_ccef ++{_ggde ,_cfe :=src .GetByte (_feed );if _cfe !=nil {return nil ,_cfe ;};_feed ++;if _ccef ==_gdag &&_fegg {_ggde =_cdae (_afdf ,_ggde );};_cfe =_bffe .SetByte (_bdfc ,_ggde );if _cfe !=nil {return nil ,_cfe ;};_bdfc ++;};default:_gbbe :=_edfg (src ,_bffe ,uint (_egcb ),uint (_fgba ),_afdf ,_edce ,_gdag ,_fegg ,_feed ,_bdfc );if _gbbe !=nil {return nil ,_gbbe ;};};_edce +=src .RowStride ;_gdag +=src .RowStride ;_afgc +=_bffe .RowStride ;};return _bffe ,nil ;};func (_cdge *Bitmap )centroid (_cagea ,_dbaae []int )(Point ,error ){_cbad :=Point {};_cdge .setPadBits (0);if len (_cagea )==0{_cagea =_dbgd ();};if len (_dbaae )==0{_dbaae =_bfef ();};var _fade ,_agaf ,_dbga ,_acgd ,_bede ,_gfaf int ;var _acabe byte ;for _bede =0;_bede < _cdge .Height ;_bede ++{_fbe :=_cdge .RowStride *_bede ;_acgd =0;for _gfaf =0;_gfaf < _cdge .RowStride ;_gfaf ++{_acabe =_cdge .Data [_fbe +_gfaf ];if _acabe !=0{_acgd +=_dbaae [_acabe ];_fade +=_cagea [_acabe ]+_gfaf *8*_dbaae [_acabe ];};};_dbga +=_acgd ;_agaf +=_acgd *_bede ;};if _dbga !=0{_cbad .X =float32 (_fade )/float32 (_dbga );_cbad .Y =float32 (_agaf )/float32 (_dbga );};return _cbad ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_caad bool ,_edde error ){const _ged ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_afbg ,_aebed :=p1 .Width ,p1 .Height ;_abad ,_dbg :=p3 .Width ,p3 .Height ;if _b .Abs (_afbg -_abad )> maxDiffW {return false ,nil ;};if _b .Abs (_aebed -_dbg )> maxDiffH {return false ,nil ;};_gca :=int (float32 (area1 )*(1.0-rank )+0.5);_faeb :=int (float32 (area3 )*(1.0-rank )+0.5);var _debd ,_fbb int ;if delX >=0{_debd =int (delX +0.5);}else {_debd =int (delX -0.5);};if delY >=0{_fbb =int (delY +0.5);}else {_fbb =int (delY -0.5);};_fcgbg :=p1 .CreateTemplate ();if _edde =_fcgbg .RasterOperation (0,0,_afbg ,_aebed ,PixSrc ,p1 ,0,0);_edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _edde =_fcgbg .RasterOperation (_debd ,_fbb ,_afbg ,_aebed ,PixNotSrcAndDst ,p4 ,0,0);_edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_caad ,_edde =_fcgbg .ThresholdPixelSum (_gca ,tab8 );if _edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _caad {return false ,nil ;};if _edde =_fcgbg .RasterOperation (_debd ,_fbb ,_abad ,_dbg ,PixSrc ,p3 ,0,0);_edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _edde =_fcgbg .RasterOperation (0,0,_abad ,_dbg ,PixNotSrcAndDst ,p2 ,0,0);_edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_caad ,_edde =_fcgbg .ThresholdPixelSum (_faeb ,tab8 );if _edde !=nil {return false ,_d .Wrap (_edde ,_ged ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_caad ,nil ;};func _dd (_ebb ,_bd *Bitmap )(_cgg error ){const _bec ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_fde :=_bd .RowStride ;_eba :=_ebb .RowStride ;_ade :=_bd .RowStride *4-_ebb .RowStride ;var (_eea ,_fe byte ;_dfg uint32 ;_eg ,_ge ,_dg ,_ebbd ,_ff ,_ag ,_dfc int ;);for _dg =0;_dg < _bd .Height ;_dg ++{_eg =_dg *_fde ;_ge =4*_dg *_eba ;for _ebbd =0;_ebbd < _fde ;_ebbd ++{_eea =_bd .Data [_eg +_ebbd ];_dfg =_cede [_eea ];_ag =_ge +_ebbd *4;if _ade !=0&&(_ebbd +1)*4> _ebb .RowStride {for _ff =_ade ;_ff > 0;_ff --{_fe =byte ((_dfg >>uint (_ff *8))&0xff);_dfc =_ag +(_ade -_ff );if _cgg =_ebb .SetByte (_dfc ,_fe );_cgg !=nil {return _d .Wrapf (_cgg ,_bec ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ff );};};}else if _cgg =_ebb .setFourBytes (_ag ,_dfg );_cgg !=nil {return _d .Wrap (_cgg ,_bec ,"");};if _cgg =_ebb .setFourBytes (_ge +_ebbd *4,_cede [_bd .Data [_eg +_ebbd ]]);_cgg !=nil {return _d .Wrap (_cgg ,_bec ,"");};};for _ff =1;_ff < 4;_ff ++{for _ebbd =0;_ebbd < _eba ;_ebbd ++{if _cgg =_ebb .SetByte (_ge +_ff *_eba +_ebbd ,_ebb .Data [_ge +_ebbd ]);_cgg !=nil {return _d .Wrapf (_cgg ,_bec ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ff ,_ebbd );};};};};return nil ;};func _eafc (_gbad *Bitmap ,_dfgd ,_adca int ,_bgca ,_cabb int ,_agdd RasterOperator ){var (_bbbd bool ;_aaed bool ;_bbgf int ;_gcfd int ;_ggce int ;_cegf int ;_fac bool ;_ggadc byte ;);_egfe :=8-(_dfgd &7);_dcba :=_geeed [_egfe ];_eeag :=_gbad .RowStride *_adca +(_dfgd >>3);if _bgca < _egfe {_bbbd =true ;_dcba &=_cgcg [8-_egfe +_bgca ];};if !_bbbd {_bbgf =(_bgca -_egfe )>>3;if _bbgf !=0{_aaed =true ;_gcfd =_eeag +1;};};_ggce =(_dfgd +_bgca )&7;if !(_bbbd ||_ggce ==0){_fac =true ;_ggadc =_cgcg [_ggce ];_cegf =_eeag +1+_bbgf ;};var _egfgd ,_gade int ;switch _agdd {case PixClr :for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_eeag ]=_dccdg (_gbad .Data [_eeag ],0x0,_dcba );_eeag +=_gbad .RowStride ;};if _aaed {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{for _gade =0;_gade < _bbgf ;_gade ++{_gbad .Data [_gcfd +_gade ]=0x0;};_gcfd +=_gbad .RowStride ;};};if _fac {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_cegf ]=_dccdg (_gbad .Data [_cegf ],0x0,_ggadc );_cegf +=_gbad .RowStride ;};};case PixSet :for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_eeag ]=_dccdg (_gbad .Data [_eeag ],0xff,_dcba );_eeag +=_gbad .RowStride ;};if _aaed {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{for _gade =0;_gade < _bbgf ;_gade ++{_gbad .Data [_gcfd +_gade ]=0xff;};_gcfd +=_gbad .RowStride ;};};if _fac {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_cegf ]=_dccdg (_gbad .Data [_cegf ],0xff,_ggadc );_cegf +=_gbad .RowStride ;};};case PixNotDst :for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_eeag ]=_dccdg (_gbad .Data [_eeag ],^_gbad .Data [_eeag ],_dcba );_eeag +=_gbad .RowStride ;};if _aaed {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{for _gade =0;_gade < _bbgf ;_gade ++{_gbad .Data [_gcfd +_gade ]=^(_gbad .Data [_gcfd +_gade ]);};_gcfd +=_gbad .RowStride ;};};if _fac {for _egfgd =0;_egfgd < _cabb ;_egfgd ++{_gbad .Data [_cegf ]=_dccdg (_gbad .Data [_cegf ],^_gbad .Data [_cegf ],_ggadc );_cegf +=_gbad .RowStride ;};};};};func _gggf (_aecf *_b .Stack ,_cfgfb ,_fgaad ,_dbad ,_gbdfd ,_bcab int ,_eada *_be .Rectangle )(_eabe error ){const _gacc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _aecf ==nil {return _d .Error (_gacc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eada ==nil {return _d .Error (_gacc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_eada .Min .X =_b .Min (_eada .Min .X ,_cfgfb );_eada .Max .X =_b .Max (_eada .Max .X ,_fgaad );_eada .Min .Y =_b .Min (_eada .Min .Y ,_dbad );_eada .Max .Y =_b .Max (_eada .Max .Y ,_dbad );if !(_dbad +_gbdfd >=0&&_dbad +_gbdfd <=_bcab ){return nil ;};if _aecf .Aux ==nil {return _d .Error (_gacc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _feeca *fillSegment ;_eadeb ,_gcgcbe :=_aecf .Aux .Pop ();if _gcgcbe {if _feeca ,_gcgcbe =_eadeb .(*fillSegment );!_gcgcbe {return _d .Error (_gacc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_feeca =&fillSegment {};};_feeca ._fgaee =_cfgfb ;_feeca ._ccdd =_fgaad ;_feeca ._ggge =_dbad ;_feeca ._eceeb =_gbdfd ;_aecf .Push (_feeca );return nil ;};func (_cafg *Boxes )selectWithIndicator (_gdec *_b .NumSlice )(_aede *Boxes ,_edc error ){const _dbaa ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cafg ==nil {return nil ,_d .Error (_dbaa ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _gdec ==nil {return nil ,_d .Error (_dbaa ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gdec )!=len (*_cafg ){return nil ,_d .Error (_dbaa ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _dgbf ,_bcee int ;for _aec :=0;_aec < len (*_gdec );_aec ++{if _dgbf ,_edc =_gdec .GetInt (_aec );_edc !=nil {return nil ,_d .Wrap (_edc ,_dbaa ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _dgbf ==1{_bcee ++;};};if _bcee ==len (*_cafg ){return _cafg ,nil ;};_ffgfa :=Boxes {};for _abba :=0;_abba < len (*_gdec );_abba ++{_dgbf =int ((*_gdec )[_abba ]);if _dgbf ==0{continue ;};_ffgfa =append (_ffgfa ,(*_cafg )[_abba ]);};_aede =&_ffgfa ;return _aede ,nil ;};func (_bfbb *Bitmap )Zero ()bool {_cec :=_bfbb .Width /8;_ddee :=_bfbb .Width &7;var _becg byte ;if _ddee !=0{_becg =byte (0xff<<uint (8-_ddee ));};var _eef ,_eaf ,_geb int ;for _eaf =0;_eaf < _bfbb .Height ;_eaf ++{_eef =_bfbb .RowStride *_eaf ;for _geb =0;_geb < _cec ;_geb ,_eef =_geb +1,_eef +1{if _bfbb .Data [_eef ]!=0{return false ;};};if _ddee > 0{if _bfbb .Data [_eef ]&_becg !=0{return false ;};};};return true ;};func TstNSymbol (t *_f .T ,scale ...int )*Bitmap {_bfbgd ,_cfabf :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_ac .NoError (t ,_cfabf );return TstGetScaledSymbol (t ,_bfbgd ,scale ...);};func (_aead *ClassedPoints )ySortFunction ()func (_efefb int ,_cfcb int )bool {return func (_fcde ,_efbb int )bool {return _aead .YAtIndex (_fcde )< _aead .YAtIndex (_efbb )};};func (_egg *Bitmap )addPadBits ()(_fdee error ){const _ffgg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_aca :=_egg .Width %8;if _aca ==0{return nil ;};_ggbc :=_egg .Width /8;_baf :=_c .NewReader (_egg .Data );_ebcd :=make ([]byte ,_egg .Height *_egg .RowStride );_dbce :=_c .NewWriterMSB (_ebcd );_abdf :=make ([]byte ,_ggbc );var (_eadd int ;_ffggd uint64 ;);for _eadd =0;_eadd < _egg .Height ;_eadd ++{if _ ,_fdee =_baf .Read (_abdf );_fdee !=nil {return _d .Wrap (_fdee ,_ffgg ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_fdee =_dbce .Write (_abdf );_fdee !=nil {return _d .Wrap (_fdee ,_ffgg ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ffggd ,_fdee =_baf .ReadBits (byte (_aca ));_fdee !=nil {return _d .Wrap (_fdee ,_ffgg ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _fdee =_dbce .WriteByte (byte (_ffggd )<<uint (8-_aca ));_fdee !=nil {return _d .Wrap (_fdee ,_ffgg ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_egg .Data =_dbce .Data ();return nil ;};func _cgga (_dbcc *Bitmap ,_bfcee ,_abcf ,_abcfc ,_fabce int ,_fdefe RasterOperator ,_fdfc *Bitmap ,_abga ,_dega int )error {var (_adec byte ;_egfag int ;_dabe int ;_bagd ,_egcbc int ;_ggfc ,_dgge int ;);_aeag :=_abcfc >>3;_fgeb :=_abcfc &7;if _fgeb > 0{_adec =_cgcg [_fgeb ];};_egfag =_fdfc .RowStride *_dega +(_abga >>3);_dabe =_dbcc .RowStride *_abcf +(_bfcee >>3);switch _fdefe {case PixSrc :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=_fdfc .Data [_bagd ];_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ],_adec );};};case PixNotSrc :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=^(_fdfc .Data [_bagd ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^_fdfc .Data [_bagd ],_adec );};};case PixSrcOrDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]|=_fdfc .Data [_bagd ];_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ]|_dbcc .Data [_egcbc ],_adec );};};case PixSrcAndDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]&=_fdfc .Data [_bagd ];_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ]&_dbcc .Data [_egcbc ],_adec );};};case PixSrcXorDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]^=_fdfc .Data [_bagd ];_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ]^_dbcc .Data [_egcbc ],_adec );};};case PixNotSrcOrDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]|=^(_fdfc .Data [_bagd ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^(_fdfc .Data [_bagd ])|_dbcc .Data [_egcbc ],_adec );};};case PixNotSrcAndDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]&=^(_fdfc .Data [_bagd ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^(_fdfc .Data [_bagd ])&_dbcc .Data [_egcbc ],_adec );};};case PixSrcOrNotDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=_fdfc .Data [_bagd ]|^(_dbcc .Data [_egcbc ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ]|^(_dbcc .Data [_egcbc ]),_adec );};};case PixSrcAndNotDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=_fdfc .Data [_bagd ]&^(_dbcc .Data [_egcbc ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],_fdfc .Data [_bagd ]&^(_dbcc .Data [_egcbc ]),_adec );};};case PixNotPixSrcOrDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=^(_fdfc .Data [_bagd ]|_dbcc .Data [_egcbc ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^(_fdfc .Data [_bagd ]|_dbcc .Data [_egcbc ]),_adec );};};case PixNotPixSrcAndDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=^(_fdfc .Data [_bagd ]&_dbcc .Data [_egcbc ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^(_fdfc .Data [_bagd ]&_dbcc .Data [_egcbc ]),_adec );};};case PixNotPixSrcXorDst :for _ggfc =0;_ggfc < _fabce ;_ggfc ++{_bagd =_egfag +_ggfc *_fdfc .RowStride ;_egcbc =_dabe +_ggfc *_dbcc .RowStride ;for _dgge =0;_dgge < _aeag ;_dgge ++{_dbcc .Data [_egcbc ]=^(_fdfc .Data [_bagd ]^_dbcc .Data [_egcbc ]);_egcbc ++;_bagd ++;};if _fgeb > 0{_dbcc .Data [_egcbc ]=_dccdg (_dbcc .Data [_egcbc ],^(_fdfc .Data [_bagd ]^_dbcc .Data [_egcbc ]),_adec );};};default:_ab .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_fdefe );return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _af ()(_afc [256]uint64 ){for _ccc :=0;_ccc < 256;_ccc ++{if _ccc &0x01!=0{_afc [_ccc ]|=0xff;};if _ccc &0x02!=0{_afc [_ccc ]|=0xff00;};if _ccc &0x04!=0{_afc [_ccc ]|=0xff0000;};if _ccc &0x08!=0{_afc [_ccc ]|=0xff000000;};if _ccc &0x10!=0{_afc [_ccc ]|=0xff00000000;};if _ccc &0x20!=0{_afc [_ccc ]|=0xff0000000000;};if _ccc &0x40!=0{_afc [_ccc ]|=0xff000000000000;};if _ccc &0x80!=0{_afc [_ccc ]|=0xff00000000000000;};};return _afc ;};func (_aeacb *byHeight )Len ()int {return len (_aeacb .Values )};func _gebe (_fee ,_bcdb int )int {if _fee < _bcdb {return _fee ;};return _bcdb ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _ebcf (d ,s ,sel )};func _gef (_eaae ,_beeb *Bitmap ,_abcga *Selection )(*Bitmap ,error ){const _bacf ="\u006f\u0070\u0065\u006e";var _fgbg error ;_eaae ,_fgbg =_eeea (_eaae ,_beeb ,_abcga );if _fgbg !=nil {return nil ,_d .Wrap (_fgbg ,_bacf ,"");};_baca ,_fgbg :=_afcca (nil ,_beeb ,_abcga );if _fgbg !=nil {return nil ,_d .Wrap (_fgbg ,_bacf ,"");};_ ,_fgbg =_ebcf (_eaae ,_baca ,_abcga );if _fgbg !=nil {return nil ,_d .Wrap (_fgbg ,_bacf ,"");};return _eaae ,nil ;};func (_cdg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cdg .addBorderGeneral (left ,right ,top ,bot ,val );};type Bitmaps struct{Values []*Bitmap ;Boxes []*_be .Rectangle ;};func _ggfb (_cdga ,_bece *Bitmap ,_deda ,_gfge ,_abbd ,_ccba ,_aadc int ,_feec CombinationOperator )error {var _aeac int ;_efgd :=func (){_aeac ++;_abbd +=_bece .RowStride ;_ccba +=_cdga .RowStride ;_aadc +=_cdga .RowStride };for _aeac =_deda ;_aeac < _gfge ;_efgd (){_cdcf :=_abbd ;for _cggg :=_ccba ;_cggg <=_aadc ;_cggg ++{_feaa ,_dgfg :=_bece .GetByte (_cdcf );if _dgfg !=nil {return _dgfg ;};_cbdd ,_dgfg :=_cdga .GetByte (_cggg );if _dgfg !=nil {return _dgfg ;};if _dgfg =_bece .SetByte (_cdcf ,_ggbf (_feaa ,_cbdd ,_feec ));_dgfg !=nil {return _dgfg ;};_cdcf ++;};};return nil ;};type Component int ;func (_dca *Bitmap )SetDefaultPixel (){for _bcaa :=range _dca .Data {_dca .Data [_bcaa ]=byte (0xff);};};func (_dace Points )GetIntY (i int )(int ,error ){if i >=len (_dace ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_dace [i ].Y ),nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};type Getter interface{GetBitmap ()*Bitmap ;};var MorphBC BoundaryCondition ;func (_ffd *Bitmap )thresholdPixelSum (_abeg int )bool {var (_ggab int ;_fgfd uint8 ;_egge byte ;_aba int ;);_cdfed :=_ffd .RowStride ;_dgfc :=uint (_ffd .Width &0x07);if _dgfc !=0{_fgfd =uint8 ((0xff<<(8-_dgfc ))&0xff);_cdfed --;};for _cfgg :=0;_cfgg < _ffd .Height ;_cfgg ++{for _aba =0;_aba < _cdfed ;_aba ++{_egge =_ffd .Data [_cfgg *_ffd .RowStride +_aba ];_ggab +=int (_eeda [_egge ]);};if _dgfc !=0{_egge =_ffd .Data [_cfgg *_ffd .RowStride +_aba ]&_fgfd ;_ggab +=int (_eeda [_egge ]);};if _ggab > _abeg {return true ;};};return false ;};func _ccfa (_bgcgf *Bitmap ,_gecg ,_edfgf ,_gfea ,_bgfd int ,_ceaa RasterOperator ){if _gecg < 0{_gfea +=_gecg ;_gecg =0;};_fdc :=_gecg +_gfea -_bgcgf .Width ;if _fdc > 0{_gfea -=_fdc ;};if _edfgf < 0{_bgfd +=_edfgf ;_edfgf =0;};_fbdg :=_edfgf +_bgfd -_bgcgf .Height ;if _fbdg > 0{_bgfd -=_fbdg ;};if _gfea <=0||_bgfd <=0{return ;};if (_gecg &7)==0{_cggb (_bgcgf ,_gecg ,_edfgf ,_gfea ,_bgfd ,_ceaa );}else {_eafc (_bgcgf ,_gecg ,_edfgf ,_gfea ,_bgfd ,_ceaa );};};func (_cfge *Bitmap )resizeImageData (_cae *Bitmap )error {if _cae ==nil {return _d .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cfge .SizesEqual (_cae ){return nil ;};_cfge .Data =make ([]byte ,len (_cae .Data ));_cfge .Width =_cae .Width ;_cfge .Height =_cae .Height ;_cfge .RowStride =_cae .RowStride ;return nil ;};func (_bde *Bitmap )GetByteIndex (x ,y int )int {return y *_bde .RowStride +(x >>3)};type LocationFilter int ;type Points []Point ;func (_fgbge *ClassedPoints )Less (i ,j int )bool {return _fgbge ._fbd (i ,j )};type SizeComparison int ;func (_aef *Bitmap )setEightFullBytes (_dfgc int ,_fggf uint64 )error {if _dfgc +7> len (_aef .Data )-1{return _d .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_aef .Data [_dfgc ]=byte ((_fggf &0xff00000000000000)>>56);_aef .Data [_dfgc +1]=byte ((_fggf &0xff000000000000)>>48);_aef .Data [_dfgc +2]=byte ((_fggf &0xff0000000000)>>40);_aef .Data [_dfgc +3]=byte ((_fggf &0xff00000000)>>32);_aef .Data [_dfgc +4]=byte ((_fggf &0xff000000)>>24);_aef .Data [_dfgc +5]=byte ((_fggf &0xff0000)>>16);_aef .Data [_dfgc +6]=byte ((_fggf &0xff00)>>8);_aef .Data [_dfgc +7]=byte (_fggf &0xff);return nil ;};func (_dcg *Bitmap )nextOnPixelLow (_afcd ,_fadbc ,_ecfa ,_bbca ,_aff int )(_cgdf _be .Point ,_bgbe bool ,_efd error ){const _eegeg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_dec int ;_bcc byte ;);_agca :=_aff *_ecfa ;_gffc :=_agca +(_bbca /8);if _bcc ,_efd =_dcg .GetByte (_gffc );_efd !=nil {return _cgdf ,false ,_d .Wrap (_efd ,_eegeg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _bcc !=0{_fbcg :=_bbca -(_bbca %8)+7;for _dec =_bbca ;_dec <=_fbcg &&_dec < _afcd ;_dec ++{if _dcg .GetPixel (_dec ,_aff ){_cgdf .X =_dec ;_cgdf .Y =_aff ;return _cgdf ,true ,nil ;};};};_bbe :=(_bbca /8)+1;_dec =8*_bbe ;var _bagb int ;for _gffc =_agca +_bbe ;_dec < _afcd ;_gffc ,_dec =_gffc +1,_dec +8{if _bcc ,_efd =_dcg .GetByte (_gffc );_efd !=nil {return _cgdf ,false ,_d .Wrap (_efd ,_eegeg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _bcc ==0{continue ;};for _bagb =0;_bagb < 8&&_dec < _afcd ;_bagb ,_dec =_bagb +1,_dec +1{if _dcg .GetPixel (_dec ,_aff ){_cgdf .X =_dec ;_cgdf .Y =_aff ;return _cgdf ,true ,nil ;};};};for _acffg :=_aff +1;_acffg < _fadbc ;_acffg ++{_agca =_acffg *_ecfa ;for _gffc ,_dec =_agca ,0;_dec < _afcd ;_gffc ,_dec =_gffc +1,_dec +8{if _bcc ,_efd =_dcg .GetByte (_gffc );_efd !=nil {return _cgdf ,false ,_d .Wrap (_efd ,_eegeg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bcc ==0{continue ;};for _bagb =0;_bagb < 8&&_dec < _afcd ;_bagb ,_dec =_bagb +1,_dec +1{if _dcg .GetPixel (_dec ,_acffg ){_cgdf .X =_dec ;_cgdf .Y =_acffg ;return _cgdf ,true ,nil ;};};};};return _cgdf ,false ,nil ;};func _dccdg (_bgec ,_caega ,_adee byte )byte {return (_bgec &^(_adee ))|(_caega &_adee )};func (_cga *Boxes )makeSizeIndicator (_fadba ,_dcga int ,_bdgd LocationFilter ,_aaf SizeComparison )*_b .NumSlice {_ecef :=&_b .NumSlice {};var _aefa ,_efce ,_gbbf int ;for _ ,_eaef :=range *_cga {_aefa =0;_efce ,_gbbf =_eaef .Dx (),_eaef .Dy ();switch _bdgd {case LocSelectWidth :if (_aaf ==SizeSelectIfLT &&_efce < _fadba )||(_aaf ==SizeSelectIfGT &&_efce > _fadba )||(_aaf ==SizeSelectIfLTE &&_efce <=_fadba )||(_aaf ==SizeSelectIfGTE &&_efce >=_fadba ){_aefa =1;};case LocSelectHeight :if (_aaf ==SizeSelectIfLT &&_gbbf < _dcga )||(_aaf ==SizeSelectIfGT &&_gbbf > _dcga )||(_aaf ==SizeSelectIfLTE &&_gbbf <=_dcga )||(_aaf ==SizeSelectIfGTE &&_gbbf >=_dcga ){_aefa =1;};case LocSelectIfEither :if (_aaf ==SizeSelectIfLT &&(_gbbf < _dcga ||_efce < _fadba ))||(_aaf ==SizeSelectIfGT &&(_gbbf > _dcga ||_efce > _fadba ))||(_aaf ==SizeSelectIfLTE &&(_gbbf <=_dcga ||_efce <=_fadba ))||(_aaf ==SizeSelectIfGTE &&(_gbbf >=_dcga ||_efce >=_fadba )){_aefa =1;};case LocSelectIfBoth :if (_aaf ==SizeSelectIfLT &&(_gbbf < _dcga &&_efce < _fadba ))||(_aaf ==SizeSelectIfGT &&(_gbbf > _dcga &&_efce > _fadba ))||(_aaf ==SizeSelectIfLTE &&(_gbbf <=_dcga &&_efce <=_fadba ))||(_aaf ==SizeSelectIfGTE &&(_gbbf >=_dcga &&_efce >=_fadba )){_aefa =1;};};_ecef .AddInt (_aefa );};return _ecef ;};var _ _g .Interface =&ClassedPoints {};func NewClassedPoints (points *Points ,classes _b .IntSlice )(*ClassedPoints ,error ){const _ebbdg ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_d .Error (_ebbdg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_d .Error (_ebbdg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_cfdee :=&ClassedPoints {Points :points ,IntSlice :classes };if _baeeb :=_cfdee .validateIntSlice ();_baeeb !=nil {return nil ,_d .Wrap (_baeeb ,_ebbdg ,"");};return _cfdee ,nil ;};func (_bfbcf *Selection )setOrigin (_aeffb ,_gded int ){_bfbcf .Cy ,_bfbcf .Cx =_aeffb ,_gded };func _cfg (_abe *Bitmap ,_eeg *Bitmap ,_ebc int )(_cb error ){const _bda ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _ebc {case 2:_cb =_ce (_abe ,_eeg );case 4:_cb =_dd (_abe ,_eeg );case 8:_cb =_gga (_abe ,_eeg );default:return _d .Error (_bda ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _cb !=nil {_cb =_d .Wrap (_cb ,_bda ,"");};return _cb ;};func _ebgbe (_ddeg ,_bdcd *Bitmap ,_bbab ,_dcde int )(*Bitmap ,error ){const _cfcf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _bdcd ==nil {return nil ,_d .Error (_cfcf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bbab < 1||_dcde < 1{return nil ,_d .Error (_cfcf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bbab ==1&&_dcde ==1{return _bdcd .Copy (),nil ;};if _bbab ==1||_dcde ==1{_dgfb :=SelCreateBrick (_dcde ,_bbab ,_dcde /2,_bbab /2,SelHit );var _bege error ;_ddeg ,_bege =_gabb (_ddeg ,_bdcd ,_dgfb );if _bege !=nil {return nil ,_d .Wrap (_bege ,_cfcf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ddeg ,nil ;};_becec :=SelCreateBrick (1,_bbab ,0,_bbab /2,SelHit );_ddba :=SelCreateBrick (_dcde ,1,_dcde /2,0,SelHit );_aaef ,_agff :=_ebcf (nil ,_bdcd ,_becec );if _agff !=nil {return nil ,_d .Wrap (_agff ,_cfcf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ddeg ,_agff =_ebcf (_ddeg ,_aaef ,_ddba );_agff !=nil {return nil ,_d .Wrap (_agff ,_cfcf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_agff =_afcca (_aaef ,_ddeg ,_becec );_agff !=nil {return nil ,_d .Wrap (_agff ,_cfcf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_agff =_afcca (_ddeg ,_aaef ,_ddba );_agff !=nil {return nil ,_d .Wrap (_agff ,_cfcf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ddeg ,nil ;};func (_feaaba *byHeight )Less (i ,j int )bool {return _feaaba .Values [i ].Height < _feaaba .Values [j ].Height ;};func _fgbf (_dfce int )int {if _dfce < 0{return -_dfce ;};return _dfce ;};type byWidth Bitmaps ;func _bggb (_cfgd *Bitmap ,_beea int )(*Bitmap ,error ){const _ggg ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _cfgd ==nil {return nil ,_d .Error (_ggg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _beea <=0{return nil ,_d .Error (_ggg ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _beea ==1{_cgcb ,_dgdff :=_caeb (nil ,_cfgd );if _dgdff !=nil {return nil ,_d .Wrap (_dgdff ,_ggg ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _cgcb ,nil ;};_faegdf ,_gbcgc :=_agf (_cfgd ,_beea ,_beea );if _gbcgc !=nil {return nil ,_d .Wrap (_gbcgc ,_ggg ,"");};return _faegdf ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _cfbbd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_fdebe ,_babc :=p1 .Width ,p1 .Height ;_fadc ,_gbeb :=p3 .Width ,p3 .Height ;if _b .Abs (_fdebe -_fadc )> maxDiffW {return false ,nil ;};if _b .Abs (_babc -_gbeb )> maxDiffH {return false ,nil ;};_gbgb :=int (delX +_b .Sign (delX )*0.5);_cabd :=int (delY +_b .Sign (delY )*0.5);var _ffcd error ;_dddb :=p1 .CreateTemplate ();if _ffcd =_dddb .RasterOperation (0,0,_fdebe ,_babc ,PixSrc ,p1 ,0,0);_ffcd !=nil {return false ,_d .Wrap (_ffcd ,_cfbbd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ffcd =_dddb .RasterOperation (_gbgb ,_cabd ,_fdebe ,_babc ,PixNotSrcAndDst ,p4 ,0,0);_ffcd !=nil {return false ,_d .Wrap (_ffcd ,_cfbbd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _dddb .Zero (){return false ,nil ;};if _ffcd =_dddb .RasterOperation (_gbgb ,_cabd ,_fadc ,_gbeb ,PixSrc ,p3 ,0,0);_ffcd !=nil {return false ,_d .Wrap (_ffcd ,_cfbbd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ffcd =_dddb .RasterOperation (0,0,_fadc ,_gbeb ,PixNotSrcAndDst ,p2 ,0,0);_ffcd !=nil {return false ,_d .Wrap (_ffcd ,_cfbbd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _dddb .Zero (),nil ;};func _ddg (_fgf *Bitmap ,_cbe ...int )(_afcc *Bitmap ,_ggag error ){const _dad ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _fgf ==nil {return nil ,_d .Error (_dad ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_cbe )==0||len (_cbe )> 4{return nil ,_d .Error (_dad ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _cbe [0]<=0{_ab .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_afcc ,_ggag =_caeb (nil ,_fgf );if _ggag !=nil {return nil ,_d .Wrap (_ggag ,_dad ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _afcc ,nil ;};_gab :=_dfe ();_afcc =_fgf ;for _ca ,_dff :=range _cbe {if _dff <=0{break ;};_afcc ,_ggag =_bce (_afcc ,_dff ,_gab );if _ggag !=nil {return nil ,_d .Wrapf (_ggag ,_dad ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ca );};};return _afcc ,nil ;};func Rect (x ,y ,w ,h int )(*_be .Rectangle ,error ){const _eafd ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_d .Errorf (_eafd ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_d .Error (_eafd ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_cgad :=_be .Rect (x ,y ,x +w ,y +h );return &_cgad ,nil ;};func _gga (_gb ,_dfcc *Bitmap )(_ed error ){const _gd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_db :=_dfcc .RowStride ;_agc :=_gb .RowStride ;var _aa ,_beg ,_fdf ,_de ,_bc int ;for _fdf =0;_fdf < _dfcc .Height ;_fdf ++{_aa =_fdf *_db ;_beg =8*_fdf *_agc ;for _de =0;_de < _db ;_de ++{if _ed =_gb .setEightBytes (_beg +_de *8,_aacd [_dfcc .Data [_aa +_de ]]);_ed !=nil {return _d .Wrap (_ed ,_gd ,"");};};for _bc =1;_bc < 8;_bc ++{for _de =0;_de < _agc ;_de ++{if _ed =_gb .SetByte (_beg +_bc *_agc +_de ,_gb .Data [_beg +_de ]);_ed !=nil {return _d .Wrap (_ed ,_gd ,"");};};};};return nil ;};type RasterOperator int ;func (_bacac *Bitmaps )makeSizeIndicator (_eefc ,_ecgf int ,_fegec LocationFilter ,_bbcae SizeComparison )(_cecfa *_b .NumSlice ,_edbc error ){const _gfbd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bacac ==nil {return nil ,_d .Error (_gfbd ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _fegec {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_gfbd ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_fegec );};switch _bbcae {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_gfbd ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bbcae );};_cecfa =&_b .NumSlice {};var (_dgff ,_fcfefe ,_facf int ;_dbee *Bitmap ;);for _ ,_dbee =range _bacac .Values {_dgff =0;_fcfefe ,_facf =_dbee .Width ,_dbee .Height ;switch _fegec {case LocSelectWidth :if (_bbcae ==SizeSelectIfLT &&_fcfefe < _eefc )||(_bbcae ==SizeSelectIfGT &&_fcfefe > _eefc )||(_bbcae ==SizeSelectIfLTE &&_fcfefe <=_eefc )||(_bbcae ==SizeSelectIfGTE &&_fcfefe >=_eefc )||(_bbcae ==SizeSelectIfEQ &&_fcfefe ==_eefc ){_dgff =1;};case LocSelectHeight :if (_bbcae ==SizeSelectIfLT &&_facf < _ecgf )||(_bbcae ==SizeSelectIfGT &&_facf > _ecgf )||(_bbcae ==SizeSelectIfLTE &&_facf <=_ecgf )||(_bbcae ==SizeSelectIfGTE &&_facf >=_ecgf )||(_bbcae ==SizeSelectIfEQ &&_facf ==_ecgf ){_dgff =1;};case LocSelectIfEither :if (_bbcae ==SizeSelectIfLT &&(_fcfefe < _eefc ||_facf < _ecgf ))||(_bbcae ==SizeSelectIfGT &&(_fcfefe > _eefc ||_facf > _ecgf ))||(_bbcae ==SizeSelectIfLTE &&(_fcfefe <=_eefc ||_facf <=_ecgf ))||(_bbcae ==SizeSelectIfGTE &&(_fcfefe >=_eefc ||_facf >=_ecgf ))||(_bbcae ==SizeSelectIfEQ &&(_fcfefe ==_eefc ||_facf ==_ecgf )){_dgff =1;};case LocSelectIfBoth :if (_bbcae ==SizeSelectIfLT &&(_fcfefe < _eefc &&_facf < _ecgf ))||(_bbcae ==SizeSelectIfGT &&(_fcfefe > _eefc &&_facf > _ecgf ))||(_bbcae ==SizeSelectIfLTE &&(_fcfefe <=_eefc &&_facf <=_ecgf ))||(_bbcae ==SizeSelectIfGTE &&(_fcfefe >=_eefc &&_facf >=_ecgf ))||(_bbcae ==SizeSelectIfEQ &&(_fcfefe ==_eefc &&_facf ==_ecgf )){_dgff =1;};};_cecfa .AddInt (_dgff );};return _cecfa ,nil ;};func (_cecg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _fcae ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_cecg .IntSlice .Size (){return 0,_d .Errorf (_fcae ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_cecg .XAtIndex (i )),nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _afcca (_fddc ,_fgdb *Bitmap ,_cfde *Selection )(*Bitmap ,error ){const _bcac ="\u0065\u0072\u006fd\u0065";var (_fadd error ;_cdba *Bitmap ;);_fddc ,_fadd =_dggcc (_fddc ,_fgdb ,_cfde ,&_cdba );if _fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"");};if _fadd =_fddc .setAll ();_fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"");};var _dcae SelectionValue ;for _bged :=0;_bged < _cfde .Height ;_bged ++{for _gccf :=0;_gccf < _cfde .Width ;_gccf ++{_dcae =_cfde .Data [_bged ][_gccf ];if _dcae ==SelHit {_fadd =_ggbg (_fddc ,_cfde .Cx -_gccf ,_cfde .Cy -_bged ,_fgdb .Width ,_fgdb .Height ,PixSrcAndDst ,_cdba ,0,0);if _fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fddc ,nil ;};_gdgb ,_bgbf ,_gaab ,_gcad :=_cfde .findMaxTranslations ();if _gdgb > 0{if _fadd =_fddc .RasterOperation (0,0,_gdgb ,_fgdb .Height ,PixClr ,nil ,0,0);_fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _gaab > 0{if _fadd =_fddc .RasterOperation (_fgdb .Width -_gaab ,0,_gaab ,_fgdb .Height ,PixClr ,nil ,0,0);_fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _bgbf > 0{if _fadd =_fddc .RasterOperation (0,0,_fgdb .Width ,_bgbf ,PixClr ,nil ,0,0);_fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _gcad > 0{if _fadd =_fddc .RasterOperation (0,_fgdb .Height -_gcad ,_fgdb .Width ,_gcad ,PixClr ,nil ,0,0);_fadd !=nil {return nil ,_d .Wrap (_fadd ,_bcac ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fddc ,nil ;};func _eacd (_gcbe *Bitmap ,_gbbcd ,_afceg int ,_gecfb ,_egce int ,_efec RasterOperator ,_adfe *Bitmap ,_ddbe ,_afcge int )error {var _fggee ,_aega ,_cbef ,_aeadc int ;if _gbbcd < 0{_ddbe -=_gbbcd ;_gecfb +=_gbbcd ;_gbbcd =0;};if _ddbe < 0{_gbbcd -=_ddbe ;_gecfb +=_ddbe ;_ddbe =0;};_fggee =_gbbcd +_gecfb -_gcbe .Width ;if _fggee > 0{_gecfb -=_fggee ;};_aega =_ddbe +_gecfb -_adfe .Width ;if _aega > 0{_gecfb -=_aega ;};if _afceg < 0{_afcge -=_afceg ;_egce +=_afceg ;_afceg =0;};if _afcge < 0{_afceg -=_afcge ;_egce +=_afcge ;_afcge =0;};_cbef =_afceg +_egce -_gcbe .Height ;if _cbef > 0{_egce -=_cbef ;};_aeadc =_afcge +_egce -_adfe .Height ;if _aeadc > 0{_egce -=_aeadc ;};if _gecfb <=0||_egce <=0{return nil ;};var _fegb error ;switch {case _gbbcd &7==0&&_ddbe &7==0:_fegb =_cgga (_gcbe ,_gbbcd ,_afceg ,_gecfb ,_egce ,_efec ,_adfe ,_ddbe ,_afcge );case _gbbcd &7==_ddbe &7:_fegb =_eda (_gcbe ,_gbbcd ,_afceg ,_gecfb ,_egce ,_efec ,_adfe ,_ddbe ,_afcge );default:_fegb =_efgb (_gcbe ,_gbbcd ,_afceg ,_gecfb ,_egce ,_efec ,_adfe ,_ddbe ,_afcge );};if _fegb !=nil {return _d .Wrap (_fegb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_faed *Bitmaps )selectByIndicator (_gfba *_b .NumSlice )(_ebgbegb *Bitmaps ,_gcdg error ){const _abafc ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _faed ==nil {return nil ,_d .Error (_abafc ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gfba ==nil {return nil ,_d .Error (_abafc ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_faed .Values )==0{return _faed ,nil ;};if len (*_gfba )!=len (_faed .Values ){return nil ,_d .Errorf (_abafc ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gfba ),len (_faed .Values ));};var _fbag ,_cbgg ,_fffd int ;for _cbgg =0;_cbgg < len (*_gfba );_cbgg ++{if _fbag ,_gcdg =_gfba .GetInt (_cbgg );_gcdg !=nil {return nil ,_d .Wrap (_gcdg ,_abafc ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fbag ==1{_fffd ++;};};if _fffd ==len (_faed .Values ){return _faed ,nil ;};_ebgbegb =&Bitmaps {};_efgdc :=len (_faed .Values )==len (_faed .Boxes );for _cbgg =0;_cbgg < len (*_gfba );_cbgg ++{if _fbag =int ((*_gfba )[_cbgg ]);_fbag ==0{continue ;};_ebgbegb .Values =append (_ebgbegb .Values ,_faed .Values [_cbgg ]);if _efgdc {_ebgbegb .Boxes =append (_ebgbegb .Boxes ,_faed .Boxes [_cbgg ]);};};return _ebgbegb ,nil ;};type Color int ;func TstPSymbol (t *_f .T )*Bitmap {t .Helper ();_bdcfd :=New (5,8);_ac .NoError (t ,_bdcfd .SetPixel (0,0,1));_ac .NoError (t ,_bdcfd .SetPixel (1,0,1));_ac .NoError (t ,_bdcfd .SetPixel (2,0,1));_ac .NoError (t ,_bdcfd .SetPixel (3,0,1));_ac .NoError (t ,_bdcfd .SetPixel (4,1,1));_ac .NoError (t ,_bdcfd .SetPixel (0,1,1));_ac .NoError (t ,_bdcfd .SetPixel (4,2,1));_ac .NoError (t ,_bdcfd .SetPixel (0,2,1));_ac .NoError (t ,_bdcfd .SetPixel (4,3,1));_ac .NoError (t ,_bdcfd .SetPixel (0,3,1));_ac .NoError (t ,_bdcfd .SetPixel (0,4,1));_ac .NoError (t ,_bdcfd .SetPixel (1,4,1));_ac .NoError (t ,_bdcfd .SetPixel (2,4,1));_ac .NoError (t ,_bdcfd .SetPixel (3,4,1));_ac .NoError (t ,_bdcfd .SetPixel (0,5,1));_ac .NoError (t ,_bdcfd .SetPixel (0,6,1));_ac .NoError (t ,_bdcfd .SetPixel (0,7,1));return _bdcfd ;};func TstFrameBitmap ()*Bitmap {return _ecag .Copy ()};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_efgc *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _eegg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_cbdcb ,_aeagf :=_efgc .selectByIndexes (idx );if _aeagf !=nil {return nil ,_d .Wrap (_aeagf ,_eegg ,"");};return _cbdcb ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func TstWordBitmap (t *_f .T ,scale ...int )*Bitmap {_dgga :=1;if len (scale )> 0{_dgga =scale [0];};_ddegc :=3;_ceff :=9+7+15+2*_ddegc ;_gcgba :=5+_ddegc +5;_fggdb :=New (_ceff *_dgga ,_gcgba *_dgga );_feca :=&Bitmaps {};var _ddeee *int ;_ddegc *=_dgga ;_febg :=0;_ddeee =&_febg ;_egab :=0;_cdab :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,_ddegc );_cdab =TstISymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,_ddegc );_cdab =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,0);*_ddeee =0;_egab =5*_dgga +_ddegc ;_cdab =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,_ddegc );_cdab =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstESymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstESymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,1*_dgga );_cdab =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_feca ,_cdab ,_ddeee ,_egab ,0);TstWriteSymbols (t ,_feca ,_fggdb );return _fggdb ;};func (_ggad Points )GetGeometry (i int )(_fded ,_fgcc float32 ,_abcc error ){if i > len (_ggad )-1{return 0,0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_fagge :=_ggad [i ];return _fagge .X ,_fagge .Y ,nil ;};func (_efad *Bitmaps )String ()string {_deba :=_e .Builder {};for _ ,_cegg :=range _efad .Values {_deba .WriteString (_cegg .String ());_deba .WriteRune ('\n');};return _deba .String ();};func _aeacg (_edaf ,_baaab *Bitmap ,_fcfc ,_fgbd int )(_gcbg error ){const _ffcg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_dcaf ,_aecd ,_dfbcf ,_ecbe int ;_efaf ,_egeg ,_fffad ,_egeb ,_accc ,_beec ,_gcaf ,_egad byte ;);for _dcaf =0;_dcaf < _fcfc ;_dcaf ++{_dfbcf =_dcaf *_edaf .RowStride ;_ecbe =_dcaf *_baaab .RowStride ;for _aecd =0;_aecd < _fgbd ;_aecd ++{if _efaf ,_gcbg =_edaf .GetByte (_dfbcf +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _egeg ,_gcbg =_baaab .GetByte (_ecbe +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcaf > 0{if _fffad ,_gcbg =_edaf .GetByte (_dfbcf -_edaf .RowStride +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_efaf |=_fffad |(_fffad <<1)|(_fffad >>1);if _aecd > 0{if _egad ,_gcbg =_edaf .GetByte (_dfbcf -_edaf .RowStride +_aecd -1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_efaf |=_egad <<7;};if _aecd < _fgbd -1{if _egad ,_gcbg =_edaf .GetByte (_dfbcf -_edaf .RowStride +_aecd +1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_efaf |=_egad >>7;};};if _aecd > 0{if _egeb ,_gcbg =_edaf .GetByte (_dfbcf +_aecd -1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u006a\u0020\u003e \u0030");};_efaf |=_egeb <<7;};_efaf &=_egeg ;if _efaf ==0||^_efaf ==0{if _gcbg =_edaf .SetByte (_dfbcf +_aecd ,_efaf );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_gcaf =_efaf ;_efaf =(_efaf |(_efaf >>1)|(_efaf <<1))&_egeg ;if (_efaf ^_gcaf )==0{if _gcbg =_edaf .SetByte (_dfbcf +_aecd ,_efaf );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dcaf =_fcfc -1;_dcaf >=0;_dcaf --{_dfbcf =_dcaf *_edaf .RowStride ;_ecbe =_dcaf *_baaab .RowStride ;for _aecd =_fgbd -1;_aecd >=0;_aecd --{if _efaf ,_gcbg =_edaf .GetByte (_dfbcf +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _egeg ,_gcbg =_baaab .GetByte (_ecbe +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dcaf < _fcfc -1{if _accc ,_gcbg =_edaf .GetByte (_dfbcf +_edaf .RowStride +_aecd );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_efaf |=_accc |(_accc <<1)|_accc >>1;if _aecd > 0{if _egad ,_gcbg =_edaf .GetByte (_dfbcf +_edaf .RowStride +_aecd -1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_efaf |=_egad <<7;};if _aecd < _fgbd -1{if _egad ,_gcbg =_edaf .GetByte (_dfbcf +_edaf .RowStride +_aecd +1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_efaf |=_egad >>7;};};if _aecd < _fgbd -1{if _beec ,_gcbg =_edaf .GetByte (_dfbcf +_aecd +1);_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_efaf |=_beec >>7;};_efaf &=_egeg ;if _efaf ==0||(^_efaf )==0{if _gcbg =_edaf .SetByte (_dfbcf +_aecd ,_efaf );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_gcaf =_efaf ;_efaf =(_efaf |(_efaf >>1)|(_efaf <<1))&_egeg ;if (_efaf ^_gcaf )==0{if _gcbg =_edaf .SetByte (_dfbcf +_aecd ,_efaf );_gcbg !=nil {return _d .Wrap (_gcbg ,_ffcg ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};type ClassedPoints struct{*Points ;_b .IntSlice ;_fbd func (_fedgd ,_feeb int )bool ;};func _cdaec (_dacd ,_adecb *Bitmap ,_agffgg ,_aebdd int )(_bbce error ){const _ebbf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_bdda ,_fbgb ,_agg ,_fafe int ;_efea ,_bbaba ,_bcdg ,_dgdfb ,_ggadd ,_efeab ,_eacff byte ;);for _bdda =0;_bdda < _agffgg ;_bdda ++{_agg =_bdda *_dacd .RowStride ;_fafe =_bdda *_adecb .RowStride ;for _fbgb =0;_fbgb < _aebdd ;_fbgb ++{_efea ,_bbce =_dacd .GetByte (_agg +_fbgb );if _bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_bbaba ,_bbce =_adecb .GetByte (_fafe +_fbgb );if _bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _bdda > 0{_bcdg ,_bbce =_dacd .GetByte (_agg -_dacd .RowStride +_fbgb );if _bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0069\u0020\u003e \u0030");};_efea |=_bcdg ;};if _fbgb > 0{_dgdfb ,_bbce =_dacd .GetByte (_agg +_fbgb -1);if _bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u006a\u0020\u003e \u0030");};_efea |=_dgdfb <<7;};_efea &=_bbaba ;if _efea ==0||(^_efea )==0{if _bbce =_dacd .SetByte (_agg +_fbgb ,_efea );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_eacff =_efea ;_efea =(_efea |(_efea >>1)|(_efea <<1))&_bbaba ;if (_efea ^_eacff )==0{if _bbce =_dacd .SetByte (_agg +_fbgb ,_efea );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bdda =_agffgg -1;_bdda >=0;_bdda --{_agg =_bdda *_dacd .RowStride ;_fafe =_bdda *_adecb .RowStride ;for _fbgb =_aebdd -1;_fbgb >=0;_fbgb --{if _efea ,_bbce =_dacd .GetByte (_agg +_fbgb );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _bbaba ,_bbce =_adecb .GetByte (_fafe +_fbgb );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bdda < _agffgg -1{if _ggadd ,_bbce =_dacd .GetByte (_agg +_dacd .RowStride +_fbgb );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_efea |=_ggadd ;};if _fbgb < _aebdd -1{if _efeab ,_bbce =_dacd .GetByte (_agg +_fbgb +1);_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_efea |=_efeab >>7;};_efea &=_bbaba ;if _efea ==0||(^_efea )==0{if _bbce =_dacd .SetByte (_agg +_fbgb ,_efea );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_eacff =_efea ;_efea =(_efea |(_efea >>1)|(_efea <<1))&_bbaba ;if (_efea ^_eacff )==0{if _bbce =_dacd .SetByte (_agg +_fbgb ,_efea );_bbce !=nil {return _d .Wrap (_bbce ,_ebbf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _gfgc ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_ef :=_adbd (width ,height );_ef .Data =data ;if _bcbd :=((width *height )+7)>>3;len (data )< _bcbd {return nil ,_d .Errorf (_gfgc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bcbd );};if _cgb :=_ef .addPadBits ();_cgb !=nil {return nil ,_d .Wrap (_cgb ,_gfgc ,"");};return _ef ,nil ;};func _eeea (_fced ,_cabf *Bitmap ,_gdbe *Selection )(*Bitmap ,error ){const _fcgd ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _cfggc ,_eeb int ;if _cabf ==nil {return nil ,_d .Error (_fcgd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gdbe ==nil {return nil ,_d .Error (_fcgd ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_cfggc =_gdbe .Width ;_eeb =_gdbe .Height ;if _cfggc ==0||_eeb ==0{return nil ,_d .Error (_fcgd ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fced ==nil {return _cabf .createTemplate (),nil ;};if _dfcbd :=_fced .resizeImageData (_cabf );_dfcbd !=nil {return nil ,_dfcbd ;};return _fced ,nil ;};func New (width ,height int )*Bitmap {_gaf :=_adbd (width ,height );_gaf .Data =make ([]byte ,height *_gaf .RowStride );return _gaf ;};func (_eeecb *ClassedPoints )YAtIndex (i int )float32 {return (*_eeecb .Points )[_eeecb .IntSlice [i ]].Y };func (_cbg Points )Get (i int )(Point ,error ){if i > len (_cbg )-1{return Point {},_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cbg [i ],nil ;};var (_cgcg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_geeed =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fdabf *ClassedPoints )Swap (i ,j int ){_fdabf .IntSlice [i ],_fdabf .IntSlice [j ]=_fdabf .IntSlice [j ],_fdabf .IntSlice [i ];};func (_cee *Bitmap )setEightBytes (_gddc int ,_gdc uint64 )error {_fagb :=_cee .RowStride -(_gddc %_cee .RowStride );if _cee .RowStride !=_cee .Width >>3{_fagb --;};if _fagb >=8{return _cee .setEightFullBytes (_gddc ,_gdc );};return _cee .setEightPartlyBytes (_gddc ,_fagb ,_gdc );};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _fgdf (src ,sequence ...);};func (_gdcc *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bebc *Bitmaps ,_faaa error ){const _aaga ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _gdcc ==nil {return nil ,_d .Error (_aaga ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_aaga ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_aaga ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_gaed ,_faaa :=_gdcc .makeSizeIndicator (width ,height ,tp ,relation );if _faaa !=nil {return nil ,_d .Wrap (_faaa ,_aaga ,"");};_bebc ,_faaa =_gdcc .selectByIndicator (_gaed );if _faaa !=nil {return nil ,_d .Wrap (_faaa ,_aaga ,"");};return _bebc ,nil ;};func TstWordBitmapWithSpaces (t *_f .T ,scale ...int )*Bitmap {_fcfa :=1;if len (scale )> 0{_fcfa =scale [0];};_gddb :=3;_ecge :=9+7+15+2*_gddb +2*_gddb ;_aefag :=5+_gddb +5+2*_gddb ;_fegbg :=New (_ecge *_fcfa ,_aefag *_fcfa );_dfdb :=&Bitmaps {};var _ccdbg *int ;_gddb *=_fcfa ;_eddb :=_gddb ;_ccdbg =&_eddb ;_gfafe :=_gddb ;_dbeba :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,_gddb );_dbeba =TstISymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,_gddb );_dbeba =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,0);*_ccdbg =_gddb ;_gfafe =5*_fcfa +_gddb ;_dbeba =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,_gddb );_dbeba =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,1*_fcfa );_dbeba =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dfdb ,_dbeba ,_ccdbg ,_gfafe ,0);TstWriteSymbols (t ,_dfdb ,_fegbg );return _fegbg ;};func (_efefg *Selection )findMaxTranslations ()(_efafg ,_fggb ,_gbee ,_ffdb int ){for _bafg :=0;_bafg < _efefg .Height ;_bafg ++{for _bace :=0;_bace < _efefg .Width ;_bace ++{if _efefg .Data [_bafg ][_bace ]==SelHit {_efafg =_dgcc (_efafg ,_efefg .Cx -_bace );_fggb =_dgcc (_fggb ,_efefg .Cy -_bafg );_gbee =_dgcc (_gbee ,_bace -_efefg .Cx );_ffdb =_dgcc (_ffdb ,_bafg -_efefg .Cy );};};};return _efafg ,_fggb ,_gbee ,_ffdb ;};func (_bfacc Points )Size ()int {return len (_bfacc )};func (_gdad MorphProcess )verify (_ceda int ,_dgfa ,_bffgc *int )error {const _abge ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _gdad .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_gdad .Arguments )!=2{return _d .Error (_abge ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_bcbfg ,_dgbcc :=_gdad .getWidthHeight ();if _bcbfg <=0||_dgbcc <=0{return _d .Error (_abge ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_ebfa :=len (_gdad .Arguments );*_dgfa +=_ebfa ;if _ebfa < 1||_ebfa > 4{return _d .Error (_abge ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _afbe :=0;_afbe < _ebfa ;_afbe ++{if _gdad .Arguments [_afbe ]< 1||_gdad .Arguments [_afbe ]> 4{return _d .Error (_abge ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_gdad .Arguments )==0{return _d .Error (_abge ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gaee :=_gdad .Arguments [0];if _gaee !=2&&_gaee !=4&&_gaee !=8{return _d .Error (_abge ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_dgfa -=_afced [_gaee /4];case MopAddBorder :if len (_gdad .Arguments )==0{return _d .Error (_abge ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcge :=_gdad .Arguments [0];if _ceda > 0{return _d .Error (_abge ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _dcge < 1{return _d .Error (_abge ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_bffgc =_dcge ;};return nil ;};func (_bgb *Bitmap )SetByte (index int ,v byte )error {if index > len (_bgb .Data )-1||index < 0{return _d .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_bgb .Data [index ]=v ;return nil ;};func _aded ()(_age [256]uint32 ){for _bg :=0;_bg < 256;_bg ++{if _bg &0x01!=0{_age [_bg ]|=0xf;};if _bg &0x02!=0{_age [_bg ]|=0xf0;};if _bg &0x04!=0{_age [_bg ]|=0xf00;};if _bg &0x08!=0{_age [_bg ]|=0xf000;};if _bg &0x10!=0{_age [_bg ]|=0xf0000;};if _bg &0x20!=0{_age [_bg ]|=0xf00000;};if _bg &0x40!=0{_age [_bg ]|=0xf000000;};if _bg &0x80!=0{_age [_bg ]|=0xf0000000;};};return _age ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _abfc ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_d .Error (_abfc ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_d .Error (_abfc ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_d .Error (_abfc ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_d .Error (_abfc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_d .Error (_abfc ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_cbcd ,_ggeg :=bm1 .Width ,bm1 .Height ;_geeg ,_gaag :=bm2 .Width ,bm2 .Height ;if _b .Abs (_cbcd -_geeg )> maxDiffW {return false ,nil ;};if _b .Abs (_ggeg -_gaag )> maxDiffH {return false ,nil ;};_ccfd :=int (delX +_b .Sign (delX )*0.5);_ebfc :=int (delY +_b .Sign (delY )*0.5);_gbdf :=int (_fd .Ceil (_fd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_eagc :=bm2 .RowStride ;_dcbb :=_dgcc (_ebfc ,0);_eedaf :=_gebe (_gaag +_ebfc ,_ggeg );_edbf :=bm1 .RowStride *_dcbb ;_fbaf :=bm2 .RowStride *(_dcbb -_ebfc );var _dgbc int ;if _eedaf <=_ggeg {_dgbc =downcount [_eedaf -1];};_afdb :=_dgcc (_ccfd ,0);_gbcg :=_gebe (_geeg +_ccfd ,_cbcd );var _dedd ,_ega int ;if _ccfd >=8{_dedd =_ccfd >>3;_edbf +=_dedd ;_afdb -=_dedd <<3;_gbcg -=_dedd <<3;_ccfd &=7;}else if _ccfd <=-8{_ega =-((_ccfd +7)>>3);_fbaf +=_ega ;_eagc -=_ega ;_ccfd +=_ega <<3;};var (_afaee ,_bgde ,_cbca int ;_fedf ,_dfec ,_ced byte ;);if _afdb >=_gbcg ||_dcbb >=_eedaf {return false ,nil ;};_eccg :=(_gbcg +7)>>3;switch {case _ccfd ==0:for _bgde =_dcbb ;_bgde < _eedaf ;_bgde ,_edbf ,_fbaf =_bgde +1,_edbf +bm1 .RowStride ,_fbaf +bm2 .RowStride {for _cbca =0;_cbca < _eccg ;_cbca ++{_fedf =bm1 .Data [_edbf +_cbca ]&bm2 .Data [_fbaf +_cbca ];_afaee +=tab [_fedf ];};if _afaee >=_gbdf {return true ,nil ;};if _aebf :=_afaee +downcount [_bgde ]-_dgbc ;_aebf < _gbdf {return false ,nil ;};};case _ccfd > 0&&_eagc < _eccg :for _bgde =_dcbb ;_bgde < _eedaf ;_bgde ,_edbf ,_fbaf =_bgde +1,_edbf +bm1 .RowStride ,_fbaf +bm2 .RowStride {_dfec =bm1 .Data [_edbf ];_ced =bm2 .Data [_fbaf ]>>uint (_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];for _cbca =1;_cbca < _eagc ;_cbca ++{_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca ]>>uint (_ccfd )|bm2 .Data [_fbaf +_cbca -1]<<uint (8-_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];};_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca -1]<<uint (8-_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];if _afaee >=_gbdf {return true ,nil ;}else if _afaee +downcount [_bgde ]-_dgbc < _gbdf {return false ,nil ;};};case _ccfd > 0&&_eagc >=_eccg :for _bgde =_dcbb ;_bgde < _eedaf ;_bgde ,_edbf ,_fbaf =_bgde +1,_edbf +bm1 .RowStride ,_fbaf +bm2 .RowStride {_dfec =bm1 .Data [_edbf ];_ced =bm2 .Data [_fbaf ]>>uint (_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];for _cbca =1;_cbca < _eccg ;_cbca ++{_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca ]>>uint (_ccfd );_ced |=bm2 .Data [_fbaf +_cbca -1]<<uint (8-_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];};if _afaee >=_gbdf {return true ,nil ;}else if _afaee +downcount [_bgde ]-_dgbc < _gbdf {return false ,nil ;};};case _eccg < _eagc :for _bgde =_dcbb ;_bgde < _eedaf ;_bgde ,_edbf ,_fbaf =_bgde +1,_edbf +bm1 .RowStride ,_fbaf +bm2 .RowStride {for _cbca =0;_cbca < _eccg ;_cbca ++{_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca ]<<uint (-_ccfd );_ced |=bm2 .Data [_fbaf +_cbca +1]>>uint (8+_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];};if _afaee >=_gbdf {return true ,nil ;}else if _ffae :=_afaee +downcount [_bgde ]-_dgbc ;_ffae < _gbdf {return false ,nil ;};};case _eagc >=_eccg :for _bgde =_dcbb ;_bgde < _eedaf ;_bgde ,_edbf ,_fbaf =_bgde +1,_edbf +bm1 .RowStride ,_fbaf +bm2 .RowStride {for _cbca =0;_cbca < _eccg ;_cbca ++{_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca ]<<uint (-_ccfd );_ced |=bm2 .Data [_fbaf +_cbca +1]>>uint (8+_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];};_dfec =bm1 .Data [_edbf +_cbca ];_ced =bm2 .Data [_fbaf +_cbca ]<<uint (-_ccfd );_fedf =_dfec &_ced ;_afaee +=tab [_fedf ];if _afaee >=_gbdf {return true ,nil ;}else if _afaee +downcount [_bgde ]-_dgbc < _gbdf {return false ,nil ;};};};_ffgcc :=float32 (_afaee )*float32 (_afaee )/(float32 (area1 )*float32 (area2 ));if _ffgcc >=scoreThreshold {_ab .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_afaee ,_gbdf ,_ffgcc ,scoreThreshold );};return false ,nil ;};func (_gfd *Bitmap )Copy ()*Bitmap {_aae :=make ([]byte ,len (_gfd .Data ));copy (_aae ,_gfd .Data );return &Bitmap {Width :_gfd .Width ,Height :_gfd .Height ,RowStride :_gfd .RowStride ,Data :_aae ,Color :_gfd .Color ,Text :_gfd .Text ,BitmapNumber :_gfd .BitmapNumber ,Special :_gfd .Special };};func (_acfe *Bitmaps )WidthSorter ()func (_cffc ,_dfcba int )bool {return func (_bdfe ,_aafd int )bool {return _acfe .Values [_bdfe ].Width < _acfe .Values [_aafd ].Width };};func (_gddd *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _gddd .Copy (),nil ;};_gdb ,_ffb :=_gddd .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _ffb !=nil {return nil ,_d .Wrap (_ffb ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gdb ,nil ;};func TstESymbol (t *_f .T ,scale ...int )*Bitmap {_gbgbd ,_agae :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_ac .NoError (t ,_agae );return TstGetScaledSymbol (t ,_gbgbd ,scale ...);};func (_gacaf *Bitmaps )SortByHeight (){_fcgf :=(*byHeight )(_gacaf );_g .Sort (_fcgf )};func (_gfef *Bitmaps )AddBitmap (bm *Bitmap ){_gfef .Values =append (_gfef .Values ,bm )};const (_ggbgf shift =iota ;_gcgaf ;);func _dgfgb (_abgec ,_gbef *Bitmap ,_aafa ,_ffef int )(*Bitmap ,error ){const _bgf ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _gbef ==nil {_ab .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_d .Error (_bgf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _aafa < 1||_ffef < 1{return nil ,_d .Error (_bgf ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _aafa ==1&&_ffef ==1{_aagga ,_efed :=_caeb (_abgec ,_gbef );if _efed !=nil {return nil ,_d .Wrap (_efed ,_bgf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _aagga ,nil ;};if _aafa ==1||_ffef ==1{_dfee :=SelCreateBrick (_ffef ,_aafa ,_ffef /2,_aafa /2,SelHit );_febd ,_dagg :=_ebcf (_abgec ,_gbef ,_dfee );if _dagg !=nil {return nil ,_d .Wrap (_dagg ,_bgf ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _febd ,nil ;};_egcbf :=SelCreateBrick (1,_aafa ,0,_aafa /2,SelHit );_gdecg :=SelCreateBrick (_ffef ,1,_ffef /2,0,SelHit );_ecd ,_bfce :=_ebcf (nil ,_gbef ,_egcbf );if _bfce !=nil {return nil ,_d .Wrap (_bfce ,_bgf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_abgec ,_bfce =_ebcf (_abgec ,_ecd ,_gdecg );if _bfce !=nil {return nil ,_d .Wrap (_bfce ,_bgf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _abgec ,nil ;};func _feb (_dac *Bitmap )(_cdfb *Bitmap ,_adea int ,_eceaf error ){const _cfa ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _dac ==nil {return nil ,0,_d .Errorf (_cfa ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _ceg ,_bffg *Bitmap ;if _ceg ,_eceaf =_caeb (nil ,_dac );_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_dffb [13]int ;_egd ,_bbcb int ;);_ebca :=12;_gbaf :=_b .NewNumSlice (_ebca +1);_dbaf :=_b .NewNumSlice (_ebca +1);var _ebae *Boxes ;for _cbcg :=0;_cbcg <=_ebca ;_cbcg ++{if _cbcg ==0{if _bffg ,_eceaf =_caeb (nil ,_ceg );_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _bffg ,_eceaf =_fgdf (_ceg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ebae ,_eceaf =_bffg .connComponentsBB (4);_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"");};_dffb [_cbcg ]=len (*_ebae );_gbaf .AddInt (_dffb [_cbcg ]);switch _cbcg {case 0:_egd =_dffb [0];default:_bbcb =_dffb [_cbcg -1]-_dffb [_cbcg ];_dbaf .AddInt (_bbcb );};_ceg =_bffg ;};_gfcf :=true ;_dfa :=2;var _deb ,_dgddf int ;for _fcfe :=1;_fcfe < len (*_dbaf );_fcfe ++{if _deb ,_eceaf =_gbaf .GetInt (_fcfe );_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _gfcf &&_deb < int (0.3*float32 (_egd )){_dfa =_fcfe +1;_gfcf =false ;};if _bbcb ,_eceaf =_dbaf .GetInt (_fcfe );_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _bbcb > _dgddf {_dgddf =_bbcb ;};};_egf :=_dac .XResolution ;if _egf ==0{_egf =150;};if _egf > 110{_dfa ++;};if _dfa < 2{_ab .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_dfa =2;};_adea =_dfa +1;if _cdfb ,_eceaf =_ebgbe (nil ,_dac ,_dfa +1,1);_eceaf !=nil {return nil ,0,_d .Wrap (_eceaf ,_cfa ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _cdfb ,_adea ,nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_ddccd *Bitmap )clearAll ()error {return _ddccd .RasterOperation (0,0,_ddccd .Width ,_ddccd .Height ,PixClr ,nil ,0,0);};func (_dgag *Bitmap )inverseData (){if _bfcg :=_dgag .RasterOperation (0,0,_dgag .Width ,_dgag .Height ,PixNotDst ,nil ,0,0);_bfcg !=nil {_ab .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_bfcg );};if _dgag .Color ==Chocolate {_dgag .Color =Vanilla ;}else {_dgag .Color =Chocolate ;};};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_afcg float64 ,_afb error ){const _bdca ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _afcg ,_d .Error (_bdca ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _afcg ,_d .Error (_bdca ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _afcg ,_d .Error (_bdca ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_geee ,_eegegg :=bm1 .Width ,bm1 .Height ;_eacf ,_eabb :=bm2 .Width ,bm2 .Height ;if _fgbf (_geee -_eacf )> maxDiffW {return 0,nil ;};if _fgbf (_eegegg -_eabb )> maxDiffH {return 0,nil ;};var _acgad ,_gce int ;if delX >=0{_acgad =int (delX +0.5);}else {_acgad =int (delX -0.5);};if delY >=0{_gce =int (delY +0.5);}else {_gce =int (delY -0.5);};_bcfe :=bm1 .createTemplate ();if _afb =_bcfe .RasterOperation (_acgad ,_gce ,_eacf ,_eabb ,PixSrc ,bm2 ,0,0);_afb !=nil {return _afcg ,_d .Wrap (_afb ,_bdca ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _afb =_bcfe .RasterOperation (0,0,_geee ,_eegegg ,PixSrcAndDst ,bm1 ,0,0);_afb !=nil {return _afcg ,_d .Wrap (_afb ,_bdca ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_feac :=_bcfe .countPixels ();_afcg =float64 (_feac )*float64 (_feac )/(float64 (area1 )*float64 (area2 ));return _afcg ,nil ;};func (_ebef *byWidth )Swap (i ,j int ){_ebef .Values [i ],_ebef .Values [j ]=_ebef .Values [j ],_ebef .Values [i ];if _ebef .Boxes !=nil {_ebef .Boxes [i ],_ebef .Boxes [j ]=_ebef .Boxes [j ],_ebef .Boxes [i ];};};func (_fgaa *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_cfd *Bitmap )connComponentsBB (_bbd int )(_dbac *Boxes ,_eeec error ){const _aageb ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _bbd !=4&&_bbd !=8{return nil ,_d .Error (_aageb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cfd .Zero (){return &Boxes {},nil ;};_cfd .setPadBits (0);_degg ,_eeec :=_caeb (nil ,_cfd );if _eeec !=nil {return nil ,_d .Wrap (_eeec ,_aageb ,"\u0062\u006d\u0031");};_bge :=&_b .Stack {};_bge .Aux =&_b .Stack {};_dbac =&Boxes {};var (_aac ,_geag int ;_ddce _be .Point ;_bbeg bool ;_acga *_be .Rectangle ;);for {if _ddce ,_bbeg ,_eeec =_degg .nextOnPixel (_geag ,_aac );_eeec !=nil {return nil ,_d .Wrap (_eeec ,_aageb ,"");};if !_bbeg {break ;};if _acga ,_eeec =_bgef (_degg ,_bge ,_ddce .X ,_ddce .Y ,_bbd );_eeec !=nil {return nil ,_d .Wrap (_eeec ,_aageb ,"");};if _eeec =_dbac .Add (_acga );_eeec !=nil {return nil ,_d .Wrap (_eeec ,_aageb ,"");};_geag =_ddce .X ;_aac =_ddce .Y ;};return _dbac ,nil ;};type SizeSelection int ;type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_be .Rectangle ;};func (_abfea *Bitmap )removeBorderGeneral (_bgbg ,_gea ,_eab ,_fdb int )(*Bitmap ,error ){const _ecc ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _bgbg < 0||_gea < 0||_eab < 0||_fdb < 0{return nil ,_d .Error (_ecc ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_bcg ,_beba :=_abfea .Width ,_abfea .Height ;_eabc :=_bcg -_bgbg -_gea ;_cded :=_beba -_eab -_fdb ;if _eabc <=0{return nil ,_d .Errorf (_ecc ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_eabc );};if _cded <=0{return nil ,_d .Errorf (_ecc ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cded );};_bae :=New (_eabc ,_cded );_bae .Color =_abfea .Color ;_ggc :=_bae .RasterOperation (0,0,_eabc ,_cded ,PixSrc ,_abfea ,_bgbg ,_eab );if _ggc !=nil {return nil ,_d .Wrap (_ggc ,_ecc ,"");};return _bae ,nil ;};func (_gbg *Bitmap )SetPadBits (value int ){_gbg .setPadBits (value )};func _fgfc (_befg *Bitmap ,_dgcf *_b .Stack ,_gddf ,_acgde int )(_fdefc *_be .Rectangle ,_gaga error ){const _dfff ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _befg ==nil {return nil ,_d .Error (_dfff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dgcf ==nil {return nil ,_d .Error (_dfff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_adab ,_dged :=_befg .Width ,_befg .Height ;_feae :=_adab -1;_gdfeg :=_dged -1;if _gddf < 0||_gddf > _feae ||_acgde < 0||_acgde > _gdfeg ||!_befg .GetPixel (_gddf ,_acgde ){return nil ,nil ;};_daebb :=_be .Rect (100000,100000,0,0);if _gaga =_gggf (_dgcf ,_gddf ,_gddf ,_acgde ,1,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gaga =_gggf (_dgcf ,_gddf ,_gddf ,_acgde +1,-1,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_daebb .Min .X ,_daebb .Max .X =_gddf ,_gddf ;_daebb .Min .Y ,_daebb .Max .Y =_acgde ,_acgde ;var (_cggff *fillSegment ;_dfea int ;);for _dgcf .Len ()> 0{if _cggff ,_gaga =_gbdb (_dgcf );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"");};_acgde =_cggff ._ggge ;for _gddf =_cggff ._fgaee -1;_gddf >=0&&_befg .GetPixel (_gddf ,_acgde );_gddf --{if _gaga =_befg .SetPixel (_gddf ,_acgde ,0);_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _gddf >=_cggff ._fgaee -1{for {for _gddf ++;_gddf <=_cggff ._ccdd +1&&_gddf <=_feae &&!_befg .GetPixel (_gddf ,_acgde );_gddf ++{};_dfea =_gddf ;if !(_gddf <=_cggff ._ccdd +1&&_gddf <=_feae ){break ;};for ;_gddf <=_feae &&_befg .GetPixel (_gddf ,_acgde );_gddf ++{if _gaga =_befg .SetPixel (_gddf ,_acgde ,0);_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gaga =_gggf (_dgcf ,_dfea ,_gddf -1,_cggff ._ggge ,_cggff ._eceeb ,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gddf > _cggff ._ccdd {if _gaga =_gggf (_dgcf ,_cggff ._ccdd +1,_gddf -1,_cggff ._ggge ,-_cggff ._eceeb ,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_dfea =_gddf +1;if _dfea < _cggff ._fgaee {if _gaga =_gggf (_dgcf ,_dfea ,_cggff ._fgaee -1,_cggff ._ggge ,-_cggff ._eceeb ,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gddf =_cggff ._fgaee ;for {for ;_gddf <=_feae &&_befg .GetPixel (_gddf ,_acgde );_gddf ++{if _gaga =_befg .SetPixel (_gddf ,_acgde ,0);_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gaga =_gggf (_dgcf ,_dfea ,_gddf -1,_cggff ._ggge ,_cggff ._eceeb ,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gddf > _cggff ._ccdd {if _gaga =_gggf (_dgcf ,_cggff ._ccdd +1,_gddf -1,_cggff ._ggge ,-_cggff ._eceeb ,_gdfeg ,&_daebb );_gaga !=nil {return nil ,_d .Wrap (_gaga ,_dfff ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gddf ++;_gddf <=_cggff ._ccdd +1&&_gddf <=_feae &&!_befg .GetPixel (_gddf ,_acgde );_gddf ++{};_dfea =_gddf ;if !(_gddf <=_cggff ._ccdd +1&&_gddf <=_feae ){break ;};};};_daebb .Max .X ++;_daebb .Max .Y ++;return &_daebb ,nil ;};func (_dcbe *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _baaa ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _cdbe :=_dcbe .validateIntSlice ();_cdbe !=nil {return nil ,_d .Wrap (_cdbe ,_baaa ,"");};if _dcbe .IntSlice .Size ()==0{return nil ,_d .Error (_baaa ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_dcbe .SortByY ();var (_efag []*ClassedPoints ;_eede int ;);_effc :=-1;var _eafe *ClassedPoints ;for _gebc :=0;_gebc < len (_dcbe .IntSlice );_gebc ++{_eede =int (_dcbe .YAtIndex (_gebc ));if _eede !=_effc {_eafe =&ClassedPoints {Points :_dcbe .Points };_effc =_eede ;_efag =append (_efag ,_eafe );};_eafe .IntSlice =append (_eafe .IntSlice ,_dcbe .IntSlice [_gebc ]);};for _ ,_dcgb :=range _efag {_dcgb .SortByX ();};return _efag ,nil ;};func TstGetScaledSymbol (t *_f .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_cbf ,_dgagc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_ac .NoError (t ,_dgagc );return _cbf ;};func (_edfca *Bitmap )connComponentsBitmapsBB (_aebd *Bitmaps ,_aagff int )(_bgbd *Boxes ,_bfac error ){const _eegea ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _aagff !=4&&_aagff !=8{return nil ,_d .Error (_eegea ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _aebd ==nil {return nil ,_d .Error (_eegea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_aebd .Values )> 0{return nil ,_d .Error (_eegea ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _edfca .Zero (){return &Boxes {},nil ;};var (_dgfge ,_afdfb ,_bcdc ,_abaa *Bitmap ;);_edfca .setPadBits (0);if _dgfge ,_bfac =_caeb (nil ,_edfca );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062\u006d\u0031");};if _afdfb ,_bfac =_caeb (nil ,_edfca );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062\u006d\u0032");};_bbgec :=&_b .Stack {};_bbgec .Aux =&_b .Stack {};_bgbd =&Boxes {};var (_cfdf ,_beaf int ;_bega _be .Point ;_cfda bool ;_cgcd *_be .Rectangle ;);for {if _bega ,_cfda ,_bfac =_dgfge .nextOnPixel (_cfdf ,_beaf );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"");};if !_cfda {break ;};if _cgcd ,_bfac =_bgef (_dgfge ,_bbgec ,_bega .X ,_bega .Y ,_aagff );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"");};if _bfac =_bgbd .Add (_cgcd );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"");};if _bcdc ,_bfac =_dgfge .clipRectangle (_cgcd ,nil );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062\u006d\u0033");};if _abaa ,_bfac =_afdfb .clipRectangle (_cgcd ,nil );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062\u006d\u0034");};if _ ,_bfac =_bfagg (_bcdc ,_bcdc ,_abaa );_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _bfac =_afdfb .RasterOperation (_cgcd .Min .X ,_cgcd .Min .Y ,_cgcd .Dx (),_cgcd .Dy (),PixSrcXorDst ,_bcdc ,0,0);_bfac !=nil {return nil ,_d .Wrap (_bfac ,_eegea ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_aebd .AddBitmap (_bcdc );_cfdf =_bega .X ;_beaf =_bega .Y ;};_aebd .Boxes =*_bgbd ;return _bgbd ,nil ;};func (_egef *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bbeb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_egef .Values )==0{return nil ,_d .Error (_bbeb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_gadg :=&BitmapsArray {};_egef .SortByHeight ();_edfcg :=-1;_efgfg :=-1;for _gacd :=0;_gacd < len (_egef .Values );_gacd ++{_dbaacd :=_egef .Values [_gacd ].Height ;if _dbaacd > _edfcg {_edfcg =_dbaacd ;_efgfg ++;_gadg .Values =append (_gadg .Values ,&Bitmaps {});};_gadg .Values [_efgfg ].AddBitmap (_egef .Values [_gacd ]);};return _gadg ,nil ;};func TstOSymbol (t *_f .T ,scale ...int )*Bitmap {_bcgaa ,_gffbd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_ac .NoError (t ,_gffbd );return TstGetScaledSymbol (t ,_bcgaa ,scale ...);};func _bfagg (_eddd ,_gaea ,_beace *Bitmap )(*Bitmap ,error ){const _dcaa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _gaea ==nil {return nil ,_d .Error (_dcaa ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _beace ==nil {return nil ,_d .Error (_dcaa ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eddd ==_beace {return nil ,_d .Error (_dcaa ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_gaea .SizesEqual (_beace ){_ab .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_dcaa );};var _dead error ;if _eddd ,_dead =_caeb (_eddd ,_gaea );_dead !=nil {return nil ,_d .Wrap (_dead ,_dcaa ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _dead =_eddd .RasterOperation (0,0,_eddd .Width ,_eddd .Height ,PixSrcXorDst ,_beace ,0,0);_dead !=nil {return nil ,_d .Wrap (_dead ,_dcaa ,"");};return _eddd ,nil ;};func _gbdb (_bbdeg *_b .Stack )(_dgad *fillSegment ,_dfef error ){const _ddegf ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _bbdeg ==nil {return nil ,_d .Error (_ddegf ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bbdeg .Aux ==nil {return nil ,_d .Error (_ddegf ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_fggc ,_gdga :=_bbdeg .Pop ();if !_gdga {return nil ,nil ;};_agbd ,_gdga :=_fggc .(*fillSegment );if !_gdga {return nil ,_d .Error (_ddegf ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_dgad =&fillSegment {_agbd ._fgaee ,_agbd ._ccdd ,_agbd ._ggge +_agbd ._eceeb ,_agbd ._eceeb };_bbdeg .Aux .Push (_agbd );return _dgad ,nil ;};func _adba (_gcgc *Bitmap ,_edbda *Bitmap ,_affgg int )(_gcda error ){const _bgcga ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_gfeae :=_gebe (_gcgc .Height ,_edbda .Height );_abbaf :=_gebe (_gcgc .RowStride ,_edbda .RowStride );switch _affgg {case 4:_gcda =_cdaec (_gcgc ,_edbda ,_gfeae ,_abbaf );case 8:_gcda =_aeacg (_gcgc ,_edbda ,_gfeae ,_abbaf );default:return _d .Errorf (_bgcga ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_affgg );};if _gcda !=nil {return _d .Wrap (_gcda ,_bgcga ,"");};return nil ;};func (_bfaea *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _aeca ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bfaea ==nil {return nil ,_d .Error (_aeca ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_bfaea .Values )-1{return nil ,_d .Errorf (_aeca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bfaea .Values [i ],nil ;};func _efgb (_gecc *Bitmap ,_eeee ,_babd ,_acfd ,_dfcef int ,_feeba RasterOperator ,_aebg *Bitmap ,_ccga ,_fgbc int )error {var (_fdaa bool ;_cdedb bool ;_edea byte ;_fbbe int ;_ccfdf int ;_afca int ;_cfce int ;_edfbf bool ;_ffac int ;_bccg int ;_bbga int ;_gbefd bool ;_gdbf byte ;_ceec int ;_geba int ;_ddag int ;_gdaa byte ;_afgf int ;_aaae int ;_efae uint ;_cgcae uint ;_gfac byte ;_eaad shift ;_fgdge bool ;_afcad bool ;_ceb ,_dgce int ;);if _ccga &7!=0{_aaae =8-(_ccga &7);};if _eeee &7!=0{_ccfdf =8-(_eeee &7);};if _aaae ==0&&_ccfdf ==0{_gfac =_geeed [0];}else {if _ccfdf > _aaae {_efae =uint (_ccfdf -_aaae );}else {_efae =uint (8-(_aaae -_ccfdf ));};_cgcae =8-_efae ;_gfac =_geeed [_efae ];};if (_eeee &7)!=0{_fdaa =true ;_fbbe =8-(_eeee &7);_edea =_geeed [_fbbe ];_afca =_gecc .RowStride *_babd +(_eeee >>3);_cfce =_aebg .RowStride *_fgbc +(_ccga >>3);_afgf =8-(_ccga &7);if _fbbe > _afgf {_eaad =_ggbgf ;if _acfd >=_aaae {_fgdge =true ;};}else {_eaad =_gcgaf ;};};if _acfd < _fbbe {_cdedb =true ;_edea &=_cgcg [8-_fbbe +_acfd ];};if !_cdedb {_ffac =(_acfd -_fbbe )>>3;if _ffac !=0{_edfbf =true ;_bccg =_gecc .RowStride *_babd +((_eeee +_ccfdf )>>3);_bbga =_aebg .RowStride *_fgbc +((_ccga +_ccfdf )>>3);};};_ceec =(_eeee +_acfd )&7;if !(_cdedb ||_ceec ==0){_gbefd =true ;_gdbf =_cgcg [_ceec ];_geba =_gecc .RowStride *_babd +((_eeee +_ccfdf )>>3)+_ffac ;_ddag =_aebg .RowStride *_fgbc +((_ccga +_ccfdf )>>3)+_ffac ;if _ceec > int (_cgcae ){_afcad =true ;};};switch _feeba {case PixSrc :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa ,_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa ,_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotSrc :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^_gdaa ,_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=^_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^_gdaa ,_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixSrcOrDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa |_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]|=_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa |_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixSrcAndDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa &_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]&=_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa &_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixSrcXorDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa ^_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]^=_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa ^_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotSrcOrDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^_gdaa |_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]|=^_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^_gdaa |_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotSrcAndDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^_gdaa &_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]&=^_gdaa ;};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^_gdaa &_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixSrcOrNotDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa |^_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=_gdaa |^_gecc .Data [_bccg +_dgce ];};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa |^_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixSrcAndNotDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],_gdaa &^_gecc .Data [_afca ],_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=_gdaa &^_gecc .Data [_bccg +_dgce ];};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],_gdaa &^_gecc .Data [_geba ],_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotPixSrcOrDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^(_gdaa |_gecc .Data [_afca ]),_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=^(_gdaa |_gecc .Data [_bccg +_dgce ]);};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^(_gdaa |_gecc .Data [_geba ]),_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotPixSrcAndDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^(_gdaa &_gecc .Data [_afca ]),_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=^(_gdaa &_gecc .Data [_bccg +_dgce ]);};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^(_gdaa &_gecc .Data [_geba ]),_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};case PixNotPixSrcXorDst :if _fdaa {for _ceb =0;_ceb < _dfcef ;_ceb ++{if _eaad ==_ggbgf {_gdaa =_aebg .Data [_cfce ]<<_efae ;if _fgdge {_gdaa =_dccdg (_gdaa ,_aebg .Data [_cfce +1]>>_cgcae ,_gfac );};}else {_gdaa =_aebg .Data [_cfce ]>>_cgcae ;};_gecc .Data [_afca ]=_dccdg (_gecc .Data [_afca ],^(_gdaa ^_gecc .Data [_afca ]),_edea );_afca +=_gecc .RowStride ;_cfce +=_aebg .RowStride ;};};if _edfbf {for _ceb =0;_ceb < _dfcef ;_ceb ++{for _dgce =0;_dgce < _ffac ;_dgce ++{_gdaa =_dccdg (_aebg .Data [_bbga +_dgce ]<<_efae ,_aebg .Data [_bbga +_dgce +1]>>_cgcae ,_gfac );_gecc .Data [_bccg +_dgce ]=^(_gdaa ^_gecc .Data [_bccg +_dgce ]);};_bccg +=_gecc .RowStride ;_bbga +=_aebg .RowStride ;};};if _gbefd {for _ceb =0;_ceb < _dfcef ;_ceb ++{_gdaa =_aebg .Data [_ddag ]<<_efae ;if _afcad {_gdaa =_dccdg (_gdaa ,_aebg .Data [_ddag +1]>>_cgcae ,_gfac );};_gecc .Data [_geba ]=_dccdg (_gecc .Data [_geba ],^(_gdaa ^_gecc .Data [_geba ]),_gdbf );_geba +=_gecc .RowStride ;_ddag +=_aebg .RowStride ;};};default:_ab .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_feeba );return _d .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_abdd *Bitmap )addBorderGeneral (_fgfe ,_cggfc ,_ddge ,_acff int ,_fbgf int )(*Bitmap ,error ){const _fgc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _fgfe < 0||_cggfc < 0||_ddge < 0||_acff < 0{return nil ,_d .Error (_fgc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_efcc ,_abcd :=_abdd .Width ,_abdd .Height ;_bbc :=_efcc +_fgfe +_cggfc ;_afaeb :=_abcd +_ddge +_acff ;_faea :=New (_bbc ,_afaeb );_faea .Color =_abdd .Color ;_cgecd :=PixClr ;if _fbgf > 0{_cgecd =PixSet ;};_beac :=_faea .RasterOperation (0,0,_fgfe ,_afaeb ,_cgecd ,nil ,0,0);if _beac !=nil {return nil ,_d .Wrap (_beac ,_fgc ,"\u006c\u0065\u0066\u0074");};_beac =_faea .RasterOperation (_bbc -_cggfc ,0,_cggfc ,_afaeb ,_cgecd ,nil ,0,0);if _beac !=nil {return nil ,_d .Wrap (_beac ,_fgc ,"\u0072\u0069\u0067h\u0074");};_beac =_faea .RasterOperation (0,0,_bbc ,_ddge ,_cgecd ,nil ,0,0);if _beac !=nil {return nil ,_d .Wrap (_beac ,_fgc ,"\u0074\u006f\u0070");};_beac =_faea .RasterOperation (0,_afaeb -_acff ,_bbc ,_acff ,_cgecd ,nil ,0,0);if _beac !=nil {return nil ,_d .Wrap (_beac ,_fgc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_beac =_faea .RasterOperation (_fgfe ,_ddge ,_efcc ,_abcd ,PixSrc ,_abdd ,0,0);if _beac !=nil {return nil ,_d .Wrap (_beac ,_fgc ,"\u0063\u006f\u0070\u0079");};return _faea ,nil ;};var _eeda [256]uint8 ;type SelectionValue int ;type fillSegment struct{_fgaee int ;_ccdd int ;_ggge int ;_eceeb int ;};func _dcb ()(_dde [256]uint16 ){for _ea :=0;_ea < 256;_ea ++{if _ea &0x01!=0{_dde [_ea ]|=0x3;};if _ea &0x02!=0{_dde [_ea ]|=0xc;};if _ea &0x04!=0{_dde [_ea ]|=0x30;};if _ea &0x08!=0{_dde [_ea ]|=0xc0;};if _ea &0x10!=0{_dde [_ea ]|=0x300;};if _ea &0x20!=0{_dde [_ea ]|=0xc00;};if _ea &0x40!=0{_dde [_ea ]|=0x3000;};if _ea &0x80!=0{_dde [_ea ]|=0xc000;};};return _dde ;};type MorphOperation int ;const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_dfgda *Bitmaps )HeightSorter ()func (_afgg ,_cabcg int )bool {return func (_bcbe ,_aebgf int )bool {_bebdd :=_dfgda .Values [_bcbe ].Height < _dfgda .Values [_aebgf ].Height ;_ab .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_dfgda .Values [_bcbe ].Height ,_dfgda .Values [_aebgf ].Height ,_bebdd );return _bebdd ;};};func _fc (_gbc ,_dbc *Bitmap ,_ffg int ,_bag []byte ,_baac int )(_bdc error ){const _dfcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_bcd ,_cbec ,_abc ,_edd ,_gcd ,_dgf ,_acb ,_dgbe int ;_acda ,_fcb uint32 ;_fcg ,_bcb byte ;_gff uint16 ;);_dcf :=make ([]byte ,4);_cfbd :=make ([]byte ,4);for _abc =0;_abc < _gbc .Height -1;_abc ,_edd =_abc +2,_edd +1{_bcd =_abc *_gbc .RowStride ;_cbec =_edd *_dbc .RowStride ;for _gcd ,_dgf =0,0;_gcd < _baac ;_gcd ,_dgf =_gcd +4,_dgf +1{for _acb =0;_acb < 4;_acb ++{_dgbe =_bcd +_gcd +_acb ;if _dgbe <=len (_gbc .Data )-1&&_dgbe < _bcd +_gbc .RowStride {_dcf [_acb ]=_gbc .Data [_dgbe ];}else {_dcf [_acb ]=0x00;};_dgbe =_bcd +_gbc .RowStride +_gcd +_acb ;if _dgbe <=len (_gbc .Data )-1&&_dgbe < _bcd +(2*_gbc .RowStride ){_cfbd [_acb ]=_gbc .Data [_dgbe ];}else {_cfbd [_acb ]=0x00;};};_acda =_ec .BigEndian .Uint32 (_dcf );_fcb =_ec .BigEndian .Uint32 (_cfbd );_fcb &=_acda ;_fcb &=_fcb <<1;_fcb &=0xaaaaaaaa;_acda =_fcb |(_fcb <<7);_fcg =byte (_acda >>24);_bcb =byte ((_acda >>8)&0xff);_dgbe =_cbec +_dgf ;if _dgbe +1==len (_dbc .Data )-1||_dgbe +1>=_cbec +_dbc .RowStride {_dbc .Data [_dgbe ]=_bag [_fcg ];if _bdc =_dbc .SetByte (_dgbe ,_bag [_fcg ]);_bdc !=nil {return _d .Wrapf (_bdc ,_dfcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgbe );};}else {_gff =(uint16 (_bag [_fcg ])<<8)|uint16 (_bag [_bcb ]);if _bdc =_dbc .setTwoBytes (_dgbe ,_gff );_bdc !=nil {return _d .Wrapf (_bdc ,_dfcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgbe );};_dgf ++;};};};return nil ;};func (_bee *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_ebf *Boxes ,_cfbdb error ){const _cdef ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _bee ==nil {return nil ,_d .Error (_cdef ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_d .Error (_cdef ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _ebf ,_cfbdb =_bee .connComponentsBB (connectivity );_cfbdb !=nil {return nil ,_d .Wrap (_cfbdb ,_cdef ,"");};}else {if _ebf ,_cfbdb =_bee .connComponentsBitmapsBB (bms ,connectivity );_cfbdb !=nil {return nil ,_d .Wrap (_cfbdb ,_cdef ,"");};};return _ebf ,nil ;};func _dgcc (_gecd ,_dccd int )int {if _gecd > _dccd {return _gecd ;};return _dccd ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_faaf :=_becd (h ,w ,"");_faaf .setOrigin (cy ,cx );var _ceeca ,_afcb int ;for _ceeca =0;_ceeca < h ;_ceeca ++{for _afcb =0;_afcb < w ;_afcb ++{_faaf .Data [_ceeca ][_afcb ]=tp ;};};return _faaf ;};func TstISymbol (t *_f .T ,scale ...int )*Bitmap {_fbeg ,_eega :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_ac .NoError (t ,_eega );return TstGetScaledSymbol (t ,_fbeg ,scale ...);};func (_dfbc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ggbg (_dfbc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_bff *Bitmap )setFourBytes (_bdbb int ,_eff uint32 )error {if _bdbb +3> len (_bff .Data )-1{return _d .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bdbb );};_bff .Data [_bdbb ]=byte ((_eff &0xff000000)>>24);_bff .Data [_bdbb +1]=byte ((_eff &0xff0000)>>16);_bff .Data [_bdbb +2]=byte ((_eff &0xff00)>>8);_bff .Data [_bdbb +3]=byte (_eff &0xff);return nil ;};func _dggcc (_cfbba *Bitmap ,_fdaba *Bitmap ,_aafae *Selection ,_aabcf **Bitmap )(*Bitmap ,error ){const _ccaf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fdaba ==nil {return nil ,_d .Error (_ccaf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _aafae ==nil {return nil ,_d .Error (_ccaf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fedg ,_defc :=_aafae .Height ,_aafae .Width ;if _fedg ==0||_defc ==0{return nil ,_d .Error (_ccaf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _cfbba ==nil {_cfbba =_fdaba .createTemplate ();*_aabcf =_fdaba ;return _cfbba ,nil ;};_cfbba .Width =_fdaba .Width ;_cfbba .Height =_fdaba .Height ;_cfbba .RowStride =_fdaba .RowStride ;_cfbba .Color =_fdaba .Color ;_cfbba .Data =make ([]byte ,_fdaba .RowStride *_fdaba .Height );if _cfbba ==_fdaba {*_aabcf =_fdaba .Copy ();}else {*_aabcf =_fdaba ;};return _cfbba ,nil ;};func _fabc (_gbdaa ,_cbeg *Bitmap ,_egfa ,_bdee int )(*Bitmap ,error ){const _dee ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _cbeg ==nil {return nil ,_d .Error (_dee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _egfa < 1||_bdee < 1{return nil ,_d .Error (_dee ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _egfa ==1&&_bdee ==1{_fgded ,_edga :=_caeb (_gbdaa ,_cbeg );if _edga !=nil {return nil ,_d .Wrap (_edga ,_dee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fgded ,nil ;};if _egfa ==1||_bdee ==1{_faegd :=SelCreateBrick (_bdee ,_egfa ,_bdee /2,_egfa /2,SelHit );_gabg ,_ddcg :=_afcca (_gbdaa ,_cbeg ,_faegd );if _ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_dee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gabg ,nil ;};_dgddc :=SelCreateBrick (1,_egfa ,0,_egfa /2,SelHit );_gcec :=SelCreateBrick (_bdee ,1,_bdee /2,0,SelHit );_gaabe ,_eadg :=_afcca (nil ,_cbeg ,_dgddc );if _eadg !=nil {return nil ,_d .Wrap (_eadg ,_dee ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_gbdaa ,_eadg =_afcca (_gbdaa ,_gaabe ,_gcec );if _eadg !=nil {return nil ,_d .Wrap (_eadg ,_dee ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gbdaa ,nil ;};func (_bbabd CombinationOperator )String ()string {var _abeb string ;switch _bbabd {case CmbOpOr :_abeb ="\u004f\u0052";case CmbOpAnd :_abeb ="\u0041\u004e\u0044";case CmbOpXor :_abeb ="\u0058\u004f\u0052";case CmbOpXNor :_abeb ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_abeb ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_abeb ="\u004e\u004f\u0054";};return _abeb ;};func MakePixelCentroidTab8 ()[]int {return _dbgd ()};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bfg ,_acfa int ;_gaeg :=src .RowStride -1;if x < 0{_acfa =-x ;x =0;}else if x +src .Width > dst .Width {_gaeg -=src .Width +x -dst .Width ;};if y < 0{_bfg =-y ;y =0;_acfa +=src .RowStride ;_gaeg +=src .RowStride ;}else if y +src .Height > dst .Height {_bfg =src .Height +y -dst .Height ;};var (_bcbb int ;_ege error ;);_gaa :=x &0x07;_ggfda :=8-_gaa ;_bdf :=src .Width &0x07;_ggda :=_ggfda -_bdf ;_fdef :=_ggfda &0x07!=0;_aabc :=src .Width <=((_gaeg -_acfa )<<3)+_ggfda ;_caba :=dst .GetByteIndex (x ,y );_fage :=_bfg +dst .Height ;if src .Height > _fage {_bcbb =_fage ;}else {_bcbb =src .Height ;};switch {case !_fdef :_ege =_ggfb (src ,dst ,_bfg ,_bcbb ,_caba ,_acfa ,_gaeg ,op );case _aabc :_ege =_afg (src ,dst ,_bfg ,_bcbb ,_caba ,_acfa ,_gaeg ,_ggda ,_gaa ,_ggfda ,op );default:_ege =_bed (src ,dst ,_bfg ,_bcbb ,_caba ,_acfa ,_gaeg ,_ggda ,_gaa ,_ggfda ,op ,_bdf );};return _ege ;};func (_dgbga *byWidth )Len ()int {return len (_dgbga .Values )};func _eda (_ecb *Bitmap ,_ebe ,_gedf ,_cdaag ,_cfbef int ,_bdff RasterOperator ,_gdgff *Bitmap ,_cdedg ,_beff int )error {var (_bbcf bool ;_cddf bool ;_dfgf int ;_cgccd int ;_gfff int ;_cbbc bool ;_bdgc byte ;_egbf int ;_dgef int ;_fdea int ;_bedec ,_bgag int ;);_befc :=8-(_ebe &7);_gcf :=_geeed [_befc ];_ecffb :=_ecb .RowStride *_gedf +(_ebe >>3);_ffaf :=_gdgff .RowStride *_beff +(_cdedg >>3);if _cdaag < _befc {_bbcf =true ;_gcf &=_cgcg [8-_befc +_cdaag ];};if !_bbcf {_dfgf =(_cdaag -_befc )>>3;if _dfgf > 0{_cddf =true ;_cgccd =_ecffb +1;_gfff =_ffaf +1;};};_egbf =(_ebe +_cdaag )&7;if !(_bbcf ||_egbf ==0){_cbbc =true ;_bdgc =_cgcg [_egbf ];_dgef =_ecffb +1+_dfgf ;_fdea =_ffaf +1+_dfgf ;};switch _bdff {case PixSrc :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotSrc :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^_gdgff .Data [_ffaf ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=^_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^_gdgff .Data [_fdea ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixSrcOrDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ]|_ecb .Data [_ecffb ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]|=_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ]|_ecb .Data [_dgef ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixSrcAndDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ]&_ecb .Data [_ecffb ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]&=_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ]&_ecb .Data [_dgef ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixSrcXorDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ]^_ecb .Data [_ecffb ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]^=_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ]^_ecb .Data [_dgef ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotSrcOrDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^(_gdgff .Data [_ffaf ])|_ecb .Data [_ecffb ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]|=^(_gdgff .Data [_gfff +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^(_gdgff .Data [_fdea ])|_ecb .Data [_dgef ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotSrcAndDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^(_gdgff .Data [_ffaf ])&_ecb .Data [_ecffb ],_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]&=^_gdgff .Data [_gfff +_bgag ];};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^(_gdgff .Data [_fdea ])&_ecb .Data [_dgef ],_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixSrcOrNotDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ]|^(_ecb .Data [_ecffb ]),_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=_gdgff .Data [_gfff +_bgag ]|^(_ecb .Data [_cgccd +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ]|^(_ecb .Data [_dgef ]),_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixSrcAndNotDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],_gdgff .Data [_ffaf ]&^(_ecb .Data [_ecffb ]),_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=_gdgff .Data [_gfff +_bgag ]&^(_ecb .Data [_cgccd +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],_gdgff .Data [_fdea ]&^(_ecb .Data [_dgef ]),_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotPixSrcOrDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^(_gdgff .Data [_ffaf ]|_ecb .Data [_ecffb ]),_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=^(_gdgff .Data [_gfff +_bgag ]|_ecb .Data [_cgccd +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^(_gdgff .Data [_fdea ]|_ecb .Data [_dgef ]),_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotPixSrcAndDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^(_gdgff .Data [_ffaf ]&_ecb .Data [_ecffb ]),_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=^(_gdgff .Data [_gfff +_bgag ]&_ecb .Data [_cgccd +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^(_gdgff .Data [_fdea ]&_ecb .Data [_dgef ]),_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};case PixNotPixSrcXorDst :for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_ecffb ]=_dccdg (_ecb .Data [_ecffb ],^(_gdgff .Data [_ffaf ]^_ecb .Data [_ecffb ]),_gcf );_ecffb +=_ecb .RowStride ;_ffaf +=_gdgff .RowStride ;};if _cddf {for _bedec =0;_bedec < _cfbef ;_bedec ++{for _bgag =0;_bgag < _dfgf ;_bgag ++{_ecb .Data [_cgccd +_bgag ]=^(_gdgff .Data [_gfff +_bgag ]^_ecb .Data [_cgccd +_bgag ]);};_cgccd +=_ecb .RowStride ;_gfff +=_gdgff .RowStride ;};};if _cbbc {for _bedec =0;_bedec < _cfbef ;_bedec ++{_ecb .Data [_dgef ]=_dccdg (_ecb .Data [_dgef ],^(_gdgff .Data [_fdea ]^_ecb .Data [_dgef ]),_bdgc );_dgef +=_ecb .RowStride ;_fdea +=_gdgff .RowStride ;};};default:_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_bdff );return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dgfgb (d ,s ,hSize ,vSize )};func (_bfgc *BitmapsArray )AddBitmaps (bm *Bitmaps ){_bfgc .Values =append (_bfgc .Values ,bm )};const _eadee =5000;func (_gdge *Points )AddPoint (x ,y float32 ){*_gdge =append (*_gdge ,Point {x ,y })};func (_ebaef MorphProcess )getWidthHeight ()(_eage ,_egfg int ){return _ebaef .Arguments [0],_ebaef .Arguments [1];};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _ggbf (oldByte ,newByte ,op );};func _cdae (_bbee uint ,_fege byte )byte {return _fege >>_bbee <<_bbee };func _ce (_abf ,_fg *Bitmap )(_gg error ){const _ad ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ece :=_fg .RowStride ;_cg :=_abf .RowStride ;var (_eb byte ;_bf uint16 ;_df ,_ga ,_cc ,_fb ,_fa int ;);for _cc =0;_cc < _fg .Height ;_cc ++{_df =_cc *_ece ;_ga =2*_cc *_cg ;for _fb =0;_fb < _ece ;_fb ++{_eb =_fg .Data [_df +_fb ];_bf =_dadec [_eb ];_fa =_ga +_fb *2;if _abf .RowStride !=_fg .RowStride *2&&(_fb +1)*2> _abf .RowStride {_gg =_abf .SetByte (_fa ,byte (_bf >>8));}else {_gg =_abf .setTwoBytes (_fa ,_bf );};if _gg !=nil {return _d .Wrap (_gg ,_ad ,"");};};for _fb =0;_fb < _cg ;_fb ++{_fa =_ga +_cg +_fb ;_eb =_abf .Data [_ga +_fb ];if _gg =_abf .SetByte (_fa ,_eb );_gg !=nil {return _d .Wrapf (_gg ,_ad ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ga +_fb ,_ga +_cg +_fb );};};};return nil ;};func _adbd (_dfb ,_cac int )*Bitmap {return &Bitmap {Width :_dfb ,Height :_cac ,RowStride :(_dfb +7)>>3};};func (_bfad *Bitmap )CreateTemplate ()*Bitmap {return _bfad .createTemplate ()};func (_cdcc *Bitmap )setPadBits (_gbcf int ){_efef :=8-_cdcc .Width %8;if _efef ==8{return ;};_fdd :=_cdcc .Width /8;_deg :=_geeed [_efef ];if _gbcf ==0{_deg ^=_deg ;};var _afaa int ;for _daeg :=0;_daeg < _cdcc .Height ;_daeg ++{_afaa =_daeg *_cdcc .RowStride +_fdd ;if _gbcf ==0{_cdcc .Data [_afaa ]&=_deg ;}else {_cdcc .Data [_afaa ]|=_deg ;};};};func _eccf (_gda ,_ebd ,_efcce *Bitmap )(*Bitmap ,error ){const _eefg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _ebd ==nil {return nil ,_d .Error (_eefg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _efcce ==nil {return nil ,_d .Error (_eefg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bagc error ;switch {case _gda ==_ebd :if _bagc =_gda .RasterOperation (0,0,_ebd .Width ,_ebd .Height ,PixNotSrcAndDst ,_efcce ,0,0);_bagc !=nil {return nil ,_d .Wrap (_bagc ,_eefg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gda ==_efcce :if _bagc =_gda .RasterOperation (0,0,_ebd .Width ,_ebd .Height ,PixNotSrcAndDst ,_ebd ,0,0);_bagc !=nil {return nil ,_d .Wrap (_bagc ,_eefg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_gda ,_bagc =_caeb (_gda ,_ebd );if _bagc !=nil {return nil ,_d .Wrap (_bagc ,_eefg ,"");};if _bagc =_gda .RasterOperation (0,0,_ebd .Width ,_ebd .Height ,PixNotSrcAndDst ,_efcce ,0,0);_bagc !=nil {return nil ,_d .Wrap (_bagc ,_eefg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _gda ,nil ;};func (_fcgc *Boxes )Get (i int )(*_be .Rectangle ,error ){const _fgfb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fcgc ==nil {return nil ,_d .Error (_fgfb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fcgc )-1{return nil ,_d .Errorf (_fgfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fcgc )[i ],nil ;};func _fgdf (_ebgbc *Bitmap ,_ace ...MorphProcess )(_gcdb *Bitmap ,_adaa error ){const _fdagd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _ebgbc ==nil {return nil ,_d .Error (_fdagd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_ace )==0{return nil ,_d .Error (_fdagd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _adaa =_ffdd (_ace ...);_adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};var _dgbgf ,_gege ,_ffbe int ;_gcdb =_ebgbc .Copy ();for _ ,_edbd :=range _ace {switch _edbd .Operation {case MopDilation :_dgbgf ,_gege =_edbd .getWidthHeight ();_gcdb ,_adaa =DilateBrick (nil ,_gcdb ,_dgbgf ,_gege );if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopErosion :_dgbgf ,_gege =_edbd .getWidthHeight ();_gcdb ,_adaa =_fabc (nil ,_gcdb ,_dgbgf ,_gege );if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopOpening :_dgbgf ,_gege =_edbd .getWidthHeight ();_gcdb ,_adaa =_bcae (nil ,_gcdb ,_dgbgf ,_gege );if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopClosing :_dgbgf ,_gege =_edbd .getWidthHeight ();_gcdb ,_adaa =_fcdg (nil ,_gcdb ,_dgbgf ,_gege );if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopRankBinaryReduction :_gcdb ,_adaa =_ddg (_gcdb ,_edbd .Arguments ...);if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopReplicativeBinaryExpansion :_gcdb ,_adaa =_bggb (_gcdb ,_edbd .Arguments [0]);if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};case MopAddBorder :_ffbe =_edbd .Arguments [0];_gcdb ,_adaa =_gcdb .AddBorder (_ffbe ,0);if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"");};default:return nil ,_d .Error (_fdagd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _ffbe > 0{_gcdb ,_adaa =_gcdb .RemoveBorder (_ffbe );if _adaa !=nil {return nil ,_d .Wrap (_adaa ,_fdagd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _gcdb ,nil ;};var (_ecag *Bitmap ;_ecce *Bitmap ;);func (_cgec *Bitmap )CountPixels ()int {return _cgec .countPixels ()};func _ggbg (_dadg *Bitmap ,_cgcde ,_cbce ,_gegb ,_bbde int ,_fcdf RasterOperator ,_fbee *Bitmap ,_edfb ,_efbe int )error {const _aafc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _dadg ==nil {return _d .Error (_aafc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _fcdf ==PixDst {return nil ;};switch _fcdf {case PixClr ,PixSet ,PixNotDst :_ccfa (_dadg ,_cgcde ,_cbce ,_gegb ,_bbde ,_fcdf );return nil ;};if _fbee ==nil {_ab .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _d .Error (_aafc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ccdbd :=_eacd (_dadg ,_cgcde ,_cbce ,_gegb ,_bbde ,_fcdf ,_fbee ,_edfb ,_efbe );_ccdbd !=nil {return _d .Wrap (_ccdbd ,_aafc ,"");};return nil ;};func (_adfb *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cbeb :=_adfb .GetByteIndex (x ,y );if _cbeb > len (_adfb .Data )-1{return _d .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cbeb );};_efg :=_adfb .GetBitOffset (x );_gcg :=uint (7-_efg );_cbb :=_adfb .Data [_cbeb ];var _fcd byte ;if pixel ==1{_fcd =_cbb |(pixel &0x01<<_gcg );}else {_fcd =_cbb &^(1<<_gcg );};_adfb .Data [_cbeb ]=_fcd ;return nil ;};func (_gdfe *Bitmap )countPixels ()int {var (_cde int ;_gbb uint8 ;_dcc byte ;_fec int ;);_dbd :=_gdfe .RowStride ;_bgc :=uint (_gdfe .Width &0x07);if _bgc !=0{_gbb =uint8 ((0xff<<(8-_bgc ))&0xff);_dbd --;};for _gcgb :=0;_gcgb < _gdfe .Height ;_gcgb ++{for _fec =0;_fec < _dbd ;_fec ++{_dcc =_gdfe .Data [_gcgb *_gdfe .RowStride +_fec ];_cde +=int (_eeda [_dcc ]);};if _bgc !=0{_cde +=int (_eeda [_gdfe .Data [_gcgb *_gdfe .RowStride +_fec ]&_gbb ]);};};return _cde ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cba float64 ,_bgba error ){const _fgfa ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_d .Error (_fgfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_d .Error (_fgfa ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_d .Error (_fgfa ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_fdeeb ,_feab :=bm1 .Width ,bm1 .Height ;_fff ,_bcfd :=bm2 .Width ,bm2 .Height ;_abae :=_fgbf (_fdeeb -_fff );if _abae > maxDiffW {return 0,nil ;};_dcbd :=_fgbf (_feab -_bcfd );if _dcbd > maxDiffH {return 0,nil ;};var _dgab ,_bba int ;if delX >=0{_dgab =int (delX +0.5);}else {_dgab =int (delX -0.5);};if delY >=0{_bba =int (delY +0.5);}else {_bba =int (delY -0.5);};_ccde :=_dgcc (_bba ,0);_eabg :=_gebe (_bcfd +_bba ,_feab );_bcfg :=bm1 .RowStride *_ccde ;_aefc :=bm2 .RowStride *(_ccde -_bba );_febe :=_dgcc (_dgab ,0);_eccb :=_gebe (_fff +_dgab ,_fdeeb );_dgdf :=bm2 .RowStride ;var _fffa ,_gbdag int ;if _dgab >=8{_fffa =_dgab >>3;_bcfg +=_fffa ;_febe -=_fffa <<3;_eccb -=_fffa <<3;_dgab &=7;}else if _dgab <=-8{_gbdag =-((_dgab +7)>>3);_aefc +=_gbdag ;_dgdf -=_gbdag ;_dgab +=_gbdag <<3;};if _febe >=_eccb ||_ccde >=_eabg {return 0,nil ;};_fdbe :=(_eccb +7)>>3;var (_cgbe ,_bgda ,_dffc byte ;_fffg ,_fca ,_gee int ;);switch {case _dgab ==0:for _gee =_ccde ;_gee < _eabg ;_gee ,_bcfg ,_aefc =_gee +1,_bcfg +bm1 .RowStride ,_aefc +bm2 .RowStride {for _fca =0;_fca < _fdbe ;_fca ++{_dffc =bm1 .Data [_bcfg +_fca ]&bm2 .Data [_aefc +_fca ];_fffg +=tab [_dffc ];};};case _dgab > 0:if _dgdf < _fdbe {for _gee =_ccde ;_gee < _eabg ;_gee ,_bcfg ,_aefc =_gee +1,_bcfg +bm1 .RowStride ,_aefc +bm2 .RowStride {_cgbe ,_bgda =bm1 .Data [_bcfg ],bm2 .Data [_aefc ]>>uint (_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];for _fca =1;_fca < _dgdf ;_fca ++{_cgbe ,_bgda =bm1 .Data [_bcfg +_fca ],(bm2 .Data [_aefc +_fca ]>>uint (_dgab ))|(bm2 .Data [_aefc +_fca -1]<<uint (8-_dgab ));_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};_cgbe =bm1 .Data [_bcfg +_fca ];_bgda =bm2 .Data [_aefc +_fca -1]<<uint (8-_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};}else {for _gee =_ccde ;_gee < _eabg ;_gee ,_bcfg ,_aefc =_gee +1,_bcfg +bm1 .RowStride ,_aefc +bm2 .RowStride {_cgbe ,_bgda =bm1 .Data [_bcfg ],bm2 .Data [_aefc ]>>uint (_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];for _fca =1;_fca < _fdbe ;_fca ++{_cgbe =bm1 .Data [_bcfg +_fca ];_bgda =(bm2 .Data [_aefc +_fca ]>>uint (_dgab ))|(bm2 .Data [_aefc +_fca -1]<<uint (8-_dgab ));_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};};};default:if _fdbe < _dgdf {for _gee =_ccde ;_gee < _eabg ;_gee ,_bcfg ,_aefc =_gee +1,_bcfg +bm1 .RowStride ,_aefc +bm2 .RowStride {for _fca =0;_fca < _fdbe ;_fca ++{_cgbe =bm1 .Data [_bcfg +_fca ];_bgda =bm2 .Data [_aefc +_fca ]<<uint (-_dgab );_bgda |=bm2 .Data [_aefc +_fca +1]>>uint (8+_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};};}else {for _gee =_ccde ;_gee < _eabg ;_gee ,_bcfg ,_aefc =_gee +1,_bcfg +bm1 .RowStride ,_aefc +bm2 .RowStride {for _fca =0;_fca < _fdbe -1;_fca ++{_cgbe =bm1 .Data [_bcfg +_fca ];_bgda =bm2 .Data [_aefc +_fca ]<<uint (-_dgab );_bgda |=bm2 .Data [_aefc +_fca +1]>>uint (8+_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};_cgbe =bm1 .Data [_bcfg +_fca ];_bgda =bm2 .Data [_aefc +_fca ]<<uint (-_dgab );_dffc =_cgbe &_bgda ;_fffg +=tab [_dffc ];};};};_cba =float64 (_fffg )*float64 (_fffg )/(float64 (area1 )*float64 (area2 ));return _cba ,nil ;};type shift int ;func (_gfgcd *ClassedPoints )xSortFunction ()func (_aabb int ,_deaf int )bool {return func (_dbca ,_agfa int )bool {return _gfgcd .XAtIndex (_dbca )< _gfgcd .XAtIndex (_agfa )};};type CombinationOperator int ;func TstWSymbol (t *_f .T ,scale ...int )*Bitmap {_dadc ,_egcff :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_ac .NoError (t ,_egcff );return TstGetScaledSymbol (t ,_dadc ,scale ...);};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _ffdd (_fbcgb ...MorphProcess )(_ddac error ){const _egbc ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _fbca ,_fcgcd int ;for _acgf ,_bbef :=range _fbcgb {if _ddac =_bbef .verify (_acgf ,&_fbca ,&_fcgcd );_ddac !=nil {return _d .Wrap (_ddac ,_egbc ,"");};};if _fcgcd !=0&&_fbca !=0{return _d .Error (_egbc ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func (_eeaf *ClassedPoints )Len ()int {return _eeaf .IntSlice .Size ()};func (_eecc *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_aeb bool ,_beb error ){const _fadb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_bfef ();};_gbe :=_eecc .Width >>3;_gde :=_eecc .Width &7;_eege :=byte (0xff<<uint (8-_gde ));var (_bbf ,_ggfd ,_abd ,_bgg int ;_bfag byte ;);for _bbf =0;_bbf < _eecc .Height ;_bbf ++{_abd =_eecc .RowStride *_bbf ;for _ggfd =0;_ggfd < _gbe ;_ggfd ++{_bfag ,_beb =_eecc .GetByte (_abd +_ggfd );if _beb !=nil {return false ,_d .Wrap (_beb ,_fadb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_bgg +=tab8 [_bfag ];};if _gde !=0{_bfag ,_beb =_eecc .GetByte (_abd +_ggfd );if _beb !=nil {return false ,_d .Wrap (_beb ,_fadb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_bfag &=_eege ;_bgg +=tab8 [_bfag ];};if _bgg > thresh {return true ,nil ;};};return _aeb ,nil ;};func (_cfba *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _fefc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _cfba ==nil {return nil ,_d .Error (_fefc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_d .Error (_fefc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_dbea :=len (_cfba .Values );_gaef :=&Bitmaps {Values :make ([]*Bitmap ,_dbea ),Boxes :make ([]*_be .Rectangle ,_dbea )};var (_abegg ,_feaab *Bitmap ;_dcbbe *_be .Rectangle ;_fdaae error ;);for _dcfg :=0;_dcfg < _dbea ;_dcfg ++{if _abegg ,_fdaae =_cfba .GetBitmap (_dcfg );_fdaae !=nil {return nil ,_d .Wrap (_fdaae ,_fefc ,"");};if _dcbbe ,_fdaae =_cfba .GetBox (_dcfg );_fdaae !=nil {return nil ,_d .Wrap (_fdaae ,_fefc ,"");};if _feaab ,_fdaae =s .clipRectangle (_dcbbe ,nil );_fdaae !=nil {return nil ,_d .Wrap (_fdaae ,_fefc ,"");};if _feaab ,_fdaae =_feaab .And (_abegg );_fdaae !=nil {return nil ,_d .Wrap (_fdaae ,_fefc ,"");};_gaef .Values [_dcfg ]=_feaab ;_gaef .Boxes [_dcfg ]=_dcbbe ;};return _gaef ,nil ;};func _bgef (_fefe *Bitmap ,_gccff *_b .Stack ,_acbe ,_ceca ,_bcga int )(_gcgcb *_be .Rectangle ,_bced error ){const _bfea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fefe ==nil {return nil ,_d .Error (_bfea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gccff ==nil {return nil ,_d .Error (_bfea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _bcga {case 4:if _gcgcb ,_bced =_fcgcg (_fefe ,_gccff ,_acbe ,_ceca );_bced !=nil {return nil ,_d .Wrap (_bced ,_bfea ,"");};return _gcgcb ,nil ;case 8:if _gcgcb ,_bced =_fgfc (_fefe ,_gccff ,_acbe ,_ceca );_bced !=nil {return nil ,_d .Wrap (_bced ,_bfea ,"");};return _gcgcb ,nil ;default:return nil ,_d .Errorf (_bfea ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_bcga );};};func (_cbdc *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _bfbg ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_cbdc .Values )==0{return nil ,_d .Error (_bfbg ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cdaaf :=&BitmapsArray {};_cbdc .SortByWidth ();_bfcf :=-1;_ceecad :=-1;for _gbcd :=0;_gbcd < len (_cbdc .Values );_gbcd ++{_abdc :=_cbdc .Values [_gbcd ].Width ;if _abdc > _bfcf {_bfcf =_abdc ;_ceecad ++;_cdaaf .Values =append (_cdaaf .Values ,&Bitmaps {});};_cdaaf .Values [_ceecad ].AddBitmap (_cbdc .Values [_gbcd ]);};return _cdaaf ,nil ;};func MakePixelSumTab8 ()[]int {return _bfef ()};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func _agf (_bfc *Bitmap ,_agcb ,_fdeb int )(*Bitmap ,error ){const _gc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _bfc ==nil {return nil ,_d .Error (_gc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _agcb <=0||_fdeb <=0{return nil ,_d .Error (_gc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _agcb ==_fdeb {if _agcb ==1{_gf ,_dc :=_caeb (nil ,_bfc );if _dc !=nil {return nil ,_d .Wrap (_dc ,_gc ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _gf ,nil ;};if _agcb ==2||_agcb ==4||_agcb ==8{_cgge ,_gdd :=_cf (_bfc ,_agcb );if _gdd !=nil {return nil ,_d .Wrap (_gdd ,_gc ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _cgge ,nil ;};};_gac :=_agcb *_bfc .Width ;_da :=_fdeb *_bfc .Height ;_cca :=New (_gac ,_da );_gec :=_cca .RowStride ;var (_bb ,_dae ,_eed ,_abg ,_gae int ;_gfe byte ;_fea error ;);for _dae =0;_dae < _bfc .Height ;_dae ++{_bb =_fdeb *_dae *_gec ;for _eed =0;_eed < _bfc .Width ;_eed ++{if _dea :=_bfc .GetPixel (_eed ,_dae );_dea {_gae =_agcb *_eed ;for _abg =0;_abg < _agcb ;_abg ++{_cca .setBit (_bb *8+_gae +_abg );};};};for _abg =1;_abg < _fdeb ;_abg ++{_aag :=_bb +_abg *_gec ;for _fed :=0;_fed < _gec ;_fed ++{if _gfe ,_fea =_cca .GetByte (_bb +_fed );_fea !=nil {return nil ,_d .Wrapf (_fea ,_gc ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_abg );};if _fea =_cca .SetByte (_aag +_fed ,_gfe );_fea !=nil {return nil ,_d .Wrap (_fea ,_gc ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _cca ,nil ;};func (_ccad *BitmapsArray )AddBox (box *_be .Rectangle ){_ccad .Boxes =append (_ccad .Boxes ,box )};func (_dgccc *Boxes )Add (box *_be .Rectangle )error {if _dgccc ==nil {return _d .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_dgccc =append (*_dgccc ,box );return nil ;};func (_fbg *Bitmap )GetVanillaData ()[]byte {if _fbg .Color ==Chocolate {_fbg .inverseData ();};return _fbg .Data ;};func (_aagd *Bitmaps )CountPixels ()*_b .NumSlice {_cbda :=&_b .NumSlice {};for _ ,_cebg :=range _aagd .Values {_cbda .AddInt (_cebg .CountPixels ());};return _cbda ;};func _cdfe (_ggb ,_add *Bitmap ,_ecee int ,_fdec []byte ,_ccf int )(_ebg error ){const _fgb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_cab ,_ba ,_gfa ,_geg ,_edg ,_aaa ,_bdb ,_bfb int ;_aeg ,_bad ,_ddc ,_baa uint32 ;_cgc ,_cfb byte ;_bac uint16 ;);_agd :=make ([]byte ,4);_ccd :=make ([]byte ,4);for _gfa =0;_gfa < _ggb .Height -1;_gfa ,_geg =_gfa +2,_geg +1{_cab =_gfa *_ggb .RowStride ;_ba =_geg *_add .RowStride ;for _edg ,_aaa =0,0;_edg < _ccf ;_edg ,_aaa =_edg +4,_aaa +1{for _bdb =0;_bdb < 4;_bdb ++{_bfb =_cab +_edg +_bdb ;if _bfb <=len (_ggb .Data )-1&&_bfb < _cab +_ggb .RowStride {_agd [_bdb ]=_ggb .Data [_bfb ];}else {_agd [_bdb ]=0x00;};_bfb =_cab +_ggb .RowStride +_edg +_bdb ;if _bfb <=len (_ggb .Data )-1&&_bfb < _cab +(2*_ggb .RowStride ){_ccd [_bdb ]=_ggb .Data [_bfb ];}else {_ccd [_bdb ]=0x00;};};_aeg =_ec .BigEndian .Uint32 (_agd );_bad =_ec .BigEndian .Uint32 (_ccd );_ddc =_aeg &_bad ;_ddc |=_ddc <<1;_baa =_aeg |_bad ;_baa &=_baa <<1;_bad =_ddc |_baa ;_bad &=0xaaaaaaaa;_aeg =_bad |(_bad <<7);_cgc =byte (_aeg >>24);_cfb =byte ((_aeg >>8)&0xff);_bfb =_ba +_aaa ;if _bfb +1==len (_add .Data )-1||_bfb +1>=_ba +_add .RowStride {if _ebg =_add .SetByte (_bfb ,_fdec [_cgc ]);_ebg !=nil {return _d .Wrapf (_ebg ,_fgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bfb );};}else {_bac =(uint16 (_fdec [_cgc ])<<8)|uint16 (_fdec [_cfb ]);if _ebg =_add .setTwoBytes (_bfb ,_bac );_ebg !=nil {return _d .Wrapf (_ebg ,_fgb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bfb );};_aaa ++;};};};return nil ;};func (_cecf *Bitmaps )SortByWidth (){_adbg :=(*byWidth )(_cecf );_g .Sort (_adbg )};func (_edcca *Bitmaps )GetBox (i int )(*_be .Rectangle ,error ){const _adfaa ="\u0047\u0065\u0074\u0042\u006f\u0078";if _edcca ==nil {return nil ,_d .Error (_adfaa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_edcca .Boxes )-1{return nil ,_d .Errorf (_adfaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _edcca .Boxes [i ],nil ;};func (_agce *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _aeba ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_agce .IntSlice .Size (){return 0,_d .Errorf (_aeba ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_agce .YAtIndex (i )),nil ;};func _caeb (_bgcg ,_fede *Bitmap )(*Bitmap ,error ){if _fede ==nil {return nil ,_d .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fede ==_bgcg {return _bgcg ,nil ;};if _bgcg ==nil {_bgcg =_fede .createTemplate ();copy (_bgcg .Data ,_fede .Data );return _bgcg ,nil ;};_cbbg :=_bgcg .resizeImageData (_fede );if _cbbg !=nil {return nil ,_d .Wrap (_cbbg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_bgcg .Text =_fede .Text ;copy (_bgcg .Data ,_fede .Data );return _bgcg ,nil ;};func (_bccc *Bitmap )setBit (_gbcc int ){_bccc .Data [(_gbcc >>3)]|=0x80>>uint (_gbcc &7)};func (_beag *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _beag .removeBorderGeneral (left ,right ,top ,bot );};func _aagg (_dffa ,_ada *Bitmap ,_cffa CombinationOperator )*Bitmap {_aaee :=New (_dffa .Width ,_dffa .Height );for _cdfeb :=0;_cdfeb < len (_aaee .Data );_cdfeb ++{_aaee .Data [_cdfeb ]=_ggbf (_dffa .Data [_cdfeb ],_ada .Data [_cdfeb ],_cffa );};return _aaee ;};func (_bcea *Bitmap )Equals (s *Bitmap )bool {if len (_bcea .Data )!=len (s .Data )||_bcea .Width !=s .Width ||_bcea .Height !=s .Height {return false ;};for _bbg :=0;_bbg < _bcea .Height ;_bbg ++{_bcbda :=_bbg *_bcea .RowStride ;for _bdbd :=0;_bdbd < _bcea .RowStride ;_bdbd ++{if _bcea .Data [_bcbda +_bdbd ]!=s .Data [_bcbda +_bdbd ]{return false ;};};};return true ;};func (_cdca *Bitmap )setTwoBytes (_agaa int ,_gcga uint16 )error {if _agaa +1> len (_cdca .Data )-1{return _d .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_agaa );};_cdca .Data [_agaa ]=byte ((_gcga &0xff00)>>8);_cdca .Data [_agaa +1]=byte (_gcga &0xff);return nil ;};func TstImageBitmap ()*Bitmap {return _ecce .Copy ()};func _afg (_dgdc ,_ebce *Bitmap ,_bcbf ,_aebc ,_fge ,_ebbdd ,_gag ,_bffa ,_cfcc ,_dcd int ,_fged CombinationOperator )error {var _degf int ;_ccce :=func (){_degf ++;_fge +=_ebce .RowStride ;_ebbdd +=_dgdc .RowStride ;_gag +=_dgdc .RowStride };for _degf =_bcbf ;_degf < _aebc ;_ccce (){var _eac uint16 ;_fagg :=_fge ;for _aeff :=_ebbdd ;_aeff <=_gag ;_aeff ++{_egb ,_adg :=_ebce .GetByte (_fagg );if _adg !=nil {return _adg ;};_abdg ,_adg :=_dgdc .GetByte (_aeff );if _adg !=nil {return _adg ;};_eac =(_eac |uint16 (_abdg ))<<uint (_dcd );_abdg =byte (_eac >>8);if _aeff ==_gag {_abdg =_cdae (uint (_bffa ),_abdg );};if _adg =_ebce .SetByte (_fagg ,_ggbf (_egb ,_abdg ,_fged ));_adg !=nil {return _adg ;};_fagg ++;_eac <<=uint (_cfcc );};};return nil ;};type BoundaryCondition int ;func (_cfeg Points )XSorter ()func (_deec ,_fecf int )bool {return func (_dfgcd ,_agffg int )bool {return _cfeg [_dfgcd ].X < _cfeg [_agffg ].X };};func _gfg (_ae ,_bfae *Bitmap ,_cdf int ,_def []byte ,_adb int )(_cag error ){const _aea ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_cfc ,_ddf ,_abb ,_bef ,_adbc ,_cbd ,_ffe ,_caa int ;_ccg ,_abfb uint32 ;_cge ,_ecf byte ;_fbc uint16 ;);_aga :=make ([]byte ,4);_cgf :=make ([]byte ,4);for _abb =0;_abb < _ae .Height -1;_abb ,_bef =_abb +2,_bef +1{_cfc =_abb *_ae .RowStride ;_ddf =_bef *_bfae .RowStride ;for _adbc ,_cbd =0,0;_adbc < _adb ;_adbc ,_cbd =_adbc +4,_cbd +1{for _ffe =0;_ffe < 4;_ffe ++{_caa =_cfc +_adbc +_ffe ;if _caa <=len (_ae .Data )-1&&_caa < _cfc +_ae .RowStride {_aga [_ffe ]=_ae .Data [_caa ];}else {_aga [_ffe ]=0x00;};_caa =_cfc +_ae .RowStride +_adbc +_ffe ;if _caa <=len (_ae .Data )-1&&_caa < _cfc +(2*_ae .RowStride ){_cgf [_ffe ]=_ae .Data [_caa ];}else {_cgf [_ffe ]=0x00;};};_ccg =_ec .BigEndian .Uint32 (_aga );_abfb =_ec .BigEndian .Uint32 (_cgf );_abfb |=_ccg ;_abfb |=_abfb <<1;_abfb &=0xaaaaaaaa;_ccg =_abfb |(_abfb <<7);_cge =byte (_ccg >>24);_ecf =byte ((_ccg >>8)&0xff);_caa =_ddf +_cbd ;if _caa +1==len (_bfae .Data )-1||_caa +1>=_ddf +_bfae .RowStride {_bfae .Data [_caa ]=_def [_cge ];}else {_fbc =(uint16 (_def [_cge ])<<8)|uint16 (_def [_ecf ]);if _cag =_bfae .setTwoBytes (_caa ,_fbc );_cag !=nil {return _d .Wrapf (_cag ,_aea ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_caa );};_cbd ++;};};};return nil ;};func (_gfc *Bitmap )setEightPartlyBytes (_ffbf ,_baacb int ,_dfeg uint64 )(_gdg error ){var (_dcfd byte ;_cad int ;);const _gbdd ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _daegb :=1;_daegb <=_baacb ;_daegb ++{_cad =64-_daegb *8;_dcfd =byte (_dfeg >>uint (_cad )&0xff);_ab .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dcfd ,_ffbf ,_ffbf +_daegb -1,_baacb ,_cad );if _gdg =_gfc .SetByte (_ffbf +_daegb -1,_dcfd );_gdg !=nil {return _d .Wrap (_gdg ,_gbdd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_becc :=_gfc .RowStride *8-_gfc .Width ;if _becc ==0{return nil ;};_cad -=8;_dcfd =byte (_dfeg >>uint (_cad )&0xff)<<uint (_becc );if _gdg =_gfc .SetByte (_ffbf +_baacb ,_dcfd );_gdg !=nil {return _d .Wrap (_gdg ,_gbdd ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_fgge *Bitmap )equivalent (_fce *Bitmap )bool {if _fgge ==_fce {return true ;};if !_fgge .SizesEqual (_fce ){return false ;};_fagd :=_aagg (_fgge ,_fce ,CmbOpXor );_feg :=_fgge .countPixels ();_bddd :=int (0.25*float32 (_feg ));if _fagd .thresholdPixelSum (_bddd ){return false ;};var (_fgde [9][9]int ;_aged [18][9]int ;_dab [9][18]int ;_dceg int ;_cgfd int ;);_ccb :=9;_cea :=_fgge .Height /_ccb ;_ecff :=_fgge .Width /_ccb ;_ecgd ,_abgf :=_cea /2,_ecff /2;if _cea < _ecff {_ecgd =_ecff /2;_abgf =_cea /2;};_egc :=float64 (_ecgd )*float64 (_abgf )*_fd .Pi ;_ggbd :=int (float64 (_cea *_ecff /2)*0.9);_dgg :=int (float64 (_ecff *_cea /2)*0.9);for _fcgb :=0;_fcgb < _ccb ;_fcgb ++{_adde :=_ecff *_fcgb +_dceg ;var _gad int ;if _fcgb ==_ccb -1{_dceg =0;_gad =_fgge .Width ;}else {_gad =_adde +_ecff ;if ((_fgge .Width -_dceg )%_ccb )> 0{_dceg ++;_gad ++;};};for _bebd :=0;_bebd < _ccb ;_bebd ++{_fba :=_cea *_bebd +_cgfd ;var _gbda int ;if _bebd ==_ccb -1{_cgfd =0;_gbda =_fgge .Height ;}else {_gbda =_fba +_cea ;if (_fgge .Height -_cgfd )%_ccb > 0{_cgfd ++;_gbda ++;};};var _bded ,_faeg ,_fcdc ,_caga int ;_fdg :=(_adde +_gad )/2;_dgbg :=(_fba +_gbda )/2;for _cbcb :=_adde ;_cbcb < _gad ;_cbcb ++{for _adc :=_fba ;_adc < _gbda ;_adc ++{if _fagd .GetPixel (_cbcb ,_adc ){if _cbcb < _fdg {_bded ++;}else {_faeg ++;};if _adc < _dgbg {_caga ++;}else {_fcdc ++;};};};};_fgde [_fcgb ][_bebd ]=_bded +_faeg ;_aged [_fcgb *2][_bebd ]=_bded ;_aged [_fcgb *2+1][_bebd ]=_faeg ;_dab [_fcgb ][_bebd *2]=_caga ;_dab [_fcgb ][_bebd *2+1]=_fcdc ;};};for _dbf :=0;_dbf < _ccb *2-1;_dbf ++{for _eade :=0;_eade < (_ccb -1);_eade ++{var _abfe int ;for _adfa :=0;_adfa < 2;_adfa ++{for _cbed :=0;_cbed < 2;_cbed ++{_abfe +=_aged [_dbf +_adfa ][_eade +_cbed ];};};if _abfe > _dgg {return false ;};};};for _daa :=0;_daa < (_ccb -1);_daa ++{for _dbe :=0;_dbe < ((_ccb *2)-1);_dbe ++{var _bdde int ;for _fdab :=0;_fdab < 2;_fdab ++{for _fcc :=0;_fcc < 2;_fcc ++{_bdde +=_dab [_daa +_fdab ][_dbe +_fcc ];};};if _bdde > _ggbd {return false ;};};};for _adbdd :=0;_adbdd < (_ccb -2);_adbdd ++{for _bga :=0;_bga < (_ccb -2);_bga ++{var _efbf ,_ebga int ;for _beae :=0;_beae < 3;_beae ++{for _ddcd :=0;_ddcd < 3;_ddcd ++{if _beae ==_ddcd {_efbf +=_fgde [_adbdd +_beae ][_bga +_ddcd ];};if (2-_beae )==_ddcd {_ebga +=_fgde [_adbdd +_beae ][_bga +_ddcd ];};};};if _efbf > _dgg ||_ebga > _dgg {return false ;};};};for _fggd :=0;_fggd < (_ccb -1);_fggd ++{for _gabc :=0;_gabc < (_ccb -1);_gabc ++{var _dggc int ;for _bgd :=0;_bgd < 2;_bgd ++{for _gdef :=0;_gdef < 2;_gdef ++{_dggc +=_fgde [_fggd +_bgd ][_gabc +_gdef ];};};if float64 (_dggc )> _egc {return false ;};};};return true ;};func (_cfgb *ClassedPoints )XAtIndex (i int )float32 {return (*_cfgb .Points )[_cfgb .IntSlice [i ]].X };func _bed (_gge ,_cagb *Bitmap ,_cdea ,_dbcec ,_bcf ,_dag ,_edfc ,_acab ,_aedc ,_gaca int ,_cgecf CombinationOperator ,_cacf int )error {var _ddb int ;_ggac :=func (){_ddb ++;_bcf +=_cagb .RowStride ;_dag +=_gge .RowStride ;_edfc +=_gge .RowStride };for _ddb =_cdea ;_ddb < _dbcec ;_ggac (){var _cbedb uint16 ;_fdgb :=_bcf ;for _cabc :=_dag ;_cabc <=_edfc ;_cabc ++{_ggcf ,_ebda :=_cagb .GetByte (_fdgb );if _ebda !=nil {return _ebda ;};_dcfb ,_ebda :=_gge .GetByte (_cabc );if _ebda !=nil {return _ebda ;};_cbedb =(_cbedb |(uint16 (_dcfb )&0xff))<<uint (_gaca );_dcfb =byte (_cbedb >>8);if _ebda =_cagb .SetByte (_fdgb ,_ggbf (_ggcf ,_dcfb ,_cgecf ));_ebda !=nil {return _ebda ;};_fdgb ++;_cbedb <<=uint (_aedc );if _cabc ==_edfc {_dcfb =byte (_cbedb >>(8-uint8 (_gaca )));if _cacf !=0{_dcfb =_cdae (uint (8+_acab ),_dcfb );};_ggcf ,_ebda =_cagb .GetByte (_fdgb );if _ebda !=nil {return _ebda ;};if _ebda =_cagb .SetByte (_fdgb ,_ggbf (_ggcf ,_dcfb ,_cgecf ));_ebda !=nil {return _ebda ;};};};};return nil ;};func _bcae (_cfab ,_dcgee *Bitmap ,_fdbec ,_gcac int )(*Bitmap ,error ){const _dabd ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _dcgee ==nil {return nil ,_d .Error (_dabd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fdbec < 1&&_gcac < 1{return nil ,_d .Error (_dabd ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _fdbec ==1&&_gcac ==1{return _dcgee .Copy (),nil ;};if _fdbec ==1||_gcac ==1{var _babe error ;_dbbf :=SelCreateBrick (_gcac ,_fdbec ,_gcac /2,_fdbec /2,SelHit );_cfab ,_babe =_gef (_cfab ,_dcgee ,_dbbf );if _babe !=nil {return nil ,_d .Wrap (_babe ,_dabd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _cfab ,nil ;};_aadcg :=SelCreateBrick (1,_fdbec ,0,_fdbec /2,SelHit );_aadcc :=SelCreateBrick (_gcac ,1,_gcac /2,0,SelHit );_ceee ,_fbfb :=_afcca (nil ,_dcgee ,_aadcg );if _fbfb !=nil {return nil ,_d .Wrap (_fbfb ,_dabd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_cfab ,_fbfb =_afcca (_cfab ,_ceee ,_aadcc );if _fbfb !=nil {return nil ,_d .Wrap (_fbfb ,_dabd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_fbfb =_ebcf (_ceee ,_cfab ,_aadcg );if _fbfb !=nil {return nil ,_d .Wrap (_fbfb ,_dabd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_fbfb =_ebcf (_cfab ,_ceee ,_aadcc );if _fbfb !=nil {return nil ,_d .Wrap (_fbfb ,_dabd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cfab ,nil ;};func (_cdfd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cdfd .Copy (),nil ;};_fad ,_dce :=_cdfd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _dce !=nil {return nil ,_d .Wrap (_dce ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fad ,nil ;};func TstTSymbol (t *_f .T ,scale ...int )*Bitmap {_bdba ,_ecdg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_ac .NoError (t ,_ecdg );return TstGetScaledSymbol (t ,_bdba ,scale ...);};var _ffab =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func ClipBoxToRectangle (box *_be .Rectangle ,wi ,hi int )(_cacb *_be .Rectangle ,_addee error ){const _ccagb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_d .Error (_ccagb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_d .Error (_ccagb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_cacb =&(*box );if _cacb .Min .X < 0{_cacb .Max .X +=_cacb .Min .X ;_cacb .Min .X =0;};if _cacb .Min .Y < 0{_cacb .Max .Y +=_cacb .Min .Y ;_cacb .Min .Y =0;};if _cacb .Max .X > wi {_cacb .Max .X =wi ;};if _cacb .Max .Y > hi {_cacb .Max .Y =hi ;};return _cacb ,nil ;};func (_gbbc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_eace *Boxes ,_caf error ){const _gfcc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _gbbc ==nil {return nil ,_d .Error (_gfcc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gbbc )==0{return _gbbc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_gfcc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_d .Errorf (_gfcc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_abcg :=_gbbc .makeSizeIndicator (width ,height ,tp ,relation );_dfcb ,_caf :=_gbbc .selectWithIndicator (_abcg );if _caf !=nil {return nil ,_d .Wrap (_caf ,_gfcc ,"");};return _dfcb ,nil ;};func (_bcba *byWidth )Less (i ,j int )bool {return _bcba .Values [i ].Width < _bcba .Values [j ].Width };func _ecea (_fgd ,_fae *Bitmap ,_ddd int ,_cda []byte ,_adf int )(_dgd error ){const _ffa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_cccg ,_cce ,_ggf ,_gcc ,_gdf ,_dgb ,_eae ,_bea int ;_ccff ,_eaa ,_fbf ,_cgca uint32 ;_fab ,_begf byte ;_badc uint16 ;);_cef :=make ([]byte ,4);_acdf :=make ([]byte ,4);for _ggf =0;_ggf < _fgd .Height -1;_ggf ,_gcc =_ggf +2,_gcc +1{_cccg =_ggf *_fgd .RowStride ;_cce =_gcc *_fae .RowStride ;for _gdf ,_dgb =0,0;_gdf < _adf ;_gdf ,_dgb =_gdf +4,_dgb +1{for _eae =0;_eae < 4;_eae ++{_bea =_cccg +_gdf +_eae ;if _bea <=len (_fgd .Data )-1&&_bea < _cccg +_fgd .RowStride {_cef [_eae ]=_fgd .Data [_bea ];}else {_cef [_eae ]=0x00;};_bea =_cccg +_fgd .RowStride +_gdf +_eae ;if _bea <=len (_fgd .Data )-1&&_bea < _cccg +(2*_fgd .RowStride ){_acdf [_eae ]=_fgd .Data [_bea ];}else {_acdf [_eae ]=0x00;};};_ccff =_ec .BigEndian .Uint32 (_cef );_eaa =_ec .BigEndian .Uint32 (_acdf );_fbf =_ccff &_eaa ;_fbf |=_fbf <<1;_cgca =_ccff |_eaa ;_cgca &=_cgca <<1;_eaa =_fbf &_cgca ;_eaa &=0xaaaaaaaa;_ccff =_eaa |(_eaa <<7);_fab =byte (_ccff >>24);_begf =byte ((_ccff >>8)&0xff);_bea =_cce +_dgb ;if _bea +1==len (_fae .Data )-1||_bea +1>=_cce +_fae .RowStride {if _dgd =_fae .SetByte (_bea ,_cda [_fab ]);_dgd !=nil {return _d .Wrapf (_dgd ,_ffa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bea );};}else {_badc =(uint16 (_cda [_fab ])<<8)|uint16 (_cda [_begf ]);if _dgd =_fae .setTwoBytes (_bea ,_badc );_dgd !=nil {return _d .Wrapf (_dgd ,_ffa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bea );};_dgb ++;};};};return nil ;};func TstFrameBitmapData ()[]byte {return _ecag .Data };func _ggbf (_eag ,_gffca byte ,_gdgf CombinationOperator )byte {switch _gdgf {case CmbOpOr :return _gffca |_eag ;case CmbOpAnd :return _gffca &_eag ;case CmbOpXor :return _gffca ^_eag ;case CmbOpXNor :return ^(_gffca ^_eag );case CmbOpNot :return ^(_gffca );default:return _gffca ;};};func _cf (_gbd *Bitmap ,_dba int )(*Bitmap ,error ){const _acd ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _gbd ==nil {return nil ,_d .Error (_acd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dba ==1{return _caeb (nil ,_gbd );};if _dba !=2&&_dba !=4&&_dba !=8{return nil ,_d .Error (_acd ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_dfd :=_dba *_gbd .Width ;_eceg :=_dba *_gbd .Height ;_fga :=New (_dfd ,_eceg );var _aad error ;switch _dba {case 2:_aad =_ce (_fga ,_gbd );case 4:_aad =_dd (_fga ,_gbd );case 8:_aad =_gga (_fga ,_gbd );};if _aad !=nil {return nil ,_d .Wrap (_aad ,_acd ,"");};return _fga ,nil ;};func (_ffgf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ffgf .Width ,Height :_ffgf .Height ,RowStride :_ffgf .RowStride ,Color :_ffgf .Color ,Text :_ffgf .Text ,BitmapNumber :_ffgf .BitmapNumber ,Special :_ffgf .Special ,Data :make ([]byte ,len (_ffgf .Data ))};};func _fcgcg (_ebgbeg *Bitmap ,_aaaa *_b .Stack ,_gfcb ,_edcce int )(_bgaa *_be .Rectangle ,_dbgaa error ){const _agbb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ebgbeg ==nil {return nil ,_d .Error (_agbb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aaaa ==nil {return nil ,_d .Error (_agbb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_addbf ,_bgbdb :=_ebgbeg .Width ,_ebgbeg .Height ;_bbec :=_addbf -1;_fbfc :=_bgbdb -1;if _gfcb < 0||_gfcb > _bbec ||_edcce < 0||_edcce > _fbfc ||!_ebgbeg .GetPixel (_gfcb ,_edcce ){return nil ,nil ;};var _bfbc *_be .Rectangle ;_bfbc ,_dbgaa =Rect (100000,100000,0,0);if _dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"");};if _dbgaa =_gggf (_aaaa ,_gfcb ,_gfcb ,_edcce ,1,_fbfc ,_bfbc );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dbgaa =_gggf (_aaaa ,_gfcb ,_gfcb ,_edcce +1,-1,_fbfc ,_bfbc );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bfbc .Min .X ,_bfbc .Max .X =_gfcb ,_gfcb ;_bfbc .Min .Y ,_bfbc .Max .Y =_edcce ,_edcce ;var (_aeef *fillSegment ;_ebed int ;);for _aaaa .Len ()> 0{if _aeef ,_dbgaa =_gbdb (_aaaa );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"");};_edcce =_aeef ._ggge ;for _gfcb =_aeef ._fgaee ;_gfcb >=0&&_ebgbeg .GetPixel (_gfcb ,_edcce );_gfcb --{if _dbgaa =_ebgbeg .SetPixel (_gfcb ,_edcce ,0);_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"");};};if _gfcb >=_aeef ._fgaee {for _gfcb ++;_gfcb <=_aeef ._ccdd &&_gfcb <=_bbec &&!_ebgbeg .GetPixel (_gfcb ,_edcce );_gfcb ++{};_ebed =_gfcb ;if !(_gfcb <=_aeef ._ccdd &&_gfcb <=_bbec ){continue ;};}else {_ebed =_gfcb +1;if _ebed < _aeef ._fgaee -1{if _dbgaa =_gggf (_aaaa ,_ebed ,_aeef ._fgaee -1,_aeef ._ggge ,-_aeef ._eceeb ,_fbfc ,_bfbc );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gfcb =_aeef ._fgaee +1;};for {for ;_gfcb <=_bbec &&_ebgbeg .GetPixel (_gfcb ,_edcce );_gfcb ++{if _dbgaa =_ebgbeg .SetPixel (_gfcb ,_edcce ,0);_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dbgaa =_gggf (_aaaa ,_ebed ,_gfcb -1,_aeef ._ggge ,_aeef ._eceeb ,_fbfc ,_bfbc );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gfcb > _aeef ._ccdd +1{if _dbgaa =_gggf (_aaaa ,_aeef ._ccdd +1,_gfcb -1,_aeef ._ggge ,-_aeef ._eceeb ,_fbfc ,_bfbc );_dbgaa !=nil {return nil ,_d .Wrap (_dbgaa ,_agbb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gfcb ++;_gfcb <=_aeef ._ccdd &&_gfcb <=_bbec &&!_ebgbeg .GetPixel (_gfcb ,_edcce );_gfcb ++{};_ebed =_gfcb ;if !(_gfcb <=_aeef ._ccdd &&_gfcb <=_bbec ){break ;};};};_bfbc .Max .X ++;_bfbc .Max .Y ++;return _bfbc ,nil ;};func TstCSymbol (t *_f .T )*Bitmap {t .Helper ();_bbea :=New (6,6);_ac .NoError (t ,_bbea .SetPixel (1,0,1));_ac .NoError (t ,_bbea .SetPixel (2,0,1));_ac .NoError (t ,_bbea .SetPixel (3,0,1));_ac .NoError (t ,_bbea .SetPixel (4,0,1));_ac .NoError (t ,_bbea .SetPixel (0,1,1));_ac .NoError (t ,_bbea .SetPixel (5,1,1));_ac .NoError (t ,_bbea .SetPixel (0,2,1));_ac .NoError (t ,_bbea .SetPixel (0,3,1));_ac .NoError (t ,_bbea .SetPixel (0,4,1));_ac .NoError (t ,_bbea .SetPixel (5,4,1));_ac .NoError (t ,_bbea .SetPixel (1,5,1));_ac .NoError (t ,_bbea .SetPixel (2,5,1));_ac .NoError (t ,_bbea .SetPixel (3,5,1));_ac .NoError (t ,_bbea .SetPixel (4,5,1));return _bbea ;};func _gabb (_ffdf ,_agaga *Bitmap ,_bgcc *Selection )(*Bitmap ,error ){const _ddbg ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _egdd error ;if _ffdf ,_egdd =_eeea (_ffdf ,_agaga ,_bgcc );_egdd !=nil {return nil ,_egdd ;};_aedb ,_egdd :=_ebcf (nil ,_agaga ,_bgcc );if _egdd !=nil {return nil ,_d .Wrap (_egdd ,_ddbg ,"");};if _ ,_egdd =_afcca (_ffdf ,_aedb ,_bgcc );_egdd !=nil {return nil ,_d .Wrap (_egdd ,_ddbg ,"");};return _ffdf ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _afa ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_agb :=_adbd (width ,height );_agb .Data =data ;if len (data )< height *_agb .RowStride {return nil ,_d .Errorf (_afa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_agb .RowStride );};return _agb ,nil ;};func TstVSymbol (t *_f .T ,scale ...int )*Bitmap {_ffgb ,_gafb :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_ac .NoError (t ,_gafb );return TstGetScaledSymbol (t ,_ffgb ,scale ...);};func (_gdff *Bitmap )And (s *Bitmap )(_ecg *Bitmap ,_cfbg error ){const _afae ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _gdff ==nil {return nil ,_d .Error (_afae ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_d .Error (_afae ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_gdff .SizesEqual (s ){_ab .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_afae );};if _ecg ,_cfbg =_caeb (_ecg ,_gdff );_cfbg !=nil {return nil ,_d .Wrap (_cfbg ,_afae ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cfbg =_ecg .RasterOperation (0,0,_ecg .Width ,_ecg .Height ,PixSrcAndDst ,s ,0,0);_cfbg !=nil {return nil ,_d .Wrap (_cfbg ,_afae ,"");};return _ecg ,nil ;};var _afced =[5]int {1,2,3,0,4};func _cggb (_bfeg *Bitmap ,_bbbc ,_bceaa int ,_dcef ,_feeg int ,_ecegf RasterOperator ){var (_efcd int ;_acgda byte ;_fdgf ,_dbcg int ;_ebec int ;);_cedc :=_dcef >>3;_agecb :=_dcef &7;if _agecb > 0{_acgda =_cgcg [_agecb ];};_efcd =_bfeg .RowStride *_bceaa +(_bbbc >>3);switch _ecegf {case PixClr :for _fdgf =0;_fdgf < _feeg ;_fdgf ++{_ebec =_efcd +_fdgf *_bfeg .RowStride ;for _dbcg =0;_dbcg < _cedc ;_dbcg ++{_bfeg .Data [_ebec ]=0x0;_ebec ++;};if _agecb > 0{_bfeg .Data [_ebec ]=_dccdg (_bfeg .Data [_ebec ],0x0,_acgda );};};case PixSet :for _fdgf =0;_fdgf < _feeg ;_fdgf ++{_ebec =_efcd +_fdgf *_bfeg .RowStride ;for _dbcg =0;_dbcg < _cedc ;_dbcg ++{_bfeg .Data [_ebec ]=0xff;_ebec ++;};if _agecb > 0{_bfeg .Data [_ebec ]=_dccdg (_bfeg .Data [_ebec ],0xff,_acgda );};};case PixNotDst :for _fdgf =0;_fdgf < _feeg ;_fdgf ++{_ebec =_efcd +_fdgf *_bfeg .RowStride ;for _dbcg =0;_dbcg < _cedc ;_dbcg ++{_bfeg .Data [_ebec ]=^_bfeg .Data [_ebec ];_ebec ++;};if _agecb > 0{_bfeg .Data [_ebec ]=_dccdg (_bfeg .Data [_ebec ],^_bfeg .Data [_ebec ],_acgda );};};};};func (_ebad *Bitmap )nextOnPixel (_bgac ,_daac int )(_efgf _be .Point ,_ffgc bool ,_addb error ){const _ccdb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_efgf ,_ffgc ,_addb =_ebad .nextOnPixelLow (_ebad .Width ,_ebad .Height ,_ebad .RowStride ,_bgac ,_daac );if _addb !=nil {return _efgf ,false ,_d .Wrap (_addb ,_ccdb ,"");};return _efgf ,_ffgc ,nil ;};func TstDSymbol (t *_f .T ,scale ...int )*Bitmap {_ecbf ,_ebeb :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_ac .NoError (t ,_ebeb );return TstGetScaledSymbol (t ,_ecbf ,scale ...);};func init (){const _aaec ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_ecag =New (50,40);var _gffb error ;_ecag ,_gffb =_ecag .AddBorder (2,1);if _gffb !=nil {panic (_d .Wrap (_gffb ,_aaec ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_ecce ,_gffb =NewWithData (50,22,_ffab );if _gffb !=nil {panic (_d .Wrap (_gffb ,_aaec ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func _becd (_ecac ,_cdagc int ,_bdfb string )*Selection {_fabcf :=&Selection {Height :_ecac ,Width :_cdagc ,Name :_bdfb };_fabcf .Data =make ([][]SelectionValue ,_ecac );for _acaf :=0;_acaf < _ecac ;_acaf ++{_fabcf .Data [_acaf ]=make ([]SelectionValue ,_cdagc );};return _fabcf ;};func (_agcd *ClassedPoints )SortByY (){_agcd ._fbd =_agcd .ySortFunction ();_g .Sort (_agcd )};func (_fcf *Bitmap )clipRectangle (_afaec ,_addf *_be .Rectangle )(_ggd *Bitmap ,_ebgb error ){const _fdag ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _afaec ==nil {return nil ,_d .Error (_fdag ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_acg ,_acc :=_fcf .Width ,_fcf .Height ;_cdb ,_ebgb :=ClipBoxToRectangle (_afaec ,_acg ,_acc );if _ebgb !=nil {_ab .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_ebgb );return nil ,nil ;};_bbb ,_cdcd :=_cdb .Min .X ,_cdb .Min .Y ;_afd ,_faf :=_cdb .Max .X -_cdb .Min .X ,_cdb .Max .Y -_cdb .Min .Y ;_ggd =New (_afd ,_faf );_ggd .Text =_fcf .Text ;if _ebgb =_ggd .RasterOperation (0,0,_afd ,_faf ,PixSrc ,_fcf ,_bbb ,_cdcd );_ebgb !=nil {return nil ,_d .Wrap (_ebgb ,_fdag ,"");};if _addf !=nil {*_addf =*_cdb ;};return _ggd ,nil ;};func (_bedd *Bitmaps )selectByIndexes (_ccafc []int )(*Bitmaps ,error ){_febdc :=&Bitmaps {};for _ ,_aggb :=range _ccafc {_fgce ,_dbcf :=_bedd .GetBitmap (_aggb );if _dbcf !=nil {return nil ,_d .Wrap (_dbcf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_febdc .AddBitmap (_fgce );};return _febdc ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_face *Bitmaps )Size ()int {return len (_face .Values )};func (_bfbe *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_fgdg *Bitmaps ,_fgddc *Boxes ,_ddab error ){const _eddde ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _bfbe ==nil {return nil ,nil ,_d .Error (_eddde ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_d .Error (_eddde ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _bfbe .Zero (){_fgddc =&Boxes {};_fgdg =&Bitmaps {};return _fgdg ,_fgddc ,nil ;};switch components {case ComponentConn :_fgdg =&Bitmaps {};if _fgddc ,_ddab =_bfbe .ConnComponents (_fgdg ,8);_ddab !=nil {return nil ,nil ,_d .Wrap (_ddab ,_eddde ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_daeb ,_ffeb :=MorphSequence (_bfbe ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _ffeb !=nil {return nil ,nil ,_d .Wrap (_ffeb ,_eddde ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ab .Log .IsLogLevel (_ab .LogLevelTrace ){_ab .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_daeb .String ());};_agac :=&Bitmaps {};_fgddc ,_ffeb =_daeb .ConnComponents (_agac ,8);if _ffeb !=nil {return nil ,nil ,_d .Wrap (_ffeb ,_eddde ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _ab .Log .IsLogLevel (_ab .LogLevelTrace ){_ab .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_agac .String ());};if _fgdg ,_ffeb =_agac .ClipToBitmap (_bfbe );_ffeb !=nil {return nil ,nil ,_d .Wrap (_ffeb ,_eddde ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_ebgaa :=1;var _cccf *Bitmap ;switch {case _bfbe .XResolution <=200:_cccf =_bfbe ;case _bfbe .XResolution <=400:_ebgaa =2;_cccf ,_ddab =_ddg (_bfbe ,1,0,0,0);if _ddab !=nil {return nil ,nil ,_d .Wrap (_ddab ,_eddde ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_ebgaa =4;_cccf ,_ddab =_ddg (_bfbe ,1,1,0,0);if _ddab !=nil {return nil ,nil ,_d .Wrap (_ddab ,_eddde ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_bab ,_ ,_aage :=_feb (_cccf );if _aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eddde ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_baee ,_aage :=_bggb (_bab ,_ebgaa );if _aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eddde ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_agbg :=&Bitmaps {};if _fgddc ,_aage =_baee .ConnComponents (_agbg ,4);_aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eddde ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _fgdg ,_aage =_agbg .ClipToBitmap (_bfbe );_aage !=nil {return nil ,nil ,_d .Wrap (_aage ,_eddde ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_fgdg ,_ddab =_fgdg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _ddab !=nil {return nil ,nil ,_d .Wrap (_ddab ,_eddde ,"");};_fgddc ,_ddab =_fgddc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _ddab !=nil {return nil ,nil ,_d .Wrap (_ddab ,_eddde ,"");};return _fgdg ,_fgddc ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func TstASymbol (t *_f .T )*Bitmap {t .Helper ();_dbeeb :=New (6,6);_ac .NoError (t ,_dbeeb .SetPixel (1,0,1));_ac .NoError (t ,_dbeeb .SetPixel (2,0,1));_ac .NoError (t ,_dbeeb .SetPixel (3,0,1));_ac .NoError (t ,_dbeeb .SetPixel (4,0,1));_ac .NoError (t ,_dbeeb .SetPixel (5,1,1));_ac .NoError (t ,_dbeeb .SetPixel (1,2,1));_ac .NoError (t ,_dbeeb .SetPixel (2,2,1));_ac .NoError (t ,_dbeeb .SetPixel (3,2,1));_ac .NoError (t ,_dbeeb .SetPixel (4,2,1));_ac .NoError (t ,_dbeeb .SetPixel (5,2,1));_ac .NoError (t ,_dbeeb .SetPixel (0,3,1));_ac .NoError (t ,_dbeeb .SetPixel (5,3,1));_ac .NoError (t ,_dbeeb .SetPixel (0,4,1));_ac .NoError (t ,_dbeeb .SetPixel (5,4,1));_ac .NoError (t ,_dbeeb .SetPixel (1,5,1));_ac .NoError (t ,_dbeeb .SetPixel (2,5,1));_ac .NoError (t ,_dbeeb .SetPixel (3,5,1));_ac .NoError (t ,_dbeeb .SetPixel (4,5,1));_ac .NoError (t ,_dbeeb .SetPixel (5,5,1));return _dbeeb ;};func (_fgg *Bitmap )SizesEqual (s *Bitmap )bool {if _fgg ==s {return true ;};if _fgg .Width !=s .Width ||_fgg .Height !=s .Height {return false ;};return true ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_acbg *Bitmap )setAll ()error {_cdaa :=_ggbg (_acbg ,0,0,_acbg .Width ,_acbg .Height ,PixSet ,nil ,0,0);if _cdaa !=nil {return _d .Wrap (_cdaa ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);type byHeight Bitmaps ;func (_aebb Points )YSorter ()func (_aee ,_aacf int )bool {return func (_fcfef ,_badbc int )bool {return _aebb [_fcfef ].Y < _aebb [_badbc ].Y };};func _edfg (_cced ,_aecc *Bitmap ,_bbge ,_aebe ,_fccc uint ,_daf ,_begff int ,_abfg bool ,_ceac ,_defd int )error {for _caec :=_daf ;_caec < _begff ;_caec ++{if _ceac +1< len (_cced .Data ){_dda :=_caec +1==_begff ;_bfe ,_bebdc :=_cced .GetByte (_ceac );if _bebdc !=nil {return _bebdc ;};_ceac ++;_bfe <<=_bbge ;_afce ,_bebdc :=_cced .GetByte (_ceac );if _bebdc !=nil {return _bebdc ;};_afce >>=_aebe ;_bbcad :=_bfe |_afce ;if _dda &&!_abfg {_bbcad =_cdae (_fccc ,_bbcad );};_bebdc =_aecc .SetByte (_defd ,_bbcad );if _bebdc !=nil {return _bebdc ;};_defd ++;if _dda &&_abfg {_cgfb ,_egcf :=_cced .GetByte (_ceac );if _egcf !=nil {return _egcf ;};_cgfb <<=_bbge ;_bbcad =_cdae (_fccc ,_cgfb );if _egcf =_aecc .SetByte (_defd ,_bbcad );_egcf !=nil {return _egcf ;};};continue ;};_ccge ,_bbgb :=_cced .GetByte (_ceac );if _bbgb !=nil {_ab .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_ceac ,_bbgb );return _bbgb ;};_ccge <<=_bbge ;_ceac ++;_bbgb =_aecc .SetByte (_defd ,_ccge );if _bbgb !=nil {return _bbgb ;};_defd ++;};return nil ;};func TstRSymbol (t *_f .T ,scale ...int )*Bitmap {_baeef ,_ebgbb :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_ac .NoError (t ,_ebgbb );return TstGetScaledSymbol (t ,_baeef ,scale ...);};func TstImageBitmapData ()[]byte {return _ecce .Data };func _dbgd ()[]int {_abddg :=make ([]int ,256);_abddg [0]=0;_abddg [1]=7;var _cbecd int ;for _cbecd =2;_cbecd < 4;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -2]+6;};for _cbecd =4;_cbecd < 8;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -4]+5;};for _cbecd =8;_cbecd < 16;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -8]+4;};for _cbecd =16;_cbecd < 32;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -16]+3;};for _cbecd =32;_cbecd < 64;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -32]+2;};for _cbecd =64;_cbecd < 128;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -64]+1;};for _cbecd =128;_cbecd < 256;_cbecd ++{_abddg [_cbecd ]=_abddg [_cbecd -128];};return _abddg ;};func (_dcfa *Bitmap )String ()string {var _ded ="\u000a";for _bdg :=0;_bdg < _dcfa .Height ;_bdg ++{var _edb string ;for _aab :=0;_aab < _dcfa .Width ;_aab ++{_gcde :=_dcfa .GetPixel (_aab ,_bdg );if _gcde {_edb +="\u0031";}else {_edb +="\u0030";};};_ded +=_edb +"\u000a";};return _ded ;};func (_fdfg *ClassedPoints )validateIntSlice ()error {const _bcgf ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_dffad :=range _fdfg .IntSlice {if _dffad >=(_fdfg .Points .Size ()){return _d .Errorf (_bcgf ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dffad ,_fdfg .Points .Size ());};};return nil ;};