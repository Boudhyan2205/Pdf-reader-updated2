//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_cd "encoding/binary";_f "github.com/stretchr/testify/require";_ag "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/imageutil";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_cf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_dg "image";_d "math";_g "sort";_fc "strings";_fd "testing";);func (_feag *Bitmap )inverseData (){if _gcb :=_feag .RasterOperation (0,0,_feag .Width ,_feag .Height ,PixNotDst ,nil ,0,0);_gcb !=nil {_ag .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_gcb );
};if _feag .Color ==Chocolate {_feag .Color =Vanilla ;}else {_feag .Color =Chocolate ;};};func TstOSymbol (t *_fd .T ,scale ...int )*Bitmap {_cdbc ,_ffea :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_ffea );return TstGetScaledSymbol (t ,_cdbc ,scale ...);
};const (_ccbg shift =iota ;_ecdd ;);func _dbgae (_daef *Bitmap ,_eacae *Bitmap ,_feegg int )(_cacf error ){const _gafae ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_dbff :=_cgcb (_daef .Height ,_eacae .Height );
_adbd :=_cgcb (_daef .RowStride ,_eacae .RowStride );switch _feegg {case 4:_cacf =_cbca (_daef ,_eacae ,_dbff ,_adbd );case 8:_cacf =_fccf (_daef ,_eacae ,_dbff ,_adbd );default:return _cf .Errorf (_gafae ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_feegg );
};if _cacf !=nil {return _cf .Wrap (_cacf ,_gafae ,"");};return nil ;};func New (width ,height int )*Bitmap {_afb :=_dgb (width ,height );_afb .Data =make ([]byte ,height *_afb .RowStride );return _afb ;};func _aeae (_ggaa ,_dbga ,_dfde byte )byte {return (_ggaa &^(_dfde ))|(_dbga &_dfde )};
func (_fdde *Bitmap )setFourBytes (_cbc int ,_edef uint32 )error {if _cbc +3> len (_fdde .Data )-1{return _cf .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cbc );
};_fdde .Data [_cbc ]=byte ((_edef &0xff000000)>>24);_fdde .Data [_cbc +1]=byte ((_edef &0xff0000)>>16);_fdde .Data [_cbc +2]=byte ((_edef &0xff00)>>8);_fdde .Data [_cbc +3]=byte (_edef &0xff);return nil ;};func _eag (_dbg ,_egf *Bitmap ,_bfab int ,_ccad []byte ,_cgac int )(_eed error ){const _cdae ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ded ,_dbeb ,_fdb ,_eae ,_cegg ,_abd ,_ffb ,_ddd int ;_ffg ,_cb uint32 ;_cgaa ,_bdab byte ;_fbg uint16 ;);_cde :=make ([]byte ,4);_eab :=make ([]byte ,4);for _fdb =0;_fdb < _dbg .Height -1;_fdb ,_eae =_fdb +2,_eae +1{_ded =_fdb *_dbg .RowStride ;_dbeb =_eae *_egf .RowStride ;
for _cegg ,_abd =0,0;_cegg < _cgac ;_cegg ,_abd =_cegg +4,_abd +1{for _ffb =0;_ffb < 4;_ffb ++{_ddd =_ded +_cegg +_ffb ;if _ddd <=len (_dbg .Data )-1&&_ddd < _ded +_dbg .RowStride {_cde [_ffb ]=_dbg .Data [_ddd ];}else {_cde [_ffb ]=0x00;};_ddd =_ded +_dbg .RowStride +_cegg +_ffb ;
if _ddd <=len (_dbg .Data )-1&&_ddd < _ded +(2*_dbg .RowStride ){_eab [_ffb ]=_dbg .Data [_ddd ];}else {_eab [_ffb ]=0x00;};};_ffg =_cd .BigEndian .Uint32 (_cde );_cb =_cd .BigEndian .Uint32 (_eab );_cb &=_ffg ;_cb &=_cb <<1;_cb &=0xaaaaaaaa;_ffg =_cb |(_cb <<7);
_cgaa =byte (_ffg >>24);_bdab =byte ((_ffg >>8)&0xff);_ddd =_dbeb +_abd ;if _ddd +1==len (_egf .Data )-1||_ddd +1>=_dbeb +_egf .RowStride {_egf .Data [_ddd ]=_ccad [_cgaa ];if _eed =_egf .SetByte (_ddd ,_ccad [_cgaa ]);_eed !=nil {return _cf .Wrapf (_eed ,_cdae ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ddd );
};}else {_fbg =(uint16 (_ccad [_cgaa ])<<8)|uint16 (_ccad [_bdab ]);if _eed =_egf .setTwoBytes (_ddd ,_fbg );_eed !=nil {return _cf .Wrapf (_eed ,_cdae ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ddd );
};_abd ++;};};};return nil ;};func (_ggcb CombinationOperator )String ()string {var _bfcg string ;switch _ggcb {case CmbOpOr :_bfcg ="\u004f\u0052";case CmbOpAnd :_bfcg ="\u0041\u004e\u0044";case CmbOpXor :_bfcg ="\u0058\u004f\u0052";case CmbOpXNor :_bfcg ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_bfcg ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_bfcg ="\u004e\u004f\u0054";};return _bfcg ;};func _daf (_ddff ,_dgdd ,_ggae *Bitmap )(*Bitmap ,error ){const _ebef ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _dgdd ==nil {return nil ,_cf .Error (_ebef ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _ggae ==nil {return nil ,_cf .Error (_ebef ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _dba error ;switch {case _ddff ==_dgdd :if _dba =_ddff .RasterOperation (0,0,_dgdd .Width ,_dgdd .Height ,PixNotSrcAndDst ,_ggae ,0,0);
_dba !=nil {return nil ,_cf .Wrap (_dba ,_ebef ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _ddff ==_ggae :if _dba =_ddff .RasterOperation (0,0,_dgdd .Width ,_dgdd .Height ,PixNotSrcAndDst ,_dgdd ,0,0);_dba !=nil {return nil ,_cf .Wrap (_dba ,_ebef ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_ddff ,_dba =_gcg (_ddff ,_dgdd );if _dba !=nil {return nil ,_cf .Wrap (_dba ,_ebef ,"");};if _dba =_ddff .RasterOperation (0,0,_dgdd .Width ,_dgdd .Height ,PixNotSrcAndDst ,_ggae ,0,0);_dba !=nil {return nil ,_cf .Wrap (_dba ,_ebef ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _ddff ,nil ;};func _abgc (_gcac *Bitmap ,_efgb ,_bcad int ,_fafe ,_dcbb int ,_abbce RasterOperator ,_ddbgb *Bitmap ,_ebda ,_abe int )error {var _dgea ,_eeea ,_fdabc ,_cgdf int ;if _efgb < 0{_ebda -=_efgb ;_fafe +=_efgb ;_efgb =0;};if _ebda < 0{_efgb -=_ebda ;
_fafe +=_ebda ;_ebda =0;};_dgea =_efgb +_fafe -_gcac .Width ;if _dgea > 0{_fafe -=_dgea ;};_eeea =_ebda +_fafe -_ddbgb .Width ;if _eeea > 0{_fafe -=_eeea ;};if _bcad < 0{_abe -=_bcad ;_dcbb +=_bcad ;_bcad =0;};if _abe < 0{_bcad -=_abe ;_dcbb +=_abe ;_abe =0;
};_fdabc =_bcad +_dcbb -_gcac .Height ;if _fdabc > 0{_dcbb -=_fdabc ;};_cgdf =_abe +_dcbb -_ddbgb .Height ;if _cgdf > 0{_dcbb -=_cgdf ;};if _fafe <=0||_dcbb <=0{return nil ;};var _adbg error ;switch {case _efgb &7==0&&_ebda &7==0:_adbg =_ddbga (_gcac ,_efgb ,_bcad ,_fafe ,_dcbb ,_abbce ,_ddbgb ,_ebda ,_abe );
case _efgb &7==_ebda &7:_adbg =_cgeb (_gcac ,_efgb ,_bcad ,_fafe ,_dcbb ,_abbce ,_ddbgb ,_ebda ,_abe );default:_adbg =_dgdcf (_gcac ,_efgb ,_bcad ,_fafe ,_dcbb ,_abbce ,_ddbgb ,_ebda ,_abe );};if _adbg !=nil {return _cf .Wrap (_adbg ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_dg .Rectangle ;};func (_gegg *Bitmap )SetDefaultPixel (){for _ecf :=range _gegg .Data {_gegg .Data [_ecf ]=byte (0xff);};};func _dgdcf (_gdbd *Bitmap ,_efeb ,_gceab ,_ebedbf ,_cbbf int ,_egae RasterOperator ,_ggd *Bitmap ,_ggge ,_acgb int )error {var (_eaebc bool ;
_fbade bool ;_eagf byte ;_ggba int ;_fdabe int ;_ffgcda int ;_fcdbg int ;_cddf bool ;_fgbe int ;_bbdfb int ;_gffe int ;_fgbc bool ;_gcbc byte ;_cbag int ;_fgbcg int ;_bcbc int ;_afcfg byte ;_bbdc int ;_febf int ;_abfcg uint ;_dcde uint ;_bbea byte ;_cefb shift ;
_bffe bool ;_cfbb bool ;_bcbcg ,_eaeed int ;);if _ggge &7!=0{_febf =8-(_ggge &7);};if _efeb &7!=0{_fdabe =8-(_efeb &7);};if _febf ==0&&_fdabe ==0{_bbea =_fddd [0];}else {if _fdabe > _febf {_abfcg =uint (_fdabe -_febf );}else {_abfcg =uint (8-(_febf -_fdabe ));
};_dcde =8-_abfcg ;_bbea =_fddd [_abfcg ];};if (_efeb &7)!=0{_eaebc =true ;_ggba =8-(_efeb &7);_eagf =_fddd [_ggba ];_ffgcda =_gdbd .RowStride *_gceab +(_efeb >>3);_fcdbg =_ggd .RowStride *_acgb +(_ggge >>3);_bbdc =8-(_ggge &7);if _ggba > _bbdc {_cefb =_ccbg ;
if _ebedbf >=_febf {_bffe =true ;};}else {_cefb =_ecdd ;};};if _ebedbf < _ggba {_fbade =true ;_eagf &=_ccbfa [8-_ggba +_ebedbf ];};if !_fbade {_fgbe =(_ebedbf -_ggba )>>3;if _fgbe !=0{_cddf =true ;_bbdfb =_gdbd .RowStride *_gceab +((_efeb +_fdabe )>>3);
_gffe =_ggd .RowStride *_acgb +((_ggge +_fdabe )>>3);};};_cbag =(_efeb +_ebedbf )&7;if !(_fbade ||_cbag ==0){_fgbc =true ;_gcbc =_ccbfa [_cbag ];_fgbcg =_gdbd .RowStride *_gceab +((_efeb +_fdabe )>>3)+_fgbe ;_bcbc =_ggd .RowStride *_acgb +((_ggge +_fdabe )>>3)+_fgbe ;
if _cbag > int (_dcde ){_cfbb =true ;};};switch _egae {case PixSrc :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;
};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg ,_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );
_gdbd .Data [_bbdfb +_eaeed ]=_afcfg ;};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );
};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg ,_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixNotSrc :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );
};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^_afcfg ,_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;
_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]=^_afcfg ;};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;
if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^_afcfg ,_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixSrcOrDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;
_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg |_gdbd .Data [_ffgcda ],_eagf );
_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]|=_afcfg ;
};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg |_gdbd .Data [_fgbcg ],_gcbc );
_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixSrcAndDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );
};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg &_gdbd .Data [_ffgcda ],_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;
_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]&=_afcfg ;};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;
_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg &_gdbd .Data [_fgbcg ],_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;
};};case PixSrcXorDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg ^_gdbd .Data [_ffgcda ],_eagf );
_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]^=_afcfg ;
};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg ^_gdbd .Data [_fgbcg ],_gcbc );
_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixNotSrcOrDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );
};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^_afcfg |_gdbd .Data [_ffgcda ],_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;
_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]|=^_afcfg ;};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;
_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^_afcfg |_gdbd .Data [_fgbcg ],_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;
};};case PixNotSrcAndDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};
_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^_afcfg &_gdbd .Data [_ffgcda ],_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );
_gdbd .Data [_bbdfb +_eaeed ]&=^_afcfg ;};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );
};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^_afcfg &_gdbd .Data [_fgbcg ],_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixSrcOrNotDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;
if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg |^_gdbd .Data [_ffgcda ],_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;
};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]=_afcfg |^_gdbd .Data [_bbdfb +_eaeed ];
};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg |^_gdbd .Data [_fgbcg ],_gcbc );
_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixSrcAndNotDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );
};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],_afcfg &^_gdbd .Data [_ffgcda ],_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;
_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]=_afcfg &^_gdbd .Data [_bbdfb +_eaeed ];};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;
_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],_afcfg &^_gdbd .Data [_fgbcg ],_gcbc );_fgbcg +=_gdbd .RowStride ;
_bcbc +=_ggd .RowStride ;};};case PixNotPixSrcOrDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;
};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^(_afcfg |_gdbd .Data [_ffgcda ]),_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );
_gdbd .Data [_bbdfb +_eaeed ]=^(_afcfg |_gdbd .Data [_bbdfb +_eaeed ]);};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );
};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^(_afcfg |_gdbd .Data [_fgbcg ]),_gcbc );_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixNotPixSrcAndDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;
if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^(_afcfg &_gdbd .Data [_ffgcda ]),_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;
};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]=^(_afcfg &_gdbd .Data [_bbdfb +_eaeed ]);
};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^(_afcfg &_gdbd .Data [_fgbcg ]),_gcbc );
_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};case PixNotPixSrcXorDst :if _eaebc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{if _cefb ==_ccbg {_afcfg =_ggd .Data [_fcdbg ]<<_abfcg ;if _bffe {_afcfg =_aeae (_afcfg ,_ggd .Data [_fcdbg +1]>>_dcde ,_bbea );
};}else {_afcfg =_ggd .Data [_fcdbg ]>>_dcde ;};_gdbd .Data [_ffgcda ]=_aeae (_gdbd .Data [_ffgcda ],^(_afcfg ^_gdbd .Data [_ffgcda ]),_eagf );_ffgcda +=_gdbd .RowStride ;_fcdbg +=_ggd .RowStride ;};};if _cddf {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{for _eaeed =0;
_eaeed < _fgbe ;_eaeed ++{_afcfg =_aeae (_ggd .Data [_gffe +_eaeed ]<<_abfcg ,_ggd .Data [_gffe +_eaeed +1]>>_dcde ,_bbea );_gdbd .Data [_bbdfb +_eaeed ]=^(_afcfg ^_gdbd .Data [_bbdfb +_eaeed ]);};_bbdfb +=_gdbd .RowStride ;_gffe +=_ggd .RowStride ;};};
if _fgbc {for _bcbcg =0;_bcbcg < _cbbf ;_bcbcg ++{_afcfg =_ggd .Data [_bcbc ]<<_abfcg ;if _cfbb {_afcfg =_aeae (_afcfg ,_ggd .Data [_bcbc +1]>>_dcde ,_bbea );};_gdbd .Data [_fgbcg ]=_aeae (_gdbd .Data [_fgbcg ],^(_afcfg ^_gdbd .Data [_fgbcg ]),_gcbc );
_fgbcg +=_gdbd .RowStride ;_bcbc +=_ggd .RowStride ;};};default:_ag .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_egae );return _cf .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_cdgg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_caad bool ,_fgcd error ){const _edd ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_fbe ();};_ffaa :=_cdgg .Width >>3;_cbd :=_cdgg .Width &7;_eea :=byte (0xff<<uint (8-_cbd ));var (_ffe ,_cdgf ,_agcf ,_cega int ;_beg byte ;);for _ffe =0;_ffe < _cdgg .Height ;_ffe ++{_agcf =_cdgg .RowStride *_ffe ;for _cdgf =0;_cdgf < _ffaa ;
_cdgf ++{_beg ,_fgcd =_cdgg .GetByte (_agcf +_cdgf );if _fgcd !=nil {return false ,_cf .Wrap (_fgcd ,_edd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_cega +=tab8 [_beg ];};if _cbd !=0{_beg ,_fgcd =_cdgg .GetByte (_agcf +_cdgf );if _fgcd !=nil {return false ,_cf .Wrap (_fgcd ,_edd ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_beg &=_eea ;_cega +=tab8 [_beg ];};if _cega > thresh {return true ,nil ;};};return _caad ,nil ;};func _aeda (_gacc *Bitmap ,_efad int )(*Bitmap ,error ){const _ecge ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _gacc ==nil {return nil ,_cf .Error (_ecge ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _efad <=0{return nil ,_cf .Error (_ecge ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _efad ==1{_cgge ,_becec :=_gcg (nil ,_gacc );if _becec !=nil {return nil ,_cf .Wrap (_becec ,_ecge ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _cgge ,nil ;};_gcc ,_bbfg :=_adb (_gacc ,_efad ,_efad );if _bbfg !=nil {return nil ,_cf .Wrap (_bbfg ,_ecge ,"");
};return _gcc ,nil ;};func (_edea *Bitmap )GetChocolateData ()[]byte {if _edea .Color ==Vanilla {_edea .inverseData ();};return _edea .Data ;};func init (){for _fec :=0;_fec < 256;_fec ++{_dcdd [_fec ]=uint8 (_fec &0x1)+(uint8 (_fec >>1)&0x1)+(uint8 (_fec >>2)&0x1)+(uint8 (_fec >>3)&0x1)+(uint8 (_fec >>4)&0x1)+(uint8 (_fec >>5)&0x1)+(uint8 (_fec >>6)&0x1)+(uint8 (_fec >>7)&0x1);
};};func (_fdd *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fdd .Data )-1||index < 0{return 0,_cf .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fdd .Data [index ],nil ;};func (_bbgg *Bitmap )thresholdPixelSum (_afdb int )bool {var (_bggf int ;_cceg uint8 ;_cccc byte ;_feab int ;);_cfcd :=_bbgg .RowStride ;_fbaae :=uint (_bbgg .Width &0x07);if _fbaae !=0{_cceg =uint8 ((0xff<<(8-_fbaae ))&0xff);
_cfcd --;};for _gdb :=0;_gdb < _bbgg .Height ;_gdb ++{for _feab =0;_feab < _cfcd ;_feab ++{_cccc =_bbgg .Data [_gdb *_bbgg .RowStride +_feab ];_bggf +=int (_dcdd [_cccc ]);};if _fbaae !=0{_cccc =_bbgg .Data [_gdb *_bbgg .RowStride +_feab ]&_cceg ;_bggf +=int (_dcdd [_cccc ]);
};if _bggf > _afdb {return true ;};};return false ;};func _bffb (_efg ,_ccbf byte ,_caf CombinationOperator )byte {switch _caf {case CmbOpOr :return _ccbf |_efg ;case CmbOpAnd :return _ccbf &_efg ;case CmbOpXor :return _ccbf ^_efg ;case CmbOpXNor :return ^(_ccbf ^_efg );
case CmbOpNot :return ^(_ccbf );default:return _ccbf ;};};type byHeight Bitmaps ;func _dgcb (_gcaeb ,_cefd *Bitmap ,_eabcd *Selection )(*Bitmap ,error ){const _baef ="\u006f\u0070\u0065\u006e";var _fcea error ;_gcaeb ,_fcea =_gebe (_gcaeb ,_cefd ,_eabcd );
if _fcea !=nil {return nil ,_cf .Wrap (_fcea ,_baef ,"");};_face ,_fcea :=_bcce (nil ,_cefd ,_eabcd );if _fcea !=nil {return nil ,_cf .Wrap (_fcea ,_baef ,"");};_ ,_fcea =_bcc (_gcaeb ,_face ,_eabcd );if _fcea !=nil {return nil ,_cf .Wrap (_fcea ,_baef ,"");
};return _gcaeb ,nil ;};var _gcae =[5]int {1,2,3,0,4};var (_dcb =_egdg ();_adgg =_bfc ();_fgba =_ged (););func (_bcfad Points )Get (i int )(Point ,error ){if i > len (_bcfad )-1{return Point {},_cf .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bcfad [i ],nil ;};func _gcbd (_beec *Bitmap )(_bde *Bitmap ,_cgfe int ,_fdca error ){const _eggb ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _beec ==nil {return nil ,0,_cf .Errorf (_eggb ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _ffeg ,_bdbf *Bitmap ;if _ffeg ,_fdca =_gcg (nil ,_beec );_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_cfba [13]int ;_dcef ,_abdge int ;);_eedc :=12;_gdf :=_fa .NewNumSlice (_eedc +1);
_afe :=_fa .NewNumSlice (_eedc +1);var _daac *Boxes ;for _adgc :=0;_adgc <=_eedc ;_adgc ++{if _adgc ==0{if _bdbf ,_fdca =_gcg (nil ,_ffeg );_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _bdbf ,_fdca =_ceea (_ffeg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _daac ,_fdca =_bdbf .connComponentsBB (4);_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"");};_cfba [_adgc ]=len (*_daac );
_gdf .AddInt (_cfba [_adgc ]);switch _adgc {case 0:_dcef =_cfba [0];default:_abdge =_cfba [_adgc -1]-_cfba [_adgc ];_afe .AddInt (_abdge );};_ffeg =_bdbf ;};_ccgaf :=true ;_gcecf :=2;var _agd ,_gba int ;for _babc :=1;_babc < len (*_afe );_babc ++{if _agd ,_fdca =_gdf .GetInt (_babc );
_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _ccgaf &&_agd < int (0.3*float32 (_dcef )){_gcecf =_babc +1;_ccgaf =false ;
};if _abdge ,_fdca =_afe .GetInt (_babc );_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _abdge > _gba {_gba =_abdge ;};};_eage :=_beec .XResolution ;if _eage ==0{_eage =150;
};if _eage > 110{_gcecf ++;};if _gcecf < 2{_ag .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_gcecf =2;};_cgfe =_gcecf +1;if _bde ,_fdca =_fdfb (nil ,_beec ,_gcecf +1,1);_fdca !=nil {return nil ,0,_cf .Wrap (_fdca ,_eggb ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _bde ,_cgfe ,nil ;
};func (_bbbe *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_ffd *Boxes ,_bba error ){const _gbec ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _bbbe ==nil {return nil ,_cf .Error (_gbec ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_cf .Error (_gbec ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _ffd ,_bba =_bbbe .connComponentsBB (connectivity );
_bba !=nil {return nil ,_cf .Wrap (_bba ,_gbec ,"");};}else {if _ffd ,_bba =_bbbe .connComponentsBitmapsBB (bms ,connectivity );_bba !=nil {return nil ,_cf .Wrap (_bba ,_gbec ,"");};};return _ffd ,nil ;};func (_gca *Bitmap )clearAll ()error {return _gca .RasterOperation (0,0,_gca .Width ,_gca .Height ,PixClr ,nil ,0,0);
};func (_ebfb *Bitmap )InverseData (){_ebfb .inverseData ()};func _ceb (_gfe ,_egb *Bitmap )(_cdd error ){const _bf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_eeg :=_egb .RowStride ;_ff :=_gfe .RowStride ;
_cad :=_egb .RowStride *4-_gfe .RowStride ;var (_bc ,_cab byte ;_ac uint32 ;_aa ,_bg ,_cc ,_cce ,_ae ,_ad ,_ge int ;);for _cc =0;_cc < _egb .Height ;_cc ++{_aa =_cc *_eeg ;_bg =4*_cc *_ff ;for _cce =0;_cce < _eeg ;_cce ++{_bc =_egb .Data [_aa +_cce ];_ac =_adgg [_bc ];
_ad =_bg +_cce *4;if _cad !=0&&(_cce +1)*4> _gfe .RowStride {for _ae =_cad ;_ae > 0;_ae --{_cab =byte ((_ac >>uint (_ae *8))&0xff);_ge =_ad +(_cad -_ae );if _cdd =_gfe .SetByte (_ge ,_cab );_cdd !=nil {return _cf .Wrapf (_cdd ,_bf ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ae );
};};}else if _cdd =_gfe .setFourBytes (_ad ,_ac );_cdd !=nil {return _cf .Wrap (_cdd ,_bf ,"");};if _cdd =_gfe .setFourBytes (_bg +_cce *4,_adgg [_egb .Data [_aa +_cce ]]);_cdd !=nil {return _cf .Wrap (_cdd ,_bf ,"");};};for _ae =1;_ae < 4;_ae ++{for _cce =0;
_cce < _ff ;_cce ++{if _cdd =_gfe .SetByte (_bg +_ae *_ff +_cce ,_gfe .Data [_bg +_cce ]);_cdd !=nil {return _cf .Wrapf (_cdd ,_bf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ae ,_cce );
};};};};return nil ;};func (_beed *Bitmap )SetPixel (x ,y int ,pixel byte )error {_gcf :=_beed .GetByteIndex (x ,y );if _gcf > len (_beed .Data )-1{return _cf .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_gcf );
};_fbbb :=_beed .GetBitOffset (x );_bfe :=uint (7-_fbbb );_aff :=_beed .Data [_gcf ];var _bebc byte ;if pixel ==1{_bebc =_aff |(pixel &0x01<<_bfe );}else {_bebc =_aff &^(1<<_bfe );};_beed .Data [_gcf ]=_bebc ;return nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _dbf ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_def :=_dgb (width ,height );_def .Data =data ;if len (data )< height *_def .RowStride {return nil ,_cf .Errorf (_dbf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_def .RowStride );
};return _def ,nil ;};func (_gdg *Bitmap )GetUnpaddedData ()([]byte ,error ){_bbg :=uint (_gdg .Width &0x07);if _bbg ==0{return _gdg .Data ,nil ;};_aef :=_gdg .Width *_gdg .Height ;if _aef %8!=0{_aef >>=3;_aef ++;}else {_aef >>=3;};_bgg :=make ([]byte ,_aef );
_agag :=_e .NewWriterMSB (_bgg );const _ffa ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _eegg :=0;_eegg < _gdg .Height ;_eegg ++{for _geb :=0;_geb < _gdg .RowStride ;_geb ++{_daa :=_gdg .Data [_eegg *_gdg .RowStride +_geb ];
if _geb !=_gdg .RowStride -1{_gbcc :=_agag .WriteByte (_daa );if _gbcc !=nil {return nil ,_cf .Wrap (_gbcc ,_ffa ,"");};continue ;};for _bdf :=uint (0);_bdf < _bbg ;_bdf ++{_agbc :=_agag .WriteBit (int (_daa >>(7-_bdf )&0x01));if _agbc !=nil {return nil ,_cf .Wrap (_agbc ,_ffa ,"");
};};};};return _bgg ,nil ;};func (_bgeb *Bitmap )nextOnPixelLow (_daba ,_eaab ,_afg ,_fggf ,_adeg int )(_aeg _dg .Point ,_fed bool ,_deda error ){const _edcb ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_bebg int ;_dfd byte ;);_dgd :=_adeg *_afg ;_bdfd :=_dgd +(_fggf /8);if _dfd ,_deda =_bgeb .GetByte (_bdfd );_deda !=nil {return _aeg ,false ,_cf .Wrap (_deda ,_edcb ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _dfd !=0{_baag :=_fggf -(_fggf %8)+7;for _bebg =_fggf ;_bebg <=_baag &&_bebg < _daba ;_bebg ++{if _bgeb .GetPixel (_bebg ,_adeg ){_aeg .X =_bebg ;_aeg .Y =_adeg ;return _aeg ,true ,nil ;};};};_fgcg :=(_fggf /8)+1;_bebg =8*_fgcg ;var _bbb int ;for _bdfd =_dgd +_fgcg ;
_bebg < _daba ;_bdfd ,_bebg =_bdfd +1,_bebg +8{if _dfd ,_deda =_bgeb .GetByte (_bdfd );_deda !=nil {return _aeg ,false ,_cf .Wrap (_deda ,_edcb ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};
if _dfd ==0{continue ;};for _bbb =0;_bbb < 8&&_bebg < _daba ;_bbb ,_bebg =_bbb +1,_bebg +1{if _bgeb .GetPixel (_bebg ,_adeg ){_aeg .X =_bebg ;_aeg .Y =_adeg ;return _aeg ,true ,nil ;};};};for _bga :=_adeg +1;_bga < _eaab ;_bga ++{_dgd =_bga *_afg ;for _bdfd ,_bebg =_dgd ,0;
_bebg < _daba ;_bdfd ,_bebg =_bdfd +1,_bebg +8{if _dfd ,_deda =_bgeb .GetByte (_bdfd );_deda !=nil {return _aeg ,false ,_cf .Wrap (_deda ,_edcb ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _dfd ==0{continue ;
};for _bbb =0;_bbb < 8&&_bebg < _daba ;_bbb ,_bebg =_bbb +1,_bebg +1{if _bgeb .GetPixel (_bebg ,_bga ){_aeg .X =_bebg ;_aeg .Y =_bga ;return _aeg ,true ,nil ;};};};};return _aeg ,false ,nil ;};func (_bcaa *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _cegd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _bcaa ==nil {return nil ,_cf .Error (_cegd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_cf .Error (_cegd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_dbdd :=len (_bcaa .Values );_cage :=&Bitmaps {Values :make ([]*Bitmap ,_dbdd ),Boxes :make ([]*_dg .Rectangle ,_dbdd )};var (_eabe ,_aead *Bitmap ;_ebcff *_dg .Rectangle ;_gggd error ;);for _dfbf :=0;_dfbf < _dbdd ;_dfbf ++{if _eabe ,_gggd =_bcaa .GetBitmap (_dfbf );
_gggd !=nil {return nil ,_cf .Wrap (_gggd ,_cegd ,"");};if _ebcff ,_gggd =_bcaa .GetBox (_dfbf );_gggd !=nil {return nil ,_cf .Wrap (_gggd ,_cegd ,"");};if _aead ,_gggd =s .clipRectangle (_ebcff ,nil );_gggd !=nil {return nil ,_cf .Wrap (_gggd ,_cegd ,"");
};if _aead ,_gggd =_aead .And (_eabe );_gggd !=nil {return nil ,_cf .Wrap (_gggd ,_cegd ,"");};_cage .Values [_dfbf ]=_aead ;_cage .Boxes [_dfbf ]=_ebcff ;};return _cage ,nil ;};func _dgb (_fbda ,_bgf int )*Bitmap {return &Bitmap {Width :_fbda ,Height :_bgf ,RowStride :(_fbda +7)>>3};
};func (_agcdb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _ddag ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_agcdb .Values )==0{return nil ,_cf .Error (_ddag ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_adab :=&BitmapsArray {};_agcdb .SortByWidth ();_agga :=-1;_dgbf :=-1;for _cadb :=0;_cadb < len (_agcdb .Values );_cadb ++{_caga :=_agcdb .Values [_cadb ].Width ;if _caga > _agga {_agga =_caga ;_dgbf ++;_adab .Values =append (_adab .Values ,&Bitmaps {});
};_adab .Values [_dgbf ].AddBitmap (_agcdb .Values [_cadb ]);};return _adab ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _gcg (d ,s )};func (_agg *Boxes )Get (i int )(*_dg .Rectangle ,error ){const _fde ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _agg ==nil {return nil ,_cf .Error (_fde ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_agg )-1{return nil ,_cf .Errorf (_fde ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_agg )[i ],nil ;};func (_gfda *Bitmaps )selectByIndicator (_affe *_fa .NumSlice )(_dfaac *Bitmaps ,_ceda error ){const _fabd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gfda ==nil {return nil ,_cf .Error (_fabd ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _affe ==nil {return nil ,_cf .Error (_fabd ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_gfda .Values )==0{return _gfda ,nil ;};if len (*_affe )!=len (_gfda .Values ){return nil ,_cf .Errorf (_fabd ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_affe ),len (_gfda .Values ));
};var _cgecd ,_aggce ,_fccg int ;for _aggce =0;_aggce < len (*_affe );_aggce ++{if _cgecd ,_ceda =_affe .GetInt (_aggce );_ceda !=nil {return nil ,_cf .Wrap (_ceda ,_fabd ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _cgecd ==1{_fccg ++;
};};if _fccg ==len (_gfda .Values ){return _gfda ,nil ;};_dfaac =&Bitmaps {};_dfba :=len (_gfda .Values )==len (_gfda .Boxes );for _aggce =0;_aggce < len (*_affe );_aggce ++{if _cgecd =int ((*_affe )[_aggce ]);_cgecd ==0{continue ;};_dfaac .Values =append (_dfaac .Values ,_gfda .Values [_aggce ]);
if _dfba {_dfaac .Boxes =append (_dfaac .Boxes ,_gfda .Boxes [_aggce ]);};};return _dfaac ,nil ;};type Boxes []*_dg .Rectangle ;func MakePixelCentroidTab8 ()[]int {return _cbdae ()};func (_aba *Bitmap )setEightBytes (_faff int ,_cabf uint64 )error {_fbdd :=_aba .RowStride -(_faff %_aba .RowStride );
if _aba .RowStride !=_aba .Width >>3{_fbdd --;};if _fbdd >=8{return _aba .setEightFullBytes (_faff ,_cabf );};return _aba .setEightPartlyBytes (_faff ,_fbdd ,_cabf );};func _ddbga (_gace *Bitmap ,_debgf ,_efed ,_dagbe ,_bccb int ,_baadd RasterOperator ,_bfac *Bitmap ,_eaae ,_bcfd int )error {var (_efd byte ;
_bddd int ;_abgd int ;_ceed ,_eba int ;_afbdd ,_dgdc int ;);_eedcee :=_dagbe >>3;_efceg :=_dagbe &7;if _efceg > 0{_efd =_ccbfa [_efceg ];};_bddd =_bfac .RowStride *_bcfd +(_eaae >>3);_abgd =_gace .RowStride *_efed +(_debgf >>3);switch _baadd {case PixSrc :for _afbdd =0;
_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=_bfac .Data [_ceed ];_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ],_efd );
};};case PixNotSrc :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=^(_bfac .Data [_ceed ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^_bfac .Data [_ceed ],_efd );
};};case PixSrcOrDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]|=_bfac .Data [_ceed ];_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ]|_gace .Data [_eba ],_efd );
};};case PixSrcAndDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]&=_bfac .Data [_ceed ];_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ]&_gace .Data [_eba ],_efd );
};};case PixSrcXorDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]^=_bfac .Data [_ceed ];_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ]^_gace .Data [_eba ],_efd );
};};case PixNotSrcOrDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]|=^(_bfac .Data [_ceed ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^(_bfac .Data [_ceed ])|_gace .Data [_eba ],_efd );
};};case PixNotSrcAndDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]&=^(_bfac .Data [_ceed ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^(_bfac .Data [_ceed ])&_gace .Data [_eba ],_efd );
};};case PixSrcOrNotDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=_bfac .Data [_ceed ]|^(_gace .Data [_eba ]);_eba ++;
_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ]|^(_gace .Data [_eba ]),_efd );};};case PixSrcAndNotDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;
for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=_bfac .Data [_ceed ]&^(_gace .Data [_eba ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],_bfac .Data [_ceed ]&^(_gace .Data [_eba ]),_efd );};};case PixNotPixSrcOrDst :for _afbdd =0;
_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=^(_bfac .Data [_ceed ]|_gace .Data [_eba ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^(_bfac .Data [_ceed ]|_gace .Data [_eba ]),_efd );
};};case PixNotPixSrcAndDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=^(_bfac .Data [_ceed ]&_gace .Data [_eba ]);_eba ++;
_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^(_bfac .Data [_ceed ]&_gace .Data [_eba ]),_efd );};};case PixNotPixSrcXorDst :for _afbdd =0;_afbdd < _bccb ;_afbdd ++{_ceed =_bddd +_afbdd *_bfac .RowStride ;_eba =_abgd +_afbdd *_gace .RowStride ;
for _dgdc =0;_dgdc < _eedcee ;_dgdc ++{_gace .Data [_eba ]=^(_bfac .Data [_ceed ]^_gace .Data [_eba ]);_eba ++;_ceed ++;};if _efceg > 0{_gace .Data [_eba ]=_aeae (_gace .Data [_eba ],^(_bfac .Data [_ceed ]^_gace .Data [_eba ]),_efd );};};default:_ag .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_baadd );
return _cf .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_cfcb *Bitmap )nextOnPixel (_acef ,_cebd int )(_abb _dg .Point ,_dgff bool ,_cgd error ){const _bbd ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_abb ,_dgff ,_cgd =_cfcb .nextOnPixelLow (_cfcb .Width ,_cfcb .Height ,_cfcb .RowStride ,_acef ,_cebd );
if _cgd !=nil {return _abb ,false ,_cf .Wrap (_cgd ,_bbd ,"");};return _abb ,_dgff ,nil ;};func (_adegd *Bitmap )setBit (_gcd int ){_adegd .Data [(_gcd >>3)]|=0x80>>uint (_gcd &7)};var _dcdd [256]uint8 ;type Color int ;func (_fbaad *Bitmaps )String ()string {_ddabd :=_fc .Builder {};
for _ ,_gbcf :=range _fbaad .Values {_ddabd .WriteString (_gbcf .String ());_ddabd .WriteRune ('\n');};return _ddabd .String ();};func _gec (_agea ,_aadg *Bitmap ,_ccg ,_eeec ,_ddgg ,_eaee ,_ddab ,_ccga ,_ccbc ,_efcae int ,_acccd CombinationOperator )error {var _bfee int ;
_aaff :=func (){_bfee ++;_ddgg +=_aadg .RowStride ;_eaee +=_agea .RowStride ;_ddab +=_agea .RowStride };for _bfee =_ccg ;_bfee < _eeec ;_aaff (){var _ebde uint16 ;_ggg :=_ddgg ;for _baae :=_eaee ;_baae <=_ddab ;_baae ++{_bcfa ,_fdaf :=_aadg .GetByte (_ggg );
if _fdaf !=nil {return _fdaf ;};_aded ,_fdaf :=_agea .GetByte (_baae );if _fdaf !=nil {return _fdaf ;};_ebde =(_ebde |uint16 (_aded ))<<uint (_efcae );_aded =byte (_ebde >>8);if _baae ==_ddab {_aded =_dgfgc (uint (_ccga ),_aded );};if _fdaf =_aadg .SetByte (_ggg ,_bffb (_bcfa ,_aded ,_acccd ));
_fdaf !=nil {return _fdaf ;};_ggg ++;_ebde <<=uint (_ccbc );};};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bgca bool ,_dfdf error ){const _ddedd ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_abbe ,_eede :=p1 .Width ,p1 .Height ;_aae ,_dddb :=p3 .Width ,p3 .Height ;if _fa .Abs (_abbe -_aae )> maxDiffW {return false ,nil ;};if _fa .Abs (_eede -_dddb )> maxDiffH {return false ,nil ;};_ecga :=int (float32 (area1 )*(1.0-rank )+0.5);_eca :=int (float32 (area3 )*(1.0-rank )+0.5);
var _geea ,_fagg int ;if delX >=0{_geea =int (delX +0.5);}else {_geea =int (delX -0.5);};if delY >=0{_fagg =int (delY +0.5);}else {_fagg =int (delY -0.5);};_bgef :=p1 .CreateTemplate ();if _dfdf =_bgef .RasterOperation (0,0,_abbe ,_eede ,PixSrc ,p1 ,0,0);
_dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dfdf =_bgef .RasterOperation (_geea ,_fagg ,_abbe ,_eede ,PixNotSrcAndDst ,p4 ,0,0);_dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_bgca ,_dfdf =_bgef .ThresholdPixelSum (_ecga ,tab8 );if _dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bgca {return false ,nil ;};if _dfdf =_bgef .RasterOperation (_geea ,_fagg ,_aae ,_dddb ,PixSrc ,p3 ,0,0);
_dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dfdf =_bgef .RasterOperation (0,0,_aae ,_dddb ,PixNotSrcAndDst ,p2 ,0,0);_dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_bgca ,_dfdf =_bgef .ThresholdPixelSum (_eca ,tab8 );if _dfdf !=nil {return false ,_cf .Wrap (_dfdf ,_ddedd ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bgca ,nil ;};func _gcfd (_agcb ,_bfbg *Bitmap ,_ccgad *Selection )(*Bitmap ,error ){const _fced ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _eaea error ;if _agcb ,_eaea =_gebe (_agcb ,_bfbg ,_ccgad );_eaea !=nil {return nil ,_eaea ;};_ageb ,_eaea :=_bcc (nil ,_bfbg ,_ccgad );if _eaea !=nil {return nil ,_cf .Wrap (_eaea ,_fced ,"");};if _ ,_eaea =_bcce (_agcb ,_ageb ,_ccgad );_eaea !=nil {return nil ,_cf .Wrap (_eaea ,_fced ,"");
};return _agcb ,nil ;};func Extract (roi _dg .Rectangle ,src *Bitmap )(*Bitmap ,error ){_dcee :=New (roi .Dx (),roi .Dy ());_gfgb :=roi .Min .X &0x07;_caab :=8-_gfgb ;_decc :=uint (8-_dcee .Width &0x07);_gbeb :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_abfeg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_cabb :=_dcee .RowStride ==_abfeg +1-_gbeb ;var _eegc int ;for _dbgdd :=roi .Min .Y ;_dbgdd < roi .Max .Y ;_dbgdd ++{_bgea :=_gbeb ;_feda :=_eegc ;switch {case _gbeb ==_abfeg :_afff ,_dbgc :=src .GetByte (_bgea );
if _dbgc !=nil {return nil ,_dbgc ;};_afff <<=uint (_gfgb );_dbgc =_dcee .SetByte (_feda ,_dgfgc (_decc ,_afff ));if _dbgc !=nil {return nil ,_dbgc ;};case _gfgb ==0:for _ggff :=_gbeb ;_ggff <=_abfeg ;_ggff ++{_dafg ,_dgda :=src .GetByte (_bgea );if _dgda !=nil {return nil ,_dgda ;
};_bgea ++;if _ggff ==_abfeg &&_cabb {_dafg =_dgfgc (_decc ,_dafg );};_dgda =_dcee .SetByte (_feda ,_dafg );if _dgda !=nil {return nil ,_dgda ;};_feda ++;};default:_bbfe :=_cfg (src ,_dcee ,uint (_gfgb ),uint (_caab ),_decc ,_gbeb ,_abfeg ,_cabb ,_bgea ,_feda );
if _bbfe !=nil {return nil ,_bbfe ;};};_gbeb +=src .RowStride ;_abfeg +=src .RowStride ;_eegc +=_dcee .RowStride ;};return _dcee ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_becbf *Bitmaps )WidthSorter ()func (_bebcd ,_afge int )bool {return func (_abfcc ,_bbff int )bool {return _becbf .Values [_abfcc ].Width < _becbf .Values [_bbff ].Width };
};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ceea (src ,sequence ...);};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_cac *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cac .addBorderGeneral (left ,right ,top ,bot ,val );
};func (_bfd *Bitmap )CreateTemplate ()*Bitmap {return _bfd .createTemplate ()};func _cgcb (_cba ,_gfb int )int {if _cba < _gfb {return _cba ;};return _gfb ;};func (_edf *Bitmap )equivalent (_acdg *Bitmap )bool {if _edf ==_acdg {return true ;};if !_edf .SizesEqual (_acdg ){return false ;
};_fafc :=_bag (_edf ,_acdg ,CmbOpXor );_edb :=_edf .countPixels ();_gdgb :=int (0.25*float32 (_edb ));if _fafc .thresholdPixelSum (_gdgb ){return false ;};var (_agaf [9][9]int ;_cbg [18][9]int ;_fbdf [9][18]int ;_gde int ;_bed int ;);_fae :=9;_edc :=_edf .Height /_fae ;
_adad :=_edf .Width /_fae ;_fgda ,_bcf :=_edc /2,_adad /2;if _edc < _adad {_fgda =_adad /2;_bcf =_edc /2;};_abgf :=float64 (_fgda )*float64 (_bcf )*_d .Pi ;_afda :=int (float64 (_edc *_adad /2)*0.9);_bdfc :=int (float64 (_adad *_edc /2)*0.9);for _ffef :=0;
_ffef < _fae ;_ffef ++{_fce :=_adad *_ffef +_gde ;var _gfgf int ;if _ffef ==_fae -1{_gde =0;_gfgf =_edf .Width ;}else {_gfgf =_fce +_adad ;if ((_edf .Width -_gde )%_fae )> 0{_gde ++;_gfgf ++;};};for _caae :=0;_caae < _fae ;_caae ++{_ebed :=_edc *_caae +_bed ;
var _dbca int ;if _caae ==_fae -1{_bed =0;_dbca =_edf .Height ;}else {_dbca =_ebed +_edc ;if (_edf .Height -_bed )%_fae > 0{_bed ++;_dbca ++;};};var _fga ,_fab ,_bgfb ,_cfc int ;_gded :=(_fce +_gfgf )/2;_fcdg :=(_ebed +_dbca )/2;for _dded :=_fce ;_dded < _gfgf ;
_dded ++{for _affg :=_ebed ;_affg < _dbca ;_affg ++{if _fafc .GetPixel (_dded ,_affg ){if _dded < _gded {_fga ++;}else {_fab ++;};if _affg < _fcdg {_cfc ++;}else {_bgfb ++;};};};};_agaf [_ffef ][_caae ]=_fga +_fab ;_cbg [_ffef *2][_caae ]=_fga ;_cbg [_ffef *2+1][_caae ]=_fab ;
_fbdf [_ffef ][_caae *2]=_cfc ;_fbdf [_ffef ][_caae *2+1]=_bgfb ;};};for _adg :=0;_adg < _fae *2-1;_adg ++{for _cadg :=0;_cadg < (_fae -1);_cadg ++{var _adbf int ;for _egdgf :=0;_egdgf < 2;_egdgf ++{for _bbgb :=0;_bbgb < 2;_bbgb ++{_adbf +=_cbg [_adg +_egdgf ][_cadg +_bbgb ];
};};if _adbf > _bdfc {return false ;};};};for _fbaa :=0;_fbaa < (_fae -1);_fbaa ++{for _adfc :=0;_adfc < ((_fae *2)-1);_adfc ++{var _bggd int ;for _egfg :=0;_egfg < 2;_egfg ++{for _dbed :=0;_dbed < 2;_dbed ++{_bggd +=_fbdf [_fbaa +_egfg ][_adfc +_dbed ];
};};if _bggd > _afda {return false ;};};};for _gfeg :=0;_gfeg < (_fae -2);_gfeg ++{for _bbe :=0;_bbe < (_fae -2);_bbe ++{var _gaf ,_cdfc int ;for _fef :=0;_fef < 3;_fef ++{for _bdfa :=0;_bdfa < 3;_bdfa ++{if _fef ==_bdfa {_gaf +=_agaf [_gfeg +_fef ][_bbe +_bdfa ];
};if (2-_fef )==_bdfa {_cdfc +=_agaf [_gfeg +_fef ][_bbe +_bdfa ];};};};if _gaf > _bdfc ||_cdfc > _bdfc {return false ;};};};for _faa :=0;_faa < (_fae -1);_faa ++{for _bce :=0;_bce < (_fae -1);_bce ++{var _beeg int ;for _gcea :=0;_gcea < 2;_gcea ++{for _bfef :=0;
_bfef < 2;_bfef ++{_beeg +=_agaf [_faa +_gcea ][_bce +_bfef ];};};if float64 (_beeg )> _abgf {return false ;};};};return true ;};func (_fcabf *byWidth )Less (i ,j int )bool {return _fcabf .Values [i ].Width < _fcabf .Values [j ].Width };func (_bgeea *byWidth )Len ()int {return len (_bgeea .Values )};
func _adfba ()(_gbb []byte ){_gbb =make ([]byte ,256);for _bcgc :=0;_bcgc < 256;_bcgc ++{_abg :=byte (_bcgc );_gbb [_abg ]=(_abg &0x01)|((_abg &0x04)>>1)|((_abg &0x10)>>2)|((_abg &0x40)>>3)|((_abg &0x02)<<3)|((_abg &0x08)<<2)|((_abg &0x20)<<1)|(_abg &0x80);
};return _gbb ;};func (_aced *ClassedPoints )SortByY (){_aced ._gebed =_aced .ySortFunction ();_g .Sort (_aced )};func (_dccfe MorphProcess )verify (_fcee int ,_cade ,_fggbd *int )error {const _abfc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _dccfe .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_dccfe .Arguments )!=2{return _cf .Error (_abfc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_abdcf ,_bedb :=_dccfe .getWidthHeight ();if _abdcf <=0||_bedb <=0{return _cf .Error (_abfc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_gabg :=len (_dccfe .Arguments );*_cade +=_gabg ;if _gabg < 1||_gabg > 4{return _cf .Error (_abfc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _accf :=0;_accf < _gabg ;_accf ++{if _dccfe .Arguments [_accf ]< 1||_dccfe .Arguments [_accf ]> 4{return _cf .Error (_abfc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_dccfe .Arguments )==0{return _cf .Error (_abfc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gedg :=_dccfe .Arguments [0];if _gedg !=2&&_gedg !=4&&_gedg !=8{return _cf .Error (_abfc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_cade -=_gcae [_gedg /4];case MopAddBorder :if len (_dccfe .Arguments )==0{return _cf .Error (_abfc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eggf :=_dccfe .Arguments [0];if _fcee > 0{return _cf .Error (_abfc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _eggf < 1{return _cf .Error (_abfc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_fggbd =_eggf ;};return nil ;};const (Vanilla Color =iota ;
Chocolate ;);func (_cdga *Bitmap )And (s *Bitmap )(_egba *Bitmap ,_fffd error ){const _babb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _cdga ==nil {return nil ,_cf .Error (_babb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_cf .Error (_babb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_cdga .SizesEqual (s ){_ag .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_babb );
};if _egba ,_fffd =_gcg (_egba ,_cdga );_fffd !=nil {return nil ,_cf .Wrap (_fffd ,_babb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fffd =_egba .RasterOperation (0,0,_egba .Width ,_egba .Height ,PixSrcAndDst ,s ,0,0);
_fffd !=nil {return nil ,_cf .Wrap (_fffd ,_babb ,"");};return _egba ,nil ;};func NewClassedPoints (points *Points ,classes _fa .IntSlice )(*ClassedPoints ,error ){const _eedce ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_cf .Error (_eedce ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_cf .Error (_eedce ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_cdec :=&ClassedPoints {Points :points ,IntSlice :classes };if _aee :=_cdec .validateIntSlice ();_aee !=nil {return nil ,_cf .Wrap (_aee ,_eedce ,"");};return _cdec ,nil ;};func (_fea *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_fea .Width ,Height :_fea .Height ,RowStride :_fea .RowStride ,Color :_fea .Color ,Text :_fea .Text ,BitmapNumber :_fea .BitmapNumber ,Special :_fea .Special ,Data :make ([]byte ,len (_fea .Data ))};
};func (_bec *Bitmap )ClipRectangle (box *_dg .Rectangle )(_cdaea *Bitmap ,_afdd *_dg .Rectangle ,_gagb error ){const _cdgb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_cf .Error (_cdgb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_gge ,_fdcd :=_bec .Width ,_bec .Height ;_eac :=_dg .Rect (0,0,_gge ,_fdcd );if !box .Overlaps (_eac ){return nil ,nil ,_cf .Error (_cdgb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_ccadb :=box .Intersect (_eac );
_bfcb ,_age :=_ccadb .Min .X ,_ccadb .Min .Y ;_ffgf ,_fgce :=_ccadb .Dx (),_ccadb .Dy ();_cdaea =New (_ffgf ,_fgce );_cdaea .Text =_bec .Text ;if _gagb =_cdaea .RasterOperation (0,0,_ffgf ,_fgce ,PixSrc ,_bec ,_bfcb ,_age );_gagb !=nil {return nil ,nil ,_cf .Wrap (_gagb ,_cdgb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_afdd =&_ccadb ;return _cdaea ,_afdd ,nil ;};func TstESymbol (t *_fd .T ,scale ...int )*Bitmap {_ffba ,_cgfcb :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_f .NoError (t ,_cgfcb );return TstGetScaledSymbol (t ,_ffba ,scale ...);};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_eeag float64 ,_fbae error ){const _fbgg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_cf .Error (_fbgg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_cf .Error (_fbgg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_cf .Error (_fbgg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_eggc ,_cbbb :=bm1 .Width ,bm1 .Height ;_cdb ,_cfcc :=bm2 .Width ,bm2 .Height ;
_cdca :=_dccf (_eggc -_cdb );if _cdca > maxDiffW {return 0,nil ;};_ccbb :=_dccf (_cbbb -_cfcc );if _ccbb > maxDiffH {return 0,nil ;};var _gcbdb ,_edba int ;if delX >=0{_gcbdb =int (delX +0.5);}else {_gcbdb =int (delX -0.5);};if delY >=0{_edba =int (delY +0.5);
}else {_edba =int (delY -0.5);};_becb :=_dgdb (_edba ,0);_debg :=_cgcb (_cfcc +_edba ,_cbbb );_dfce :=bm1 .RowStride *_becb ;_eaeb :=bm2 .RowStride *(_becb -_edba );_ggfg :=_dgdb (_gcbdb ,0);_cfe :=_cgcb (_cdb +_gcbdb ,_eggc );_cadc :=bm2 .RowStride ;var _adc ,_abbg int ;
if _gcbdb >=8{_adc =_gcbdb >>3;_dfce +=_adc ;_ggfg -=_adc <<3;_cfe -=_adc <<3;_gcbdb &=7;}else if _gcbdb <=-8{_abbg =-((_gcbdb +7)>>3);_eaeb +=_abbg ;_cadc -=_abbg ;_gcbdb +=_abbg <<3;};if _ggfg >=_cfe ||_becb >=_debg {return 0,nil ;};_bacf :=(_cfe +7)>>3;
var (_dadg ,_gebd ,_gcag byte ;_ecda ,_geaa ,_bgfe int ;);switch {case _gcbdb ==0:for _bgfe =_becb ;_bgfe < _debg ;_bgfe ,_dfce ,_eaeb =_bgfe +1,_dfce +bm1 .RowStride ,_eaeb +bm2 .RowStride {for _geaa =0;_geaa < _bacf ;_geaa ++{_gcag =bm1 .Data [_dfce +_geaa ]&bm2 .Data [_eaeb +_geaa ];
_ecda +=tab [_gcag ];};};case _gcbdb > 0:if _cadc < _bacf {for _bgfe =_becb ;_bgfe < _debg ;_bgfe ,_dfce ,_eaeb =_bgfe +1,_dfce +bm1 .RowStride ,_eaeb +bm2 .RowStride {_dadg ,_gebd =bm1 .Data [_dfce ],bm2 .Data [_eaeb ]>>uint (_gcbdb );_gcag =_dadg &_gebd ;
_ecda +=tab [_gcag ];for _geaa =1;_geaa < _cadc ;_geaa ++{_dadg ,_gebd =bm1 .Data [_dfce +_geaa ],(bm2 .Data [_eaeb +_geaa ]>>uint (_gcbdb ))|(bm2 .Data [_eaeb +_geaa -1]<<uint (8-_gcbdb ));_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];};_dadg =bm1 .Data [_dfce +_geaa ];
_gebd =bm2 .Data [_eaeb +_geaa -1]<<uint (8-_gcbdb );_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];};}else {for _bgfe =_becb ;_bgfe < _debg ;_bgfe ,_dfce ,_eaeb =_bgfe +1,_dfce +bm1 .RowStride ,_eaeb +bm2 .RowStride {_dadg ,_gebd =bm1 .Data [_dfce ],bm2 .Data [_eaeb ]>>uint (_gcbdb );
_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];for _geaa =1;_geaa < _bacf ;_geaa ++{_dadg =bm1 .Data [_dfce +_geaa ];_gebd =(bm2 .Data [_eaeb +_geaa ]>>uint (_gcbdb ))|(bm2 .Data [_eaeb +_geaa -1]<<uint (8-_gcbdb ));_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];
};};};default:if _bacf < _cadc {for _bgfe =_becb ;_bgfe < _debg ;_bgfe ,_dfce ,_eaeb =_bgfe +1,_dfce +bm1 .RowStride ,_eaeb +bm2 .RowStride {for _geaa =0;_geaa < _bacf ;_geaa ++{_dadg =bm1 .Data [_dfce +_geaa ];_gebd =bm2 .Data [_eaeb +_geaa ]<<uint (-_gcbdb );
_gebd |=bm2 .Data [_eaeb +_geaa +1]>>uint (8+_gcbdb );_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];};};}else {for _bgfe =_becb ;_bgfe < _debg ;_bgfe ,_dfce ,_eaeb =_bgfe +1,_dfce +bm1 .RowStride ,_eaeb +bm2 .RowStride {for _geaa =0;_geaa < _bacf -1;_geaa ++{_dadg =bm1 .Data [_dfce +_geaa ];
_gebd =bm2 .Data [_eaeb +_geaa ]<<uint (-_gcbdb );_gebd |=bm2 .Data [_eaeb +_geaa +1]>>uint (8+_gcbdb );_gcag =_dadg &_gebd ;_ecda +=tab [_gcag ];};_dadg =bm1 .Data [_dfce +_geaa ];_gebd =bm2 .Data [_eaeb +_geaa ]<<uint (-_gcbdb );_gcag =_dadg &_gebd ;
_ecda +=tab [_gcag ];};};};_eeag =float64 (_ecda )*float64 (_ecda )/(float64 (area1 )*float64 (area2 ));return _eeag ,nil ;};func _agb (_de ,_aed *Bitmap )(_bcg error ){const _ebe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_af :=_aed .RowStride ;_da :=_de .RowStride ;var _dgfg ,_bcb ,_fb ,_cff ,_cdc int ;for _fb =0;_fb < _aed .Height ;_fb ++{_dgfg =_fb *_af ;_bcb =8*_fb *_da ;for _cff =0;_cff < _af ;_cff ++{if _bcg =_de .setEightBytes (_bcb +_cff *8,_fgba [_aed .Data [_dgfg +_cff ]]);
_bcg !=nil {return _cf .Wrap (_bcg ,_ebe ,"");};};for _cdc =1;_cdc < 8;_cdc ++{for _cff =0;_cff < _da ;_cff ++{if _bcg =_de .SetByte (_bcb +_cdc *_da +_cff ,_de .Data [_bcb +_cff ]);_bcg !=nil {return _cf .Wrap (_bcg ,_ebe ,"");};};};};return nil ;};func _bfc ()(_geg [256]uint32 ){for _eege :=0;
_eege < 256;_eege ++{if _eege &0x01!=0{_geg [_eege ]|=0xf;};if _eege &0x02!=0{_geg [_eege ]|=0xf0;};if _eege &0x04!=0{_geg [_eege ]|=0xf00;};if _eege &0x08!=0{_geg [_eege ]|=0xf000;};if _eege &0x10!=0{_geg [_eege ]|=0xf0000;};if _eege &0x20!=0{_geg [_eege ]|=0xf00000;
};if _eege &0x40!=0{_geg [_eege ]|=0xf000000;};if _eege &0x80!=0{_geg [_eege ]|=0xf0000000;};};return _geg ;};func _dgfgc (_becd uint ,_edga byte )byte {return _edga >>_becd <<_becd };func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dgad float64 ,_gcgcc error ){const _ece ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _dgad ,_cf .Error (_ece ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _dgad ,_cf .Error (_ece ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _dgad ,_cf .Error (_ece ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_aaba ,_afbd :=bm1 .Width ,bm1 .Height ;_fefe ,_ffad :=bm2 .Width ,bm2 .Height ;
if _dccf (_aaba -_fefe )> maxDiffW {return 0,nil ;};if _dccf (_afbd -_ffad )> maxDiffH {return 0,nil ;};var _gbae ,_acec int ;if delX >=0{_gbae =int (delX +0.5);}else {_gbae =int (delX -0.5);};if delY >=0{_acec =int (delY +0.5);}else {_acec =int (delY -0.5);
};_bgge :=bm1 .createTemplate ();if _gcgcc =_bgge .RasterOperation (_gbae ,_acec ,_fefe ,_ffad ,PixSrc ,bm2 ,0,0);_gcgcc !=nil {return _dgad ,_cf .Wrap (_gcgcc ,_ece ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _gcgcc =_bgge .RasterOperation (0,0,_aaba ,_afbd ,PixSrcAndDst ,bm1 ,0,0);_gcgcc !=nil {return _dgad ,_cf .Wrap (_gcgcc ,_ece ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_bebf :=_bgge .countPixels ();_dgad =float64 (_bebf )*float64 (_bebf )/(float64 (area1 )*float64 (area2 ));
return _dgad ,nil ;};func (_fdg *Bitmap )String ()string {var _ebec ="\u000a";for _aaa :=0;_aaa < _fdg .Height ;_aaa ++{var _dagb string ;for _bac :=0;_bac < _fdg .Width ;_bac ++{_dbcd :=_fdg .GetPixel (_bac ,_aaa );if _dbcd {_dagb +="\u0031";}else {_dagb +="\u0030";
};};_ebec +=_dagb +"\u000a";};return _ebec ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_cae Points )GetIntY (i int )(int ,error ){if i >=len (_cae ){return 0,_cf .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_cae [i ].Y ),nil ;};func (_gegge *Bitmap )resizeImageData (_fdab *Bitmap )error {if _fdab ==nil {return _cf .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gegge .SizesEqual (_fdab ){return nil ;};_gegge .Data =make ([]byte ,len (_fdab .Data ));_gegge .Width =_fdab .Width ;_gegge .Height =_fdab .Height ;_gegge .RowStride =_fdab .RowStride ;return nil ;};func (_eggba *ClassedPoints )Swap (i ,j int ){_eggba .IntSlice [i ],_eggba .IntSlice [j ]=_eggba .IntSlice [j ],_eggba .IntSlice [i ];
};func _cbca (_bfcba ,_dagea *Bitmap ,_cbbd ,_eaddc int )(_baee error ){const _cabbf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_cfbd ,_acfg ,_ggcd ,_ebga int ;_eedbg ,_adfa ,_gfbb ,_cfbbg ,_afga ,_fgbdg ,_fadg byte ;
);for _cfbd =0;_cfbd < _cbbd ;_cfbd ++{_ggcd =_cfbd *_bfcba .RowStride ;_ebga =_cfbd *_dagea .RowStride ;for _acfg =0;_acfg < _eaddc ;_acfg ++{_eedbg ,_baee =_bfcba .GetByte (_ggcd +_acfg );if _baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_adfa ,_baee =_dagea .GetByte (_ebga +_acfg );if _baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _cfbd > 0{_gfbb ,_baee =_bfcba .GetByte (_ggcd -_bfcba .RowStride +_acfg );if _baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0069\u0020\u003e \u0030");
};_eedbg |=_gfbb ;};if _acfg > 0{_cfbbg ,_baee =_bfcba .GetByte (_ggcd +_acfg -1);if _baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u006a\u0020\u003e \u0030");};_eedbg |=_cfbbg <<7;};_eedbg &=_adfa ;if _eedbg ==0||(^_eedbg )==0{if _baee =_bfcba .SetByte (_ggcd +_acfg ,_eedbg );
_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_fadg =_eedbg ;_eedbg =(_eedbg |(_eedbg >>1)|(_eedbg <<1))&_adfa ;if (_eedbg ^_fadg )==0{if _baee =_bfcba .SetByte (_ggcd +_acfg ,_eedbg );
_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _cfbd =_cbbd -1;_cfbd >=0;_cfbd --{_ggcd =_cfbd *_bfcba .RowStride ;_ebga =_cfbd *_dagea .RowStride ;
for _acfg =_eaddc -1;_acfg >=0;_acfg --{if _eedbg ,_baee =_bfcba .GetByte (_ggcd +_acfg );_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _adfa ,_baee =_dagea .GetByte (_ebga +_acfg );
_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _cfbd < _cbbd -1{if _afga ,_baee =_bfcba .GetByte (_ggcd +_bfcba .RowStride +_acfg );_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_eedbg |=_afga ;};if _acfg < _eaddc -1{if _fgbdg ,_baee =_bfcba .GetByte (_ggcd +_acfg +1);_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_eedbg |=_fgbdg >>7;
};_eedbg &=_adfa ;if _eedbg ==0||(^_eedbg )==0{if _baee =_bfcba .SetByte (_ggcd +_acfg ,_eedbg );_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_fadg =_eedbg ;_eedbg =(_eedbg |(_eedbg >>1)|(_eedbg <<1))&_adfa ;if (_eedbg ^_fadg )==0{if _baee =_bfcba .SetByte (_ggcd +_acfg ,_eedbg );_baee !=nil {return _cf .Wrap (_baee ,_cabbf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_baeb *Bitmap )Equals (s *Bitmap )bool {if len (_baeb .Data )!=len (s .Data )||_baeb .Width !=s .Width ||_baeb .Height !=s .Height {return false ;};for _egda :=0;_egda < _baeb .Height ;_egda ++{_accd :=_egda *_baeb .RowStride ;
for _gbg :=0;_gbg < _baeb .RowStride ;_gbg ++{if _baeb .Data [_accd +_gbg ]!=s .Data [_accd +_gbg ]{return false ;};};};return true ;};func _cgeb (_edbc *Bitmap ,_gfac ,_aceg ,_gfef ,_fafed int ,_ffce RasterOperator ,_dfbg *Bitmap ,_bgcag ,_eaed int )error {var (_aede bool ;
_fcab bool ;_eeeg int ;_cabfg int ;_gfed int ;_fbaf bool ;_dffg byte ;_debe int ;_acbd int ;_gfddb int ;_facd ,_ecad int ;);_eccg :=8-(_gfac &7);_cabg :=_fddd [_eccg ];_gdcbg :=_edbc .RowStride *_aceg +(_gfac >>3);_eaegg :=_dfbg .RowStride *_eaed +(_bgcag >>3);
if _gfef < _eccg {_aede =true ;_cabg &=_ccbfa [8-_eccg +_gfef ];};if !_aede {_eeeg =(_gfef -_eccg )>>3;if _eeeg > 0{_fcab =true ;_cabfg =_gdcbg +1;_gfed =_eaegg +1;};};_debe =(_gfac +_gfef )&7;if !(_aede ||_debe ==0){_fbaf =true ;_dffg =_ccbfa [_debe ];
_acbd =_gdcbg +1+_eeeg ;_gfddb =_eaegg +1+_eeeg ;};switch _ffce {case PixSrc :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;};
if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotSrc :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^_dfbg .Data [_eaegg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;};if _fcab {for _facd =0;
_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=^_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^_dfbg .Data [_gfddb ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixSrcOrDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ]|_edbc .Data [_gdcbg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]|=_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ]|_edbc .Data [_acbd ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixSrcAndDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ]&_edbc .Data [_gdcbg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]&=_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ]&_edbc .Data [_acbd ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixSrcXorDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ]^_edbc .Data [_gdcbg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]^=_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ]^_edbc .Data [_acbd ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotSrcOrDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^(_dfbg .Data [_eaegg ])|_edbc .Data [_gdcbg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]|=^(_dfbg .Data [_gfed +_ecad ]);};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^(_dfbg .Data [_gfddb ])|_edbc .Data [_acbd ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotSrcAndDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^(_dfbg .Data [_eaegg ])&_edbc .Data [_gdcbg ],_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]&=^_dfbg .Data [_gfed +_ecad ];};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^(_dfbg .Data [_gfddb ])&_edbc .Data [_acbd ],_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixSrcOrNotDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ]|^(_edbc .Data [_gdcbg ]),_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;
};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=_dfbg .Data [_gfed +_ecad ]|^(_edbc .Data [_cabfg +_ecad ]);};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;
_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ]|^(_edbc .Data [_acbd ]),_dffg );_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixSrcAndNotDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],_dfbg .Data [_eaegg ]&^(_edbc .Data [_gdcbg ]),_cabg );
_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=_dfbg .Data [_gfed +_ecad ]&^(_edbc .Data [_cabfg +_ecad ]);};_cabfg +=_edbc .RowStride ;
_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],_dfbg .Data [_gfddb ]&^(_edbc .Data [_acbd ]),_dffg );_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotPixSrcOrDst :for _facd =0;
_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^(_dfbg .Data [_eaegg ]|_edbc .Data [_gdcbg ]),_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;
_ecad ++{_edbc .Data [_cabfg +_ecad ]=^(_dfbg .Data [_gfed +_ecad ]|_edbc .Data [_cabfg +_ecad ]);};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^(_dfbg .Data [_gfddb ]|_edbc .Data [_acbd ]),_dffg );
_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotPixSrcAndDst :for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^(_dfbg .Data [_eaegg ]&_edbc .Data [_gdcbg ]),_cabg );_gdcbg +=_edbc .RowStride ;
_eaegg +=_dfbg .RowStride ;};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=^(_dfbg .Data [_gfed +_ecad ]&_edbc .Data [_cabfg +_ecad ]);};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;
};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^(_dfbg .Data [_gfddb ]&_edbc .Data [_acbd ]),_dffg );_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;};};case PixNotPixSrcXorDst :for _facd =0;_facd < _fafed ;
_facd ++{_edbc .Data [_gdcbg ]=_aeae (_edbc .Data [_gdcbg ],^(_dfbg .Data [_eaegg ]^_edbc .Data [_gdcbg ]),_cabg );_gdcbg +=_edbc .RowStride ;_eaegg +=_dfbg .RowStride ;};if _fcab {for _facd =0;_facd < _fafed ;_facd ++{for _ecad =0;_ecad < _eeeg ;_ecad ++{_edbc .Data [_cabfg +_ecad ]=^(_dfbg .Data [_gfed +_ecad ]^_edbc .Data [_cabfg +_ecad ]);
};_cabfg +=_edbc .RowStride ;_gfed +=_dfbg .RowStride ;};};if _fbaf {for _facd =0;_facd < _fafed ;_facd ++{_edbc .Data [_acbd ]=_aeae (_edbc .Data [_acbd ],^(_dfbg .Data [_gfddb ]^_edbc .Data [_acbd ]),_dffg );_acbd +=_edbc .RowStride ;_gfddb +=_dfbg .RowStride ;
};};default:_ag .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ffce );return _cf .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func TstNSymbol (t *_fd .T ,scale ...int )*Bitmap {_gadd ,_baacb :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_f .NoError (t ,_baacb );return TstGetScaledSymbol (t ,_gadd ,scale ...);};func TstVSymbol (t *_fd .T ,scale ...int )*Bitmap {_fdfe ,_fedb :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_f .NoError (t ,_fedb );return TstGetScaledSymbol (t ,_fdfe ,scale ...);};func _bag (_defd ,_dada *Bitmap ,_fgee CombinationOperator )*Bitmap {_cccb :=New (_defd .Width ,_defd .Height );for _ccde :=0;_ccde < len (_cccb .Data );_ccde ++{_cccb .Data [_ccde ]=_bffb (_defd .Data [_ccde ],_dada .Data [_ccde ],_fgee );
};return _cccb ;};func _dbe (_ebd ,_ccd *Bitmap ,_ebf int ,_gfc []byte ,_aaf int )(_bfce error ){const _bbcg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_acc ,_cabc ,_dbb ,_eef ,_gdc ,_efa ,_fbd ,_bea int ;
_gga ,_cdf ,_cda ,_acf uint32 ;_efc ,_ddc byte ;_adfb uint16 ;);_dde :=make ([]byte ,4);_dgg :=make ([]byte ,4);for _dbb =0;_dbb < _ebd .Height -1;_dbb ,_eef =_dbb +2,_eef +1{_acc =_dbb *_ebd .RowStride ;_cabc =_eef *_ccd .RowStride ;for _gdc ,_efa =0,0;
_gdc < _aaf ;_gdc ,_efa =_gdc +4,_efa +1{for _fbd =0;_fbd < 4;_fbd ++{_bea =_acc +_gdc +_fbd ;if _bea <=len (_ebd .Data )-1&&_bea < _acc +_ebd .RowStride {_dde [_fbd ]=_ebd .Data [_bea ];}else {_dde [_fbd ]=0x00;};_bea =_acc +_ebd .RowStride +_gdc +_fbd ;
if _bea <=len (_ebd .Data )-1&&_bea < _acc +(2*_ebd .RowStride ){_dgg [_fbd ]=_ebd .Data [_bea ];}else {_dgg [_fbd ]=0x00;};};_gga =_cd .BigEndian .Uint32 (_dde );_cdf =_cd .BigEndian .Uint32 (_dgg );_cda =_gga &_cdf ;_cda |=_cda <<1;_acf =_gga |_cdf ;
_acf &=_acf <<1;_cdf =_cda |_acf ;_cdf &=0xaaaaaaaa;_gga =_cdf |(_cdf <<7);_efc =byte (_gga >>24);_ddc =byte ((_gga >>8)&0xff);_bea =_cabc +_efa ;if _bea +1==len (_ccd .Data )-1||_bea +1>=_cabc +_ccd .RowStride {if _bfce =_ccd .SetByte (_bea ,_gfc [_efc ]);
_bfce !=nil {return _cf .Wrapf (_bfce ,_bbcg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bea );};}else {_adfb =(uint16 (_gfc [_efc ])<<8)|uint16 (_gfc [_ddc ]);if _bfce =_ccd .setTwoBytes (_bea ,_adfb );_bfce !=nil {return _cf .Wrapf (_bfce ,_bbcg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bea );
};_efa ++;};};};return nil ;};func MakePixelSumTab8 ()[]int {return _fbe ()};func (_daacg *ClassedPoints )YAtIndex (i int )float32 {return (*_daacg .Points )[_daacg .IntSlice [i ]].Y };type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;
};func (_afae Points )YSorter ()func (_cgcc ,_fgggd int )bool {return func (_adgf ,_gdcb int )bool {return _afae [_adgf ].Y < _afae [_gdcb ].Y };};func _aad (_bee *Bitmap ,_gg ...int )(_dff *Bitmap ,_fee error ){const _dab ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _bee ==nil {return nil ,_cf .Error (_dab ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_gg )==0||len (_gg )> 4{return nil ,_cf .Error (_dab ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _gg [0]<=0{_ag .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dff ,_fee =_gcg (nil ,_bee );if _fee !=nil {return nil ,_cf .Wrap (_fee ,_dab ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _dff ,nil ;};_bdb :=_adfba ();_dff =_bee ;for _ceg ,_ccc :=range _gg {if _ccc <=0{break ;};_dff ,_fee =_cec (_dff ,_ccc ,_bdb );if _fee !=nil {return nil ,_cf .Wrapf (_fee ,_dab ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ceg );
};};return _dff ,nil ;};func _fcd (_dd *Bitmap ,_fda *Bitmap ,_agc int )(_cca error ){const _ab ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _agc {case 2:_cca =_fe (_dd ,_fda );case 4:_cca =_ceb (_dd ,_fda );
case 8:_cca =_agb (_dd ,_fda );default:return _cf .Error (_ab ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _cca !=nil {_cca =_cf .Wrap (_cca ,_ab ,"");};return _cca ;};type shift int ;func (_eecab *BitmapsArray )GetBox (i int )(*_dg .Rectangle ,error ){const _edbab ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _eecab ==nil {return nil ,_cf .Error (_edbab ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eecab .Boxes )-1{return nil ,_cf .Errorf (_edbab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _eecab .Boxes [i ],nil ;};func (_bgfc *Boxes )selectWithIndicator (_dagbf *_fa .NumSlice )(_gfgca *Boxes ,_dca error ){const _gfeb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bgfc ==nil {return nil ,_cf .Error (_gfeb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _dagbf ==nil {return nil ,_cf .Error (_gfeb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_dagbf )!=len (*_bgfc ){return nil ,_cf .Error (_gfeb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _afca ,_cffc int ;for _dgc :=0;_dgc < len (*_dagbf );_dgc ++{if _afca ,_dca =_dagbf .GetInt (_dgc );_dca !=nil {return nil ,_cf .Wrap (_dca ,_gfeb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _afca ==1{_cffc ++;
};};if _cffc ==len (*_bgfc ){return _bgfc ,nil ;};_ecg :=Boxes {};for _fcc :=0;_fcc < len (*_dagbf );_fcc ++{_afca =int ((*_dagbf )[_fcc ]);if _afca ==0{continue ;};_ecg =append (_ecg ,(*_bgfc )[_fcc ]);};_gfgca =&_ecg ;return _gfgca ,nil ;};func (_dead *ClassedPoints )XAtIndex (i int )float32 {return (*_dead .Points )[_dead .IntSlice [i ]].X };
func _bcfb (_dcgfd *_fa .Stack ,_dfgf ,_agfc ,_dbba ,_fffc ,_ecaf int ,_ggee *_dg .Rectangle )(_addg error ){const _efadc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _dcgfd ==nil {return _cf .Error (_efadc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _ggee ==nil {return _cf .Error (_efadc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_ggee .Min .X =_fa .Min (_ggee .Min .X ,_dfgf );_ggee .Max .X =_fa .Max (_ggee .Max .X ,_agfc );_ggee .Min .Y =_fa .Min (_ggee .Min .Y ,_dbba );_ggee .Max .Y =_fa .Max (_ggee .Max .Y ,_dbba );if !(_dbba +_fffc >=0&&_dbba +_fffc <=_ecaf ){return nil ;
};if _dcgfd .Aux ==nil {return _cf .Error (_efadc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _adecd *fillSegment ;_fbaed ,_gada :=_dcgfd .Aux .Pop ();if _gada {if _adecd ,_gada =_fbaed .(*fillSegment );
!_gada {return _cf .Error (_efadc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_adecd =&fillSegment {};
};_adecd ._beedb =_dfgf ;_adecd ._fdeaf =_agfc ;_adecd ._eagfg =_dbba ;_adecd ._begcc =_fffc ;_dcgfd .Push (_adecd );return nil ;};func ClipBoxToRectangle (box *_dg .Rectangle ,wi ,hi int )(_ecd *_dg .Rectangle ,_gaac error ){const _bgb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_cf .Error (_bgb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_cf .Error (_bgb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_abdc :=*box ;_ecd =&_abdc ;if _ecd .Min .X < 0{_ecd .Max .X +=_ecd .Min .X ;_ecd .Min .X =0;};if _ecd .Min .Y < 0{_ecd .Max .Y +=_ecd .Min .Y ;_ecd .Min .Y =0;};if _ecd .Max .X > wi {_ecd .Max .X =wi ;};if _ecd .Max .Y > hi {_ecd .Max .Y =hi ;};return _ecd ,nil ;
};func (_fge *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fge .removeBorderGeneral (left ,right ,top ,bot );};type RasterOperator int ;func (_baac *Bitmap )countPixels ()int {var (_accb int ;_deb uint8 ;_gabf byte ;
_gcad int ;);_eefc :=_baac .RowStride ;_cbf :=uint (_baac .Width &0x07);if _cbf !=0{_deb =uint8 ((0xff<<(8-_cbf ))&0xff);_eefc --;};for _bfgfg :=0;_bfgfg < _baac .Height ;_bfgfg ++{for _gcad =0;_gcad < _eefc ;_gcad ++{_gabf =_baac .Data [_bfgfg *_baac .RowStride +_gcad ];
_accb +=int (_dcdd [_gabf ]);};if _cbf !=0{_accb +=int (_dcdd [_baac .Data [_bfgfg *_baac .RowStride +_gcad ]&_deb ]);};};return _accb ;};func (_cdbb *Points )Add (pt *Points )error {const _cbcc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _cdbb ==nil {return _cf .Error (_cbcc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _cf .Error (_cbcc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_cdbb =append (*_cdbb ,*pt ...);return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _dgdb (_bfb ,_dgbd int )int {if _bfb > _dgbd {return _bfb ;};return _dgbd ;};func TstPSymbol (t *_fd .T )*Bitmap {t .Helper ();
_efdf :=New (5,8);_f .NoError (t ,_efdf .SetPixel (0,0,1));_f .NoError (t ,_efdf .SetPixel (1,0,1));_f .NoError (t ,_efdf .SetPixel (2,0,1));_f .NoError (t ,_efdf .SetPixel (3,0,1));_f .NoError (t ,_efdf .SetPixel (4,1,1));_f .NoError (t ,_efdf .SetPixel (0,1,1));
_f .NoError (t ,_efdf .SetPixel (4,2,1));_f .NoError (t ,_efdf .SetPixel (0,2,1));_f .NoError (t ,_efdf .SetPixel (4,3,1));_f .NoError (t ,_efdf .SetPixel (0,3,1));_f .NoError (t ,_efdf .SetPixel (0,4,1));_f .NoError (t ,_efdf .SetPixel (1,4,1));_f .NoError (t ,_efdf .SetPixel (2,4,1));
_f .NoError (t ,_efdf .SetPixel (3,4,1));_f .NoError (t ,_efdf .SetPixel (0,5,1));_f .NoError (t ,_efdf .SetPixel (0,6,1));_f .NoError (t ,_efdf .SetPixel (0,7,1));return _efdf ;};func _aacgb (_dcaf ,_ecdc ,_ggad *Bitmap ,_agfa int )(*Bitmap ,error ){const _gfaa ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _ecdc ==nil {return nil ,_cf .Error (_gfaa ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggad ==nil {return nil ,_cf .Error (_gfaa ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _agfa !=4&&_agfa !=8{return nil ,_cf .Error (_gfaa ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _bbga error ;_dcaf ,_bbga =_gcg (_dcaf ,_ecdc );
if _bbga !=nil {return nil ,_cf .Wrap (_bbga ,_gfaa ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_aadf :=_ecdc .createTemplate ();_ggad .setPadBits (0);for _ddbe :=0;_ddbe < _abgde ;_ddbe ++{_aadf ,_bbga =_gcg (_aadf ,_dcaf );
if _bbga !=nil {return nil ,_cf .Wrapf (_bbga ,_gfaa ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ddbe );};if _bbga =_dbgae (_dcaf ,_ggad ,_agfa );_bbga !=nil {return nil ,_cf .Wrapf (_bbga ,_gfaa ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ddbe );
};if _aadf .Equals (_dcaf ){break ;};};return _dcaf ,nil ;};func _cdad (_ffgcd *Bitmap ,_ccda ,_ceeg ,_eeb ,_afgg int ,_abfb RasterOperator ,_gedb *Bitmap ,_bcbf ,_cbdaa int )error {const _bcgd ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _ffgcd ==nil {return _cf .Error (_bcgd ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _abfb ==PixDst {return nil ;};switch _abfb {case PixClr ,PixSet ,PixNotDst :_ceedb (_ffgcd ,_ccda ,_ceeg ,_eeb ,_afgg ,_abfb );
return nil ;};if _gedb ==nil {_ag .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _cf .Error (_bcgd ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dcgfg :=_abgc (_ffgcd ,_ccda ,_ceeg ,_eeb ,_afgg ,_abfb ,_gedb ,_bcbf ,_cbdaa );_dcgfg !=nil {return _cf .Wrap (_dcgfg ,_bcgd ,"");
};return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_eaef :=make ([]Point ,len (bms ));_bdbd :=_cbdae ();_bfbc :=_fbe ();var _fagga error ;for _abbaa ,_fffdg :=range bms {_eaef [_abbaa ],_fagga =_fffdg .centroid (_bdbd ,_bfbc );if _fagga !=nil {return nil ,_fagga ;
};};_gagg :=Points (_eaef );return &_gagg ,nil ;};type SizeComparison int ;var _edda =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _bbfgg (_afcf *Bitmap ,_ffgg *Bitmap ,_gecb *Selection ,_aeaf **Bitmap )(*Bitmap ,error ){const _eaggg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _ffgg ==nil {return nil ,_cf .Error (_eaggg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _gecb ==nil {return nil ,_cf .Error (_eaggg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_eaecg ,_aaeb :=_gecb .Height ,_gecb .Width ;if _eaecg ==0||_aaeb ==0{return nil ,_cf .Error (_eaggg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _afcf ==nil {_afcf =_ffgg .createTemplate ();*_aeaf =_ffgg ;return _afcf ,nil ;};_afcf .Width =_ffgg .Width ;_afcf .Height =_ffgg .Height ;_afcf .RowStride =_ffgg .RowStride ;_afcf .Color =_ffgg .Color ;_afcf .Data =make ([]byte ,_ffgg .RowStride *_ffgg .Height );
if _afcf ==_ffgg {*_aeaf =_ffgg .Copy ();}else {*_aeaf =_ffgg ;};return _afcf ,nil ;};func TstWSymbol (t *_fd .T ,scale ...int )*Bitmap {_fdcf ,_dfgcf :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_dfgcf );return TstGetScaledSymbol (t ,_fdcf ,scale ...);
};func (_cgcfc Points )XSorter ()func (_gdcd ,_cdfce int )bool {return func (_fgeea ,_cgbe int )bool {return _cgcfc [_fgeea ].X < _cgcfc [_cgbe ].X };};func (_agda *ClassedPoints )ySortFunction ()func (_aggc int ,_aggd int )bool {return func (_ggfe ,_gaaa int )bool {return _agda .YAtIndex (_ggfe )< _agda .YAtIndex (_gaaa )};
};func _gae (_ace ,_baa *Bitmap ,_dbbb int ,_ea []byte ,_cag int )(_gbc error ){const _fgbf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_ada ,_dfa ,_efca ,_bff ,_beb ,_gdd ,_bbf ,_gefe int ;
_bcga ,_fbf ,_gag ,_bef uint32 ;_gfd ,_cfd byte ;_cge uint16 ;);_gfgc :=make ([]byte ,4);_dbc :=make ([]byte ,4);for _efca =0;_efca < _ace .Height -1;_efca ,_bff =_efca +2,_bff +1{_ada =_efca *_ace .RowStride ;_dfa =_bff *_baa .RowStride ;for _beb ,_gdd =0,0;
_beb < _cag ;_beb ,_gdd =_beb +4,_gdd +1{for _bbf =0;_bbf < 4;_bbf ++{_gefe =_ada +_beb +_bbf ;if _gefe <=len (_ace .Data )-1&&_gefe < _ada +_ace .RowStride {_gfgc [_bbf ]=_ace .Data [_gefe ];}else {_gfgc [_bbf ]=0x00;};_gefe =_ada +_ace .RowStride +_beb +_bbf ;
if _gefe <=len (_ace .Data )-1&&_gefe < _ada +(2*_ace .RowStride ){_dbc [_bbf ]=_ace .Data [_gefe ];}else {_dbc [_bbf ]=0x00;};};_bcga =_cd .BigEndian .Uint32 (_gfgc );_fbf =_cd .BigEndian .Uint32 (_dbc );_gag =_bcga &_fbf ;_gag |=_gag <<1;_bef =_bcga |_fbf ;
_bef &=_bef <<1;_fbf =_gag &_bef ;_fbf &=0xaaaaaaaa;_bcga =_fbf |(_fbf <<7);_gfd =byte (_bcga >>24);_cfd =byte ((_bcga >>8)&0xff);_gefe =_dfa +_gdd ;if _gefe +1==len (_baa .Data )-1||_gefe +1>=_dfa +_baa .RowStride {if _gbc =_baa .SetByte (_gefe ,_ea [_gfd ]);
_gbc !=nil {return _cf .Wrapf (_gbc ,_fgbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gefe );};}else {_cge =(uint16 (_ea [_gfd ])<<8)|uint16 (_ea [_cfd ]);if _gbc =_baa .setTwoBytes (_gefe ,_cge );_gbc !=nil {return _cf .Wrapf (_gbc ,_fgbf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gefe );
};_gdd ++;};};};return nil ;};func (_fgg *Bitmap )GetByteIndex (x ,y int )int {return y *_fgg .RowStride +(x >>3)};type MorphOperation int ;func (_fecc *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _aggg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _fecc ==nil {return nil ,_cf .Error (_aggg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fecc .Values )-1{return nil ,_cf .Errorf (_aggg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fecc .Values [i ],nil ;};func (_edgb *Bitmaps )GetBox (i int )(*_dg .Rectangle ,error ){const _eebe ="\u0047\u0065\u0074\u0042\u006f\u0078";if _edgb ==nil {return nil ,_cf .Error (_eebe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_edgb .Boxes )-1{return nil ,_cf .Errorf (_eebe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _edgb .Boxes [i ],nil ;};func _bcc (_gdac *Bitmap ,_fedg *Bitmap ,_fadf *Selection )(*Bitmap ,error ){var (_debb *Bitmap ;
_ebcfe error ;);_gdac ,_ebcfe =_bbfgg (_gdac ,_fedg ,_fadf ,&_debb );if _ebcfe !=nil {return nil ,_ebcfe ;};if _ebcfe =_gdac .clearAll ();_ebcfe !=nil {return nil ,_ebcfe ;};var _cfff SelectionValue ;for _baagf :=0;_baagf < _fadf .Height ;_baagf ++{for _cgdc :=0;
_cgdc < _fadf .Width ;_cgdc ++{_cfff =_fadf .Data [_baagf ][_cgdc ];if _cfff ==SelHit {if _ebcfe =_gdac .RasterOperation (_cgdc -_fadf .Cx ,_baagf -_fadf .Cy ,_fedg .Width ,_fedg .Height ,PixSrcOrDst ,_debb ,0,0);_ebcfe !=nil {return nil ,_ebcfe ;};};};
};return _gdac ,nil ;};func (_bdef *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dgag ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_bdef .IntSlice .Size (){return 0,_cf .Errorf (_dgag ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_bdef .XAtIndex (i )),nil ;};func _agge (_gecgc *Bitmap ,_ccf *_fa .Stack ,_begc ,_egegd int )(_gfbc *_dg .Rectangle ,_dedg error ){const _geffg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _gecgc ==nil {return nil ,_cf .Error (_geffg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _ccf ==nil {return nil ,_cf .Error (_geffg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_gaec ,_adee :=_gecgc .Width ,_gecgc .Height ;_eccb :=_gaec -1;_eccc :=_adee -1;if _begc < 0||_begc > _eccb ||_egegd < 0||_egegd > _eccc ||!_gecgc .GetPixel (_begc ,_egegd ){return nil ,nil ;
};var _cfae *_dg .Rectangle ;_cfae ,_dedg =Rect (100000,100000,0,0);if _dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"");};if _dedg =_bcfb (_ccf ,_begc ,_begc ,_egegd ,1,_eccc ,_cfae );_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _dedg =_bcfb (_ccf ,_begc ,_begc ,_egegd +1,-1,_eccc ,_cfae );_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cfae .Min .X ,_cfae .Max .X =_begc ,_begc ;
_cfae .Min .Y ,_cfae .Max .Y =_egegd ,_egegd ;var (_fabgd *fillSegment ;_fggc int ;);for _ccf .Len ()> 0{if _fabgd ,_dedg =_acdfa (_ccf );_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"");};_egegd =_fabgd ._eagfg ;for _begc =_fabgd ._beedb ;_begc >=0&&_gecgc .GetPixel (_begc ,_egegd );
_begc --{if _dedg =_gecgc .SetPixel (_begc ,_egegd ,0);_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"");};};if _begc >=_fabgd ._beedb {for _begc ++;_begc <=_fabgd ._fdeaf &&_begc <=_eccb &&!_gecgc .GetPixel (_begc ,_egegd );_begc ++{};_fggc =_begc ;
if !(_begc <=_fabgd ._fdeaf &&_begc <=_eccb ){continue ;};}else {_fggc =_begc +1;if _fggc < _fabgd ._beedb -1{if _dedg =_bcfb (_ccf ,_fggc ,_fabgd ._beedb -1,_fabgd ._eagfg ,-_fabgd ._begcc ,_eccc ,_cfae );_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_begc =_fabgd ._beedb +1;};for {for ;_begc <=_eccb &&_gecgc .GetPixel (_begc ,_egegd );_begc ++{if _dedg =_gecgc .SetPixel (_begc ,_egegd ,0);_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dedg =_bcfb (_ccf ,_fggc ,_begc -1,_fabgd ._eagfg ,_fabgd ._begcc ,_eccc ,_cfae );
_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _begc > _fabgd ._fdeaf +1{if _dedg =_bcfb (_ccf ,_fabgd ._fdeaf +1,_begc -1,_fabgd ._eagfg ,-_fabgd ._begcc ,_eccc ,_cfae );_dedg !=nil {return nil ,_cf .Wrap (_dedg ,_geffg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _begc ++;_begc <=_fabgd ._fdeaf &&_begc <=_eccb &&!_gecgc .GetPixel (_begc ,_egegd );_begc ++{};_fggc =_begc ;if !(_begc <=_fabgd ._fdeaf &&_begc <=_eccb ){break ;};};};_cfae .Max .X ++;_cfae .Max .Y ++;return _cfae ,nil ;};func TstAddSymbol (t *_fd .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_bfcc :=_dg .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_bfcc );*x +=sym .Width +space ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_dg .Rectangle ;};func _ged ()(_gb [256]uint64 ){for _dcd :=0;_dcd < 256;_dcd ++{if _dcd &0x01!=0{_gb [_dcd ]|=0xff;
};if _dcd &0x02!=0{_gb [_dcd ]|=0xff00;};if _dcd &0x04!=0{_gb [_dcd ]|=0xff0000;};if _dcd &0x08!=0{_gb [_dcd ]|=0xff000000;};if _dcd &0x10!=0{_gb [_dcd ]|=0xff00000000;};if _dcd &0x20!=0{_gb [_dcd ]|=0xff0000000000;};if _dcd &0x40!=0{_gb [_dcd ]|=0xff000000000000;
};if _dcd &0x80!=0{_gb [_dcd ]|=0xff00000000000000;};};return _gb ;};type Component int ;func _cea (_agf ,_fcb *Bitmap ,_cdg int ,_ceag []byte ,_ef int )(_bca error ){const _dge ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_bfge ,_bfgf ,_ec ,_agcd ,_gee ,_ecc ,_bae ,_dcc int ;_fff ,_cgae uint32 ;_gef ,_adf byte ;_gab uint16 ;);_fba :=make ([]byte ,4);_dec :=make ([]byte ,4);for _ec =0;_ec < _agf .Height -1;_ec ,_agcd =_ec +2,_agcd +1{_bfge =_ec *_agf .RowStride ;_bfgf =_agcd *_fcb .RowStride ;
for _gee ,_ecc =0,0;_gee < _ef ;_gee ,_ecc =_gee +4,_ecc +1{for _bae =0;_bae < 4;_bae ++{_dcc =_bfge +_gee +_bae ;if _dcc <=len (_agf .Data )-1&&_dcc < _bfge +_agf .RowStride {_fba [_bae ]=_agf .Data [_dcc ];}else {_fba [_bae ]=0x00;};_dcc =_bfge +_agf .RowStride +_gee +_bae ;
if _dcc <=len (_agf .Data )-1&&_dcc < _bfge +(2*_agf .RowStride ){_dec [_bae ]=_agf .Data [_dcc ];}else {_dec [_bae ]=0x00;};};_fff =_cd .BigEndian .Uint32 (_fba );_cgae =_cd .BigEndian .Uint32 (_dec );_cgae |=_fff ;_cgae |=_cgae <<1;_cgae &=0xaaaaaaaa;
_fff =_cgae |(_cgae <<7);_gef =byte (_fff >>24);_adf =byte ((_fff >>8)&0xff);_dcc =_bfgf +_ecc ;if _dcc +1==len (_fcb .Data )-1||_dcc +1>=_bfgf +_fcb .RowStride {_fcb .Data [_dcc ]=_ceag [_gef ];}else {_gab =(uint16 (_ceag [_gef ])<<8)|uint16 (_ceag [_adf ]);
if _bca =_fcb .setTwoBytes (_dcc ,_gab );_bca !=nil {return _cf .Wrapf (_bca ,_dge ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dcc );
};_ecc ++;};};};return nil ;};func (_fagc Points )GetIntX (i int )(int ,error ){if i >=len (_fagc ){return 0,_cf .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fagc [i ].X ),nil ;};func _ceea (_aea *Bitmap ,_fcg ...MorphProcess )(_cbbc *Bitmap ,_bfae error ){const _bgbd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _aea ==nil {return nil ,_cf .Error (_bgbd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fcg )==0{return nil ,_cf .Error (_bgbd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bfae =_baedd (_fcg ...);
_bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};var _affga ,_afcc ,_gbce int ;_cbbc =_aea .Copy ();for _ ,_ebcb :=range _fcg {switch _ebcb .Operation {case MopDilation :_affga ,_afcc =_ebcb .getWidthHeight ();_cbbc ,_bfae =DilateBrick (nil ,_cbbc ,_affga ,_afcc );
if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};case MopErosion :_affga ,_afcc =_ebcb .getWidthHeight ();_cbbc ,_bfae =_eeed (nil ,_cbbc ,_affga ,_afcc );if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};case MopOpening :_affga ,_afcc =_ebcb .getWidthHeight ();
_cbbc ,_bfae =_acbg (nil ,_cbbc ,_affga ,_afcc );if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};case MopClosing :_affga ,_afcc =_ebcb .getWidthHeight ();_cbbc ,_bfae =_acbf (nil ,_cbbc ,_affga ,_afcc );if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");
};case MopRankBinaryReduction :_cbbc ,_bfae =_aad (_cbbc ,_ebcb .Arguments ...);if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};case MopReplicativeBinaryExpansion :_cbbc ,_bfae =_aeda (_cbbc ,_ebcb .Arguments [0]);if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");
};case MopAddBorder :_gbce =_ebcb .Arguments [0];_cbbc ,_bfae =_cbbc .AddBorder (_gbce ,0);if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"");};default:return nil ,_cf .Error (_bgbd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _gbce > 0{_cbbc ,_bfae =_cbbc .RemoveBorder (_gbce );if _bfae !=nil {return nil ,_cf .Wrap (_bfae ,_bgbd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cbbc ,nil ;};func (_gfcg *Bitmaps )SortByHeight (){_dffb :=(*byHeight )(_gfcg );
_g .Sort (_dffb )};func (_cbfe *byHeight )Swap (i ,j int ){_cbfe .Values [i ],_cbfe .Values [j ]=_cbfe .Values [j ],_cbfe .Values [i ];if _cbfe .Boxes !=nil {_cbfe .Boxes [i ],_cbfe .Boxes [j ]=_cbfe .Boxes [j ],_cbfe .Boxes [i ];};};func (_gbag *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_afec *Bitmaps ,_cgbg error ){const _adda ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _gbag ==nil {return nil ,_cf .Error (_adda ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cf .Errorf (_adda ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_cf .Errorf (_adda ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_bege ,_cgbg :=_gbag .makeSizeIndicator (width ,height ,tp ,relation );if _cgbg !=nil {return nil ,_cf .Wrap (_cgbg ,_adda ,"");};_afec ,_cgbg =_gbag .selectByIndicator (_bege );if _cgbg !=nil {return nil ,_cf .Wrap (_cgbg ,_adda ,"");};return _afec ,nil ;
};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _eedd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cafb ,_aacg :=p1 .Width ,p1 .Height ;_cada ,_addc :=p3 .Width ,p3 .Height ;if _fa .Abs (_cafb -_cada )> maxDiffW {return false ,nil ;
};if _fa .Abs (_aacg -_addc )> maxDiffH {return false ,nil ;};_ggedd :=int (delX +_fa .Sign (delX )*0.5);_bedd :=int (delY +_fa .Sign (delY )*0.5);var _eeca error ;_cecb :=p1 .CreateTemplate ();if _eeca =_cecb .RasterOperation (0,0,_cafb ,_aacg ,PixSrc ,p1 ,0,0);
_eeca !=nil {return false ,_cf .Wrap (_eeca ,_eedd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eeca =_cecb .RasterOperation (_ggedd ,_bedd ,_cafb ,_aacg ,PixNotSrcAndDst ,p4 ,0,0);_eeca !=nil {return false ,_cf .Wrap (_eeca ,_eedd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _cecb .Zero (){return false ,nil ;};if _eeca =_cecb .RasterOperation (_ggedd ,_bedd ,_cada ,_addc ,PixSrc ,p3 ,0,0);_eeca !=nil {return false ,_cf .Wrap (_eeca ,_eedd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eeca =_cecb .RasterOperation (0,0,_cada ,_addc ,PixNotSrcAndDst ,p2 ,0,0);
_eeca !=nil {return false ,_cf .Wrap (_eeca ,_eedd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cecb .Zero (),nil ;};func _fbe ()[]int {_cdaf :=make ([]int ,256);for _ebedb :=0;_ebedb <=0xff;_ebedb ++{_daag :=byte (_ebedb );_cdaf [_daag ]=int (_daag &0x1)+(int (_daag >>1)&0x1)+(int (_daag >>2)&0x1)+(int (_daag >>3)&0x1)+(int (_daag >>4)&0x1)+(int (_daag >>5)&0x1)+(int (_daag >>6)&0x1)+(int (_daag >>7)&0x1);
};return _cdaf ;};var (_gecbb *Bitmap ;_cdfb *Bitmap ;);func (_caa *Bitmap )SetByte (index int ,v byte )error {if index > len (_caa .Data )-1||index < 0{return _cf .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_caa .Data [index ]=v ;return nil ;};func _caaed (_ecadg *Bitmap ,_gbbbg ,_efcec int ,_edgc ,_dgcf int ,_abfcb RasterOperator ){var (_eecf int ;_bccg byte ;_bdgc ,_eff int ;_bfff int ;);_efcaf :=_edgc >>3;_eadd :=_edgc &7;if _eadd > 0{_bccg =_ccbfa [_eadd ];
};_eecf =_ecadg .RowStride *_efcec +(_gbbbg >>3);switch _abfcb {case PixClr :for _bdgc =0;_bdgc < _dgcf ;_bdgc ++{_bfff =_eecf +_bdgc *_ecadg .RowStride ;for _eff =0;_eff < _efcaf ;_eff ++{_ecadg .Data [_bfff ]=0x0;_bfff ++;};if _eadd > 0{_ecadg .Data [_bfff ]=_aeae (_ecadg .Data [_bfff ],0x0,_bccg );
};};case PixSet :for _bdgc =0;_bdgc < _dgcf ;_bdgc ++{_bfff =_eecf +_bdgc *_ecadg .RowStride ;for _eff =0;_eff < _efcaf ;_eff ++{_ecadg .Data [_bfff ]=0xff;_bfff ++;};if _eadd > 0{_ecadg .Data [_bfff ]=_aeae (_ecadg .Data [_bfff ],0xff,_bccg );};};case PixNotDst :for _bdgc =0;
_bdgc < _dgcf ;_bdgc ++{_bfff =_eecf +_bdgc *_ecadg .RowStride ;for _eff =0;_eff < _efcaf ;_eff ++{_ecadg .Data [_bfff ]=^_ecadg .Data [_bfff ];_bfff ++;};if _eadd > 0{_ecadg .Data [_bfff ]=_aeae (_ecadg .Data [_bfff ],^_ecadg .Data [_bfff ],_bccg );};
};};};func (_faaag *Points )AddPoint (x ,y float32 ){*_faaag =append (*_faaag ,Point {x ,y })};func (_ade *Bitmap )GetBitOffset (x int )int {return x &0x07};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gbeg (d ,s ,hSize ,vSize )};
type ClassedPoints struct{*Points ;_fa .IntSlice ;_gebed func (_ggb ,_bfefg int )bool ;};func _dccf (_ecce int )int {if _ecce < 0{return -_ecce ;};return _ecce ;};type SelectionValue int ;func _gebe (_gabed ,_fcda *Bitmap ,_bafe *Selection )(*Bitmap ,error ){const _dcgf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _cdcac ,_affcf int ;if _fcda ==nil {return nil ,_cf .Error (_dcgf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bafe ==nil {return nil ,_cf .Error (_dcgf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cdcac =_bafe .Width ;_affcf =_bafe .Height ;if _cdcac ==0||_affcf ==0{return nil ,_cf .Error (_dcgf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _gabed ==nil {return _fcda .createTemplate (),nil ;};if _ebecg :=_gabed .resizeImageData (_fcda );
_ebecg !=nil {return nil ,_ebecg ;};return _gabed ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func _cec (_bge *Bitmap ,_gad int ,_dfg []byte )(_db *Bitmap ,_dage error ){const _bab ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _bge ==nil {return nil ,_cf .Error (_bab ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gad < 1||_gad > 4{return nil ,_cf .Error (_bab ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bge .Height <=1{return nil ,_cf .Errorf (_bab ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bge .Height );
};_db =New (_bge .Width /2,_bge .Height /2);if _dfg ==nil {_dfg =_adfba ();};_ddb :=_cgcb (_bge .RowStride ,2*_db .RowStride );switch _gad {case 1:_dage =_cea (_bge ,_db ,_gad ,_dfg ,_ddb );case 2:_dage =_dbe (_bge ,_db ,_gad ,_dfg ,_ddb );case 3:_dage =_gae (_bge ,_db ,_gad ,_dfg ,_ddb );
case 4:_dage =_eag (_bge ,_db ,_gad ,_dfg ,_ddb );};if _dage !=nil {return nil ,_dage ;};return _db ,nil ;};func (_dfef *Bitmaps )CountPixels ()*_fa .NumSlice {_bgag :=&_fa .NumSlice {};for _ ,_bggc :=range _dfef .Values {_bgag .AddInt (_bggc .CountPixels ());
};return _bgag ;};func (_cecg *Bitmaps )SortByWidth (){_eeega :=(*byWidth )(_cecg );_g .Sort (_eeega )};func _cfg (_cbgb ,_fead *Bitmap ,_decb ,_cgda ,_baf uint ,_cbfd ,_dbfc int ,_cgf bool ,_edaf ,_cfbeb int )error {for _feedcb :=_cbfd ;_feedcb < _dbfc ;
_feedcb ++{if _edaf +1< len (_cbgb .Data ){_bdcb :=_feedcb +1==_dbfc ;_ggc ,_aab :=_cbgb .GetByte (_edaf );if _aab !=nil {return _aab ;};_edaf ++;_ggc <<=_decb ;_gfbg ,_aab :=_cbgb .GetByte (_edaf );if _aab !=nil {return _aab ;};_gfbg >>=_cgda ;_gcec :=_ggc |_gfbg ;
if _bdcb &&!_cgf {_gcec =_dgfgc (_baf ,_gcec );};_aab =_fead .SetByte (_cfbeb ,_gcec );if _aab !=nil {return _aab ;};_cfbeb ++;if _bdcb &&_cgf {_dfc ,_ddbg :=_cbgb .GetByte (_edaf );if _ddbg !=nil {return _ddbg ;};_dfc <<=_decb ;_gcec =_dgfgc (_baf ,_dfc );
if _ddbg =_fead .SetByte (_cfbeb ,_gcec );_ddbg !=nil {return _ddbg ;};};continue ;};_fcac ,_cffb :=_cbgb .GetByte (_edaf );if _cffb !=nil {_ag .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_edaf ,_cffb );
return _cffb ;};_fcac <<=_decb ;_edaf ++;_cffb =_fead .SetByte (_cfbeb ,_fcac );if _cffb !=nil {return _cffb ;};_cfbeb ++;};return nil ;};func _ddbc (_ggca *Bitmap ,_edaa *_fa .Stack ,_deee ,_febg int )(_bgbf *_dg .Rectangle ,_cgfc error ){const _ggcbc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ggca ==nil {return nil ,_cf .Error (_ggcbc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _edaa ==nil {return nil ,_cf .Error (_ggcbc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_gbd ,_edcc :=_ggca .Width ,_ggca .Height ;_gbda :=_gbd -1;_geaab :=_edcc -1;if _deee < 0||_deee > _gbda ||_febg < 0||_febg > _geaab ||!_ggca .GetPixel (_deee ,_febg ){return nil ,nil ;};_dgeaa :=_dg .Rect (100000,100000,0,0);if _cgfc =_bcfb (_edaa ,_deee ,_deee ,_febg ,1,_geaab ,&_dgeaa );
_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cgfc =_bcfb (_edaa ,_deee ,_deee ,_febg +1,-1,_geaab ,&_dgeaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_dgeaa .Min .X ,_dgeaa .Max .X =_deee ,_deee ;_dgeaa .Min .Y ,_dgeaa .Max .Y =_febg ,_febg ;var (_bfgeg *fillSegment ;_eefd int ;);for _edaa .Len ()> 0{if _bfgeg ,_cgfc =_acdfa (_edaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"");};_febg =_bfgeg ._eagfg ;
for _deee =_bfgeg ._beedb -1;_deee >=0&&_ggca .GetPixel (_deee ,_febg );_deee --{if _cgfc =_ggca .SetPixel (_deee ,_febg ,0);_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _deee >=_bfgeg ._beedb -1{for {for _deee ++;
_deee <=_bfgeg ._fdeaf +1&&_deee <=_gbda &&!_ggca .GetPixel (_deee ,_febg );_deee ++{};_eefd =_deee ;if !(_deee <=_bfgeg ._fdeaf +1&&_deee <=_gbda ){break ;};for ;_deee <=_gbda &&_ggca .GetPixel (_deee ,_febg );_deee ++{if _cgfc =_ggca .SetPixel (_deee ,_febg ,0);
_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cgfc =_bcfb (_edaa ,_eefd ,_deee -1,_bfgeg ._eagfg ,_bfgeg ._begcc ,_geaab ,&_dgeaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _deee > _bfgeg ._fdeaf {if _cgfc =_bcfb (_edaa ,_bfgeg ._fdeaf +1,_deee -1,_bfgeg ._eagfg ,-_bfgeg ._begcc ,_geaab ,&_dgeaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_eefd =_deee +1;if _eefd < _bfgeg ._beedb {if _cgfc =_bcfb (_edaa ,_eefd ,_bfgeg ._beedb -1,_bfgeg ._eagfg ,-_bfgeg ._begcc ,_geaab ,&_dgeaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_deee =_bfgeg ._beedb ;for {for ;_deee <=_gbda &&_ggca .GetPixel (_deee ,_febg );_deee ++{if _cgfc =_ggca .SetPixel (_deee ,_febg ,0);_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cgfc =_bcfb (_edaa ,_eefd ,_deee -1,_bfgeg ._eagfg ,_bfgeg ._begcc ,_geaab ,&_dgeaa );
_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _deee > _bfgeg ._fdeaf {if _cgfc =_bcfb (_edaa ,_bfgeg ._fdeaf +1,_deee -1,_bfgeg ._eagfg ,-_bfgeg ._begcc ,_geaab ,&_dgeaa );_cgfc !=nil {return nil ,_cf .Wrap (_cgfc ,_ggcbc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _deee ++;_deee <=_bfgeg ._fdeaf +1&&_deee <=_gbda &&!_ggca .GetPixel (_deee ,_febg );_deee ++{};_eefd =_deee ;if !(_deee <=_bfgeg ._fdeaf +1&&_deee <=_gbda ){break ;};};};_dgeaa .Max .X ++;_dgeaa .Max .Y ++;return &_dgeaa ,nil ;};func Rect (x ,y ,w ,h int )(*_dg .Rectangle ,error ){const _abfe ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_cf .Errorf (_abfe ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_cf .Error (_abfe ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_egc :=_dg .Rect (x ,y ,x +w ,y +h );return &_egc ,nil ;};func (_fgec *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_fgag *Bitmaps ,_cbdg *Boxes ,_abde error ){const _acdf ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fgec ==nil {return nil ,nil ,_cf .Error (_acdf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_cf .Error (_acdf ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fgec .Zero (){_cbdg =&Boxes {};_fgag =&Bitmaps {};return _fgag ,_cbdg ,nil ;};switch components {case ComponentConn :_fgag =&Bitmaps {};if _cbdg ,_abde =_fgec .ConnComponents (_fgag ,8);_abde !=nil {return nil ,nil ,_cf .Wrap (_abde ,_acdf ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_geedb ,_dbbbd :=MorphSequence (_fgec ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _dbbbd !=nil {return nil ,nil ,_cf .Wrap (_dbbbd ,_acdf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ag .Log .IsLogLevel (_ag .LogLevelTrace ){_ag .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_geedb .String ());
};_baed :=&Bitmaps {};_cbdg ,_dbbbd =_geedb .ConnComponents (_baed ,8);if _dbbbd !=nil {return nil ,nil ,_cf .Wrap (_dbbbd ,_acdf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ag .Log .IsLogLevel (_ag .LogLevelTrace ){_ag .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_baed .String ());
};if _fgag ,_dbbbd =_baed .ClipToBitmap (_fgec );_dbbbd !=nil {return nil ,nil ,_cf .Wrap (_dbbbd ,_acdf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fgef :=1;
var _gffd *Bitmap ;switch {case _fgec .XResolution <=200:_gffd =_fgec ;case _fgec .XResolution <=400:_fgef =2;_gffd ,_abde =_aad (_fgec ,1,0,0,0);if _abde !=nil {return nil ,nil ,_cf .Wrap (_abde ,_acdf ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fgef =4;_gffd ,_abde =_aad (_fgec ,1,1,0,0);if _abde !=nil {return nil ,nil ,_cf .Wrap (_abde ,_acdf ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_bbgfg ,_ ,_fcf :=_gcbd (_gffd );if _fcf !=nil {return nil ,nil ,_cf .Wrap (_fcf ,_acdf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_cgcf ,_fcf :=_aeda (_bbgfg ,_fgef );if _fcf !=nil {return nil ,nil ,_cf .Wrap (_fcf ,_acdf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_bdfce :=&Bitmaps {};if _cbdg ,_fcf =_cgcf .ConnComponents (_bdfce ,4);_fcf !=nil {return nil ,nil ,_cf .Wrap (_fcf ,_acdf ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _fgag ,_fcf =_bdfce .ClipToBitmap (_fgec );_fcf !=nil {return nil ,nil ,_cf .Wrap (_fcf ,_acdf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_fgag ,_abde =_fgag .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _abde !=nil {return nil ,nil ,_cf .Wrap (_abde ,_acdf ,"");};_cbdg ,_abde =_cbdg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _abde !=nil {return nil ,nil ,_cf .Wrap (_abde ,_acdf ,"");};return _fgag ,_cbdg ,nil ;};type fillSegment struct{_beedb int ;
_fdeaf int ;_eagfg int ;_begcc int ;};func (_gc *Bitmap )GetPixel (x ,y int )bool {_geed :=_gc .GetByteIndex (x ,y );_bgc :=_gc .GetBitOffset (x );_gefd :=uint (7-_bgc );if _geed > len (_gc .Data )-1{_ag .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gc );
return false ;};if (_gc .Data [_geed ]>>_gefd )&0x01>=1{return true ;};return false ;};type SizeSelection int ;func _acdfa (_eaege *_fa .Stack )(_gfae *fillSegment ,_fccc error ){const _ecb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _eaege ==nil {return nil ,_cf .Error (_ecb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eaege .Aux ==nil {return nil ,_cf .Error (_ecb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_deed ,_deaa :=_eaege .Pop ();if !_deaa {return nil ,nil ;};_aegf ,_deaa :=_deed .(*fillSegment );if !_deaa {return nil ,_cf .Error (_ecb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_gfae =&fillSegment {_aegf ._beedb ,_aegf ._fdeaf ,_aegf ._eagfg +_aegf ._begcc ,_aegf ._begcc };_eaege .Aux .Push (_aegf );return _gfae ,nil ;};func (_acdfg *ClassedPoints )xSortFunction ()func (_bbgbd int ,_ceaf int )bool {return func (_ecacf ,_eabb int )bool {return _acdfg .XAtIndex (_ecacf )< _acdfg .XAtIndex (_eabb )};
};func TstCSymbol (t *_fd .T )*Bitmap {t .Helper ();_gebac :=New (6,6);_f .NoError (t ,_gebac .SetPixel (1,0,1));_f .NoError (t ,_gebac .SetPixel (2,0,1));_f .NoError (t ,_gebac .SetPixel (3,0,1));_f .NoError (t ,_gebac .SetPixel (4,0,1));_f .NoError (t ,_gebac .SetPixel (0,1,1));
_f .NoError (t ,_gebac .SetPixel (5,1,1));_f .NoError (t ,_gebac .SetPixel (0,2,1));_f .NoError (t ,_gebac .SetPixel (0,3,1));_f .NoError (t ,_gebac .SetPixel (0,4,1));_f .NoError (t ,_gebac .SetPixel (5,4,1));_f .NoError (t ,_gebac .SetPixel (1,5,1));
_f .NoError (t ,_gebac .SetPixel (2,5,1));_f .NoError (t ,_gebac .SetPixel (3,5,1));_f .NoError (t ,_gebac .SetPixel (4,5,1));return _gebac ;};type LocationFilter int ;func (_adgcb *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bccf ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_adgcb .Values )==0{return nil ,_cf .Error (_bccf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_dfefb :=&BitmapsArray {};_adgcb .SortByHeight ();_ebdeb :=-1;_dbgab :=-1;for _cfec :=0;_cfec < len (_adgcb .Values );
_cfec ++{_gggb :=_adgcb .Values [_cfec ].Height ;if _gggb > _ebdeb {_ebdeb =_gggb ;_dbgab ++;_dfefb .Values =append (_dfefb .Values ,&Bitmaps {});};_dfefb .Values [_dbgab ].AddBitmap (_adgcb .Values [_cfec ]);};return _dfefb ,nil ;};func (_fbdg *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _cfee ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _gabd :=_fbdg .validateIntSlice ();_gabd !=nil {return nil ,_cf .Wrap (_gabd ,_cfee ,"");};if _fbdg .IntSlice .Size ()==0{return nil ,_cf .Error (_cfee ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_fbdg .SortByY ();var (_gafg []*ClassedPoints ;_eacg int ;);_cdgad :=-1;var _dddd *ClassedPoints ;for _bbged :=0;_bbged < len (_fbdg .IntSlice );_bbged ++{_eacg =int (_fbdg .YAtIndex (_bbged ));if _eacg !=_cdgad {_dddd =&ClassedPoints {Points :_fbdg .Points };
_cdgad =_eacg ;_gafg =append (_gafg ,_dddd );};_dddd .IntSlice =append (_dddd .IntSlice ,_fbdg .IntSlice [_bbged ]);};for _ ,_cede :=range _gafg {_cede .SortByX ();};return _gafg ,nil ;};func (_febe *Selection )findMaxTranslations ()(_ffdd ,_gggc ,_ceggf ,_ddgdb int ){for _eafd :=0;
_eafd < _febe .Height ;_eafd ++{for _geeb :=0;_geeb < _febe .Width ;_geeb ++{if _febe .Data [_eafd ][_geeb ]==SelHit {_ffdd =_dgdb (_ffdd ,_febe .Cx -_geeb );_gggc =_dgdb (_gggc ,_febe .Cy -_eafd );_ceggf =_dgdb (_ceggf ,_geeb -_febe .Cx );_ddgdb =_dgdb (_ddgdb ,_eafd -_febe .Cy );
};};};return _ffdd ,_gggc ,_ceggf ,_ddgdb ;};func TstFrameBitmap ()*Bitmap {return _gecbb .Copy ()};func (_cdcc *Bitmaps )selectByIndexes (_bcff []int )(*Bitmaps ,error ){_bbba :=&Bitmaps {};for _ ,_ddabc :=range _bcff {_ebfg ,_gacag :=_cdcc .GetBitmap (_ddabc );
if _gacag !=nil {return nil ,_cf .Wrap (_gacag ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_bbba .AddBitmap (_ebfg );};return _bbba ,nil ;};func (_bdc *Bitmap )addPadBits ()(_fggb error ){const _eda ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_dad :=_bdc .Width %8;if _dad ==0{return nil ;};_bdfb :=_bdc .Width /8;_gaa :=_e .NewReader (_bdc .Data );_eee :=make ([]byte ,_bdc .Height *_bdc .RowStride );_gce :=_e .NewWriterMSB (_eee );_cece :=make ([]byte ,_bdfb );var (_fddb int ;_dacb uint64 ;);
for _fddb =0;_fddb < _bdc .Height ;_fddb ++{if _ ,_fggb =_gaa .Read (_cece );_fggb !=nil {return _cf .Wrap (_fggb ,_eda ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_fggb =_gce .Write (_cece );_fggb !=nil {return _cf .Wrap (_fggb ,_eda ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _dacb ,_fggb =_gaa .ReadBits (byte (_dad ));_fggb !=nil {return _cf .Wrap (_fggb ,_eda ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _fggb =_gce .WriteByte (byte (_dacb )<<uint (8-_dad ));_fggb !=nil {return _cf .Wrap (_fggb ,_eda ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_bdc .Data =_gce .Data ();return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _dac ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_gff :=_dgb (width ,height );
_gff .Data =data ;if _bgd :=((width *height )+7)>>3;len (data )< _bgd {return nil ,_cf .Errorf (_dac ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bgd );
};if _egdf :=_gff .addPadBits ();_egdf !=nil {return nil ,_cf .Wrap (_egdf ,_dac ,"");};return _gff ,nil ;};func (_fagf *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _becef ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _fagf ==nil {return nil ,_cf .Error (_becef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_fagf .Values )-1{return nil ,_cf .Errorf (_becef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fagf .Values [i ],nil ;};func (_efcf *Bitmap )ToImage ()_dg .Image {_bbge ,_gbgf :=_a .NewImage (_efcf .Width ,_efcf .Height ,1,1,_efcf .Data ,nil ,nil );
if _gbgf !=nil {_ag .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gbgf );
};return _bbge ;};func (_efec *Bitmaps )AddBox (box *_dg .Rectangle ){_efec .Boxes =append (_efec .Boxes ,box )};func (_agdae *Bitmaps )Size ()int {return len (_agdae .Values )};func _ceedb (_fggd *Bitmap ,_fged ,_bddf ,_cdgd ,_dcdeg int ,_afggg RasterOperator ){if _fged < 0{_cdgd +=_fged ;
_fged =0;};_cddd :=_fged +_cdgd -_fggd .Width ;if _cddd > 0{_cdgd -=_cddd ;};if _bddf < 0{_dcdeg +=_bddf ;_bddf =0;};_fbac :=_bddf +_dcdeg -_fggd .Height ;if _fbac > 0{_dcdeg -=_fbac ;};if _cdgd <=0||_dcdeg <=0{return ;};if (_fged &7)==0{_caaed (_fggd ,_fged ,_bddf ,_cdgd ,_dcdeg ,_afggg );
}else {_fcbg (_fggd ,_fged ,_bddf ,_cdgd ,_dcdeg ,_afggg );};};func (_dffe *Bitmap )setEightFullBytes (_gbbe int ,_fecd uint64 )error {if _gbbe +7> len (_dffe .Data )-1{return _cf .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dffe .Data [_gbbe ]=byte ((_fecd &0xff00000000000000)>>56);_dffe .Data [_gbbe +1]=byte ((_fecd &0xff000000000000)>>48);_dffe .Data [_gbbe +2]=byte ((_fecd &0xff0000000000)>>40);_dffe .Data [_gbbe +3]=byte ((_fecd &0xff00000000)>>32);_dffe .Data [_gbbe +4]=byte ((_fecd &0xff000000)>>24);
_dffe .Data [_gbbe +5]=byte ((_fecd &0xff0000)>>16);_dffe .Data [_gbbe +6]=byte ((_fecd &0xff00)>>8);_dffe .Data [_gbbe +7]=byte (_fecd &0xff);return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cdad (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_bgee MorphProcess )getWidthHeight ()(_adfbc ,_bfegb int ){return _bgee .Arguments [0],_bgee .Arguments [1];};func (_ddg *Bitmap )SizesEqual (s *Bitmap )bool {if _ddg ==s {return true ;};if _ddg .Width !=s .Width ||_ddg .Height !=s .Height {return false ;
};return true ;};func _fcbg (_ageg *Bitmap ,_bdbdb ,_bfgd int ,_fgfe ,_eaac int ,_bgebg RasterOperator ){var (_dgada bool ;_gbf bool ;_cebf int ;_acbe int ;_ebb int ;_dcdgg int ;_fbga bool ;_abfcbd byte ;);_aabf :=8-(_bdbdb &7);_ddbgf :=_fddd [_aabf ];
_aaabg :=_ageg .RowStride *_bfgd +(_bdbdb >>3);if _fgfe < _aabf {_dgada =true ;_ddbgf &=_ccbfa [8-_aabf +_fgfe ];};if !_dgada {_cebf =(_fgfe -_aabf )>>3;if _cebf !=0{_gbf =true ;_acbe =_aaabg +1;};};_ebb =(_bdbdb +_fgfe )&7;if !(_dgada ||_ebb ==0){_fbga =true ;
_abfcbd =_ccbfa [_ebb ];_dcdgg =_aaabg +1+_cebf ;};var _dcbba ,_ggdb int ;switch _bgebg {case PixClr :for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_aaabg ]=_aeae (_ageg .Data [_aaabg ],0x0,_ddbgf );_aaabg +=_ageg .RowStride ;};if _gbf {for _dcbba =0;
_dcbba < _eaac ;_dcbba ++{for _ggdb =0;_ggdb < _cebf ;_ggdb ++{_ageg .Data [_acbe +_ggdb ]=0x0;};_acbe +=_ageg .RowStride ;};};if _fbga {for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_dcdgg ]=_aeae (_ageg .Data [_dcdgg ],0x0,_abfcbd );_dcdgg +=_ageg .RowStride ;
};};case PixSet :for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_aaabg ]=_aeae (_ageg .Data [_aaabg ],0xff,_ddbgf );_aaabg +=_ageg .RowStride ;};if _gbf {for _dcbba =0;_dcbba < _eaac ;_dcbba ++{for _ggdb =0;_ggdb < _cebf ;_ggdb ++{_ageg .Data [_acbe +_ggdb ]=0xff;
};_acbe +=_ageg .RowStride ;};};if _fbga {for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_dcdgg ]=_aeae (_ageg .Data [_dcdgg ],0xff,_abfcbd );_dcdgg +=_ageg .RowStride ;};};case PixNotDst :for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_aaabg ]=_aeae (_ageg .Data [_aaabg ],^_ageg .Data [_aaabg ],_ddbgf );
_aaabg +=_ageg .RowStride ;};if _gbf {for _dcbba =0;_dcbba < _eaac ;_dcbba ++{for _ggdb =0;_ggdb < _cebf ;_ggdb ++{_ageg .Data [_acbe +_ggdb ]=^(_ageg .Data [_acbe +_ggdb ]);};_acbe +=_ageg .RowStride ;};};if _fbga {for _dcbba =0;_dcbba < _eaac ;_dcbba ++{_ageg .Data [_dcdgg ]=_aeae (_ageg .Data [_dcdgg ],^_ageg .Data [_dcdgg ],_abfcbd );
_dcdgg +=_ageg .RowStride ;};};};};func TstImageBitmapInverseData ()[]byte {_ffega :=_cdfb .Copy ();_ffega .InverseData ();return _ffega .Data ;};func (_dee *Boxes )Add (box *_dg .Rectangle )error {if _dee ==nil {return _cf .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_dee =append (*_dee ,box );return nil ;};type Getter interface{GetBitmap ()*Bitmap ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_egeg *ClassedPoints )Len ()int {return _egeg .IntSlice .Size ()};
func TstASymbol (t *_fd .T )*Bitmap {t .Helper ();_fcdge :=New (6,6);_f .NoError (t ,_fcdge .SetPixel (1,0,1));_f .NoError (t ,_fcdge .SetPixel (2,0,1));_f .NoError (t ,_fcdge .SetPixel (3,0,1));_f .NoError (t ,_fcdge .SetPixel (4,0,1));_f .NoError (t ,_fcdge .SetPixel (5,1,1));
_f .NoError (t ,_fcdge .SetPixel (1,2,1));_f .NoError (t ,_fcdge .SetPixel (2,2,1));_f .NoError (t ,_fcdge .SetPixel (3,2,1));_f .NoError (t ,_fcdge .SetPixel (4,2,1));_f .NoError (t ,_fcdge .SetPixel (5,2,1));_f .NoError (t ,_fcdge .SetPixel (0,3,1));
_f .NoError (t ,_fcdge .SetPixel (5,3,1));_f .NoError (t ,_fcdge .SetPixel (0,4,1));_f .NoError (t ,_fcdge .SetPixel (5,4,1));_f .NoError (t ,_fcdge .SetPixel (1,5,1));_f .NoError (t ,_fcdge .SetPixel (2,5,1));_f .NoError (t ,_fcdge .SetPixel (3,5,1));
_f .NoError (t ,_fcdge .SetPixel (4,5,1));_f .NoError (t ,_fcdge .SetPixel (5,5,1));return _fcdge ;};func (_babbc *Bitmaps )HeightSorter ()func (_abfd ,_bdca int )bool {return func (_aega ,_dgcc int )bool {_fgaa :=_babbc .Values [_aega ].Height < _babbc .Values [_dgcc ].Height ;
_ag .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_babbc .Values [_aega ].Height ,_babbc .Values [_dgcc ].Height ,_fgaa );return _fgaa ;};};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bcc (d ,s ,sel )};
func (_faea *byHeight )Less (i ,j int )bool {return _faea .Values [i ].Height < _faea .Values [j ].Height };func (_fbfd *Bitmap )CountPixels ()int {return _fbfd .countPixels ()};func (_ggef *Bitmap )setEightPartlyBytes (_agef ,_cced int ,_eega uint64 )(_ffgc error ){var (_dfacf byte ;
_fgbd int ;);const _aaac ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _gdedc :=1;_gdedc <=_cced ;_gdedc ++{_fgbd =64-_gdedc *8;_dfacf =byte (_eega >>uint (_fgbd )&0xff);_ag .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dfacf ,_agef ,_agef +_gdedc -1,_cced ,_fgbd );
if _ffgc =_ggef .SetByte (_agef +_gdedc -1,_dfacf );_ffgc !=nil {return _cf .Wrap (_ffgc ,_aaac ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fddc :=_ggef .RowStride *8-_ggef .Width ;if _fddc ==0{return nil ;};_fgbd -=8;_dfacf =byte (_eega >>uint (_fgbd )&0xff)<<uint (_fddc );
if _ffgc =_ggef .SetByte (_agef +_cced ,_dfacf );_ffgc !=nil {return _cf .Wrap (_ffgc ,_aaac ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_fgcc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_abab *Boxes ,_gdec error ){const _ffcb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _fgcc ==nil {return nil ,_cf .Error (_ffcb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fgcc )==0{return _fgcc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cf .Errorf (_ffcb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_cf .Errorf (_ffcb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_gecg :=_fgcc .makeSizeIndicator (width ,height ,tp ,relation );_ggf ,_gdec :=_fgcc .selectWithIndicator (_gecg );if _gdec !=nil {return nil ,_cf .Wrap (_gdec ,_ffcb ,"");};return _ggf ,nil ;};func (_bgfd *Boxes )makeSizeIndicator (_dabf ,_feedc int ,_ebcf LocationFilter ,_fdea SizeComparison )*_fa .NumSlice {_ggfd :=&_fa .NumSlice {};
var _dfe ,_eeaf ,_abgg int ;for _ ,_bbgf :=range *_bgfd {_dfe =0;_eeaf ,_abgg =_bbgf .Dx (),_bbgf .Dy ();switch _ebcf {case LocSelectWidth :if (_fdea ==SizeSelectIfLT &&_eeaf < _dabf )||(_fdea ==SizeSelectIfGT &&_eeaf > _dabf )||(_fdea ==SizeSelectIfLTE &&_eeaf <=_dabf )||(_fdea ==SizeSelectIfGTE &&_eeaf >=_dabf ){_dfe =1;
};case LocSelectHeight :if (_fdea ==SizeSelectIfLT &&_abgg < _feedc )||(_fdea ==SizeSelectIfGT &&_abgg > _feedc )||(_fdea ==SizeSelectIfLTE &&_abgg <=_feedc )||(_fdea ==SizeSelectIfGTE &&_abgg >=_feedc ){_dfe =1;};case LocSelectIfEither :if (_fdea ==SizeSelectIfLT &&(_abgg < _feedc ||_eeaf < _dabf ))||(_fdea ==SizeSelectIfGT &&(_abgg > _feedc ||_eeaf > _dabf ))||(_fdea ==SizeSelectIfLTE &&(_abgg <=_feedc ||_eeaf <=_dabf ))||(_fdea ==SizeSelectIfGTE &&(_abgg >=_feedc ||_eeaf >=_dabf )){_dfe =1;
};case LocSelectIfBoth :if (_fdea ==SizeSelectIfLT &&(_abgg < _feedc &&_eeaf < _dabf ))||(_fdea ==SizeSelectIfGT &&(_abgg > _feedc &&_eeaf > _dabf ))||(_fdea ==SizeSelectIfLTE &&(_abgg <=_feedc &&_eeaf <=_dabf ))||(_fdea ==SizeSelectIfGTE &&(_abgg >=_feedc &&_eeaf >=_dabf )){_dfe =1;
};};_ggfd .AddInt (_dfe );};return _ggfd ;};func TstImageBitmapData ()[]byte {return _cdfb .Data };type byWidth Bitmaps ;func (_ffbf *Bitmap )addBorderGeneral (_cfbe ,_bfaf ,_ebfe ,_ggeg int ,_agfg int )(*Bitmap ,error ){const _gabe ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _cfbe < 0||_bfaf < 0||_ebfe < 0||_ggeg < 0{return nil ,_cf .Error (_gabe ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_beeb ,_bfed :=_ffbf .Width ,_ffbf .Height ;_baec :=_beeb +_cfbe +_bfaf ;
_eagg :=_bfed +_ebfe +_ggeg ;_bfde :=New (_baec ,_eagg );_bfde .Color =_ffbf .Color ;_bece :=PixClr ;if _agfg > 0{_bece =PixSet ;};_abdg :=_bfde .RasterOperation (0,0,_cfbe ,_eagg ,_bece ,nil ,0,0);if _abdg !=nil {return nil ,_cf .Wrap (_abdg ,_gabe ,"\u006c\u0065\u0066\u0074");
};_abdg =_bfde .RasterOperation (_baec -_bfaf ,0,_bfaf ,_eagg ,_bece ,nil ,0,0);if _abdg !=nil {return nil ,_cf .Wrap (_abdg ,_gabe ,"\u0072\u0069\u0067h\u0074");};_abdg =_bfde .RasterOperation (0,0,_baec ,_ebfe ,_bece ,nil ,0,0);if _abdg !=nil {return nil ,_cf .Wrap (_abdg ,_gabe ,"\u0074\u006f\u0070");
};_abdg =_bfde .RasterOperation (0,_eagg -_ggeg ,_baec ,_ggeg ,_bece ,nil ,0,0);if _abdg !=nil {return nil ,_cf .Wrap (_abdg ,_gabe ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_abdg =_bfde .RasterOperation (_cfbe ,_ebfe ,_beeb ,_bfed ,PixSrc ,_ffbf ,0,0);
if _abdg !=nil {return nil ,_cf .Wrap (_abdg ,_gabe ,"\u0063\u006f\u0070\u0079");};return _bfde ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _fece ,_adaf int ;_bffg :=src .RowStride -1;if x < 0{_adaf =-x ;x =0;
}else if x +src .Width > dst .Width {_bffg -=src .Width +x -dst .Width ;};if y < 0{_fece =-y ;y =0;_adaf +=src .RowStride ;_bffg +=src .RowStride ;}else if y +src .Height > dst .Height {_fece =src .Height +y -dst .Height ;};var (_bgec int ;_dedf error ;
);_fgae :=x &0x07;_ege :=8-_fgae ;_dda :=src .Width &0x07;_fdbc :=_ege -_dda ;_gefef :=_ege &0x07!=0;_edeg :=src .Width <=((_bffg -_adaf )<<3)+_ege ;_fgcf :=dst .GetByteIndex (x ,y );_acdc :=_fece +dst .Height ;if src .Height > _acdc {_bgec =_acdc ;}else {_bgec =src .Height ;
};switch {case !_gefef :_dedf =_fecg (src ,dst ,_fece ,_bgec ,_fgcf ,_adaf ,_bffg ,op );case _edeg :_dedf =_gec (src ,dst ,_fece ,_bgec ,_fgcf ,_adaf ,_bffg ,_fdbc ,_fgae ,_ege ,op );default:_dedf =_dgaf (src ,dst ,_fece ,_bgec ,_fgcf ,_adaf ,_bffg ,_fdbc ,_fgae ,_ege ,op ,_dda );
};return _dedf ;};func _fbb (_bcd *Bitmap ,_acd int )(*Bitmap ,error ){const _fg ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _bcd ==nil {return nil ,_cf .Error (_fg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _acd ==1{return _gcg (nil ,_bcd );};if _acd !=2&&_acd !=4&&_acd !=8{return nil ,_cf .Error (_fg ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_egd :=_acd *_bcd .Width ;_gfg :=_acd *_bcd .Height ;_dc :=New (_egd ,_gfg );var _fgc error ;switch _acd {case 2:_fgc =_fe (_dc ,_bcd );case 4:_fgc =_ceb (_dc ,_bcd );case 8:_fgc =_agb (_dc ,_bcd );};if _fgc !=nil {return nil ,_cf .Wrap (_fgc ,_fg ,"");
};return _dc ,nil ;};func TstGetScaledSymbol (t *_fd .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_eebf ,_debea :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_f .NoError (t ,_debea );return _eebf ;};var MorphBC BoundaryCondition ;func TstFrameBitmapData ()[]byte {return _gecbb .Data };func (_fgac *Selection )setOrigin (_edae ,_fffca int ){_fgac .Cy ,_fgac .Cx =_edae ,_fffca };func TstWriteSymbols (t *_fd .T ,bms *Bitmaps ,src *Bitmap ){for _fabc :=0;
_fabc < bms .Size ();_fabc ++{_edgce :=bms .Values [_fabc ];_gaba :=bms .Boxes [_fabc ];_bfbd :=src .RasterOperation (_gaba .Min .X ,_gaba .Min .Y ,_edgce .Width ,_edgce .Height ,PixSrc ,_edgce ,0,0);_f .NoError (t ,_bfbd );};};const (AsymmetricMorphBC BoundaryCondition =iota ;
SymmetricMorphBC ;);func _cbdae ()[]int {_faaa :=make ([]int ,256);_faaa [0]=0;_faaa [1]=7;var _affc int ;for _affc =2;_affc < 4;_affc ++{_faaa [_affc ]=_faaa [_affc -2]+6;};for _affc =4;_affc < 8;_affc ++{_faaa [_affc ]=_faaa [_affc -4]+5;};for _affc =8;
_affc < 16;_affc ++{_faaa [_affc ]=_faaa [_affc -8]+4;};for _affc =16;_affc < 32;_affc ++{_faaa [_affc ]=_faaa [_affc -16]+3;};for _affc =32;_affc < 64;_affc ++{_faaa [_affc ]=_faaa [_affc -32]+2;};for _affc =64;_affc < 128;_affc ++{_faaa [_affc ]=_faaa [_affc -64]+1;
};for _affc =128;_affc < 256;_affc ++{_faaa [_affc ]=_faaa [_affc -128];};return _faaa ;};func (_cbe *ClassedPoints )SortByX (){_cbe ._gebed =_cbe .xSortFunction ();_g .Sort (_cbe )};func _fe (_ce ,_eg *Bitmap )(_b error ){const _gf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_cg :=_eg .RowStride ;_gd :=_ce .RowStride ;var (_ee byte ;_eb uint16 ;_dgf ,_ba ,_fdf ,_bb ,_ca int ;);for _fdf =0;_fdf < _eg .Height ;_fdf ++{_dgf =_fdf *_cg ;_ba =2*_fdf *_gd ;for _bb =0;_bb < _cg ;_bb ++{_ee =_eg .Data [_dgf +_bb ];_eb =_dcb [_ee ];
_ca =_ba +_bb *2;if _ce .RowStride !=_eg .RowStride *2&&(_bb +1)*2> _ce .RowStride {_b =_ce .SetByte (_ca ,byte (_eb >>8));}else {_b =_ce .setTwoBytes (_ca ,_eb );};if _b !=nil {return _cf .Wrap (_b ,_gf ,"");};};for _bb =0;_bb < _gd ;_bb ++{_ca =_ba +_gd +_bb ;
_ee =_ce .Data [_ba +_bb ];if _b =_ce .SetByte (_ca ,_ee );_b !=nil {return _cf .Wrapf (_b ,_gf ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ba +_bb ,_ba +_gd +_bb );
};};};return nil ;};func (_dgba *byWidth )Swap (i ,j int ){_dgba .Values [i ],_dgba .Values [j ]=_dgba .Values [j ],_dgba .Values [i ];if _dgba .Boxes !=nil {_dgba .Boxes [i ],_dgba .Boxes [j ]=_dgba .Boxes [j ],_dgba .Boxes [i ];};};func (_dfb *Bitmap )Copy ()*Bitmap {_ebdd :=make ([]byte ,len (_dfb .Data ));
copy (_ebdd ,_dfb .Data );return &Bitmap {Width :_dfb .Width ,Height :_dfb .Height ,RowStride :_dfb .RowStride ,Data :_ebdd ,Color :_dfb .Color ,Text :_dfb .Text ,BitmapNumber :_dfb .BitmapNumber ,Special :_dfb .Special };};func _egdg ()(_aga [256]uint16 ){for _dag :=0;
_dag < 256;_dag ++{if _dag &0x01!=0{_aga [_dag ]|=0x3;};if _dag &0x02!=0{_aga [_dag ]|=0xc;};if _dag &0x04!=0{_aga [_dag ]|=0x30;};if _dag &0x08!=0{_aga [_dag ]|=0xc0;};if _dag &0x10!=0{_aga [_dag ]|=0x300;};if _dag &0x20!=0{_aga [_dag ]|=0xc00;};if _dag &0x40!=0{_aga [_dag ]|=0x3000;
};if _dag &0x80!=0{_aga [_dag ]|=0xc000;};};return _aga ;};func (_gged *Bitmap )clipRectangle (_faf ,_feb *_dg .Rectangle )(_daca *Bitmap ,_cee error ){const _eaa ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _faf ==nil {return nil ,_cf .Error (_eaa ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_ega ,_fgd :=_gged .Width ,_gged .Height ;_dea ,_cee :=ClipBoxToRectangle (_faf ,_ega ,_fgd );if _cee !=nil {_ag .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cee );
return nil ,nil ;};_gbgc ,_eddf :=_dea .Min .X ,_dea .Min .Y ;_deg ,_fdbd :=_dea .Max .X -_dea .Min .X ,_dea .Max .Y -_dea .Min .Y ;_daca =New (_deg ,_fdbd );_daca .Text =_gged .Text ;if _cee =_daca .RasterOperation (0,0,_deg ,_fdbd ,PixSrc ,_gged ,_gbgc ,_eddf );
_cee !=nil {return nil ,_cf .Wrap (_cee ,_eaa ,"");};if _feb !=nil {*_feb =*_dea ;};return _daca ,nil ;};func (_fccd *Bitmaps )AddBitmap (bm *Bitmap ){_fccd .Values =append (_fccd .Values ,bm )};func (_cfb *Bitmap )GetVanillaData ()[]byte {if _cfb .Color ==Chocolate {_cfb .inverseData ();
};return _cfb .Data ;};var _ _g .Interface =&ClassedPoints {};func (_abaa *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cdad (_abaa ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstImageBitmap ()*Bitmap {return _cdfb .Copy ()};
func _bbbd (_abf ,_add ,_dgeg *Bitmap )(*Bitmap ,error ){const _gbe ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _add ==nil {return nil ,_cf .Error (_gbe ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dgeg ==nil {return nil ,_cf .Error (_gbe ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _abf ==_dgeg {return nil ,_cf .Error (_gbe ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_add .SizesEqual (_dgeg ){_ag .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_gbe );
};var _acb error ;if _abf ,_acb =_gcg (_abf ,_add );_acb !=nil {return nil ,_cf .Wrap (_acb ,_gbe ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _acb =_abf .RasterOperation (0,0,_abf .Width ,_abf .Height ,PixSrcXorDst ,_dgeg ,0,0);
_acb !=nil {return nil ,_cf .Wrap (_acb ,_gbe ,"");};return _abf ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func TstWordBitmap (t *_fd .T ,scale ...int )*Bitmap {_fdae :=1;if len (scale )> 0{_fdae =scale [0];};_cbbg :=3;_ccccf :=9+7+15+2*_cbbg ;
_dagbg :=5+_cbbg +5;_eefcb :=New (_ccccf *_fdae ,_dagbg *_fdae );_eeddg :=&Bitmaps {};var _efbfg *int ;_cbbg *=_fdae ;_dfad :=0;_efbfg =&_dfad ;_dfbc :=0;_fegb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,_cbbg );_fegb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,_cbbg );_fegb =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,0);*_efbfg =0;_dfbc =5*_fdae +_cbbg ;
_fegb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,_cbbg );_fegb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );
_fegb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );_fegb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,1*_fdae );
_fegb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eeddg ,_fegb ,_efbfg ,_dfbc ,0);TstWriteSymbols (t ,_eeddg ,_eefcb );return _eefcb ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;
SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _gbeg (_adec ,_ffefd *Bitmap ,_ccea ,_gbba int )(*Bitmap ,error ){const _daaf ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _ffefd ==nil {_ag .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_cf .Error (_daaf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ccea < 1||_gbba < 1{return nil ,_cf .Error (_daaf ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _ccea ==1&&_gbba ==1{_baaf ,_dcae :=_gcg (_adec ,_ffefd );if _dcae !=nil {return nil ,_cf .Wrap (_dcae ,_daaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _baaf ,nil ;};if _ccea ==1||_gbba ==1{_dfgce :=SelCreateBrick (_gbba ,_ccea ,_gbba /2,_ccea /2,SelHit );_aabc ,_fcbd :=_bcc (_adec ,_ffefd ,_dfgce );if _fcbd !=nil {return nil ,_cf .Wrap (_fcbd ,_daaf ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aabc ,nil ;};_ddgd :=SelCreateBrick (1,_ccea ,0,_ccea /2,SelHit );_gcef :=SelCreateBrick (_gbba ,1,_gbba /2,0,SelHit );_ddffb ,_eaeg :=_bcc (nil ,_ffefd ,_ddgd );if _eaeg !=nil {return nil ,_cf .Wrap (_eaeg ,_daaf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_adec ,_eaeg =_bcc (_adec ,_ddffb ,_gcef );if _eaeg !=nil {return nil ,_cf .Wrap (_eaeg ,_daaf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _adec ,nil ;};func (_agbb *Bitmap )Zero ()bool {_ffc :=_agbb .Width /8;_aec :=_agbb .Width &7;
var _aaab byte ;if _aec !=0{_aaab =byte (0xff<<uint (8-_aec ));};var _cgg ,_bdad ,_ggec int ;for _bdad =0;_bdad < _agbb .Height ;_bdad ++{_cgg =_agbb .RowStride *_bdad ;for _ggec =0;_ggec < _ffc ;_ggec ,_cgg =_ggec +1,_cgg +1{if _agbb .Data [_cgg ]!=0{return false ;
};};if _aec > 0{if _agbb .Data [_cgg ]&_aaab !=0{return false ;};};};return true ;};func (_gfge *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _gfge .Copy (),nil ;};_acg ,_acgg :=_gfge .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _acgg !=nil {return nil ,_cf .Wrap (_acgg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _acg ,nil ;};func (_fecgc *BitmapsArray )AddBox (box *_dg .Rectangle ){_fecgc .Boxes =append (_fecgc .Boxes ,box )};func (_dceg *Bitmap )connComponentsBB (_cecee int )(_edgg *Boxes ,_gcgg error ){const _feec ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _cecee !=4&&_cecee !=8{return nil ,_cf .Error (_feec ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _dceg .Zero (){return &Boxes {},nil ;
};_dceg .setPadBits (0);_dafb ,_gcgg :=_gcg (nil ,_dceg );if _gcgg !=nil {return nil ,_cf .Wrap (_gcgg ,_feec ,"\u0062\u006d\u0031");};_gdab :=&_fa .Stack {};_gdab .Aux =&_fa .Stack {};_edgg =&Boxes {};var (_bbac ,_egca int ;_bebcg _dg .Point ;_cbda bool ;
_cdfe *_dg .Rectangle ;);for {if _bebcg ,_cbda ,_gcgg =_dafb .nextOnPixel (_egca ,_bbac );_gcgg !=nil {return nil ,_cf .Wrap (_gcgg ,_feec ,"");};if !_cbda {break ;};if _cdfe ,_gcgg =_fdabg (_dafb ,_gdab ,_bebcg .X ,_bebcg .Y ,_cecee );_gcgg !=nil {return nil ,_cf .Wrap (_gcgg ,_feec ,"");
};if _gcgg =_edgg .Add (_cdfe );_gcgg !=nil {return nil ,_cf .Wrap (_gcgg ,_feec ,"");};_egca =_bebcg .X ;_bbac =_bebcg .Y ;};return _edgg ,nil ;};func _acbf (_aadeg ,_dfae *Bitmap ,_acdb ,_bgfdd int )(*Bitmap ,error ){const _aedf ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _dfae ==nil {return nil ,_cf .Error (_aedf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _acdb < 1||_bgfdd < 1{return nil ,_cf .Error (_aedf ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _acdb ==1&&_bgfdd ==1{return _gcg (_aadeg ,_dfae );};if MorphBC ==SymmetricMorphBC {_ebfcc ,_dfge :=_fdfb (_aadeg ,_dfae ,_acdb ,_bgfdd );if _dfge !=nil {return nil ,_cf .Wrap (_dfge ,_aedf ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _ebfcc ,nil ;};_ageac :=_dgdb (_acdb /2,_bgfdd /2);_fffa :=8*((_ageac +7)/8);_ecac ,_fgf :=_dfae .AddBorder (_fffa ,0);if _fgf !=nil {return nil ,_cf .Wrapf (_fgf ,_aedf ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_fffa );
};var _cabd ,_dabb *Bitmap ;if _acdb ==1||_bgfdd ==1{_cfde :=SelCreateBrick (_bgfdd ,_acdb ,_bgfdd /2,_acdb /2,SelHit );_cabd ,_fgf =_gcfd (nil ,_ecac ,_cfde );if _fgf !=nil {return nil ,_cf .Wrap (_fgf ,_aedf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_fbca :=SelCreateBrick (1,_acdb ,0,_acdb /2,SelHit );_ggcc ,_abbf :=_bcc (nil ,_ecac ,_fbca );if _abbf !=nil {return nil ,_cf .Wrap (_abbf ,_aedf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_gac :=SelCreateBrick (_bgfdd ,1,_bgfdd /2,0,SelHit );_cabd ,_abbf =_bcc (nil ,_ggcc ,_gac );if _abbf !=nil {return nil ,_cf .Wrap (_abbf ,_aedf ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_abbf =_bcce (_ggcc ,_cabd ,_fbca );_abbf !=nil {return nil ,_cf .Wrap (_abbf ,_aedf ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_abbf =_bcce (_cabd ,_ggcc ,_gac );_abbf !=nil {return nil ,_cf .Wrap (_abbf ,_aedf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _dabb ,_fgf =_cabd .RemoveBorder (_fffa );_fgf !=nil {return nil ,_cf .Wrap (_fgf ,_aedf ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _aadeg ==nil {return _dabb ,nil ;};if _ ,_fgf =_gcg (_aadeg ,_dabb );_fgf !=nil {return nil ,_fgf ;};return _aadeg ,nil ;
};var (_ccbfa =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fddd =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_acdgb :=_daceb (h ,w ,"");_acdgb .setOrigin (cy ,cx );
var _agcec ,_eggd int ;for _agcec =0;_agcec < h ;_agcec ++{for _eggd =0;_eggd < w ;_eggd ++{_acdgb .Data [_agcec ][_eggd ]=tp ;};};return _acdgb ;};func (_gdae *Bitmaps )makeSizeIndicator (_efbf ,_bcgg int ,_gdga LocationFilter ,_fcfd SizeComparison )(_edbaa *_fa .NumSlice ,_eeeac error ){const _egaf ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gdae ==nil {return nil ,_cf .Error (_egaf ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _gdga {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cf .Errorf (_egaf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_gdga );
};switch _fcfd {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_cf .Errorf (_egaf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_fcfd );
};_edbaa =&_fa .NumSlice {};var (_caabc ,_dfdfc ,_fbgf int ;_cfffb *Bitmap ;);for _ ,_cfffb =range _gdae .Values {_caabc =0;_dfdfc ,_fbgf =_cfffb .Width ,_cfffb .Height ;switch _gdga {case LocSelectWidth :if (_fcfd ==SizeSelectIfLT &&_dfdfc < _efbf )||(_fcfd ==SizeSelectIfGT &&_dfdfc > _efbf )||(_fcfd ==SizeSelectIfLTE &&_dfdfc <=_efbf )||(_fcfd ==SizeSelectIfGTE &&_dfdfc >=_efbf )||(_fcfd ==SizeSelectIfEQ &&_dfdfc ==_efbf ){_caabc =1;
};case LocSelectHeight :if (_fcfd ==SizeSelectIfLT &&_fbgf < _bcgg )||(_fcfd ==SizeSelectIfGT &&_fbgf > _bcgg )||(_fcfd ==SizeSelectIfLTE &&_fbgf <=_bcgg )||(_fcfd ==SizeSelectIfGTE &&_fbgf >=_bcgg )||(_fcfd ==SizeSelectIfEQ &&_fbgf ==_bcgg ){_caabc =1;
};case LocSelectIfEither :if (_fcfd ==SizeSelectIfLT &&(_dfdfc < _efbf ||_fbgf < _bcgg ))||(_fcfd ==SizeSelectIfGT &&(_dfdfc > _efbf ||_fbgf > _bcgg ))||(_fcfd ==SizeSelectIfLTE &&(_dfdfc <=_efbf ||_fbgf <=_bcgg ))||(_fcfd ==SizeSelectIfGTE &&(_dfdfc >=_efbf ||_fbgf >=_bcgg ))||(_fcfd ==SizeSelectIfEQ &&(_dfdfc ==_efbf ||_fbgf ==_bcgg )){_caabc =1;
};case LocSelectIfBoth :if (_fcfd ==SizeSelectIfLT &&(_dfdfc < _efbf &&_fbgf < _bcgg ))||(_fcfd ==SizeSelectIfGT &&(_dfdfc > _efbf &&_fbgf > _bcgg ))||(_fcfd ==SizeSelectIfLTE &&(_dfdfc <=_efbf &&_fbgf <=_bcgg ))||(_fcfd ==SizeSelectIfGTE &&(_dfdfc >=_efbf &&_fbgf >=_bcgg ))||(_fcfd ==SizeSelectIfEQ &&(_dfdfc ==_efbf &&_fbgf ==_bcgg )){_caabc =1;
};};_edbaa .AddInt (_caabc );};return _edbaa ,nil ;};func _fccf (_ebbf ,_ggfb *Bitmap ,_eace ,_dbd int )(_bgbe error ){const _dfdbg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_bfbe ,_afdba ,_bbdd ,_bfeeg int ;
_cebe ,_acecg ,_ddgf ,_ebfd ,_gaca ,_bdcbf ,_adedg ,_ffge byte ;);for _bfbe =0;_bfbe < _eace ;_bfbe ++{_bbdd =_bfbe *_ebbf .RowStride ;_bfeeg =_bfbe *_ggfb .RowStride ;for _afdba =0;_afdba < _dbd ;_afdba ++{if _cebe ,_bgbe =_ebbf .GetByte (_bbdd +_afdba );
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _acecg ,_bgbe =_ggfb .GetByte (_bfeeg +_afdba );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _bfbe > 0{if _ddgf ,_bgbe =_ebbf .GetByte (_bbdd -_ebbf .RowStride +_afdba );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cebe |=_ddgf |(_ddgf <<1)|(_ddgf >>1);if _afdba > 0{if _ffge ,_bgbe =_ebbf .GetByte (_bbdd -_ebbf .RowStride +_afdba -1);
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cebe |=_ffge <<7;};if _afdba < _dbd -1{if _ffge ,_bgbe =_ebbf .GetByte (_bbdd -_ebbf .RowStride +_afdba +1);
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cebe |=_ffge >>7;};};if _afdba > 0{if _ebfd ,_bgbe =_ebbf .GetByte (_bbdd +_afdba -1);_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u006a\u0020\u003e \u0030");
};_cebe |=_ebfd <<7;};_cebe &=_acecg ;if _cebe ==0||^_cebe ==0{if _bgbe =_ebbf .SetByte (_bbdd +_afdba ,_cebe );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};
};for {_adedg =_cebe ;_cebe =(_cebe |(_cebe >>1)|(_cebe <<1))&_acecg ;if (_cebe ^_adedg )==0{if _bgbe =_ebbf .SetByte (_bbdd +_afdba ,_cebe );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bfbe =_eace -1;_bfbe >=0;_bfbe --{_bbdd =_bfbe *_ebbf .RowStride ;_bfeeg =_bfbe *_ggfb .RowStride ;for _afdba =_dbd -1;_afdba >=0;_afdba --{if _cebe ,_bgbe =_ebbf .GetByte (_bbdd +_afdba );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _acecg ,_bgbe =_ggfb .GetByte (_bfeeg +_afdba );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bfbe < _eace -1{if _gaca ,_bgbe =_ebbf .GetByte (_bbdd +_ebbf .RowStride +_afdba );
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cebe |=_gaca |(_gaca <<1)|_gaca >>1;if _afdba > 0{if _ffge ,_bgbe =_ebbf .GetByte (_bbdd +_ebbf .RowStride +_afdba -1);
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cebe |=_ffge <<7;};if _afdba < _dbd -1{if _ffge ,_bgbe =_ebbf .GetByte (_bbdd +_ebbf .RowStride +_afdba +1);
_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cebe |=_ffge >>7;};};if _afdba < _dbd -1{if _bdcbf ,_bgbe =_ebbf .GetByte (_bbdd +_afdba +1);_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cebe |=_bdcbf >>7;};_cebe &=_acecg ;if _cebe ==0||(^_cebe )==0{if _bgbe =_ebbf .SetByte (_bbdd +_afdba ,_cebe );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_adedg =_cebe ;
_cebe =(_cebe |(_cebe >>1)|(_cebe <<1))&_acecg ;if (_cebe ^_adedg )==0{if _bgbe =_ebbf .SetByte (_bbdd +_afdba ,_cebe );_bgbe !=nil {return _cf .Wrap (_bgbe ,_dfdbg ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _acbg (_aecf ,_ffed *Bitmap ,_dcab ,_feabb int )(*Bitmap ,error ){const _eddg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _ffed ==nil {return nil ,_cf .Error (_eddg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _dcab < 1&&_feabb < 1{return nil ,_cf .Error (_eddg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _dcab ==1&&_feabb ==1{return _ffed .Copy (),nil ;};if _dcab ==1||_feabb ==1{var _dagg error ;
_bbaa :=SelCreateBrick (_feabb ,_dcab ,_feabb /2,_dcab /2,SelHit );_aecf ,_dagg =_dgcb (_aecf ,_ffed ,_bbaa );if _dagg !=nil {return nil ,_cf .Wrap (_dagg ,_eddg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aecf ,nil ;};_bgfeg :=SelCreateBrick (1,_dcab ,0,_dcab /2,SelHit );_geac :=SelCreateBrick (_feabb ,1,_feabb /2,0,SelHit );_efaf ,_eaec :=_bcce (nil ,_ffed ,_bgfeg );if _eaec !=nil {return nil ,_cf .Wrap (_eaec ,_eddg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_aecf ,_eaec =_bcce (_aecf ,_efaf ,_geac );if _eaec !=nil {return nil ,_cf .Wrap (_eaec ,_eddg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_eaec =_bcc (_efaf ,_aecf ,_bgfeg );if _eaec !=nil {return nil ,_cf .Wrap (_eaec ,_eddg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_eaec =_bcc (_aecf ,_efaf ,_geac );if _eaec !=nil {return nil ,_cf .Wrap (_eaec ,_eddg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aecf ,nil ;};func _eeed (_bgcb ,_feae *Bitmap ,_fbad ,_efgg int )(*Bitmap ,error ){const _geba ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _feae ==nil {return nil ,_cf .Error (_geba ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fbad < 1||_efgg < 1{return nil ,_cf .Error (_geba ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fbad ==1&&_efgg ==1{_gffc ,_aaaa :=_gcg (_bgcb ,_feae );if _aaaa !=nil {return nil ,_cf .Wrap (_aaaa ,_geba ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gffc ,nil ;};if _fbad ==1||_efgg ==1{_acde :=SelCreateBrick (_efgg ,_fbad ,_efgg /2,_fbad /2,SelHit );_fbdc ,_feeb :=_bcce (_bgcb ,_feae ,_acde );if _feeb !=nil {return nil ,_cf .Wrap (_feeb ,_geba ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fbdc ,nil ;};_bdbdg :=SelCreateBrick (1,_fbad ,0,_fbad /2,SelHit );_eedb :=SelCreateBrick (_efgg ,1,_efgg /2,0,SelHit );_fafcb ,_ffbe :=_bcce (nil ,_feae ,_bdbdg );if _ffbe !=nil {return nil ,_cf .Wrap (_ffbe ,_geba ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bgcb ,_ffbe =_bcce (_bgcb ,_fafcb ,_eedb );if _ffbe !=nil {return nil ,_cf .Wrap (_ffbe ,_geba ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bgcb ,nil ;};func _adb (_be *Bitmap ,_gfa ,_bbc int )(*Bitmap ,error ){const _df ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _be ==nil {return nil ,_cf .Error (_df ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gfa <=0||_bbc <=0{return nil ,_cf .Error (_df ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _gfa ==_bbc {if _gfa ==1{_fdc ,_dga :=_gcg (nil ,_be );if _dga !=nil {return nil ,_cf .Wrap (_dga ,_df ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _fdc ,nil ;};if _gfa ==2||_gfa ==4||_gfa ==8{_fbc ,_agca :=_fbb (_be ,_gfa );
if _agca !=nil {return nil ,_cf .Wrap (_agca ,_df ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _fbc ,nil ;};};_bfa :=_gfa *_be .Width ;_bd :=_bbc *_be .Height ;_dce :=New (_bfa ,_bd );_cgc :=_dce .RowStride ;
var (_ga ,_bda ,_ed ,_fgb ,_dcg int ;_bfg byte ;_edg error ;);for _bda =0;_bda < _be .Height ;_bda ++{_ga =_bbc *_bda *_cgc ;for _ed =0;_ed < _be .Width ;_ed ++{if _ede :=_be .GetPixel (_ed ,_bda );_ede {_dcg =_gfa *_ed ;for _fgb =0;_fgb < _gfa ;_fgb ++{_dce .setBit (_ga *8+_dcg +_fgb );
};};};for _fgb =1;_fgb < _bbc ;_fgb ++{_afc :=_ga +_fgb *_cgc ;for _cga :=0;_cga < _cgc ;_cga ++{if _bfg ,_edg =_dce .GetByte (_ga +_cga );_edg !=nil {return nil ,_cf .Wrapf (_edg ,_df ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_fgb );
};if _edg =_dce .SetByte (_afc +_cga ,_bfg );_edg !=nil {return nil ,_cf .Wrap (_edg ,_df ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _dce ,nil ;};func _bcce (_fgcfe ,_dgfa *Bitmap ,_fggg *Selection )(*Bitmap ,error ){const _cfcg ="\u0065\u0072\u006fd\u0065";
var (_fafd error ;_dcdg *Bitmap ;);_fgcfe ,_fafd =_bbfgg (_fgcfe ,_dgfa ,_fggg ,&_dcdg );if _fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"");};if _fafd =_fgcfe .setAll ();_fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"");};var _ccdec SelectionValue ;
for _gfdd :=0;_gfdd < _fggg .Height ;_gfdd ++{for _dcga :=0;_dcga < _fggg .Width ;_dcga ++{_ccdec =_fggg .Data [_gfdd ][_dcga ];if _ccdec ==SelHit {_fafd =_cdad (_fgcfe ,_fggg .Cx -_dcga ,_fggg .Cy -_gfdd ,_dgfa .Width ,_dgfa .Height ,PixSrcAndDst ,_dcdg ,0,0);
if _fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fgcfe ,nil ;};_fbdb ,_ddbd ,_bdg ,_cdbd :=_fggg .findMaxTranslations ();if _fbdb > 0{if _fafd =_fgcfe .RasterOperation (0,0,_fbdb ,_dgfa .Height ,PixClr ,nil ,0,0);
_fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _bdg > 0{if _fafd =_fgcfe .RasterOperation (_dgfa .Width -_bdg ,0,_bdg ,_dgfa .Height ,PixClr ,nil ,0,0);_fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _ddbd > 0{if _fafd =_fgcfe .RasterOperation (0,0,_dgfa .Width ,_ddbd ,PixClr ,nil ,0,0);_fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _cdbd > 0{if _fafd =_fgcfe .RasterOperation (0,_dgfa .Height -_cdbd ,_dgfa .Width ,_cdbd ,PixClr ,nil ,0,0);
_fafd !=nil {return nil ,_cf .Wrap (_fafd ,_cfcg ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fgcfe ,nil ;};func TstDSymbol (t *_fd .T ,scale ...int )*Bitmap {_edfe ,_begef :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_begef );
return TstGetScaledSymbol (t ,_edfe ,scale ...);};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _facf ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_cf .Error (_facf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_cf .Error (_facf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_cf .Error (_facf ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_cf .Error (_facf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_cf .Error (_facf ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_aca ,_gdeb :=bm1 .Width ,bm1 .Height ;_dbbd ,_bfeg :=bm2 .Width ,bm2 .Height ;if _fa .Abs (_aca -_dbbd )> maxDiffW {return false ,nil ;};if _fa .Abs (_gdeb -_bfeg )> maxDiffH {return false ,nil ;};_ffgce :=int (delX +_fa .Sign (delX )*0.5);_bfba :=int (delY +_fa .Sign (delY )*0.5);
_bbdf :=int (_d .Ceil (_d .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_gcda :=bm2 .RowStride ;_dfgc :=_dgdb (_bfba ,0);_cagb :=_cgcb (_bfeg +_bfba ,_gdeb );_bacfa :=bm1 .RowStride *_dfgc ;_ffgcf :=bm2 .RowStride *(_dfgc -_bfba );
var _dged int ;if _cagb <=_gdeb {_dged =downcount [_cagb -1];};_ebfc :=_dgdb (_ffgce ,0);_geag :=_cgcb (_dbbd +_ffgce ,_aca );var _edee ,_gafa int ;if _ffgce >=8{_edee =_ffgce >>3;_bacfa +=_edee ;_ebfc -=_edee <<3;_geag -=_edee <<3;_ffgce &=7;}else if _ffgce <=-8{_gafa =-((_ffgce +7)>>3);
_ffgcf +=_gafa ;_gcda -=_gafa ;_ffgce +=_gafa <<3;};var (_gbccd ,_afa ,_fgab int ;_bbggg ,_edca ,_egcb byte ;);if _ebfc >=_geag ||_dfgc >=_cagb {return false ,nil ;};_fddbc :=(_geag +7)>>3;switch {case _ffgce ==0:for _afa =_dfgc ;_afa < _cagb ;_afa ,_bacfa ,_ffgcf =_afa +1,_bacfa +bm1 .RowStride ,_ffgcf +bm2 .RowStride {for _fgab =0;
_fgab < _fddbc ;_fgab ++{_bbggg =bm1 .Data [_bacfa +_fgab ]&bm2 .Data [_ffgcf +_fgab ];_gbccd +=tab [_bbggg ];};if _gbccd >=_bbdf {return true ,nil ;};if _dcge :=_gbccd +downcount [_afa ]-_dged ;_dcge < _bbdf {return false ,nil ;};};case _ffgce > 0&&_gcda < _fddbc :for _afa =_dfgc ;
_afa < _cagb ;_afa ,_bacfa ,_ffgcf =_afa +1,_bacfa +bm1 .RowStride ,_ffgcf +bm2 .RowStride {_edca =bm1 .Data [_bacfa ];_egcb =bm2 .Data [_ffgcf ]>>uint (_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];for _fgab =1;_fgab < _gcda ;_fgab ++{_edca =bm1 .Data [_bacfa +_fgab ];
_egcb =bm2 .Data [_ffgcf +_fgab ]>>uint (_ffgce )|bm2 .Data [_ffgcf +_fgab -1]<<uint (8-_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];};_edca =bm1 .Data [_bacfa +_fgab ];_egcb =bm2 .Data [_ffgcf +_fgab -1]<<uint (8-_ffgce );_bbggg =_edca &_egcb ;
_gbccd +=tab [_bbggg ];if _gbccd >=_bbdf {return true ,nil ;}else if _gbccd +downcount [_afa ]-_dged < _bbdf {return false ,nil ;};};case _ffgce > 0&&_gcda >=_fddbc :for _afa =_dfgc ;_afa < _cagb ;_afa ,_bacfa ,_ffgcf =_afa +1,_bacfa +bm1 .RowStride ,_ffgcf +bm2 .RowStride {_edca =bm1 .Data [_bacfa ];
_egcb =bm2 .Data [_ffgcf ]>>uint (_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];for _fgab =1;_fgab < _fddbc ;_fgab ++{_edca =bm1 .Data [_bacfa +_fgab ];_egcb =bm2 .Data [_ffgcf +_fgab ]>>uint (_ffgce );_egcb |=bm2 .Data [_ffgcf +_fgab -1]<<uint (8-_ffgce );
_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];};if _gbccd >=_bbdf {return true ,nil ;}else if _gbccd +downcount [_afa ]-_dged < _bbdf {return false ,nil ;};};case _fddbc < _gcda :for _afa =_dfgc ;_afa < _cagb ;_afa ,_bacfa ,_ffgcf =_afa +1,_bacfa +bm1 .RowStride ,_ffgcf +bm2 .RowStride {for _fgab =0;
_fgab < _fddbc ;_fgab ++{_edca =bm1 .Data [_bacfa +_fgab ];_egcb =bm2 .Data [_ffgcf +_fgab ]<<uint (-_ffgce );_egcb |=bm2 .Data [_ffgcf +_fgab +1]>>uint (8+_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];};if _gbccd >=_bbdf {return true ,nil ;}else if _bbbee :=_gbccd +downcount [_afa ]-_dged ;
_bbbee < _bbdf {return false ,nil ;};};case _gcda >=_fddbc :for _afa =_dfgc ;_afa < _cagb ;_afa ,_bacfa ,_ffgcf =_afa +1,_bacfa +bm1 .RowStride ,_ffgcf +bm2 .RowStride {for _fgab =0;_fgab < _fddbc ;_fgab ++{_edca =bm1 .Data [_bacfa +_fgab ];_egcb =bm2 .Data [_ffgcf +_fgab ]<<uint (-_ffgce );
_egcb |=bm2 .Data [_ffgcf +_fgab +1]>>uint (8+_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];};_edca =bm1 .Data [_bacfa +_fgab ];_egcb =bm2 .Data [_ffgcf +_fgab ]<<uint (-_ffgce );_bbggg =_edca &_egcb ;_gbccd +=tab [_bbggg ];if _gbccd >=_bbdf {return true ,nil ;
}else if _gbccd +downcount [_afa ]-_dged < _bbdf {return false ,nil ;};};};_dfaa :=float32 (_gbccd )*float32 (_gbccd )/(float32 (area1 )*float32 (area2 ));if _dfaa >=scoreThreshold {_ag .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_gbccd ,_bbdf ,_dfaa ,scoreThreshold );
};return false ,nil ;};func (_cccf *Bitmap )centroid (_dabc ,_bebfd []int )(Point ,error ){_efce :=Point {};_cccf .setPadBits (0);if len (_dabc )==0{_dabc =_cbdae ();};if len (_bebfd )==0{_bebfd =_fbe ();};var _eabc ,_fcdb ,_cbdf ,_acaf ,_dfdb ,_bfega int ;
var _cggb byte ;for _dfdb =0;_dfdb < _cccf .Height ;_dfdb ++{_eecac :=_cccf .RowStride *_dfdb ;_acaf =0;for _bfega =0;_bfega < _cccf .RowStride ;_bfega ++{_cggb =_cccf .Data [_eecac +_bfega ];if _cggb !=0{_acaf +=_bebfd [_cggb ];_eabc +=_dabc [_cggb ]+_bfega *8*_bebfd [_cggb ];
};};_cbdf +=_acaf ;_fcdb +=_acaf *_dfdb ;};if _cbdf !=0{_efce .X =float32 (_eabc )/float32 (_cbdf );_efce .Y =float32 (_fcdb )/float32 (_cbdf );};return _efce ,nil ;};func TstISymbol (t *_fd .T ,scale ...int )*Bitmap {_bcgb ,_febgd :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_f .NoError (t ,_febgd );return TstGetScaledSymbol (t ,_bcgb ,scale ...);};func (_fcec Points )Size ()int {return len (_fcec )};func _fdabg (_fcacc *Bitmap ,_fgggg *_fa .Stack ,_gfce ,_ccdac ,_defb int )(_cggc *_dg .Rectangle ,_bggb error ){const _bdga ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fcacc ==nil {return nil ,_cf .Error (_bdga ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fgggg ==nil {return nil ,_cf .Error (_bdga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _defb {case 4:if _cggc ,_bggb =_agge (_fcacc ,_fgggg ,_gfce ,_ccdac );_bggb !=nil {return nil ,_cf .Wrap (_bggb ,_bdga ,"");};return _cggc ,nil ;case 8:if _cggc ,_bggb =_ddbc (_fcacc ,_fgggg ,_gfce ,_ccdac );_bggb !=nil {return nil ,_cf .Wrap (_bggb ,_bdga ,"");
};return _cggc ,nil ;default:return nil ,_cf .Errorf (_bdga ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_defb );
};};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_abbc *ClassedPoints )validateIntSlice ()error {const _dfaaf ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_ccee :=range _abbc .IntSlice {if _ccee >=(_abbc .Points .Size ()){return _cf .Errorf (_dfaaf ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_ccee ,_abbc .Points .Size ());
};};return nil ;};func (_cbgg *Bitmap )setTwoBytes (_dbgd int ,_cef uint16 )error {if _dbgd +1> len (_cbgg .Data )-1{return _cf .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dbgd );
};_cbgg .Data [_dbgd ]=byte ((_cef &0xff00)>>8);_cbgg .Data [_dbgd +1]=byte (_cef &0xff);return nil ;};func (_gdbc *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ccdg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_gdbc .IntSlice .Size (){return 0,_cf .Errorf (_ccdg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_gdbc .YAtIndex (i )),nil ;};func (_aac *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _aac .Copy (),nil ;};_eeda ,_afd :=_aac .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _afd !=nil {return nil ,_cf .Wrap (_afd ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _eeda ,nil ;};func _fecg (_gdedb ,_egef *Bitmap ,_bdadg ,_dgeb ,_fdbb ,_gdce ,_cacb int ,_ddgc CombinationOperator )error {var _eec int ;_bgecd :=func (){_eec ++;_fdbb +=_egef .RowStride ;_gdce +=_gdedb .RowStride ;_cacb +=_gdedb .RowStride };
for _eec =_bdadg ;_eec < _dgeb ;_bgecd (){_egg :=_fdbb ;for _feeg :=_gdce ;_feeg <=_cacb ;_feeg ++{_fadd ,_gagd :=_egef .GetByte (_egg );if _gagd !=nil {return _gagd ;};_ccec ,_gagd :=_gdedb .GetByte (_feeg );if _gagd !=nil {return _gagd ;};if _gagd =_egef .SetByte (_egg ,_bffb (_fadd ,_ccec ,_ddgc ));
_gagd !=nil {return _gagd ;};_egg ++;};};return nil ;};func TstTSymbol (t *_fd .T ,scale ...int )*Bitmap {_cgbd ,_ecbb :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_ecbb );return TstGetScaledSymbol (t ,_cgbd ,scale ...);};func (_dfac *Bitmap )removeBorderGeneral (_babf ,_cbff ,_cbge ,_gadg int )(*Bitmap ,error ){const _dae ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _babf < 0||_cbff < 0||_cbge < 0||_gadg < 0{return nil ,_cf .Error (_dae ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gda ,_faae :=_dfac .Width ,_dfac .Height ;
_ccb :=_gda -_babf -_cbff ;_eaca :=_faae -_cbge -_gadg ;if _ccb <=0{return nil ,_cf .Errorf (_dae ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_ccb );};if _eaca <=0{return nil ,_cf .Errorf (_dae ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_eaca );
};_dacag :=New (_ccb ,_eaca );_dacag .Color =_dfac .Color ;_agce :=_dacag .RasterOperation (0,0,_ccb ,_eaca ,PixSrc ,_dfac ,_babf ,_cbge );if _agce !=nil {return nil ,_cf .Wrap (_agce ,_dae ,"");};return _dacag ,nil ;};func (_fad *Bitmap )setAll ()error {_feg :=_cdad (_fad ,0,0,_fad .Width ,_fad .Height ,PixSet ,nil ,0,0);
if _feg !=nil {return _cf .Wrap (_feg ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};type Points []Point ;func init (){const _ddeg ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_gecbb =New (50,40);var _dedgf error ;_gecbb ,_dedgf =_gecbb .AddBorder (2,1);if _dedgf !=nil {panic (_cf .Wrap (_dedgf ,_ddeg ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cdfb ,_dedgf =NewWithData (50,22,_edda );if _dedgf !=nil {panic (_cf .Wrap (_dedgf ,_ddeg ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _gcg (_geff ,_ebc *Bitmap )(*Bitmap ,error ){if _ebc ==nil {return nil ,_cf .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ebc ==_geff {return _geff ,nil ;
};if _geff ==nil {_geff =_ebc .createTemplate ();copy (_geff .Data ,_ebc .Data );return _geff ,nil ;};_befgd :=_geff .resizeImageData (_ebc );if _befgd !=nil {return nil ,_cf .Wrap (_befgd ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_geff .Text =_ebc .Text ;copy (_geff .Data ,_ebc .Data );return _geff ,nil ;};func (_dffc *Bitmap )setPadBits (_ccbd int ){_aade :=8-_dffc .Width %8;if _aade ==8{return ;};_cfca :=_dffc .Width /8;_ebg :=_fddd [_aade ];if _ccbd ==0{_ebg ^=_ebg ;};var _fffb int ;
for _cgb :=0;_cgb < _dffc .Height ;_cgb ++{_fffb =_cgb *_dffc .RowStride +_cfca ;if _ccbd ==0{_dffc .Data [_fffb ]&=_ebg ;}else {_dffc .Data [_fffb ]|=_ebg ;};};};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _bffb (oldByte ,newByte ,op );
};func (_abbd *byHeight )Len ()int {return len (_abbd .Values )};type BoundaryCondition int ;type CombinationOperator int ;const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;
);func (_dace *Bitmap )SetPadBits (value int ){_dace .setPadBits (value )};func _baedd (_fgbg ...MorphProcess )(_ced error ){const _eddc ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _ebfef ,_ebcfb int ;
for _cacg ,_bcef :=range _fgbg {if _ced =_bcef .verify (_cacg ,&_ebfef ,&_ebcfb );_ced !=nil {return _cf .Wrap (_ced ,_eddc ,"");};};if _ebcfb !=0&&_ebfef !=0{return _cf .Error (_eddc ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func _fdfb (_bgaa ,_daeg *Bitmap ,_gfca ,_fabg int )(*Bitmap ,error ){const _eacab ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _daeg ==nil {return nil ,_cf .Error (_eacab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gfca < 1||_fabg < 1{return nil ,_cf .Error (_eacab ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _gfca ==1&&_fabg ==1{return _daeg .Copy (),nil ;};if _gfca ==1||_fabg ==1{_bcag :=SelCreateBrick (_fabg ,_gfca ,_fabg /2,_gfca /2,SelHit );
var _babd error ;_bgaa ,_babd =_gcfd (_bgaa ,_daeg ,_bcag );if _babd !=nil {return nil ,_cf .Wrap (_babd ,_eacab ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bgaa ,nil ;};_adfe :=SelCreateBrick (1,_gfca ,0,_gfca /2,SelHit );_adbb :=SelCreateBrick (_fabg ,1,_fabg /2,0,SelHit );_befa ,_ccgab :=_bcc (nil ,_daeg ,_adfe );if _ccgab !=nil {return nil ,_cf .Wrap (_ccgab ,_eacab ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _bgaa ,_ccgab =_bcc (_bgaa ,_befa ,_adbb );_ccgab !=nil {return nil ,_cf .Wrap (_ccgab ,_eacab ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ccgab =_bcce (_befa ,_bgaa ,_adfe );_ccgab !=nil {return nil ,_cf .Wrap (_ccgab ,_eacab ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_ccgab =_bcce (_bgaa ,_befa ,_adbb );_ccgab !=nil {return nil ,_cf .Wrap (_ccgab ,_eacab ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bgaa ,nil ;};func (_bfag *ClassedPoints )Less (i ,j int )bool {return _bfag ._gebed (i ,j )};func _dgaf (_fbcg ,_fac *Bitmap ,_gea ,_eaf ,_bfced ,_gcgc ,_fecb ,_cebb ,_dbbg ,_accc int ,_acfb CombinationOperator ,_gbbb int )error {var _gbbf int ;
_cfa :=func (){_gbbf ++;_bfced +=_fac .RowStride ;_gcgc +=_fbcg .RowStride ;_fecb +=_fbcg .RowStride };for _gbbf =_gea ;_gbbf < _eaf ;_cfa (){var _acggb uint16 ;_fecdg :=_bfced ;for _dedaa :=_gcgc ;_dedaa <=_fecb ;_dedaa ++{_fca ,_bdd :=_fac .GetByte (_fecdg );
if _bdd !=nil {return _bdd ;};_dbag ,_bdd :=_fbcg .GetByte (_dedaa );if _bdd !=nil {return _bdd ;};_acggb =(_acggb |(uint16 (_dbag )&0xff))<<uint (_accc );_dbag =byte (_acggb >>8);if _bdd =_fac .SetByte (_fecdg ,_bffb (_fca ,_dbag ,_acfb ));_bdd !=nil {return _bdd ;
};_fecdg ++;_acggb <<=uint (_dbbg );if _dedaa ==_fecb {_dbag =byte (_acggb >>(8-uint8 (_accc )));if _gbbb !=0{_dbag =_dgfgc (uint (8+_cebb ),_dbag );};_fca ,_bdd =_fac .GetByte (_fecdg );if _bdd !=nil {return _bdd ;};if _bdd =_fac .SetByte (_fecdg ,_bffb (_fca ,_dbag ,_acfb ));
_bdd !=nil {return _bdd ;};};};};return nil ;};const _abgde =5000;func (_bagb *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _dbcaa ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_dbde ,_afdc :=_bagb .selectByIndexes (idx );if _afdc !=nil {return nil ,_cf .Wrap (_afdc ,_dbcaa ,"");};return _dbde ,nil ;};func (_fag *Bitmap )connComponentsBitmapsBB (_fbcf *Bitmaps ,_cgec int )(_cbb *Boxes ,_dece error ){const _abba ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cgec !=4&&_cgec !=8{return nil ,_cf .Error (_abba ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fbcf ==nil {return nil ,_cf .Error (_abba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_fbcf .Values )> 0{return nil ,_cf .Error (_abba ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _fag .Zero (){return &Boxes {},nil ;};
var (_gcbg ,_gddf ,_fdef ,_fffdd *Bitmap ;);_fag .setPadBits (0);if _gcbg ,_dece =_gcg (nil ,_fag );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062\u006d\u0031");};if _gddf ,_dece =_gcg (nil ,_fag );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062\u006d\u0032");
};_faed :=&_fa .Stack {};_faed .Aux =&_fa .Stack {};_cbb =&Boxes {};var (_bdbe ,_deca int ;_egfc _dg .Point ;_bafc bool ;_degd *_dg .Rectangle ;);for {if _egfc ,_bafc ,_dece =_gcbg .nextOnPixel (_bdbe ,_deca );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"");
};if !_bafc {break ;};if _degd ,_dece =_fdabg (_gcbg ,_faed ,_egfc .X ,_egfc .Y ,_cgec );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"");};if _dece =_cbb .Add (_degd );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"");};if _fdef ,_dece =_gcbg .clipRectangle (_degd ,nil );
_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062\u006d\u0033");};if _fffdd ,_dece =_gddf .clipRectangle (_degd ,nil );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062\u006d\u0034");};if _ ,_dece =_bbbd (_fdef ,_fdef ,_fffdd );_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _dece =_gddf .RasterOperation (_degd .Min .X ,_degd .Min .Y ,_degd .Dx (),_degd .Dy (),PixSrcXorDst ,_fdef ,0,0);_dece !=nil {return nil ,_cf .Wrap (_dece ,_abba ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};
_fbcf .AddBitmap (_fdef );_bdbe =_egfc .X ;_deca =_egfc .Y ;};_fbcf .Boxes =*_cbb ;return _cbb ,nil ;};func (_gfbgg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gfbgg .Values =append (_gfbgg .Values ,bm )};func TstWordBitmapWithSpaces (t *_fd .T ,scale ...int )*Bitmap {_dbbc :=1;
if len (scale )> 0{_dbbc =scale [0];};_gdfg :=3;_fgecf :=9+7+15+2*_gdfg +2*_gdfg ;_adegc :=5+_gdfg +5+2*_gdfg ;_ccdacg :=New (_fgecf *_dbbc ,_adegc *_dbbc );_afffe :=&Bitmaps {};var _gbccg *int ;_gdfg *=_dbbc ;_agfgg :=_gdfg ;_gbccg =&_agfgg ;_eageg :=_gdfg ;
_fgff :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,_gdfg );_fgff =TstISymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );
_fgff =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,_gdfg );_fgff =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );
_fgff =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,0);*_gbccg =_gdfg ;_eageg =5*_dbbc +_gdfg ;_fgff =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,_gdfg );
_fgff =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstESymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );
_fgff =TstESymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,1*_dbbc );_fgff =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_afffe ,_fgff ,_gbccg ,_eageg ,0);TstWriteSymbols (t ,_afffe ,_ccdacg );return _ccdacg ;};func (_efe Points )GetGeometry (i int )(_ggag ,_adgd float32 ,_gbac error ){if i > len (_efe )-1{return 0,0,_cf .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_fcgf :=_efe [i ];return _fcgf .X ,_fcgf .Y ,nil ;};func _daceb (_efb ,_dfbgb int ,_dcgfda string )*Selection {_gcadc :=&Selection {Height :_efb ,Width :_dfbgb ,Name :_dcgfda };_gcadc .Data =make ([][]SelectionValue ,_efb );for _bfea :=0;_bfea < _efb ;
_bfea ++{_gcadc .Data [_bfea ]=make ([]SelectionValue ,_dfbgb );};return _gcadc ;};func TstRSymbol (t *_fd .T ,scale ...int )*Bitmap {_fbag ,_fdeg :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_fdeg );return TstGetScaledSymbol (t ,_fbag ,scale ...);
};type Point struct{X ,Y float32 ;};func (_feed *Bitmap )Equivalent (s *Bitmap )bool {return _feed .equivalent (s )};