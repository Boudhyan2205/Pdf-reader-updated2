//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_cda "encoding/binary";_ge "github.com/stretchr/testify/require";_cd "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_bg "github.com/unidoc/unipdf/v3/internal/imageutil";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";_eaf "math";_b "sort";_ea "strings";_ga "testing";);func _ae (_bfb *Bitmap ,_ead int ,_aga []byte )(_eee *Bitmap ,_fdd error ){const _aca ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _bfb ==nil {return nil ,_g .Error (_aca ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ead < 1||_ead > 4{return nil ,_g .Error (_aca ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bfb .Height <=1{return nil ,_g .Errorf (_aca ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bfb .Height );
};_eee =New (_bfb .Width /2,_bfb .Height /2);if _aga ==nil {_aga =_bddf ();};_daf :=_gdab (_bfb .RowStride ,2*_eee .RowStride );switch _ead {case 1:_fdd =_fceb (_bfb ,_eee ,_ead ,_aga ,_daf );case 2:_fdd =_ff (_bfb ,_eee ,_ead ,_aga ,_daf );case 3:_fdd =_eagg (_bfb ,_eee ,_ead ,_aga ,_daf );
case 4:_fdd =_ggce (_bfb ,_eee ,_ead ,_aga ,_daf );};if _fdd !=nil {return nil ,_fdd ;};return _eee ,nil ;};func (_agee *Bitmap )equivalent (_befe *Bitmap )bool {if _agee ==_befe {return true ;};if !_agee .SizesEqual (_befe ){return false ;};_abeg :=_dgf (_agee ,_befe ,CmbOpXor );
_bgf :=_agee .countPixels ();_bbc :=int (0.25*float32 (_bgf ));if _abeg .thresholdPixelSum (_bbc ){return false ;};var (_aab [9][9]int ;_dfdf [18][9]int ;_bec [9][18]int ;_eaad int ;_cacf int ;);_baf :=9;_bbde :=_agee .Height /_baf ;_bgac :=_agee .Width /_baf ;
_bfge ,_gcdeg :=_bbde /2,_bgac /2;if _bbde < _bgac {_bfge =_bgac /2;_gcdeg =_bbde /2;};_gfgcg :=float64 (_bfge )*float64 (_gcdeg )*_eaf .Pi ;_ggb :=int (float64 (_bbde *_bgac /2)*0.9);_cfc :=int (float64 (_bgac *_bbde /2)*0.9);for _ccf :=0;_ccf < _baf ;
_ccf ++{_bac :=_bgac *_ccf +_eaad ;var _cdf int ;if _ccf ==_baf -1{_eaad =0;_cdf =_agee .Width ;}else {_cdf =_bac +_bgac ;if ((_agee .Width -_eaad )%_baf )> 0{_eaad ++;_cdf ++;};};for _acga :=0;_acga < _baf ;_acga ++{_daa :=_bbde *_acga +_cacf ;var _debb int ;
if _acga ==_baf -1{_cacf =0;_debb =_agee .Height ;}else {_debb =_daa +_bbde ;if (_agee .Height -_cacf )%_baf > 0{_cacf ++;_debb ++;};};var _bbdg ,_fdf ,_abd ,_gfeb int ;_ddg :=(_bac +_cdf )/2;_cef :=(_daa +_debb )/2;for _ageed :=_bac ;_ageed < _cdf ;_ageed ++{for _gdcb :=_daa ;
_gdcb < _debb ;_gdcb ++{if _abeg .GetPixel (_ageed ,_gdcb ){if _ageed < _ddg {_bbdg ++;}else {_fdf ++;};if _gdcb < _cef {_gfeb ++;}else {_abd ++;};};};};_aab [_ccf ][_acga ]=_bbdg +_fdf ;_dfdf [_ccf *2][_acga ]=_bbdg ;_dfdf [_ccf *2+1][_acga ]=_fdf ;_bec [_ccf ][_acga *2]=_gfeb ;
_bec [_ccf ][_acga *2+1]=_abd ;};};for _egf :=0;_egf < _baf *2-1;_egf ++{for _fcg :=0;_fcg < (_baf -1);_fcg ++{var _cfcb int ;for _ecff :=0;_ecff < 2;_ecff ++{for _eed :=0;_eed < 2;_eed ++{_cfcb +=_dfdf [_egf +_ecff ][_fcg +_eed ];};};if _cfcb > _cfc {return false ;
};};};for _feb :=0;_feb < (_baf -1);_feb ++{for _aeec :=0;_aeec < ((_baf *2)-1);_aeec ++{var _ebbd int ;for _bdbb :=0;_bdbb < 2;_bdbb ++{for _cgac :=0;_cgac < 2;_cgac ++{_ebbd +=_bec [_feb +_bdbb ][_aeec +_cgac ];};};if _ebbd > _ggb {return false ;};};
};for _gdba :=0;_gdba < (_baf -2);_gdba ++{for _cdda :=0;_cdda < (_baf -2);_cdda ++{var _gfge ,_ecae int ;for _cbfe :=0;_cbfe < 3;_cbfe ++{for _fec :=0;_fec < 3;_fec ++{if _cbfe ==_fec {_gfge +=_aab [_gdba +_cbfe ][_cdda +_fec ];};if (2-_cbfe )==_fec {_ecae +=_aab [_gdba +_cbfe ][_cdda +_fec ];
};};};if _gfge > _cfc ||_ecae > _cfc {return false ;};};};for _abb :=0;_abb < (_baf -1);_abb ++{for _aade :=0;_aade < (_baf -1);_aade ++{var _fggg int ;for _ceb :=0;_ceb < 2;_ceb ++{for _eafd :=0;_eafd < 2;_eafd ++{_fggg +=_aab [_abb +_ceb ][_aade +_eafd ];
};};if float64 (_fggg )> _gfgcg {return false ;};};};return true ;};var MorphBC BoundaryCondition ;func (_adcd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _adcd .Copy (),nil ;};_fab ,_gbcda :=_adcd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _gbcda !=nil {return nil ,_g .Wrap (_gbcda ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fab ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func TstWSymbol (t *_ga .T ,scale ...int )*Bitmap {_bgce ,_fefa :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_ge .NoError (t ,_fefa );return TstGetScaledSymbol (t ,_bgce ,scale ...);};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_gabe *Bitmap )addBorderGeneral (_egea ,_aafg ,_dfa ,_abeb int ,_gad int )(*Bitmap ,error ){const _dabf ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _egea < 0||_aafg < 0||_dfa < 0||_abeb < 0{return nil ,_g .Error (_dabf ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_gceb ,_edge :=_gabe .Width ,_gabe .Height ;_dbd :=_gceb +_egea +_aafg ;
_cag :=_edge +_dfa +_abeb ;_cga :=New (_dbd ,_cag );_cga .Color =_gabe .Color ;_dcf :=PixClr ;if _gad > 0{_dcf =PixSet ;};_eca :=_cga .RasterOperation (0,0,_egea ,_cag ,_dcf ,nil ,0,0);if _eca !=nil {return nil ,_g .Wrap (_eca ,_dabf ,"\u006c\u0065\u0066\u0074");
};_eca =_cga .RasterOperation (_dbd -_aafg ,0,_aafg ,_cag ,_dcf ,nil ,0,0);if _eca !=nil {return nil ,_g .Wrap (_eca ,_dabf ,"\u0072\u0069\u0067h\u0074");};_eca =_cga .RasterOperation (0,0,_dbd ,_dfa ,_dcf ,nil ,0,0);if _eca !=nil {return nil ,_g .Wrap (_eca ,_dabf ,"\u0074\u006f\u0070");
};_eca =_cga .RasterOperation (0,_cag -_abeb ,_dbd ,_abeb ,_dcf ,nil ,0,0);if _eca !=nil {return nil ,_g .Wrap (_eca ,_dabf ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_eca =_cga .RasterOperation (_egea ,_dfa ,_gceb ,_edge ,PixSrc ,_gabe ,0,0);if _eca !=nil {return nil ,_g .Wrap (_eca ,_dabf ,"\u0063\u006f\u0070\u0079");
};return _cga ,nil ;};func (_fada *ClassedPoints )ySortFunction ()func (_gecg int ,_aecge int )bool {return func (_gcdef ,_beeb int )bool {return _fada .YAtIndex (_gcdef )< _fada .YAtIndex (_beeb )};};func _cgdg (_dce ,_dcce *Bitmap ,_fbd ,_bdcd ,_cdge ,_ffda ,_dded int ,_baab CombinationOperator )error {var _gabd int ;
_gedc :=func (){_gabd ++;_cdge +=_dcce .RowStride ;_ffda +=_dce .RowStride ;_dded +=_dce .RowStride };for _gabd =_fbd ;_gabd < _bdcd ;_gedc (){_gbca :=_cdge ;for _bdbed :=_ffda ;_bdbed <=_dded ;_bdbed ++{_bebd ,_ecffg :=_dcce .GetByte (_gbca );if _ecffg !=nil {return _ecffg ;
};_edbf ,_ecffg :=_dce .GetByte (_bdbed );if _ecffg !=nil {return _ecffg ;};if _ecffg =_dcce .SetByte (_gbca ,_ggdc (_bebd ,_edbf ,_baab ));_ecffg !=nil {return _ecffg ;};_gbca ++;};};return nil ;};func _acc (_dbffc ,_cfga ,_edb *Bitmap )(*Bitmap ,error ){const _dcb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _cfga ==nil {return nil ,_g .Error (_dcb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _edb ==nil {return nil ,_g .Error (_dcb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _cabd error ;switch {case _dbffc ==_cfga :if _cabd =_dbffc .RasterOperation (0,0,_cfga .Width ,_cfga .Height ,PixNotSrcAndDst ,_edb ,0,0);
_cabd !=nil {return nil ,_g .Wrap (_cabd ,_dcb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _dbffc ==_edb :if _cabd =_dbffc .RasterOperation (0,0,_cfga .Width ,_cfga .Height ,PixNotSrcAndDst ,_cfga ,0,0);_cabd !=nil {return nil ,_g .Wrap (_cabd ,_dcb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_dbffc ,_cabd =_gabg (_dbffc ,_cfga );if _cabd !=nil {return nil ,_g .Wrap (_cabd ,_dcb ,"");};if _cabd =_dbffc .RasterOperation (0,0,_cfga .Width ,_cfga .Height ,PixNotSrcAndDst ,_edb ,0,0);_cabd !=nil {return nil ,_g .Wrap (_cabd ,_dcb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _dbffc ,nil ;};func _eefc ()(_cf [256]uint16 ){for _acg :=0;_acg < 256;_acg ++{if _acg &0x01!=0{_cf [_acg ]|=0x3;};if _acg &0x02!=0{_cf [_acg ]|=0xc;};if _acg &0x04!=0{_cf [_acg ]|=0x30;};if _acg &0x08!=0{_cf [_acg ]|=0xc0;};if _acg &0x10!=0{_cf [_acg ]|=0x300;
};if _acg &0x20!=0{_cf [_acg ]|=0xc00;};if _acg &0x40!=0{_cf [_acg ]|=0x3000;};if _acg &0x80!=0{_cf [_acg ]|=0xc000;};};return _cf ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_ged *Bitmap )Equals (s *Bitmap )bool {if len (_ged .Data )!=len (s .Data )||_ged .Width !=s .Width ||_ged .Height !=s .Height {return false ;
};for _gcde :=0;_gcde < _ged .Height ;_gcde ++{_cba :=_gcde *_ged .RowStride ;for _gcf :=0;_gcf < _ged .RowStride ;_gcf ++{if _ged .Data [_cba +_gcf ]!=s .Data [_cba +_gcf ]{return false ;};};};return true ;};func (_fee *Bitmap )setTwoBytes (_dde int ,_gedg uint16 )error {if _dde +1> len (_fee .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dde );
};_fee .Data [_dde ]=byte ((_gedg &0xff00)>>8);_fee .Data [_dde +1]=byte (_gedg &0xff);return nil ;};func _ecaef (_fbeef *Bitmap ,_ageac *Bitmap ,_dagc *Selection )(*Bitmap ,error ){var (_gfbg *Bitmap ;_adfd error ;);_fbeef ,_adfd =_cffa (_fbeef ,_ageac ,_dagc ,&_gfbg );
if _adfd !=nil {return nil ,_adfd ;};if _adfd =_fbeef .clearAll ();_adfd !=nil {return nil ,_adfd ;};var _faee SelectionValue ;for _abcc :=0;_abcc < _dagc .Height ;_abcc ++{for _eagf :=0;_eagf < _dagc .Width ;_eagf ++{_faee =_dagc .Data [_abcc ][_eagf ];
if _faee ==SelHit {if _adfd =_fbeef .RasterOperation (_eagf -_dagc .Cx ,_abcc -_dagc .Cy ,_ageac .Width ,_ageac .Height ,PixSrcOrDst ,_gfbg ,0,0);_adfd !=nil {return nil ,_adfd ;};};};};return _fbeef ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_deae bool ,_ffab error ){const _bcfg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fbdg ,_ggcee :=p1 .Width ,p1 .Height ;_bacd ,_deecg :=p3 .Width ,p3 .Height ;if _gg .Abs (_fbdg -_bacd )> maxDiffW {return false ,nil ;};if _gg .Abs (_ggcee -_deecg )> maxDiffH {return false ,nil ;};_febf :=int (float32 (area1 )*(1.0-rank )+0.5);_egag :=int (float32 (area3 )*(1.0-rank )+0.5);
var _dage ,_afed int ;if delX >=0{_dage =int (delX +0.5);}else {_dage =int (delX -0.5);};if delY >=0{_afed =int (delY +0.5);}else {_afed =int (delY -0.5);};_daad :=p1 .CreateTemplate ();if _ffab =_daad .RasterOperation (0,0,_fbdg ,_ggcee ,PixSrc ,p1 ,0,0);
_ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ffab =_daad .RasterOperation (_dage ,_afed ,_fbdg ,_ggcee ,PixNotSrcAndDst ,p4 ,0,0);_ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_deae ,_ffab =_daad .ThresholdPixelSum (_febf ,tab8 );if _ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _deae {return false ,nil ;};if _ffab =_daad .RasterOperation (_dage ,_afed ,_bacd ,_deecg ,PixSrc ,p3 ,0,0);
_ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ffab =_daad .RasterOperation (0,0,_bacd ,_deecg ,PixNotSrcAndDst ,p2 ,0,0);_ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_deae ,_ffab =_daad .ThresholdPixelSum (_egag ,tab8 );if _ffab !=nil {return false ,_g .Wrap (_ffab ,_bcfg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_deae ,nil ;};func init (){for _fgg :=0;_fgg < 256;_fgg ++{_cge [_fgg ]=uint8 (_fgg &0x1)+(uint8 (_fgg >>1)&0x1)+(uint8 (_fgg >>2)&0x1)+(uint8 (_fgg >>3)&0x1)+(uint8 (_fgg >>4)&0x1)+(uint8 (_fgg >>5)&0x1)+(uint8 (_fgg >>6)&0x1)+(uint8 (_fgg >>7)&0x1);
};};func (_fafee *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dadee *Bitmaps ,_caea error ){const _gccbb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _fafee ==nil {return nil ,_g .Error (_gccbb ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_gccbb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_gccbb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_gcaca ,_caea :=_fafee .makeSizeIndicator (width ,height ,tp ,relation );if _caea !=nil {return nil ,_g .Wrap (_caea ,_gccbb ,"");};_dadee ,_caea =_fafee .selectByIndicator (_gcaca );if _caea !=nil {return nil ,_g .Wrap (_caea ,_gccbb ,"");};return _dadee ,nil ;
};type Point struct{X ,Y float32 ;};func (_ggbe *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cega ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_gcacb ,_geccb :=_ggbe .selectByIndexes (idx );if _geccb !=nil {return nil ,_g .Wrap (_geccb ,_cega ,"");};return _gcacb ,nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ebfg float64 ,_cegg error ){const _agbg ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _ebfg ,_g .Error (_agbg ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ebfg ,_g .Error (_agbg ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _ebfg ,_g .Error (_agbg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cbdb ,_daecf :=bm1 .Width ,bm1 .Height ;_dfda ,_fbeg :=bm2 .Width ,bm2 .Height ;
if _eafed (_cbdb -_dfda )> maxDiffW {return 0,nil ;};if _eafed (_daecf -_fbeg )> maxDiffH {return 0,nil ;};var _gfcc ,_efcb int ;if delX >=0{_gfcc =int (delX +0.5);}else {_gfcc =int (delX -0.5);};if delY >=0{_efcb =int (delY +0.5);}else {_efcb =int (delY -0.5);
};_cfe :=bm1 .createTemplate ();if _cegg =_cfe .RasterOperation (_gfcc ,_efcb ,_dfda ,_fbeg ,PixSrc ,bm2 ,0,0);_cegg !=nil {return _ebfg ,_g .Wrap (_cegg ,_agbg ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _cegg =_cfe .RasterOperation (0,0,_cbdb ,_daecf ,PixSrcAndDst ,bm1 ,0,0);
_cegg !=nil {return _ebfg ,_g .Wrap (_cegg ,_agbg ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_bfc :=_cfe .countPixels ();_ebfg =float64 (_bfc )*float64 (_bfc )/(float64 (area1 )*float64 (area2 ));return _ebfg ,nil ;};func (_cbe *Bitmap )setBit (_dbff int ){_cbe .Data [(_dbff >>3)]|=0x80>>uint (_dbff &7)};
func (_bdeb *Boxes )makeSizeIndicator (_ecfdf ,_accf int ,_fgaa LocationFilter ,_dfe SizeComparison )*_gg .NumSlice {_bcb :=&_gg .NumSlice {};var _dda ,_feea ,_ccdg int ;for _ ,_dfb :=range *_bdeb {_dda =0;_feea ,_ccdg =_dfb .Dx (),_dfb .Dy ();switch _fgaa {case LocSelectWidth :if (_dfe ==SizeSelectIfLT &&_feea < _ecfdf )||(_dfe ==SizeSelectIfGT &&_feea > _ecfdf )||(_dfe ==SizeSelectIfLTE &&_feea <=_ecfdf )||(_dfe ==SizeSelectIfGTE &&_feea >=_ecfdf ){_dda =1;
};case LocSelectHeight :if (_dfe ==SizeSelectIfLT &&_ccdg < _accf )||(_dfe ==SizeSelectIfGT &&_ccdg > _accf )||(_dfe ==SizeSelectIfLTE &&_ccdg <=_accf )||(_dfe ==SizeSelectIfGTE &&_ccdg >=_accf ){_dda =1;};case LocSelectIfEither :if (_dfe ==SizeSelectIfLT &&(_ccdg < _accf ||_feea < _ecfdf ))||(_dfe ==SizeSelectIfGT &&(_ccdg > _accf ||_feea > _ecfdf ))||(_dfe ==SizeSelectIfLTE &&(_ccdg <=_accf ||_feea <=_ecfdf ))||(_dfe ==SizeSelectIfGTE &&(_ccdg >=_accf ||_feea >=_ecfdf )){_dda =1;
};case LocSelectIfBoth :if (_dfe ==SizeSelectIfLT &&(_ccdg < _accf &&_feea < _ecfdf ))||(_dfe ==SizeSelectIfGT &&(_ccdg > _accf &&_feea > _ecfdf ))||(_dfe ==SizeSelectIfLTE &&(_ccdg <=_accf &&_feea <=_ecfdf ))||(_dfe ==SizeSelectIfGTE &&(_ccdg >=_accf &&_feea >=_ecfdf )){_dda =1;
};};_bcb .AddInt (_dda );};return _bcb ;};type Color int ;func (_egca *Bitmap )ClipRectangle (box *_c .Rectangle )(_deb *Bitmap ,_bbbg *_c .Rectangle ,_cdad error ){const _gfe ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_g .Error (_gfe ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bgg ,_edc :=_egca .Width ,_egca .Height ;_aae :=_c .Rect (0,0,_bgg ,_edc );if !box .Overlaps (_aae ){return nil ,nil ,_g .Error (_gfe ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gbb :=box .Intersect (_aae );_gfc ,_eadg :=_gbb .Min .X ,_gbb .Min .Y ;_ffa ,_dgc :=_gbb .Dx (),_gbb .Dy ();_deb =New (_ffa ,_dgc );_deb .Text =_egca .Text ;if _cdad =_deb .RasterOperation (0,0,_ffa ,_dgc ,PixSrc ,_egca ,_gfc ,_eadg );_cdad !=nil {return nil ,nil ,_g .Wrap (_cdad ,_gfe ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_bbbg =&_gbb ;return _deb ,_bbbg ,nil ;};func (_afbe *byWidth )Less (i ,j int )bool {return _afbe .Values [i ].Width < _afbe .Values [j ].Width };func _bdbbe (_cade *Bitmap ,_ffff *Bitmap ,_cead int )(_adgb error ){const _begdd ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_gcgd :=_gdab (_cade .Height ,_ffff .Height );_ccde :=_gdab (_cade .RowStride ,_ffff .RowStride );switch _cead {case 4:_adgb =_aggf (_cade ,_ffff ,_gcgd ,_ccde );case 8:_adgb =_ebdb (_cade ,_ffff ,_gcgd ,_ccde );default:return _g .Errorf (_begdd ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_cead );
};if _adgb !=nil {return _g .Wrap (_adgb ,_begdd ,"");};return nil ;};func (_gcbf *Bitmap )SetByte (index int ,v byte )error {if index > len (_gcbf .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_gcbf .Data [index ]=v ;return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _gabg (d ,s )};func TstImageBitmapInverseData ()[]byte {_deacg :=_cafeg .Copy ();_deacg .InverseData ();return _deacg .Data ;};func (_cfbfg Points )GetGeometry (i int )(_bbbgc ,_degd float32 ,_cggf error ){if i > len (_cfbfg )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_bgafg :=_cfbfg [i ];return _bgafg .X ,_bgafg .Y ,nil ;};func _bddf ()(_ecdg []byte ){_ecdg =make ([]byte ,256);for _aeag :=0;_aeag < 256;_aeag ++{_dbgc :=byte (_aeag );_ecdg [_dbgc ]=(_dbgc &0x01)|((_dbgc &0x04)>>1)|((_dbgc &0x10)>>2)|((_dbgc &0x40)>>3)|((_dbgc &0x02)<<3)|((_dbgc &0x08)<<2)|((_dbgc &0x20)<<1)|(_dbgc &0x80);
};return _ecdg ;};func (_eda *Bitmap )removeBorderGeneral (_agea ,_defc ,_geb ,_egg int )(*Bitmap ,error ){const _dba ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _agea < 0||_defc < 0||_geb < 0||_egg < 0{return nil ,_g .Error (_dba ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_agbb ,_dfac :=_eda .Width ,_eda .Height ;_cabf :=_agbb -_agea -_defc ;_gbde :=_dfac -_geb -_egg ;if _cabf <=0{return nil ,_g .Errorf (_dba ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_cabf );
};if _gbde <=0{return nil ,_g .Errorf (_dba ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_gbde );};_efe :=New (_cabf ,_gbde );_efe .Color =_eda .Color ;_dbfe :=_efe .RasterOperation (0,0,_cabf ,_gbde ,PixSrc ,_eda ,_agea ,_geb );
if _dbfe !=nil {return nil ,_g .Wrap (_dbfe ,_dba ,"");};return _efe ,nil ;};func (_eceg *Bitmap )clearAll ()error {return _eceg .RasterOperation (0,0,_eceg .Width ,_eceg .Height ,PixClr ,nil ,0,0);};func _ade (_acgf ,_daag ,_agd *Bitmap )(*Bitmap ,error ){const _gcdf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _daag ==nil {return nil ,_g .Error (_gcdf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _agd ==nil {return nil ,_g .Error (_gcdf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _acgf ==_agd {return nil ,_g .Error (_gcdf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_daag .SizesEqual (_agd ){_cd .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_gcdf );
};var _gge error ;if _acgf ,_gge =_gabg (_acgf ,_daag );_gge !=nil {return nil ,_g .Wrap (_gge ,_gcdf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gge =_acgf .RasterOperation (0,0,_acgf .Width ,_acgf .Height ,PixSrcXorDst ,_agd ,0,0);
_gge !=nil {return nil ,_g .Wrap (_gge ,_gcdf ,"");};return _acgf ,nil ;};func (_gbfb *Bitmaps )AddBox (box *_c .Rectangle ){_gbfb .Boxes =append (_gbfb .Boxes ,box )};func (_cbb *Bitmap )setEightBytes (_gadb int ,_cgd uint64 )error {_gbcgc :=_cbb .RowStride -(_gadb %_cbb .RowStride );
if _cbb .RowStride !=_cbb .Width >>3{_gbcgc --;};if _gbcgc >=8{return _cbb .setEightFullBytes (_gadb ,_cgd );};return _cbb .setEightPartlyBytes (_gadb ,_gbcgc ,_cgd );};func _ggab (_beaa ,_edf int ,_edag string )*Selection {_cfdf :=&Selection {Height :_beaa ,Width :_edf ,Name :_edag };
_cfdf .Data =make ([][]SelectionValue ,_beaa );for _afeg :=0;_afeg < _beaa ;_afeg ++{_cfdf .Data [_afeg ]=make ([]SelectionValue ,_edf );};return _cfdf ;};func (_dgcee *Bitmap )InverseData (){_dgcee .inverseData ()};func TstImageBitmap ()*Bitmap {return _cafeg .Copy ()};
func MakePixelCentroidTab8 ()[]int {return _fgbg ()};func (_egfa *Bitmaps )WidthSorter ()func (_gagca ,_bgcddd int )bool {return func (_bdbeb ,_adbd int )bool {return _egfa .Values [_bdbeb ].Width < _egfa .Values [_adbd ].Width };};func NewClassedPoints (points *Points ,classes _gg .IntSlice )(*ClassedPoints ,error ){const _aegb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_g .Error (_aegb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_g .Error (_aegb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_bfea :=&ClassedPoints {Points :points ,IntSlice :classes };if _dcbf :=_bfea .validateIntSlice ();_dcbf !=nil {return nil ,_g .Wrap (_dcbf ,_aegb ,"");};return _bfea ,nil ;};var _cge [256]uint8 ;type SelectionValue int ;type Selection struct{Height ,Width int ;
Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _cdb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_dgba ,_bdge :=p1 .Width ,p1 .Height ;_adba ,_cdgf :=p3 .Width ,p3 .Height ;
if _gg .Abs (_dgba -_adba )> maxDiffW {return false ,nil ;};if _gg .Abs (_bdge -_cdgf )> maxDiffH {return false ,nil ;};_bccd :=int (delX +_gg .Sign (delX )*0.5);_afddg :=int (delY +_gg .Sign (delY )*0.5);var _deac error ;_cffd :=p1 .CreateTemplate ();
if _deac =_cffd .RasterOperation (0,0,_dgba ,_bdge ,PixSrc ,p1 ,0,0);_deac !=nil {return false ,_g .Wrap (_deac ,_cdb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _deac =_cffd .RasterOperation (_bccd ,_afddg ,_dgba ,_bdge ,PixNotSrcAndDst ,p4 ,0,0);
_deac !=nil {return false ,_g .Wrap (_deac ,_cdb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _cffd .Zero (){return false ,nil ;};if _deac =_cffd .RasterOperation (_bccd ,_afddg ,_adba ,_cdgf ,PixSrc ,p3 ,0,0);_deac !=nil {return false ,_g .Wrap (_deac ,_cdb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _deac =_cffd .RasterOperation (0,0,_adba ,_cdgf ,PixNotSrcAndDst ,p2 ,0,0);_deac !=nil {return false ,_g .Wrap (_deac ,_cdb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cffd .Zero (),nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func TstDSymbol (t *_ga .T ,scale ...int )*Bitmap {_deegf ,_cgbg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_ge .NoError (t ,_cgbg );return TstGetScaledSymbol (t ,_deegf ,scale ...);};func TstISymbol (t *_ga .T ,scale ...int )*Bitmap {_fbcga ,_gegf :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_ge .NoError (t ,_gegf );return TstGetScaledSymbol (t ,_fbcga ,scale ...);};func _cccf (_aadee ,_bfag ,_dbae *Bitmap ,_geac int )(*Bitmap ,error ){const _gacf ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _bfag ==nil {return nil ,_g .Error (_gacf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dbae ==nil {return nil ,_g .Error (_gacf ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _geac !=4&&_geac !=8{return nil ,_g .Error (_gacf ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _efab error ;_aadee ,_efab =_gabg (_aadee ,_bfag );if _efab !=nil {return nil ,_g .Wrap (_efab ,_gacf ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_fffb :=_bfag .createTemplate ();_dbae .setPadBits (0);
for _ebda :=0;_ebda < _cbfc ;_ebda ++{_fffb ,_efab =_gabg (_fffb ,_aadee );if _efab !=nil {return nil ,_g .Wrapf (_efab ,_gacf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ebda );};if _efab =_bdbbe (_aadee ,_dbae ,_geac );
_efab !=nil {return nil ,_g .Wrapf (_efab ,_gacf ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ebda );};if _fffb .Equals (_aadee ){break ;};};return _aadee ,nil ;};func _ff (_gabb ,_bgc *Bitmap ,_bdbe int ,_eae []byte ,_eeeg int )(_abga error ){const _gfg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_eea ,_eb ,_dab ,_fgag ,_fag ,_gdc ,_dae ,_gga int ;_bccc ,_ced ,_acb ,_aeg uint32 ;_ada ,_fgaf byte ;_faf uint16 ;);_aaf :=make ([]byte ,4);_bgcd :=make ([]byte ,4);for _dab =0;_dab < _gabb .Height -1;_dab ,_fgag =_dab +2,_fgag +1{_eea =_dab *_gabb .RowStride ;
_eb =_fgag *_bgc .RowStride ;for _fag ,_gdc =0,0;_fag < _eeeg ;_fag ,_gdc =_fag +4,_gdc +1{for _dae =0;_dae < 4;_dae ++{_gga =_eea +_fag +_dae ;if _gga <=len (_gabb .Data )-1&&_gga < _eea +_gabb .RowStride {_aaf [_dae ]=_gabb .Data [_gga ];}else {_aaf [_dae ]=0x00;
};_gga =_eea +_gabb .RowStride +_fag +_dae ;if _gga <=len (_gabb .Data )-1&&_gga < _eea +(2*_gabb .RowStride ){_bgcd [_dae ]=_gabb .Data [_gga ];}else {_bgcd [_dae ]=0x00;};};_bccc =_cda .BigEndian .Uint32 (_aaf );_ced =_cda .BigEndian .Uint32 (_bgcd );
_acb =_bccc &_ced ;_acb |=_acb <<1;_aeg =_bccc |_ced ;_aeg &=_aeg <<1;_ced =_acb |_aeg ;_ced &=0xaaaaaaaa;_bccc =_ced |(_ced <<7);_ada =byte (_bccc >>24);_fgaf =byte ((_bccc >>8)&0xff);_gga =_eb +_gdc ;if _gga +1==len (_bgc .Data )-1||_gga +1>=_eb +_bgc .RowStride {if _abga =_bgc .SetByte (_gga ,_eae [_ada ]);
_abga !=nil {return _g .Wrapf (_abga ,_gfg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gga );};}else {_faf =(uint16 (_eae [_ada ])<<8)|uint16 (_eae [_fgaf ]);if _abga =_bgc .setTwoBytes (_gga ,_faf );_abga !=nil {return _g .Wrapf (_abga ,_gfg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gga );
};_gdc ++;};};};return nil ;};func (_afbf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _gbgg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_afbf .IntSlice .Size (){return 0,_g .Errorf (_gbgg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_afbf .YAtIndex (i )),nil ;};func (_gfag *BitmapsArray )GetBox (i int )(*_c .Rectangle ,error ){const _gbcad ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _gfag ==nil {return nil ,_g .Error (_gbcad ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_gfag .Boxes )-1{return nil ,_g .Errorf (_gbcad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gfag .Boxes [i ],nil ;};func (_cggb *Bitmap )connComponentsBitmapsBB (_dfaca *Bitmaps ,_cfd int )(_ggfd *Boxes ,_aaaf error ){const _dffg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cfd !=4&&_cfd !=8{return nil ,_g .Error (_dffg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _dfaca ==nil {return nil ,_g .Error (_dffg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_dfaca .Values )> 0{return nil ,_g .Error (_dffg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cggb .Zero (){return &Boxes {},nil ;
};var (_bdgc ,_affe ,_gedgc ,_cecgc *Bitmap ;);_cggb .setPadBits (0);if _bdgc ,_aaaf =_gabg (nil ,_cggb );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062\u006d\u0031");};if _affe ,_aaaf =_gabg (nil ,_cggb );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062\u006d\u0032");
};_dffe :=&_gg .Stack {};_dffe .Aux =&_gg .Stack {};_ggfd =&Boxes {};var (_cfgd ,_bag int ;_ddfc _c .Point ;_bgfe bool ;_abega *_c .Rectangle ;);for {if _ddfc ,_bgfe ,_aaaf =_bdgc .nextOnPixel (_cfgd ,_bag );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"");
};if !_bgfe {break ;};if _abega ,_aaaf =_bgcf (_bdgc ,_dffe ,_ddfc .X ,_ddfc .Y ,_cfd );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"");};if _aaaf =_ggfd .Add (_abega );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"");};if _gedgc ,_aaaf =_bdgc .clipRectangle (_abega ,nil );
_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062\u006d\u0033");};if _cecgc ,_aaaf =_affe .clipRectangle (_abega ,nil );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062\u006d\u0034");};if _ ,_aaaf =_ade (_gedgc ,_gedgc ,_cecgc );_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _aaaf =_affe .RasterOperation (_abega .Min .X ,_abega .Min .Y ,_abega .Dx (),_abega .Dy (),PixSrcXorDst ,_gedgc ,0,0);_aaaf !=nil {return nil ,_g .Wrap (_aaaf ,_dffg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_dfaca .AddBitmap (_gedgc );_cfgd =_ddfc .X ;_bag =_ddfc .Y ;};_dfaca .Boxes =*_ggfd ;return _ggfd ,nil ;};func (_edab *Bitmaps )CountPixels ()*_gg .NumSlice {_dgac :=&_gg .NumSlice {};for _ ,_ggabb :=range _edab .Values {_dgac .AddInt (_ggabb .CountPixels ());
};return _dgac ;};func (_fae *Bitmap )And (s *Bitmap )(_dee *Bitmap ,_fbc error ){const _efa ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _fae ==nil {return nil ,_g .Error (_efa ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_g .Error (_efa ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_fae .SizesEqual (s ){_cd .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_efa );
};if _dee ,_fbc =_gabg (_dee ,_fae );_fbc !=nil {return nil ,_g .Wrap (_fbc ,_efa ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fbc =_dee .RasterOperation (0,0,_dee .Width ,_dee .Height ,PixSrcAndDst ,s ,0,0);
_fbc !=nil {return nil ,_g .Wrap (_fbc ,_efa ,"");};return _dee ,nil ;};var (_bcaged =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_efg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _fgbg ()[]int {_gfgb :=make ([]int ,256);_gfgb [0]=0;
_gfgb [1]=7;var _ffcb int ;for _ffcb =2;_ffcb < 4;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -2]+6;};for _ffcb =4;_ffcb < 8;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -4]+5;};for _ffcb =8;_ffcb < 16;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -8]+4;};for _ffcb =16;_ffcb < 32;
_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -16]+3;};for _ffcb =32;_ffcb < 64;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -32]+2;};for _ffcb =64;_ffcb < 128;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -64]+1;};for _ffcb =128;_ffcb < 256;_ffcb ++{_gfgb [_ffcb ]=_gfgb [_ffcb -128];
};return _gfgb ;};func (_bagf *ClassedPoints )Swap (i ,j int ){_bagf .IntSlice [i ],_bagf .IntSlice [j ]=_bagf .IntSlice [j ],_bagf .IntSlice [i ];};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_c .Rectangle ;};type Getter interface{GetBitmap ()*Bitmap ;
};func (_bff *Bitmap )GetVanillaData ()[]byte {if _bff .Color ==Chocolate {_bff .inverseData ();};return _bff .Data ;};func TstOSymbol (t *_ga .T ,scale ...int )*Bitmap {_cfcg ,_gdec :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_ge .NoError (t ,_gdec );
return TstGetScaledSymbol (t ,_cfcg ,scale ...);};func (_fbb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fbb .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fbb .Data [index ],nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _eafa ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_fe :=_agg (width ,height );
_fe .Data =data ;if _dfgg :=((width *height )+7)>>3;len (data )< _dfgg {return nil ,_g .Errorf (_eafa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_dfgg );
};if _ddb :=_fe .addPadBits ();_ddb !=nil {return nil ,_g .Wrap (_ddb ,_eafa ,"");};return _fe ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_bdf :=make ([]Point ,len (bms ));_cefbc :=_fgbg ();_baee :=_cdbc ();var _fgdc error ;for _adf ,_abda :=range bms {_bdf [_adf ],_fgdc =_abda .centroid (_cefbc ,_baee );
if _fgdc !=nil {return nil ,_fgdc ;};};_fagg :=Points (_bdf );return &_fagg ,nil ;};func _gabg (_egae ,_egde *Bitmap )(*Bitmap ,error ){if _egde ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _egde ==_egae {return _egae ,nil ;};if _egae ==nil {_egae =_egde .createTemplate ();copy (_egae .Data ,_egde .Data );return _egae ,nil ;};_dfdff :=_egae .resizeImageData (_egde );if _dfdff !=nil {return nil ,_g .Wrap (_dfdff ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_egae .Text =_egde .Text ;copy (_egae .Data ,_egde .Data );return _egae ,nil ;};func (_gbcd *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _gbcd .Copy (),nil ;};_ebc ,_bgd :=_gbcd .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _bgd !=nil {return nil ,_g .Wrap (_bgd ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _ebc ,nil ;};func (_egeb CombinationOperator )String ()string {var _fdfc string ;switch _egeb {case CmbOpOr :_fdfc ="\u004f\u0052";case CmbOpAnd :_fdfc ="\u0041\u004e\u0044";
case CmbOpXor :_fdfc ="\u0058\u004f\u0052";case CmbOpXNor :_fdfc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_fdfc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_fdfc ="\u004e\u004f\u0054";};return _fdfc ;};var (_deed =_eefc ();_acge =_fga ();
_agba =_dd (););func (_gdg *Bitmap )GetPixel (x ,y int )bool {_abc :=_gdg .GetByteIndex (x ,y );_adcc :=_gdg .GetBitOffset (x );_ggdg :=uint (7-_adcc );if _abc > len (_gdg .Data )-1{_cd .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gdg );
return false ;};if (_gdg .Data [_abc ]>>_ggdg )&0x01>=1{return true ;};return false ;};func _dgf (_gdda ,_fgdd *Bitmap ,_dgd CombinationOperator )*Bitmap {_fbdc :=New (_gdda .Width ,_gdda .Height );for _dfdc :=0;_dfdc < len (_fbdc .Data );_dfdc ++{_fbdc .Data [_dfdc ]=_ggdc (_gdda .Data [_dfdc ],_fgdd .Data [_dfdc ],_dgd );
};return _fbdc ;};func _ggce (_ggd ,_gbfa *Bitmap ,_cca int ,_gca []byte ,_adc int )(_dbg error ){const _acf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_def ,_fcba ,_bdg ,_bcgd ,_bed ,_aea ,_caee ,_eec int ;
_ebb ,_gef uint32 ;_cab ,_abe byte ;_gbga uint16 ;);_eabc :=make ([]byte ,4);_daec :=make ([]byte ,4);for _bdg =0;_bdg < _ggd .Height -1;_bdg ,_bcgd =_bdg +2,_bcgd +1{_def =_bdg *_ggd .RowStride ;_fcba =_bcgd *_gbfa .RowStride ;for _bed ,_aea =0,0;_bed < _adc ;
_bed ,_aea =_bed +4,_aea +1{for _caee =0;_caee < 4;_caee ++{_eec =_def +_bed +_caee ;if _eec <=len (_ggd .Data )-1&&_eec < _def +_ggd .RowStride {_eabc [_caee ]=_ggd .Data [_eec ];}else {_eabc [_caee ]=0x00;};_eec =_def +_ggd .RowStride +_bed +_caee ;if _eec <=len (_ggd .Data )-1&&_eec < _def +(2*_ggd .RowStride ){_daec [_caee ]=_ggd .Data [_eec ];
}else {_daec [_caee ]=0x00;};};_ebb =_cda .BigEndian .Uint32 (_eabc );_gef =_cda .BigEndian .Uint32 (_daec );_gef &=_ebb ;_gef &=_gef <<1;_gef &=0xaaaaaaaa;_ebb =_gef |(_gef <<7);_cab =byte (_ebb >>24);_abe =byte ((_ebb >>8)&0xff);_eec =_fcba +_aea ;if _eec +1==len (_gbfa .Data )-1||_eec +1>=_fcba +_gbfa .RowStride {_gbfa .Data [_eec ]=_gca [_cab ];
if _dbg =_gbfa .SetByte (_eec ,_gca [_cab ]);_dbg !=nil {return _g .Wrapf (_dbg ,_acf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eec );};}else {_gbga =(uint16 (_gca [_cab ])<<8)|uint16 (_gca [_abe ]);if _dbg =_gbfa .setTwoBytes (_eec ,_gbga );_dbg !=nil {return _g .Wrapf (_dbg ,_acf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eec );
};_aea ++;};};};return nil ;};func (_deggf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_deggf .Values =append (_deggf .Values ,bm )};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _deg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_bbe :=_agg (width ,height );_bbe .Data =data ;if len (data )< height *_bbe .RowStride {return nil ,_g .Errorf (_deg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_bbe .RowStride );
};return _bbe ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);
func Rect (x ,y ,w ,h int )(*_c .Rectangle ,error ){const _bgaf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_bgaf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_bgaf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_beg :=_c .Rect (x ,y ,x +w ,y +h );return &_beg ,nil ;
};func (_bgde Points )Size ()int {return len (_bgde )};func _cbfd (_aced *Bitmap ,_gbgb ,_agga ,_addd ,_bdfg int ,_cefd RasterOperator ,_eefbg *Bitmap ,_aaddc ,_ebdg int )error {var (_adbb bool ;_bfca bool ;_gddb byte ;_beff int ;_bgcdd int ;_cdgef int ;
_eeg int ;_gdfb bool ;_befc int ;_cadf int ;_dcd int ;_geaf bool ;_edeb byte ;_ffacd int ;_dcge int ;_ebffe int ;_bacac byte ;_degf int ;_cdcc int ;_eceb uint ;_ddab uint ;_bcbe byte ;_bcgg shift ;_bafa bool ;_fgdg bool ;_gbee ,_bbca int ;);if _aaddc &7!=0{_cdcc =8-(_aaddc &7);
};if _gbgb &7!=0{_bgcdd =8-(_gbgb &7);};if _cdcc ==0&&_bgcdd ==0{_bcbe =_efg [0];}else {if _bgcdd > _cdcc {_eceb =uint (_bgcdd -_cdcc );}else {_eceb =uint (8-(_cdcc -_bgcdd ));};_ddab =8-_eceb ;_bcbe =_efg [_eceb ];};if (_gbgb &7)!=0{_adbb =true ;_beff =8-(_gbgb &7);
_gddb =_efg [_beff ];_cdgef =_aced .RowStride *_agga +(_gbgb >>3);_eeg =_eefbg .RowStride *_ebdg +(_aaddc >>3);_degf =8-(_aaddc &7);if _beff > _degf {_bcgg =_aafgg ;if _addd >=_cdcc {_bafa =true ;};}else {_bcgg =_bbgff ;};};if _addd < _beff {_bfca =true ;
_gddb &=_bcaged [8-_beff +_addd ];};if !_bfca {_befc =(_addd -_beff )>>3;if _befc !=0{_gdfb =true ;_cadf =_aced .RowStride *_agga +((_gbgb +_bgcdd )>>3);_dcd =_eefbg .RowStride *_ebdg +((_aaddc +_bgcdd )>>3);};};_ffacd =(_gbgb +_addd )&7;if !(_bfca ||_ffacd ==0){_geaf =true ;
_edeb =_bcaged [_ffacd ];_dcge =_aced .RowStride *_agga +((_gbgb +_bgcdd )>>3)+_befc ;_ebffe =_eefbg .RowStride *_ebdg +((_aaddc +_bgcdd )>>3)+_befc ;if _ffacd > int (_ddab ){_fgdg =true ;};};switch _cefd {case PixSrc :if _adbb {for _gbee =0;_gbee < _bdfg ;
_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac ,_gddb );
_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]=_bacac ;
};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac ,_edeb );
_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixNotSrc :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;
};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^_bacac ,_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );
_aced .Data [_cadf +_bbca ]=^_bacac ;};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );
};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^_bacac ,_edeb );_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixSrcOrDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );
};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac |_aced .Data [_cdgef ],_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;
_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]|=_bacac ;};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;
_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac |_aced .Data [_dcge ],_edeb );_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;
};};case PixSrcAndDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac &_aced .Data [_cdgef ],_gddb );
_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]&=_bacac ;
};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac &_aced .Data [_dcge ],_edeb );
_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixSrcXorDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );
};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac ^_aced .Data [_cdgef ],_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;
_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]^=_bacac ;};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;
_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac ^_aced .Data [_dcge ],_edeb );_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;
};};case PixNotSrcOrDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^_bacac |_aced .Data [_cdgef ],_gddb );
_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]|=^_bacac ;
};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^_bacac |_aced .Data [_dcge ],_edeb );
_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixNotSrcAndDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );
};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^_bacac &_aced .Data [_cdgef ],_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;
_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]&=^_bacac ;};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;
_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^_bacac &_aced .Data [_dcge ],_edeb );_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;
};};case PixSrcOrNotDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac |^_aced .Data [_cdgef ],_gddb );
_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]=_bacac |^_aced .Data [_cadf +_bbca ];
};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac |^_aced .Data [_dcge ],_edeb );
_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixSrcAndNotDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );
};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],_bacac &^_aced .Data [_cdgef ],_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;
_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]=_bacac &^_aced .Data [_cadf +_bbca ];};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;
_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],_bacac &^_aced .Data [_dcge ],_edeb );_dcge +=_aced .RowStride ;
_ebffe +=_eefbg .RowStride ;};};case PixNotPixSrcOrDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;
};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^(_bacac |_aced .Data [_cdgef ]),_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );
_aced .Data [_cadf +_bbca ]=^(_bacac |_aced .Data [_cadf +_bbca ]);};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );
};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^(_bacac |_aced .Data [_dcge ]),_edeb );_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixNotPixSrcAndDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;
if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^(_bacac &_aced .Data [_cdgef ]),_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;
};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]=^(_bacac &_aced .Data [_cadf +_bbca ]);
};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^(_bacac &_aced .Data [_dcge ]),_edeb );
_dcge +=_aced .RowStride ;_ebffe +=_eefbg .RowStride ;};};case PixNotPixSrcXorDst :if _adbb {for _gbee =0;_gbee < _bdfg ;_gbee ++{if _bcgg ==_aafgg {_bacac =_eefbg .Data [_eeg ]<<_eceb ;if _bafa {_bacac =_dbcg (_bacac ,_eefbg .Data [_eeg +1]>>_ddab ,_bcbe );
};}else {_bacac =_eefbg .Data [_eeg ]>>_ddab ;};_aced .Data [_cdgef ]=_dbcg (_aced .Data [_cdgef ],^(_bacac ^_aced .Data [_cdgef ]),_gddb );_cdgef +=_aced .RowStride ;_eeg +=_eefbg .RowStride ;};};if _gdfb {for _gbee =0;_gbee < _bdfg ;_gbee ++{for _bbca =0;
_bbca < _befc ;_bbca ++{_bacac =_dbcg (_eefbg .Data [_dcd +_bbca ]<<_eceb ,_eefbg .Data [_dcd +_bbca +1]>>_ddab ,_bcbe );_aced .Data [_cadf +_bbca ]=^(_bacac ^_aced .Data [_cadf +_bbca ]);};_cadf +=_aced .RowStride ;_dcd +=_eefbg .RowStride ;};};if _geaf {for _gbee =0;
_gbee < _bdfg ;_gbee ++{_bacac =_eefbg .Data [_ebffe ]<<_eceb ;if _fgdg {_bacac =_dbcg (_bacac ,_eefbg .Data [_ebffe +1]>>_ddab ,_bcbe );};_aced .Data [_dcge ]=_dbcg (_aced .Data [_dcge ],^(_bacac ^_aced .Data [_dcge ]),_edeb );_dcge +=_aced .RowStride ;
_ebffe +=_eefbg .RowStride ;};};default:_cd .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cefd );return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_eadde *BitmapsArray )AddBox (box *_c .Rectangle ){_eadde .Boxes =append (_eadde .Boxes ,box )};func (_afd *Bitmap )Copy ()*Bitmap {_beb :=make ([]byte ,len (_afd .Data ));copy (_beb ,_afd .Data );return &Bitmap {Width :_afd .Width ,Height :_afd .Height ,RowStride :_afd .RowStride ,Data :_beb ,Color :_afd .Color ,Text :_afd .Text ,BitmapNumber :_afd .BitmapNumber ,Special :_afd .Special };
};func _aafe (_ebbc *_gg .Stack ,_fdbff ,_ffcg ,_cdccc ,_caeb ,_fece int ,_bdgd *_c .Rectangle )(_dgdd error ){const _bgef ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _ebbc ==nil {return _g .Error (_bgef ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bdgd ==nil {return _g .Error (_bgef ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_bdgd .Min .X =_gg .Min (_bdgd .Min .X ,_fdbff );_bdgd .Max .X =_gg .Max (_bdgd .Max .X ,_ffcg );_bdgd .Min .Y =_gg .Min (_bdgd .Min .Y ,_cdccc );_bdgd .Max .Y =_gg .Max (_bdgd .Max .Y ,_cdccc );if !(_cdccc +_caeb >=0&&_cdccc +_caeb <=_fece ){return nil ;
};if _ebbc .Aux ==nil {return _g .Error (_bgef ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _aabc *fillSegment ;_ecga ,_deff :=_ebbc .Aux .Pop ();if _deff {if _aabc ,_deff =_ecga .(*fillSegment );
!_deff {return _g .Error (_bgef ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_aabc =&fillSegment {};
};_aabc ._eaae =_fdbff ;_aabc ._dec =_ffcg ;_aabc ._bdecg =_cdccc ;_aabc ._ddcd =_caeb ;_ebbc .Push (_aabc );return nil ;};func (_gdfe *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _gbce ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _ceca :=_gdfe .validateIntSlice ();_ceca !=nil {return nil ,_g .Wrap (_ceca ,_gbce ,"");};if _gdfe .IntSlice .Size ()==0{return nil ,_g .Error (_gbce ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_gdfe .SortByY ();var (_ccge []*ClassedPoints ;_gbeg int ;);_fdae :=-1;var _gecd *ClassedPoints ;for _bgbc :=0;_bgbc < len (_gdfe .IntSlice );_bgbc ++{_gbeg =int (_gdfe .YAtIndex (_bgbc ));if _gbeg !=_fdae {_gecd =&ClassedPoints {Points :_gdfe .Points };
_fdae =_gbeg ;_ccge =append (_ccge ,_gecd );};_gecd .IntSlice =append (_gecd .IntSlice ,_gdfe .IntSlice [_bgbc ]);};for _ ,_cddebf :=range _ccge {_cddebf .SortByX ();};return _ccge ,nil ;};func (_fafc *Points )AddPoint (x ,y float32 ){*_fafc =append (*_fafc ,Point {x ,y })};
func _ffdf (_bbdge *Bitmap ,_gbega ,_bea ,_gfgga ,_ggaga int ,_caefc RasterOperator ,_ebcd *Bitmap ,_efea ,_gffg int )error {const _fabce ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _bbdge ==nil {return _g .Error (_fabce ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _caefc ==PixDst {return nil ;};switch _caefc {case PixClr ,PixSet ,PixNotDst :_abdb (_bbdge ,_gbega ,_bea ,_gfgga ,_ggaga ,_caefc );return nil ;};if _ebcd ==nil {_cd .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _g .Error (_fabce ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _babaa :=_gcac (_bbdge ,_gbega ,_bea ,_gfgga ,_ggaga ,_caefc ,_ebcd ,_efea ,_gffg );_babaa !=nil {return _g .Wrap (_babaa ,_fabce ,"");
};return nil ;};type BoundaryCondition int ;type byWidth Bitmaps ;type ClassedPoints struct{*Points ;_gg .IntSlice ;_bgacg func (_bcbfc ,_babd int )bool ;};type SizeComparison int ;const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;
PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;
PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;
);const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func TstGetScaledSymbol (t *_ga .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};
if scale [0]==1{return sm ;};_deegb ,_fged :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_ge .NoError (t ,_fged );return _deegb ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;
);func (_ffb *Bitmap )setEightPartlyBytes (_fgad ,_fgd int ,_bbcd uint64 )(_befg error ){var (_cddeb byte ;_daba int ;);const _deef ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _degg :=1;
_degg <=_fgd ;_degg ++{_daba =64-_degg *8;_cddeb =byte (_bbcd >>uint (_daba )&0xff);_cd .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_cddeb ,_fgad ,_fgad +_degg -1,_fgd ,_daba );
if _befg =_ffb .SetByte (_fgad +_degg -1,_cddeb );_befg !=nil {return _g .Wrap (_befg ,_deef ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_ffg :=_ffb .RowStride *8-_ffb .Width ;if _ffg ==0{return nil ;};_daba -=8;_cddeb =byte (_bbcd >>uint (_daba )&0xff)<<uint (_ffg );
if _befg =_ffb .SetByte (_fgad +_fgd ,_cddeb );_befg !=nil {return _g .Wrap (_befg ,_deef ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};const _cbfc =5000;type shift int ;func TstImageBitmapData ()[]byte {return _cafeg .Data };func _age (_fc ,_dfg *Bitmap )(_fb error ){const _bgb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_fa :=_dfg .RowStride ;_bf :=_fc .RowStride ;var _eab ,_fg ,_fac ,_cdg ,_da int ;for _fac =0;_fac < _dfg .Height ;_fac ++{_eab =_fac *_fa ;_fg =8*_fac *_bf ;for _cdg =0;_cdg < _fa ;_cdg ++{if _fb =_fc .setEightBytes (_fg +_cdg *8,_agba [_dfg .Data [_eab +_cdg ]]);
_fb !=nil {return _g .Wrap (_fb ,_bgb ,"");};};for _da =1;_da < 8;_da ++{for _cdg =0;_cdg < _bf ;_cdg ++{if _fb =_fc .SetByte (_fg +_da *_bf +_cdg ,_fc .Data [_fg +_cdg ]);_fb !=nil {return _g .Wrap (_fb ,_bgb ,"");};};};};return nil ;};func (_ecbf *byHeight )Len ()int {return len (_ecbf .Values )};
func (_dead *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_deeg *Boxes ,_ggf error ){const _ggcd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _dead ==nil {return nil ,_g .Error (_ggcd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_ggcd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _deeg ,_ggf =_dead .connComponentsBB (connectivity );
_ggf !=nil {return nil ,_g .Wrap (_ggf ,_ggcd ,"");};}else {if _deeg ,_ggf =_dead .connComponentsBitmapsBB (bms ,connectivity );_ggf !=nil {return nil ,_g .Wrap (_ggf ,_ggcd ,"");};};return _deeg ,nil ;};func (_ebbbg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gfd *Boxes ,_gdad error ){const _dgccc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _ebbbg ==nil {return nil ,_g .Error (_dgccc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_ebbbg )==0{return _ebbbg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_dgccc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_dgccc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_afee :=_ebbbg .makeSizeIndicator (width ,height ,tp ,relation );_gdac ,_gdad :=_ebbbg .selectWithIndicator (_afee );if _gdad !=nil {return nil ,_g .Wrap (_gdad ,_dgccc ,"");};return _gdac ,nil ;};func (_bccbc *ClassedPoints )YAtIndex (i int )float32 {return (*_bccbc .Points )[_bccbc .IntSlice [i ]].Y };
func (_gedf *byHeight )Less (i ,j int )bool {return _gedf .Values [i ].Height < _gedf .Values [j ].Height };func (_bcggd *Bitmaps )SortByWidth (){_bbfad :=(*byWidth )(_bcggd );_b .Sort (_bbfad )};func TstRSymbol (t *_ga .T ,scale ...int )*Bitmap {_efedg ,_cfeaf :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_ge .NoError (t ,_cfeaf );return TstGetScaledSymbol (t ,_efedg ,scale ...);};func TstFrameBitmapData ()[]byte {return _afbdg .Data };func _eece (_cegf ,_bbgd *Bitmap ,_afc ,_abfe ,_eafeg ,_bbdd ,_dff ,_ddbc ,_ccaa ,_acdc int ,_dgcc CombinationOperator )error {var _bfe int ;
_gbgf :=func (){_bfe ++;_eafeg +=_bbgd .RowStride ;_bbdd +=_cegf .RowStride ;_dff +=_cegf .RowStride };for _bfe =_afc ;_bfe < _abfe ;_gbgf (){var _gadd uint16 ;_fagae :=_eafeg ;for _gefe :=_bbdd ;_gefe <=_dff ;_gefe ++{_ecaa ,_gec :=_bbgd .GetByte (_fagae );
if _gec !=nil {return _gec ;};_acdb ,_gec :=_cegf .GetByte (_gefe );if _gec !=nil {return _gec ;};_gadd =(_gadd |uint16 (_acdb ))<<uint (_acdc );_acdb =byte (_gadd >>8);if _gefe ==_dff {_acdb =_acde (uint (_ddbc ),_acdb );};if _gec =_bbgd .SetByte (_fagae ,_ggdc (_ecaa ,_acdb ,_dgcc ));
_gec !=nil {return _gec ;};_fagae ++;_gadd <<=uint (_ccaa );};};return nil ;};func Extract (roi _c .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ecffe :=New (roi .Dx (),roi .Dy ());_faec :=roi .Min .X &0x07;_egda :=8-_faec ;_cefb :=uint (8-_ecffe .Width &0x07);
_begb :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_beeg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_ccba :=_ecffe .RowStride ==_beeg +1-_begb ;var _cece int ;for _aafbg :=roi .Min .Y ;_aafbg < roi .Max .Y ;_aafbg ++{_cedf :=_begb ;_geba :=_cece ;
switch {case _begb ==_beeg :_ggag ,_cbcb :=src .GetByte (_cedf );if _cbcb !=nil {return nil ,_cbcb ;};_ggag <<=uint (_faec );_cbcb =_ecffe .SetByte (_geba ,_acde (_cefb ,_ggag ));if _cbcb !=nil {return nil ,_cbcb ;};case _faec ==0:for _faecd :=_begb ;_faecd <=_beeg ;
_faecd ++{_bbgg ,_eada :=src .GetByte (_cedf );if _eada !=nil {return nil ,_eada ;};_cedf ++;if _faecd ==_beeg &&_ccba {_bbgg =_acde (_cefb ,_bbgg );};_eada =_ecffe .SetByte (_geba ,_bbgg );if _eada !=nil {return nil ,_eada ;};_geba ++;};default:_ebddc :=_agbbg (src ,_ecffe ,uint (_faec ),uint (_egda ),_cefb ,_begb ,_beeg ,_ccba ,_cedf ,_geba );
if _ebddc !=nil {return nil ,_ebddc ;};};_begb +=src .RowStride ;_beeg +=src .RowStride ;_cece +=_ecffe .RowStride ;};return _ecffe ,nil ;};func TstCSymbol (t *_ga .T )*Bitmap {t .Helper ();_bgfc :=New (6,6);_ge .NoError (t ,_bgfc .SetPixel (1,0,1));_ge .NoError (t ,_bgfc .SetPixel (2,0,1));
_ge .NoError (t ,_bgfc .SetPixel (3,0,1));_ge .NoError (t ,_bgfc .SetPixel (4,0,1));_ge .NoError (t ,_bgfc .SetPixel (0,1,1));_ge .NoError (t ,_bgfc .SetPixel (5,1,1));_ge .NoError (t ,_bgfc .SetPixel (0,2,1));_ge .NoError (t ,_bgfc .SetPixel (0,3,1));
_ge .NoError (t ,_bgfc .SetPixel (0,4,1));_ge .NoError (t ,_bgfc .SetPixel (5,4,1));_ge .NoError (t ,_bgfc .SetPixel (1,5,1));_ge .NoError (t ,_bgfc .SetPixel (2,5,1));_ge .NoError (t ,_bgfc .SetPixel (3,5,1));_ge .NoError (t ,_bgfc .SetPixel (4,5,1));
return _bgfc ;};func _bbfaf (_cgafe ...MorphProcess )(_bceb error ){const _bfgea ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _caab ,_cgdge int ;for _ecfc ,_fbef :=range _cgafe {if _bceb =_fbef .verify (_ecfc ,&_caab ,&_cgdge );
_bceb !=nil {return _g .Wrap (_bceb ,_bfgea ,"");};};if _cgdge !=0&&_caab !=0{return _g .Error (_bfgea ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _abebc ,_ddfb int ;_aadd :=src .RowStride -1;if x < 0{_ddfb =-x ;x =0;}else if x +src .Width > dst .Width {_aadd -=src .Width +x -dst .Width ;};if y < 0{_abebc =-y ;
y =0;_ddfb +=src .RowStride ;_aadd +=src .RowStride ;}else if y +src .Height > dst .Height {_abebc =src .Height +y -dst .Height ;};var (_fabf int ;_bdda error ;);_fcfg :=x &0x07;_efeb :=8-_fcfg ;_ebd :=src .Width &0x07;_fba :=_efeb -_ebd ;_fddg :=_efeb &0x07!=0;
_afg :=src .Width <=((_aadd -_ddfb )<<3)+_efeb ;_egad :=dst .GetByteIndex (x ,y );_babg :=_abebc +dst .Height ;if src .Height > _babg {_fabf =_babg ;}else {_fabf =src .Height ;};switch {case !_fddg :_bdda =_cgdg (src ,dst ,_abebc ,_fabf ,_egad ,_ddfb ,_aadd ,op );
case _afg :_bdda =_eece (src ,dst ,_abebc ,_fabf ,_egad ,_ddfb ,_aadd ,_fba ,_fcfg ,_efeb ,op );default:_bdda =_dafab (src ,dst ,_abebc ,_fabf ,_egad ,_ddfb ,_aadd ,_fba ,_fcfg ,_efeb ,op ,_ebd );};return _bdda ;};func TstWordBitmapWithSpaces (t *_ga .T ,scale ...int )*Bitmap {_ffbgf :=1;
if len (scale )> 0{_ffbgf =scale [0];};_abedf :=3;_ccfff :=9+7+15+2*_abedf +2*_abedf ;_aace :=5+_abedf +5+2*_abedf ;_gegdd :=New (_ccfff *_ffbgf ,_aace *_ffbgf );_eefdd :=&Bitmaps {};var _cbee *int ;_abedf *=_ffbgf ;_gaag :=_abedf ;_cbee =&_gaag ;_agdf :=_abedf ;
_eeaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,_abedf );_eeaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );
_eeaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,_abedf );_eeaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );
_eeaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,0);*_cbee =_abedf ;_agdf =5*_ffbgf +_abedf ;_eeaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,_abedf );
_eeaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );
_eeaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,1*_ffbgf );_eeaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_eefdd ,_eeaf ,_cbee ,_agdf ,0);TstWriteSymbols (t ,_eefdd ,_gegdd );return _gegdd ;};func (_aecg Points )Get (i int )(Point ,error ){if i > len (_aecg )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _aecg [i ],nil ;};func _ab (_eg ,_ag *Bitmap )(_cbd error ){const _ad ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_bc :=_ag .RowStride ;_abg :=_eg .RowStride ;_f :=_ag .RowStride *4-_eg .RowStride ;
var (_fd ,_bdd byte ;_aa uint32 ;_egc ,_gab ,_de ,_bcc ,_af ,_db ,_ee int ;);for _de =0;_de < _ag .Height ;_de ++{_egc =_de *_bc ;_gab =4*_de *_abg ;for _bcc =0;_bcc < _bc ;_bcc ++{_fd =_ag .Data [_egc +_bcc ];_aa =_acge [_fd ];_db =_gab +_bcc *4;if _f !=0&&(_bcc +1)*4> _eg .RowStride {for _af =_f ;
_af > 0;_af --{_bdd =byte ((_aa >>uint (_af *8))&0xff);_ee =_db +(_f -_af );if _cbd =_eg .SetByte (_ee ,_bdd );_cbd !=nil {return _g .Wrapf (_cbd ,_ad ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_af );
};};}else if _cbd =_eg .setFourBytes (_db ,_aa );_cbd !=nil {return _g .Wrap (_cbd ,_ad ,"");};if _cbd =_eg .setFourBytes (_gab +_bcc *4,_acge [_ag .Data [_egc +_bcc ]]);_cbd !=nil {return _g .Wrap (_cbd ,_ad ,"");};};for _af =1;_af < 4;_af ++{for _bcc =0;
_bcc < _abg ;_bcc ++{if _cbd =_eg .SetByte (_gab +_af *_abg +_bcc ,_eg .Data [_gab +_bcc ]);_cbd !=nil {return _g .Wrapf (_cbd ,_ad ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_af ,_bcc );
};};};};return nil ;};func (_ffe *ClassedPoints )XAtIndex (i int )float32 {return (*_ffe .Points )[_ffe .IntSlice [i ]].X };func TstNSymbol (t *_ga .T ,scale ...int )*Bitmap {_abced ,_gcea :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_ge .NoError (t ,_gcea );
return TstGetScaledSymbol (t ,_abced ,scale ...);};func (_acbc *Bitmap )resizeImageData (_ecfd *Bitmap )error {if _ecfd ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _acbc .SizesEqual (_ecfd ){return nil ;};_acbc .Data =make ([]byte ,len (_ecfd .Data ));_acbc .Width =_ecfd .Width ;_acbc .Height =_ecfd .Height ;_acbc .RowStride =_ecfd .RowStride ;return nil ;};func _fcac (_edd *Bitmap ,_baffc ...MorphProcess )(_fcef *Bitmap ,_bffbc error ){const _ecffgd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _edd ==nil {return nil ,_g .Error (_ecffgd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_baffc )==0{return nil ,_g .Error (_ecffgd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bffbc =_bbfaf (_baffc ...);
_bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};var _cdc ,_degb ,_fdab int ;_fcef =_edd .Copy ();for _ ,_bgfd :=range _baffc {switch _bgfd .Operation {case MopDilation :_cdc ,_degb =_bgfd .getWidthHeight ();_fcef ,_bffbc =DilateBrick (nil ,_fcef ,_cdc ,_degb );
if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};case MopErosion :_cdc ,_degb =_bgfd .getWidthHeight ();_fcef ,_bffbc =_begba (nil ,_fcef ,_cdc ,_degb );if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};case MopOpening :_cdc ,_degb =_bgfd .getWidthHeight ();
_fcef ,_bffbc =_fcc (nil ,_fcef ,_cdc ,_degb );if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};case MopClosing :_cdc ,_degb =_bgfd .getWidthHeight ();_fcef ,_bffbc =_gccb (nil ,_fcef ,_cdc ,_degb );if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");
};case MopRankBinaryReduction :_fcef ,_bffbc =_effb (_fcef ,_bgfd .Arguments ...);if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};case MopReplicativeBinaryExpansion :_fcef ,_bffbc =_abef (_fcef ,_bgfd .Arguments [0]);if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");
};case MopAddBorder :_fdab =_bgfd .Arguments [0];_fcef ,_bffbc =_fcef .AddBorder (_fdab ,0);if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"");};default:return nil ,_g .Error (_ecffgd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _fdab > 0{_fcef ,_bffbc =_fcef .RemoveBorder (_fdab );if _bffbc !=nil {return nil ,_g .Wrap (_bffbc ,_ecffgd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _fcef ,nil ;};func _cdacf (_abgab ,_afbb *Bitmap ,_cgea *Selection )(*Bitmap ,error ){const _fcae ="\u006f\u0070\u0065\u006e";
var _eagc error ;_abgab ,_eagc =_abde (_abgab ,_afbb ,_cgea );if _eagc !=nil {return nil ,_g .Wrap (_eagc ,_fcae ,"");};_faefb ,_eagc :=_gddd (nil ,_afbb ,_cgea );if _eagc !=nil {return nil ,_g .Wrap (_eagc ,_fcae ,"");};_ ,_eagc =_ecaef (_abgab ,_faefb ,_cgea );
if _eagc !=nil {return nil ,_g .Wrap (_eagc ,_fcae ,"");};return _abgab ,nil ;};func (_faaf *Points )Add (pt *Points )error {const _eabcgc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _faaf ==nil {return _g .Error (_eabcgc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _g .Error (_eabcgc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_faaf =append (*_faaf ,*pt ...);return nil ;};func _gecc (_cggfe *Bitmap ,_gedge *_gg .Stack ,_fbba ,_badf int )(_gegd *_c .Rectangle ,_beebb error ){const _ddfg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _cggfe ==nil {return nil ,_g .Error (_ddfg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gedge ==nil {return nil ,_g .Error (_ddfg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_gcbcc ,_gbdge :=_cggfe .Width ,_cggfe .Height ;_fgcb :=_gcbcc -1;_fdee :=_gbdge -1;if _fbba < 0||_fbba > _fgcb ||_badf < 0||_badf > _fdee ||!_cggfe .GetPixel (_fbba ,_badf ){return nil ,nil ;};var _ebfe *_c .Rectangle ;_ebfe ,_beebb =Rect (100000,100000,0,0);
if _beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"");};if _beebb =_aafe (_gedge ,_fbba ,_fbba ,_badf ,1,_fdee ,_ebfe );_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _beebb =_aafe (_gedge ,_fbba ,_fbba ,_badf +1,-1,_fdee ,_ebfe );
_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ebfe .Min .X ,_ebfe .Max .X =_fbba ,_fbba ;_ebfe .Min .Y ,_ebfe .Max .Y =_badf ,_badf ;var (_dade *fillSegment ;
_bece int ;);for _gedge .Len ()> 0{if _dade ,_beebb =_fage (_gedge );_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"");};_badf =_dade ._bdecg ;for _fbba =_dade ._eaae ;_fbba >=0&&_cggfe .GetPixel (_fbba ,_badf );_fbba --{if _beebb =_cggfe .SetPixel (_fbba ,_badf ,0);
_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"");};};if _fbba >=_dade ._eaae {for _fbba ++;_fbba <=_dade ._dec &&_fbba <=_fgcb &&!_cggfe .GetPixel (_fbba ,_badf );_fbba ++{};_bece =_fbba ;if !(_fbba <=_dade ._dec &&_fbba <=_fgcb ){continue ;};}else {_bece =_fbba +1;
if _bece < _dade ._eaae -1{if _beebb =_aafe (_gedge ,_bece ,_dade ._eaae -1,_dade ._bdecg ,-_dade ._ddcd ,_fdee ,_ebfe );_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fbba =_dade ._eaae +1;};for {for ;_fbba <=_fgcb &&_cggfe .GetPixel (_fbba ,_badf );_fbba ++{if _beebb =_cggfe .SetPixel (_fbba ,_badf ,0);_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _beebb =_aafe (_gedge ,_bece ,_fbba -1,_dade ._bdecg ,_dade ._ddcd ,_fdee ,_ebfe );
_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fbba > _dade ._dec +1{if _beebb =_aafe (_gedge ,_dade ._dec +1,_fbba -1,_dade ._bdecg ,-_dade ._ddcd ,_fdee ,_ebfe );_beebb !=nil {return nil ,_g .Wrap (_beebb ,_ddfg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fbba ++;_fbba <=_dade ._dec &&_fbba <=_fgcb &&!_cggfe .GetPixel (_fbba ,_badf );_fbba ++{};_bece =_fbba ;if !(_fbba <=_dade ._dec &&_fbba <=_fgcb ){break ;};};};_ebfe .Max .X ++;_ebfe .Max .Y ++;return _ebfe ,nil ;};func _abdb (_cafe *Bitmap ,_bdff ,_dfc ,_fcbf ,_ffag int ,_eefcd RasterOperator ){if _bdff < 0{_fcbf +=_bdff ;
_bdff =0;};_bead :=_bdff +_fcbf -_cafe .Width ;if _bead > 0{_fcbf -=_bead ;};if _dfc < 0{_ffag +=_dfc ;_dfc =0;};_eagae :=_dfc +_ffag -_cafe .Height ;if _eagae > 0{_ffag -=_eagae ;};if _fcbf <=0||_ffag <=0{return ;};if (_bdff &7)==0{_faed (_cafe ,_bdff ,_dfc ,_fcbf ,_ffag ,_eefcd );
}else {_gdef (_cafe ,_bdff ,_dfc ,_fcbf ,_ffag ,_eefcd );};};var (_afbdg *Bitmap ;_cafeg *Bitmap ;);func _befa (_gag ,_egbc int )int {if _gag > _egbc {return _gag ;};return _egbc ;};func TstPSymbol (t *_ga .T )*Bitmap {t .Helper ();_fgda :=New (5,8);_ge .NoError (t ,_fgda .SetPixel (0,0,1));
_ge .NoError (t ,_fgda .SetPixel (1,0,1));_ge .NoError (t ,_fgda .SetPixel (2,0,1));_ge .NoError (t ,_fgda .SetPixel (3,0,1));_ge .NoError (t ,_fgda .SetPixel (4,1,1));_ge .NoError (t ,_fgda .SetPixel (0,1,1));_ge .NoError (t ,_fgda .SetPixel (4,2,1));
_ge .NoError (t ,_fgda .SetPixel (0,2,1));_ge .NoError (t ,_fgda .SetPixel (4,3,1));_ge .NoError (t ,_fgda .SetPixel (0,3,1));_ge .NoError (t ,_fgda .SetPixel (0,4,1));_ge .NoError (t ,_fgda .SetPixel (1,4,1));_ge .NoError (t ,_fgda .SetPixel (2,4,1));
_ge .NoError (t ,_fgda .SetPixel (3,4,1));_ge .NoError (t ,_fgda .SetPixel (0,5,1));_ge .NoError (t ,_fgda .SetPixel (0,6,1));_ge .NoError (t ,_fgda .SetPixel (0,7,1));return _fgda ;};func _begba (_adfe ,_gfdg *Bitmap ,_gbfeb ,_bgbge int )(*Bitmap ,error ){const _addb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _gfdg ==nil {return nil ,_g .Error (_addb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gbfeb < 1||_bgbge < 1{return nil ,_g .Error (_addb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gbfeb ==1&&_bgbge ==1{_bacab ,_daac :=_gabg (_adfe ,_gfdg );if _daac !=nil {return nil ,_g .Wrap (_daac ,_addb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bacab ,nil ;};if _gbfeb ==1||_bgbge ==1{_bbbc :=SelCreateBrick (_bgbge ,_gbfeb ,_bgbge /2,_gbfeb /2,SelHit );_acba ,_bccf :=_gddd (_adfe ,_gfdg ,_bbbc );if _bccf !=nil {return nil ,_g .Wrap (_bccf ,_addb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _acba ,nil ;};_dcg :=SelCreateBrick (1,_gbfeb ,0,_gbfeb /2,SelHit );_efdb :=SelCreateBrick (_bgbge ,1,_bgbge /2,0,SelHit );_gdcbd ,_fecg :=_gddd (nil ,_gfdg ,_dcg );if _fecg !=nil {return nil ,_g .Wrap (_fecg ,_addb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_adfe ,_fecg =_gddd (_adfe ,_gdcbd ,_efdb );if _fecg !=nil {return nil ,_g .Wrap (_fecg ,_addb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _adfe ,nil ;};func (_gbea Points )YSorter ()func (_ebab ,_deea int )bool {return func (_egcee ,_effe int )bool {return _gbea [_egcee ].Y < _gbea [_effe ].Y };
};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _cb (_gd ,_ca *Bitmap )(_d error ){const _ac ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_gde :=_ca .RowStride ;_ace :=_gd .RowStride ;var (_df byte ;_gb uint16 ;_acd ,_bd ,_bb ,_ce ,_geg int ;);for _bb =0;_bb < _ca .Height ;_bb ++{_acd =_bb *_gde ;_bd =2*_bb *_ace ;for _ce =0;_ce < _gde ;_ce ++{_df =_ca .Data [_acd +_ce ];_gb =_deed [_df ];
_geg =_bd +_ce *2;if _gd .RowStride !=_ca .RowStride *2&&(_ce +1)*2> _gd .RowStride {_d =_gd .SetByte (_geg ,byte (_gb >>8));}else {_d =_gd .setTwoBytes (_geg ,_gb );};if _d !=nil {return _g .Wrap (_d ,_ac ,"");};};for _ce =0;_ce < _ace ;_ce ++{_geg =_bd +_ace +_ce ;
_df =_gd .Data [_bd +_ce ];if _d =_gd .SetByte (_geg ,_df );_d !=nil {return _g .Wrapf (_d ,_ac ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bd +_ce ,_bd +_ace +_ce );
};};};return nil ;};func _faed (_adccg *Bitmap ,_ebcfa ,_abfed int ,_cefc ,_afcd int ,_cabg RasterOperator ){var (_dgbf int ;_egaa byte ;_agbf ,_bcda int ;_dddg int ;);_fbabb :=_cefc >>3;_abfdc :=_cefc &7;if _abfdc > 0{_egaa =_bcaged [_abfdc ];};_dgbf =_adccg .RowStride *_abfed +(_ebcfa >>3);
switch _cabg {case PixClr :for _agbf =0;_agbf < _afcd ;_agbf ++{_dddg =_dgbf +_agbf *_adccg .RowStride ;for _bcda =0;_bcda < _fbabb ;_bcda ++{_adccg .Data [_dddg ]=0x0;_dddg ++;};if _abfdc > 0{_adccg .Data [_dddg ]=_dbcg (_adccg .Data [_dddg ],0x0,_egaa );
};};case PixSet :for _agbf =0;_agbf < _afcd ;_agbf ++{_dddg =_dgbf +_agbf *_adccg .RowStride ;for _bcda =0;_bcda < _fbabb ;_bcda ++{_adccg .Data [_dddg ]=0xff;_dddg ++;};if _abfdc > 0{_adccg .Data [_dddg ]=_dbcg (_adccg .Data [_dddg ],0xff,_egaa );};};
case PixNotDst :for _agbf =0;_agbf < _afcd ;_agbf ++{_dddg =_dgbf +_agbf *_adccg .RowStride ;for _bcda =0;_bcda < _fbabb ;_bcda ++{_adccg .Data [_dddg ]=^_adccg .Data [_dddg ];_dddg ++;};if _abfdc > 0{_adccg .Data [_dddg ]=_dbcg (_adccg .Data [_dddg ],^_adccg .Data [_dddg ],_egaa );
};};};};func (_ddc *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_aef bool ,_ebeb error ){const _aaea ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_cdbc ();
};_cfg :=_ddc .Width >>3;_ecb :=_ddc .Width &7;_ccb :=byte (0xff<<uint (8-_ecb ));var (_abce ,_cad ,_aag ,_fffc int ;_fgf byte ;);for _abce =0;_abce < _ddc .Height ;_abce ++{_aag =_ddc .RowStride *_abce ;for _cad =0;_cad < _cfg ;_cad ++{_fgf ,_ebeb =_ddc .GetByte (_aag +_cad );
if _ebeb !=nil {return false ,_g .Wrap (_ebeb ,_aaea ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_fffc +=tab8 [_fgf ];};if _ecb !=0{_fgf ,_ebeb =_ddc .GetByte (_aag +_cad );if _ebeb !=nil {return false ,_g .Wrap (_ebeb ,_aaea ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_fgf &=_ccb ;_fffc +=tab8 [_fgf ];};if _fffc > thresh {return true ,nil ;};};return _aef ,nil ;};func _fage (_gceef *_gg .Stack )(_fgdff *fillSegment ,_gebd error ){const _geca ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _gceef ==nil {return nil ,_g .Error (_geca ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _gceef .Aux ==nil {return nil ,_g .Error (_geca ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_eegb ,_abedb :=_gceef .Pop ();if !_abedb {return nil ,nil ;};_feab ,_abedb :=_eegb .(*fillSegment );if !_abedb {return nil ,_g .Error (_geca ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_fgdff =&fillSegment {_feab ._eaae ,_feab ._dec ,_feab ._bdecg +_feab ._ddcd ,_feab ._ddcd };_gceef .Aux .Push (_feab );return _fgdff ,nil ;};func _effb (_afe *Bitmap ,_gac ...int )(_bcf *Bitmap ,_cg error ){const _caef ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _afe ==nil {return nil ,_g .Error (_caef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_gac )==0||len (_gac )> 4{return nil ,_g .Error (_caef ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _gac [0]<=0{_cd .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_bcf ,_cg =_gabg (nil ,_afe );if _cg !=nil {return nil ,_g .Wrap (_cg ,_caef ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _bcf ,nil ;};_bba :=_bddf ();_bcf =_afe ;for _dbf ,_bde :=range _gac {if _bde <=0{break ;};_bcf ,_cg =_ae (_bcf ,_bde ,_bba );if _cg !=nil {return nil ,_g .Wrapf (_cg ,_caef ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_dbf );
};};return _bcf ,nil ;};func (_acee *Bitmap )clipRectangle (_ddbe ,_gda *_c .Rectangle )(_gbdg *Bitmap ,_cdgd error ){const _caf ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _ddbe ==nil {return nil ,_g .Error (_caf ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_dea ,_fda :=_acee .Width ,_acee .Height ;_aefc ,_cdgd :=ClipBoxToRectangle (_ddbe ,_dea ,_fda );if _cdgd !=nil {_cd .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cdgd );
return nil ,nil ;};_ccc ,_afec :=_aefc .Min .X ,_aefc .Min .Y ;_bga ,_dac :=_aefc .Max .X -_aefc .Min .X ,_aefc .Max .Y -_aefc .Min .Y ;_gbdg =New (_bga ,_dac );_gbdg .Text =_acee .Text ;if _cdgd =_gbdg .RasterOperation (0,0,_bga ,_dac ,PixSrc ,_acee ,_ccc ,_afec );
_cdgd !=nil {return nil ,_g .Wrap (_cdgd ,_caf ,"");};if _gda !=nil {*_gda =*_aefc ;};return _gbdg ,nil ;};func (_gcef *Bitmap )setAll ()error {_gea :=_ffdf (_gcef ,0,0,_gcef .Width ,_gcef .Height ,PixSet ,nil ,0,0);if _gea !=nil {return _g .Wrap (_gea ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func _gdef (_fdge *Bitmap ,_dcbg ,_cagf int ,_dgga ,_egcc int ,_ecebc RasterOperator ){var (_abag bool ;_fbdde bool ;_agab int ;_dacf int ;_ebcfb int ;_bcaga int ;_dbgbg bool ;_gcabg byte ;);_abee :=8-(_dcbg &7);_cbga :=_efg [_abee ];_cagg :=_fdge .RowStride *_cagf +(_dcbg >>3);
if _dgga < _abee {_abag =true ;_cbga &=_bcaged [8-_abee +_dgga ];};if !_abag {_agab =(_dgga -_abee )>>3;if _agab !=0{_fbdde =true ;_dacf =_cagg +1;};};_ebcfb =(_dcbg +_dgga )&7;if !(_abag ||_ebcfb ==0){_dbgbg =true ;_gcabg =_bcaged [_ebcfb ];_bcaga =_cagg +1+_agab ;
};var _ddgg ,_ffgf int ;switch _ecebc {case PixClr :for _ddgg =0;_ddgg < _egcc ;_ddgg ++{_fdge .Data [_cagg ]=_dbcg (_fdge .Data [_cagg ],0x0,_cbga );_cagg +=_fdge .RowStride ;};if _fbdde {for _ddgg =0;_ddgg < _egcc ;_ddgg ++{for _ffgf =0;_ffgf < _agab ;
_ffgf ++{_fdge .Data [_dacf +_ffgf ]=0x0;};_dacf +=_fdge .RowStride ;};};if _dbgbg {for _ddgg =0;_ddgg < _egcc ;_ddgg ++{_fdge .Data [_bcaga ]=_dbcg (_fdge .Data [_bcaga ],0x0,_gcabg );_bcaga +=_fdge .RowStride ;};};case PixSet :for _ddgg =0;_ddgg < _egcc ;
_ddgg ++{_fdge .Data [_cagg ]=_dbcg (_fdge .Data [_cagg ],0xff,_cbga );_cagg +=_fdge .RowStride ;};if _fbdde {for _ddgg =0;_ddgg < _egcc ;_ddgg ++{for _ffgf =0;_ffgf < _agab ;_ffgf ++{_fdge .Data [_dacf +_ffgf ]=0xff;};_dacf +=_fdge .RowStride ;};};if _dbgbg {for _ddgg =0;
_ddgg < _egcc ;_ddgg ++{_fdge .Data [_bcaga ]=_dbcg (_fdge .Data [_bcaga ],0xff,_gcabg );_bcaga +=_fdge .RowStride ;};};case PixNotDst :for _ddgg =0;_ddgg < _egcc ;_ddgg ++{_fdge .Data [_cagg ]=_dbcg (_fdge .Data [_cagg ],^_fdge .Data [_cagg ],_cbga );
_cagg +=_fdge .RowStride ;};if _fbdde {for _ddgg =0;_ddgg < _egcc ;_ddgg ++{for _ffgf =0;_ffgf < _agab ;_ffgf ++{_fdge .Data [_dacf +_ffgf ]=^(_fdge .Data [_dacf +_ffgf ]);};_dacf +=_fdge .RowStride ;};};if _dbgbg {for _ddgg =0;_ddgg < _egcc ;_ddgg ++{_fdge .Data [_bcaga ]=_dbcg (_fdge .Data [_bcaga ],^_fdge .Data [_bcaga ],_gcabg );
_bcaga +=_fdge .RowStride ;};};};};func TstESymbol (t *_ga .T ,scale ...int )*Bitmap {_fcdd ,_gfdf :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_ge .NoError (t ,_gfdf );return TstGetScaledSymbol (t ,_fcdd ,scale ...);};func (_aceef *Bitmaps )selectByIndicator (_gffd *_gg .NumSlice )(_gdgd *Bitmaps ,_afa error ){const _bffd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _aceef ==nil {return nil ,_g .Error (_bffd ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gffd ==nil {return nil ,_g .Error (_bffd ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_aceef .Values )==0{return _aceef ,nil ;};if len (*_gffd )!=len (_aceef .Values ){return nil ,_g .Errorf (_bffd ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gffd ),len (_aceef .Values ));
};var _cdfg ,_gecb ,_fegc int ;for _gecb =0;_gecb < len (*_gffd );_gecb ++{if _cdfg ,_afa =_gffd .GetInt (_gecb );_afa !=nil {return nil ,_g .Wrap (_afa ,_bffd ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _cdfg ==1{_fegc ++;};
};if _fegc ==len (_aceef .Values ){return _aceef ,nil ;};_gdgd =&Bitmaps {};_bfdb :=len (_aceef .Values )==len (_aceef .Boxes );for _gecb =0;_gecb < len (*_gffd );_gecb ++{if _cdfg =int ((*_gffd )[_gecb ]);_cdfg ==0{continue ;};_gdgd .Values =append (_gdgd .Values ,_aceef .Values [_gecb ]);
if _bfdb {_gdgd .Boxes =append (_gdgd .Boxes ,_aceef .Boxes [_gecb ]);};};return _gdgd ,nil ;};type MorphOperation int ;func (_cgaf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_dcfa *Bitmaps ,_baca *Boxes ,_fbcc error ){const _gba ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _cgaf ==nil {return nil ,nil ,_g .Error (_gba ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_gba ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _cgaf .Zero (){_baca =&Boxes {};_dcfa =&Bitmaps {};return _dcfa ,_baca ,nil ;};switch components {case ComponentConn :_dcfa =&Bitmaps {};if _baca ,_fbcc =_cgaf .ConnComponents (_dcfa ,8);_fbcc !=nil {return nil ,nil ,_g .Wrap (_fbcc ,_gba ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_ccdf ,_bege :=MorphSequence (_cgaf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _bege !=nil {return nil ,nil ,_g .Wrap (_bege ,_gba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _cd .Log .IsLogLevel (_cd .LogLevelTrace ){_cd .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_ccdf .String ());
};_afdde :=&Bitmaps {};_baca ,_bege =_ccdf .ConnComponents (_afdde ,8);if _bege !=nil {return nil ,nil ,_g .Wrap (_bege ,_gba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _cd .Log .IsLogLevel (_cd .LogLevelTrace ){_cd .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_afdde .String ());
};if _dcfa ,_bege =_afdde .ClipToBitmap (_cgaf );_bege !=nil {return nil ,nil ,_g .Wrap (_bege ,_gba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_agf :=1;
var _gbdd *Bitmap ;switch {case _cgaf .XResolution <=200:_gbdd =_cgaf ;case _cgaf .XResolution <=400:_agf =2;_gbdd ,_fbcc =_effb (_cgaf ,1,0,0,0);if _fbcc !=nil {return nil ,nil ,_g .Wrap (_fbcc ,_gba ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_agf =4;_gbdd ,_fbcc =_effb (_cgaf ,1,1,0,0);if _fbcc !=nil {return nil ,nil ,_g .Wrap (_fbcc ,_gba ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_dcee ,_ ,_aacba :=_begab (_gbdd );if _aacba !=nil {return nil ,nil ,_g .Wrap (_aacba ,_gba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_acdeg ,_aacba :=_abef (_dcee ,_agf );if _aacba !=nil {return nil ,nil ,_g .Wrap (_aacba ,_gba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_fed :=&Bitmaps {};if _baca ,_aacba =_acdeg .ConnComponents (_fed ,4);_aacba !=nil {return nil ,nil ,_g .Wrap (_aacba ,_gba ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _dcfa ,_aacba =_fed .ClipToBitmap (_cgaf );_aacba !=nil {return nil ,nil ,_g .Wrap (_aacba ,_gba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_dcfa ,_fbcc =_dcfa .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _fbcc !=nil {return nil ,nil ,_g .Wrap (_fbcc ,_gba ,"");};_baca ,_fbcc =_baca .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _fbcc !=nil {return nil ,nil ,_g .Wrap (_fbcc ,_gba ,"");};return _dcfa ,_baca ,nil ;};type Component int ;
func _dbcg (_gdbf ,_ddga ,_ffeg byte )byte {return (_gdbf &^(_ffeg ))|(_ddga &_ffeg )};var _ _b .Interface =&ClassedPoints {};func _ageg (_gae ,_fadg *Bitmap ,_ddcc ,_beecg int )(*Bitmap ,error ){const _ffce ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _fadg ==nil {_cd .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_g .Error (_ffce ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ddcc < 1||_beecg < 1{return nil ,_g .Error (_ffce ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _ddcc ==1&&_beecg ==1{_efbg ,_baba :=_gabg (_gae ,_fadg );if _baba !=nil {return nil ,_g .Wrap (_baba ,_ffce ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _efbg ,nil ;};if _ddcc ==1||_beecg ==1{_gbgag :=SelCreateBrick (_beecg ,_ddcc ,_beecg /2,_ddcc /2,SelHit );_eead ,_bfae :=_ecaef (_gae ,_fadg ,_gbgag );if _bfae !=nil {return nil ,_g .Wrap (_bfae ,_ffce ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eead ,nil ;};_debc :=SelCreateBrick (1,_ddcc ,0,_ddcc /2,SelHit );_dbaf :=SelCreateBrick (_beecg ,1,_beecg /2,0,SelHit );_dafcc ,_geda :=_ecaef (nil ,_fadg ,_debc );if _geda !=nil {return nil ,_g .Wrap (_geda ,_ffce ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gae ,_geda =_ecaef (_gae ,_dafcc ,_dbaf );if _geda !=nil {return nil ,_g .Wrap (_geda ,_ffce ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gae ,nil ;};func _acde (_abcf uint ,_dbdc byte )byte {return _dbdc >>_abcf <<_abcf };
func (_dafb *Bitmap )String ()string {var _ece ="\u000a";for _fef :=0;_fef < _dafb .Height ;_fef ++{var _ebcc string ;for _ccg :=0;_ccg < _dafb .Width ;_ccg ++{_faef :=_dafb .GetPixel (_ccg ,_fef );if _faef {_ebcc +="\u0031";}else {_ebcc +="\u0030";};};
_ece +=_ebcc +"\u000a";};return _ece ;};func (_ecbg *ClassedPoints )Less (i ,j int )bool {return _ecbg ._bgacg (i ,j )};func (_ecef *Bitmaps )HeightSorter ()func (_bbcf ,_ecea int )bool {return func (_accg ,_dccd int )bool {_fdeg :=_ecef .Values [_accg ].Height < _ecef .Values [_dccd ].Height ;
_cd .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_ecef .Values [_accg ].Height ,_ecef .Values [_dccd ].Height ,_fdeg );return _fdeg ;};};func (_ccca Points )XSorter ()func (_dbfb ,_gaef int )bool {return func (_baec ,_dbda int )bool {return _ccca [_baec ].X < _ccca [_dbda ].X };
};type RasterOperator int ;func _babb (_affb ,_efba *Bitmap ,_afb *Selection )(*Bitmap ,error ){const _cfggf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _faggb error ;if _affb ,_faggb =_abde (_affb ,_efba ,_afb );_faggb !=nil {return nil ,_faggb ;
};_gfb ,_faggb :=_ecaef (nil ,_efba ,_afb );if _faggb !=nil {return nil ,_g .Wrap (_faggb ,_cfggf ,"");};if _ ,_faggb =_gddd (_affb ,_gfb ,_afb );_faggb !=nil {return nil ,_g .Wrap (_faggb ,_cfggf ,"");};return _affb ,nil ;};func (_ffaa *byHeight )Swap (i ,j int ){_ffaa .Values [i ],_ffaa .Values [j ]=_ffaa .Values [j ],_ffaa .Values [i ];
if _ffaa .Boxes !=nil {_ffaa .Boxes [i ],_ffaa .Boxes [j ]=_ffaa .Boxes [j ],_ffaa .Boxes [i ];};};func _agbbg (_dcccd ,_cfgc *Bitmap ,_bega ,_begd ,_acbd uint ,_dgbg ,_gaga int ,_efc bool ,_bbddb ,_cdaf int )error {for _fdea :=_dgbg ;_fdea < _gaga ;_fdea ++{if _bbddb +1< len (_dcccd .Data ){_dcaf :=_fdea +1==_gaga ;
_aebe ,_efec :=_dcccd .GetByte (_bbddb );if _efec !=nil {return _efec ;};_bbddb ++;_aebe <<=_bega ;_egcad ,_efec :=_dcccd .GetByte (_bbddb );if _efec !=nil {return _efec ;};_egcad >>=_begd ;_egdae :=_aebe |_egcad ;if _dcaf &&!_efc {_egdae =_acde (_acbd ,_egdae );
};_efec =_cfgc .SetByte (_cdaf ,_egdae );if _efec !=nil {return _efec ;};_cdaf ++;if _dcaf &&_efc {_eabcg ,_bbgf :=_dcccd .GetByte (_bbddb );if _bbgf !=nil {return _bbgf ;};_eabcg <<=_bega ;_egdae =_acde (_acbd ,_eabcg );if _bbgf =_cfgc .SetByte (_cdaf ,_egdae );
_bbgf !=nil {return _bbgf ;};};continue ;};_cace ,_bcage :=_dcccd .GetByte (_bbddb );if _bcage !=nil {_cd .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_bbddb ,_bcage );
return _bcage ;};_cace <<=_bega ;_bbddb ++;_bcage =_cfgc .SetByte (_cdaf ,_cace );if _bcage !=nil {return _bcage ;};_cdaf ++;};return nil ;};func (_ecg *Bitmap )setEightFullBytes (_edea int ,_edcb uint64 )error {if _edea +7> len (_ecg .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ecg .Data [_edea ]=byte ((_edcb &0xff00000000000000)>>56);_ecg .Data [_edea +1]=byte ((_edcb &0xff000000000000)>>48);_ecg .Data [_edea +2]=byte ((_edcb &0xff0000000000)>>40);_ecg .Data [_edea +3]=byte ((_edcb &0xff00000000)>>32);_ecg .Data [_edea +4]=byte ((_edcb &0xff000000)>>24);
_ecg .Data [_edea +5]=byte ((_edcb &0xff0000)>>16);_ecg .Data [_edea +6]=byte ((_edcb &0xff00)>>8);_ecg .Data [_edea +7]=byte (_edcb &0xff);return nil ;};func _abef (_bbgge *Bitmap ,_dbgcc int )(*Bitmap ,error ){const _aaeab ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _bbgge ==nil {return nil ,_g .Error (_aaeab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dbgcc <=0{return nil ,_g .Error (_aaeab ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _dbgcc ==1{_bdfb ,_eafda :=_gabg (nil ,_bbgge );if _eafda !=nil {return nil ,_g .Wrap (_eafda ,_aaeab ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _bdfb ,nil ;};_fgcf ,_begg :=_eef (_bbgge ,_dbgcc ,_dbgcc );if _begg !=nil {return nil ,_g .Wrap (_begg ,_aaeab ,"");
};return _fgcf ,nil ;};func (_cfac *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _afff ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_cfac .Values )==0{return nil ,_g .Error (_afff ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_ceaf :=&BitmapsArray {};_cfac .SortByWidth ();_cbgb :=-1;_bfd :=-1;for _cbeb :=0;_cbeb < len (_cfac .Values );_cbeb ++{_eaaf :=_cfac .Values [_cbeb ].Width ;if _eaaf > _cbgb {_cbgb =_eaaf ;_bfd ++;_ceaf .Values =append (_ceaf .Values ,&Bitmaps {});};
_ceaf .Values [_bfd ].AddBitmap (_cfac .Values [_cbeb ]);};return _ceaf ,nil ;};func (_aagf *Bitmap )nextOnPixel (_cddaa ,_gaf int )(_dafa _c .Point ,_fafe bool ,_ffae error ){const _deec ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_dafa ,_fafe ,_ffae =_aagf .nextOnPixelLow (_aagf .Width ,_aagf .Height ,_aagf .RowStride ,_cddaa ,_gaf );if _ffae !=nil {return _dafa ,false ,_g .Wrap (_ffae ,_deec ,"");};return _dafa ,_fafe ,nil ;};func _fdga (_aed *Bitmap ,_ffcee ,_eadd ,_fbdce ,_bbcc int ,_bddaa RasterOperator ,_aabb *Bitmap ,_gedb ,_efdg int )error {var (_dagcd byte ;
_daff int ;_cege int ;_eefde ,_feae int ;_ffdff ,_cbcdc int ;);_cfaa :=_fbdce >>3;_bgad :=_fbdce &7;if _bgad > 0{_dagcd =_bcaged [_bgad ];};_daff =_aabb .RowStride *_efdg +(_gedb >>3);_cege =_aed .RowStride *_eadd +(_ffcee >>3);switch _bddaa {case PixSrc :for _ffdff =0;
_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=_aabb .Data [_eefde ];_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ],_dagcd );
};};case PixNotSrc :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=^(_aabb .Data [_eefde ]);_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^_aabb .Data [_eefde ],_dagcd );
};};case PixSrcOrDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]|=_aabb .Data [_eefde ];_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ]|_aed .Data [_feae ],_dagcd );
};};case PixSrcAndDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]&=_aabb .Data [_eefde ];_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ]&_aed .Data [_feae ],_dagcd );
};};case PixSrcXorDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]^=_aabb .Data [_eefde ];_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ]^_aed .Data [_feae ],_dagcd );
};};case PixNotSrcOrDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]|=^(_aabb .Data [_eefde ]);_feae ++;_eefde ++;};
if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^(_aabb .Data [_eefde ])|_aed .Data [_feae ],_dagcd );};};case PixNotSrcAndDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;
for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]&=^(_aabb .Data [_eefde ]);_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^(_aabb .Data [_eefde ])&_aed .Data [_feae ],_dagcd );};};case PixSrcOrNotDst :for _ffdff =0;
_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=_aabb .Data [_eefde ]|^(_aed .Data [_feae ]);_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ]|^(_aed .Data [_feae ]),_dagcd );
};};case PixSrcAndNotDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=_aabb .Data [_eefde ]&^(_aed .Data [_feae ]);_feae ++;
_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],_aabb .Data [_eefde ]&^(_aed .Data [_feae ]),_dagcd );};};case PixNotPixSrcOrDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;
for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=^(_aabb .Data [_eefde ]|_aed .Data [_feae ]);_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^(_aabb .Data [_eefde ]|_aed .Data [_feae ]),_dagcd );};};case PixNotPixSrcAndDst :for _ffdff =0;
_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=^(_aabb .Data [_eefde ]&_aed .Data [_feae ]);_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^(_aabb .Data [_eefde ]&_aed .Data [_feae ]),_dagcd );
};};case PixNotPixSrcXorDst :for _ffdff =0;_ffdff < _bbcc ;_ffdff ++{_eefde =_daff +_ffdff *_aabb .RowStride ;_feae =_cege +_ffdff *_aed .RowStride ;for _cbcdc =0;_cbcdc < _cfaa ;_cbcdc ++{_aed .Data [_feae ]=^(_aabb .Data [_eefde ]^_aed .Data [_feae ]);
_feae ++;_eefde ++;};if _bgad > 0{_aed .Data [_feae ]=_dbcg (_aed .Data [_feae ],^(_aabb .Data [_eefde ]^_aed .Data [_feae ]),_dagcd );};};default:_cd .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bddaa );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func TstFrameBitmap ()*Bitmap {return _afbdg .Copy ()};func TstAddSymbol (t *_ga .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_bcgbc :=_c .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_bcgbc );
*x +=sym .Width +space ;};func (_adee *Bitmaps )GetBox (i int )(*_c .Rectangle ,error ){const _deee ="\u0047\u0065\u0074\u0042\u006f\u0078";if _adee ==nil {return nil ,_g .Error (_deee ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_adee .Boxes )-1{return nil ,_g .Errorf (_deee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _adee .Boxes [i ],nil ;};func (_bcd *Bitmap )SizesEqual (s *Bitmap )bool {if _bcd ==s {return true ;
};if _bcd .Width !=s .Width ||_bcd .Height !=s .Height {return false ;};return true ;};func _agg (_fbg ,_dgb int )*Bitmap {return &Bitmap {Width :_fbg ,Height :_dgb ,RowStride :(_fbg +7)>>3};};func New (width ,height int )*Bitmap {_abf :=_agg (width ,height );
_abf .Data =make ([]byte ,height *_abf .RowStride );return _abf ;};type SizeSelection int ;func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffdf (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _dd ()(_aac [256]uint64 ){for _bbg :=0;_bbg < 256;_bbg ++{if _bbg &0x01!=0{_aac [_bbg ]|=0xff;};if _bbg &0x02!=0{_aac [_bbg ]|=0xff00;};if _bbg &0x04!=0{_aac [_bbg ]|=0xff0000;};if _bbg &0x08!=0{_aac [_bbg ]|=0xff000000;};if _bbg &0x10!=0{_aac [_bbg ]|=0xff00000000;
};if _bbg &0x20!=0{_aac [_bbg ]|=0xff0000000000;};if _bbg &0x40!=0{_aac [_bbg ]|=0xff000000000000;};if _bbg &0x80!=0{_aac [_bbg ]|=0xff00000000000000;};};return _aac ;};func (_dbfg *ClassedPoints )xSortFunction ()func (_gccd int ,_ccce int )bool {return func (_edba ,_eefd int )bool {return _dbfg .XAtIndex (_edba )< _dbfg .XAtIndex (_eefd )};
};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _ageg (d ,s ,hSize ,vSize )};func _gccb (_cbaf ,_dfbg *Bitmap ,_acff ,_cecf int )(*Bitmap ,error ){const _egefb ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _dfbg ==nil {return nil ,_g .Error (_egefb ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _acff < 1||_cecf < 1{return nil ,_g .Error (_egefb ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _acff ==1&&_cecf ==1{return _gabg (_cbaf ,_dfbg );};if MorphBC ==SymmetricMorphBC {_bccaa ,_afde :=_fbad (_cbaf ,_dfbg ,_acff ,_cecf );if _afde !=nil {return nil ,_g .Wrap (_afde ,_egefb ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _bccaa ,nil ;};_bgfa :=_befa (_acff /2,_cecf /2);_cdac :=8*((_bgfa +7)/8);_bcccd ,_bgag :=_dfbg .AddBorder (_cdac ,0);if _bgag !=nil {return nil ,_g .Wrapf (_bgag ,_egefb ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_cdac );
};var _dbgae ,_gdf *Bitmap ;if _acff ==1||_cecf ==1{_ggfa :=SelCreateBrick (_cecf ,_acff ,_cecf /2,_acff /2,SelHit );_dbgae ,_bgag =_babb (nil ,_bcccd ,_ggfa );if _bgag !=nil {return nil ,_g .Wrap (_bgag ,_egefb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_faecc :=SelCreateBrick (1,_acff ,0,_acff /2,SelHit );_cdbd ,_gee :=_ecaef (nil ,_bcccd ,_faecc );if _gee !=nil {return nil ,_g .Wrap (_gee ,_egefb ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_bce :=SelCreateBrick (_cecf ,1,_cecf /2,0,SelHit );_dbgae ,_gee =_ecaef (nil ,_cdbd ,_bce );if _gee !=nil {return nil ,_g .Wrap (_gee ,_egefb ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_gee =_gddd (_cdbd ,_dbgae ,_faecc );_gee !=nil {return nil ,_g .Wrap (_gee ,_egefb ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_gee =_gddd (_dbgae ,_cdbd ,_bce );_gee !=nil {return nil ,_g .Wrap (_gee ,_egefb ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _gdf ,_bgag =_dbgae .RemoveBorder (_cdac );_bgag !=nil {return nil ,_g .Wrap (_bgag ,_egefb ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cbaf ==nil {return _gdf ,nil ;};if _ ,_bgag =_gabg (_cbaf ,_gdf );_bgag !=nil {return nil ,_bgag ;};return _cbaf ,nil ;
};func (_cadg *Boxes )selectWithIndicator (_fcd *_gg .NumSlice )(_eeec *Boxes ,_abed error ){const _cfb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cadg ==nil {return nil ,_g .Error (_cfb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _fcd ==nil {return nil ,_g .Error (_cfb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fcd )!=len (*_cadg ){return nil ,_g .Error (_cfb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _gcee ,_gcag int ;for _ffac :=0;_ffac < len (*_fcd );_ffac ++{if _gcee ,_abed =_fcd .GetInt (_ffac );_abed !=nil {return nil ,_g .Wrap (_abed ,_cfb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gcee ==1{_gcag ++;
};};if _gcag ==len (*_cadg ){return _cadg ,nil ;};_egeg :=Boxes {};for _abfd :=0;_abfd < len (*_fcd );_abfd ++{_gcee =int ((*_fcd )[_abfd ]);if _gcee ==0{continue ;};_egeg =append (_egeg ,(*_cadg )[_abfd ]);};_eeec =&_egeg ;return _eeec ,nil ;};func _ebdb (_fadfa ,_egaab *Bitmap ,_geaa ,_becg int )(_bcgf error ){const _aecgb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_ecaefc ,_ceddg ,_fbaf ,_caefd int ;_eged ,_cbgc ,_abegad ,_defaf ,_gagd ,_fdeb ,_fgcd ,_dddb byte ;);for _ecaefc =0;_ecaefc < _geaa ;_ecaefc ++{_fbaf =_ecaefc *_fadfa .RowStride ;_caefd =_ecaefc *_egaab .RowStride ;for _ceddg =0;_ceddg < _becg ;_ceddg ++{if _eged ,_bcgf =_fadfa .GetByte (_fbaf +_ceddg );
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _cbgc ,_bcgf =_egaab .GetByte (_caefd +_ceddg );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _ecaefc > 0{if _abegad ,_bcgf =_fadfa .GetByte (_fbaf -_fadfa .RowStride +_ceddg );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_eged |=_abegad |(_abegad <<1)|(_abegad >>1);if _ceddg > 0{if _dddb ,_bcgf =_fadfa .GetByte (_fbaf -_fadfa .RowStride +_ceddg -1);
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_eged |=_dddb <<7;};if _ceddg < _becg -1{if _dddb ,_bcgf =_fadfa .GetByte (_fbaf -_fadfa .RowStride +_ceddg +1);
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_eged |=_dddb >>7;};};if _ceddg > 0{if _defaf ,_bcgf =_fadfa .GetByte (_fbaf +_ceddg -1);_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u006a\u0020\u003e \u0030");
};_eged |=_defaf <<7;};_eged &=_cbgc ;if _eged ==0||^_eged ==0{if _bcgf =_fadfa .SetByte (_fbaf +_ceddg ,_eged );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};
};for {_fgcd =_eged ;_eged =(_eged |(_eged >>1)|(_eged <<1))&_cbgc ;if (_eged ^_fgcd )==0{if _bcgf =_fadfa .SetByte (_fbaf +_ceddg ,_eged );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ecaefc =_geaa -1;_ecaefc >=0;_ecaefc --{_fbaf =_ecaefc *_fadfa .RowStride ;_caefd =_ecaefc *_egaab .RowStride ;for _ceddg =_becg -1;_ceddg >=0;_ceddg --{if _eged ,_bcgf =_fadfa .GetByte (_fbaf +_ceddg );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _cbgc ,_bcgf =_egaab .GetByte (_caefd +_ceddg );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ecaefc < _geaa -1{if _gagd ,_bcgf =_fadfa .GetByte (_fbaf +_fadfa .RowStride +_ceddg );
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_eged |=_gagd |(_gagd <<1)|_gagd >>1;if _ceddg > 0{if _dddb ,_bcgf =_fadfa .GetByte (_fbaf +_fadfa .RowStride +_ceddg -1);
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_eged |=_dddb <<7;};if _ceddg < _becg -1{if _dddb ,_bcgf =_fadfa .GetByte (_fbaf +_fadfa .RowStride +_ceddg +1);
_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_eged |=_dddb >>7;};};if _ceddg < _becg -1{if _fdeb ,_bcgf =_fadfa .GetByte (_fbaf +_ceddg +1);_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_eged |=_fdeb >>7;};_eged &=_cbgc ;if _eged ==0||(^_eged )==0{if _bcgf =_fadfa .SetByte (_fbaf +_ceddg ,_eged );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_fgcd =_eged ;
_eged =(_eged |(_eged >>1)|(_eged <<1))&_cbgc ;if (_eged ^_fgcd )==0{if _bcgf =_fadfa .SetByte (_fbaf +_ceddg ,_eged );_bcgf !=nil {return _g .Wrap (_bcgf ,_aecgb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func MakePixelSumTab8 ()[]int {return _cdbc ()};func ClipBoxToRectangle (box *_c .Rectangle ,wi ,hi int )(_fcdg *_c .Rectangle ,_bcfd error ){const _bbfa ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_g .Error (_bbfa ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_bbfa ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_bgbe :=*box ;_fcdg =&_bgbe ;if _fcdg .Min .X < 0{_fcdg .Max .X +=_fcdg .Min .X ;_fcdg .Min .X =0;};if _fcdg .Min .Y < 0{_fcdg .Max .Y +=_fcdg .Min .Y ;_fcdg .Min .Y =0;};if _fcdg .Max .X > wi {_fcdg .Max .X =wi ;};if _fcdg .Max .Y > hi {_fcdg .Max .Y =hi ;
};return _fcdg ,nil ;};func _ceg (_be *Bitmap ,_fcb *Bitmap ,_gcca int )(_dg error ){const _cc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _gcca {case 2:_dg =_cb (_be ,_fcb );case 4:_dg =_ab (_be ,_fcb );
case 8:_dg =_age (_be ,_fcb );default:return _g .Error (_cc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _dg !=nil {_dg =_g .Wrap (_dg ,_cc ,"");};return _dg ;};func (_egaeb *Bitmap )connComponentsBB (_ebffc int )(_eac *Boxes ,_bgga error ){const _fdeae ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _ebffc !=4&&_ebffc !=8{return nil ,_g .Error (_fdeae ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _egaeb .Zero (){return &Boxes {},nil ;
};_egaeb .setPadBits (0);_effc ,_bgga :=_gabg (nil ,_egaeb );if _bgga !=nil {return nil ,_g .Wrap (_bgga ,_fdeae ,"\u0062\u006d\u0031");};_ecc :=&_gg .Stack {};_ecc .Aux =&_gg .Stack {};_eac =&Boxes {};var (_ffdc ,_cbbf int ;_cggc _c .Point ;_dbga bool ;
_abbg *_c .Rectangle ;);for {if _cggc ,_dbga ,_bgga =_effc .nextOnPixel (_cbbf ,_ffdc );_bgga !=nil {return nil ,_g .Wrap (_bgga ,_fdeae ,"");};if !_dbga {break ;};if _abbg ,_bgga =_bgcf (_effc ,_ecc ,_cggc .X ,_cggc .Y ,_ebffc );_bgga !=nil {return nil ,_g .Wrap (_bgga ,_fdeae ,"");
};if _bgga =_eac .Add (_abbg );_bgga !=nil {return nil ,_g .Wrap (_bgga ,_fdeae ,"");};_cbbf =_cggc .X ;_ffdc =_cggc .Y ;};return _eac ,nil ;};func (_aggd *Bitmap )CountPixels ()int {return _aggd .countPixels ()};var _ecbfe =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_cfea *Bitmap )centroid (_fgfe ,_dfdg []int )(Point ,error ){_adcb :=Point {};_cfea .setPadBits (0);if len (_fgfe )==0{_fgfe =_fgbg ();};if len (_dfdg )==0{_dfdg =_cdbc ();};var _abdg ,_cfgg ,_fgdb ,_edcc ,_fbbc ,_fbee int ;var _dagg byte ;for _fbbc =0;
_fbbc < _cfea .Height ;_fbbc ++{_gcaf :=_cfea .RowStride *_fbbc ;_edcc =0;for _fbee =0;_fbee < _cfea .RowStride ;_fbee ++{_dagg =_cfea .Data [_gcaf +_fbee ];if _dagg !=0{_edcc +=_dfdg [_dagg ];_abdg +=_fgfe [_dagg ]+_fbee *8*_dfdg [_dagg ];};};_fgdb +=_edcc ;
_cfgg +=_edcc *_fbbc ;};if _fgdb !=0{_adcb .X =float32 (_abdg )/float32 (_fgdb );_adcb .Y =float32 (_cfgg )/float32 (_fgdb );};return _adcb ,nil ;};func (_bbce Points )GetIntX (i int )(int ,error ){if i >=len (_bbce ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bbce [i ].X ),nil ;};func (_dfee *ClassedPoints )SortByX (){_dfee ._bgacg =_dfee .xSortFunction ();_b .Sort (_dfee )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_ffbc :=_ggab (h ,w ,"");_ffbc .setOrigin (cy ,cx );
var _cdfc ,_dfacc int ;for _cdfc =0;_cdfc < h ;_cdfc ++{for _dfacc =0;_dfacc < w ;_dfacc ++{_ffbc .Data [_cdfc ][_dfacc ]=tp ;};};return _ffbc ;};type LocationFilter int ;func (_bbded *Bitmap )thresholdPixelSum (_caad int )bool {var (_cacg int ;_dgg uint8 ;
_cbag byte ;_bbf int ;);_ccgf :=_bbded .RowStride ;_dccc :=uint (_bbded .Width &0x07);if _dccc !=0{_dgg =uint8 ((0xff<<(8-_dccc ))&0xff);_ccgf --;};for _fgce :=0;_fgce < _bbded .Height ;_fgce ++{for _bbf =0;_bbf < _ccgf ;_bbf ++{_cbag =_bbded .Data [_fgce *_bbded .RowStride +_bbf ];
_cacg +=int (_cge [_cbag ]);};if _dccc !=0{_cbag =_bbded .Data [_fgce *_bbded .RowStride +_bbf ]&_dgg ;_cacg +=int (_cge [_cbag ]);};if _cacg > _caad {return true ;};};return false ;};func (_cbegd *Bitmaps )SortByHeight (){_babfd :=(*byHeight )(_cbegd );
_b .Sort (_babfd )};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _ecaef (d ,s ,sel )};func (_adbgf Points )GetIntY (i int )(int ,error ){if i >=len (_adbgf ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_adbgf [i ].Y ),nil ;};func _cffa (_fbab *Bitmap ,_fded *Bitmap ,_abcfd *Selection ,_fgef **Bitmap )(*Bitmap ,error ){const _cegb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _fded ==nil {return nil ,_g .Error (_cegb ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _abcfd ==nil {return nil ,_g .Error (_cegb ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_gff ,_dbac :=_abcfd .Height ,_abcfd .Width ;if _gff ==0||_dbac ==0{return nil ,_g .Error (_cegb ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fbab ==nil {_fbab =_fded .createTemplate ();*_fgef =_fded ;return _fbab ,nil ;};_fbab .Width =_fded .Width ;_fbab .Height =_fded .Height ;_fbab .RowStride =_fded .RowStride ;_fbab .Color =_fded .Color ;_fbab .Data =make ([]byte ,_fded .RowStride *_fded .Height );
if _fbab ==_fded {*_fgef =_fded .Copy ();}else {*_fgef =_fded ;};return _fbab ,nil ;};func _cdbc ()[]int {_adbad :=make ([]int ,256);for _ceaa :=0;_ceaa <=0xff;_ceaa ++{_fabc :=byte (_ceaa );_adbad [_fabc ]=int (_fabc &0x1)+(int (_fabc >>1)&0x1)+(int (_fabc >>2)&0x1)+(int (_fabc >>3)&0x1)+(int (_fabc >>4)&0x1)+(int (_fabc >>5)&0x1)+(int (_fabc >>6)&0x1)+(int (_fabc >>7)&0x1);
};return _adbad ;};func TstTSymbol (t *_ga .T ,scale ...int )*Bitmap {_bcad ,_dacfd :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_ge .NoError (t ,_dacfd );return TstGetScaledSymbol (t ,_bcad ,scale ...);};func (_bcff *Bitmap )Zero ()bool {_fad :=_bcff .Width /8;
_fdgd :=_bcff .Width &7;var _aacb byte ;if _fdgd !=0{_aacb =byte (0xff<<uint (8-_fdgd ));};var _aad ,_agb ,_egefg int ;for _agb =0;_agb < _bcff .Height ;_agb ++{_aad =_bcff .RowStride *_agb ;for _egefg =0;_egefg < _fad ;_egefg ,_aad =_egefg +1,_aad +1{if _bcff .Data [_aad ]!=0{return false ;
};};if _fdgd > 0{if _bcff .Data [_aad ]&_aacb !=0{return false ;};};};return true ;};func (_aafc *Bitmap )GetUnpaddedData ()([]byte ,error ){_egbf :=uint (_aafc .Width &0x07);if _egbf ==0{return _aafc .Data ,nil ;};_dgce :=_aafc .Width *_aafc .Height ;
if _dgce %8!=0{_dgce >>=3;_dgce ++;}else {_dgce >>=3;};_efff :=make ([]byte ,_dgce );_cbg :=_a .NewWriterMSB (_efff );const _dafc ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _acfe :=0;_acfe < _aafc .Height ;_acfe ++{for _fff :=0;
_fff < _aafc .RowStride ;_fff ++{_cff :=_aafc .Data [_acfe *_aafc .RowStride +_fff ];if _fff !=_aafc .RowStride -1{_bbbf :=_cbg .WriteByte (_cff );if _bbbf !=nil {return nil ,_g .Wrap (_bbbf ,_dafc ,"");};continue ;};for _dga :=uint (0);_dga < _egbf ;_dga ++{_aee :=_cbg .WriteBit (int (_cff >>(7-_dga )&0x01));
if _aee !=nil {return nil ,_g .Wrap (_aee ,_dafc ,"");};};};};return _efff ,nil ;};func (_bfg *Bitmap )SetDefaultPixel (){for _dca :=range _bfg .Data {_bfg .Data [_dca ]=byte (0xff);};};func TstWriteSymbols (t *_ga .T ,bms *Bitmaps ,src *Bitmap ){for _fcaeg :=0;
_fcaeg < bms .Size ();_fcaeg ++{_cbfa :=bms .Values [_fcaeg ];_dggb :=bms .Boxes [_fcaeg ];_ccbc :=src .RasterOperation (_dggb .Min .X ,_dggb .Min .Y ,_cbfa .Width ,_cbfa .Height ,PixSrc ,_cbfa ,0,0);_ge .NoError (t ,_ccbc );};};func (_bgdd *Bitmap )Equivalent (s *Bitmap )bool {return _bgdd .equivalent (s )};
func _begab (_egcg *Bitmap )(_deeff *Bitmap ,_efbc int ,_acbg error ){const _febe ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _egcg ==nil {return nil ,0,_g .Errorf (_febe ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _efd ,_fdgg *Bitmap ;if _efd ,_acbg =_gabg (nil ,_egcg );_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_gfda [13]int ;_bfad ,_egaee int ;);_egegf :=12;_gebg :=_gg .NewNumSlice (_egegf +1);
_faag :=_gg .NewNumSlice (_egegf +1);var _cddd *Boxes ;for _fagc :=0;_fagc <=_egegf ;_fagc ++{if _fagc ==0{if _fdgg ,_acbg =_gabg (nil ,_efd );_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _fdgg ,_acbg =_fcac (_efd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _cddd ,_acbg =_fdgg .connComponentsBB (4);_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"");};_gfda [_fagc ]=len (*_cddd );
_gebg .AddInt (_gfda [_fagc ]);switch _fagc {case 0:_bfad =_gfda [0];default:_egaee =_gfda [_fagc -1]-_gfda [_fagc ];_faag .AddInt (_egaee );};_efd =_fdgg ;};_edgec :=true ;_efag :=2;var _dgfd ,_gbbb int ;for _bgbgb :=1;_bgbgb < len (*_faag );_bgbgb ++{if _dgfd ,_acbg =_gebg .GetInt (_bgbgb );
_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _edgec &&_dgfd < int (0.3*float32 (_bfad )){_efag =_bgbgb +1;_edgec =false ;
};if _egaee ,_acbg =_faag .GetInt (_bgbgb );_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _egaee > _gbbb {_gbbb =_egaee ;};};_egfg :=_egcg .XResolution ;if _egfg ==0{_egfg =150;
};if _egfg > 110{_efag ++;};if _efag < 2{_cd .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_efag =2;};_efbc =_efag +1;if _deeff ,_acbg =_fbad (nil ,_egcg ,_efag +1,1);_acbg !=nil {return nil ,0,_g .Wrap (_acbg ,_febe ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _deeff ,_efbc ,nil ;
};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _ggdc (oldByte ,newByte ,op );};type byHeight Bitmaps ;func (_egef *Bitmap )CreateTemplate ()*Bitmap {return _egef .createTemplate ()};var _fgaab =[5]int {1,2,3,0,4};func TstWordBitmap (t *_ga .T ,scale ...int )*Bitmap {_feeag :=1;
if len (scale )> 0{_feeag =scale [0];};_febd :=3;_eaec :=9+7+15+2*_febd ;_ecde :=5+_febd +5;_becad :=New (_eaec *_feeag ,_ecde *_feeag );_bgda :=&Bitmaps {};var _bggc *int ;_febd *=_feeag ;_dceb :=0;_bggc =&_dceb ;_feabe :=0;_ggef :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,_febd );_ggef =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,_febd );_ggef =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,0);*_bggc =0;_feabe =5*_feeag +_febd ;_ggef =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,_febd );
_ggef =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );
_ggef =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,1*_feeag );_ggef =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgda ,_ggef ,_bggc ,_feabe ,0);TstWriteSymbols (t ,_bgda ,_becad );return _becad ;};func _abde (_bcea ,_eagb *Bitmap ,_cefgc *Selection )(*Bitmap ,error ){const _dadg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _ggcb ,_bdeba int ;if _eagb ==nil {return nil ,_g .Error (_dadg ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cefgc ==nil {return nil ,_g .Error (_dadg ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_ggcb =_cefgc .Width ;_bdeba =_cefgc .Height ;if _ggcb ==0||_bdeba ==0{return nil ,_g .Error (_dadg ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bcea ==nil {return _eagb .createTemplate (),nil ;};if _bffg :=_bcea .resizeImageData (_eagb );
_bffg !=nil {return nil ,_bffg ;};return _bcea ,nil ;};func (_ddfe *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffdf (_ddfe ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_baffa *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _efee ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_baffa .IntSlice .Size (){return 0,_g .Errorf (_efee ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_baffa .XAtIndex (i )),nil ;};func _fceb (_bab ,_ecd *Bitmap ,_caa int ,_bdb []byte ,_bgbg int )(_ggc error ){const _abgc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_bdde ,_bae ,_cegd ,_eag ,_bbb ,_gbd ,_egd ,_gdeg int ;_ed ,_fca uint32 ;_gbcg ,_edg byte ;_gbf uint16 ;);_add :=make ([]byte ,4);_gf :=make ([]byte ,4);for _cegd =0;_cegd < _bab .Height -1;_cegd ,_eag =_cegd +2,_eag +1{_bdde =_cegd *_bab .RowStride ;
_bae =_eag *_ecd .RowStride ;for _bbb ,_gbd =0,0;_bbb < _bgbg ;_bbb ,_gbd =_bbb +4,_gbd +1{for _egd =0;_egd < 4;_egd ++{_gdeg =_bdde +_bbb +_egd ;if _gdeg <=len (_bab .Data )-1&&_gdeg < _bdde +_bab .RowStride {_add [_egd ]=_bab .Data [_gdeg ];}else {_add [_egd ]=0x00;
};_gdeg =_bdde +_bab .RowStride +_bbb +_egd ;if _gdeg <=len (_bab .Data )-1&&_gdeg < _bdde +(2*_bab .RowStride ){_gf [_egd ]=_bab .Data [_gdeg ];}else {_gf [_egd ]=0x00;};};_ed =_cda .BigEndian .Uint32 (_add );_fca =_cda .BigEndian .Uint32 (_gf );_fca |=_ed ;
_fca |=_fca <<1;_fca &=0xaaaaaaaa;_ed =_fca |(_fca <<7);_gbcg =byte (_ed >>24);_edg =byte ((_ed >>8)&0xff);_gdeg =_bae +_gbd ;if _gdeg +1==len (_ecd .Data )-1||_gdeg +1>=_bae +_ecd .RowStride {_ecd .Data [_gdeg ]=_bdb [_gbcg ];}else {_gbf =(uint16 (_bdb [_gbcg ])<<8)|uint16 (_bdb [_edg ]);
if _ggc =_ecd .setTwoBytes (_gdeg ,_gbf );_ggc !=nil {return _g .Wrapf (_ggc ,_abgc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdeg );
};_gbd ++;};};};return nil ;};const (Vanilla Color =iota ;Chocolate ;);func (_agece *ClassedPoints )SortByY (){_agece ._bgacg =_agece .ySortFunction ();_b .Sort (_agece )};func (_bbd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _bbd .removeBorderGeneral (left ,right ,top ,bot );
};func (_edbe MorphProcess )getWidthHeight ()(_cbca ,_feca int ){return _edbe .Arguments [0],_edbe .Arguments [1];};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;
};func (_cbde *Bitmap )addPadBits ()(_eaa error ){const _egbb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_dfd :=_cbde .Width %8;if _dfd ==0{return nil ;};_eba :=_cbde .Width /8;_agec :=_a .NewReader (_cbde .Data );
_ebcf :=make ([]byte ,_cbde .Height *_cbde .RowStride );_ega :=_a .NewWriterMSB (_ebcf );_ccbb :=make ([]byte ,_eba );var (_adb int ;_ageb uint64 ;);for _adb =0;_adb < _cbde .Height ;_adb ++{if _ ,_eaa =_agec .Read (_ccbb );_eaa !=nil {return _g .Wrap (_eaa ,_egbb ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");
};if _ ,_eaa =_ega .Write (_ccbb );_eaa !=nil {return _g .Wrap (_eaa ,_egbb ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ageb ,_eaa =_agec .ReadBits (byte (_dfd ));_eaa !=nil {return _g .Wrap (_eaa ,_egbb ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");
};if _eaa =_ega .WriteByte (byte (_ageb )<<uint (8-_dfd ));_eaa !=nil {return _g .Wrap (_eaa ,_egbb ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_cbde .Data =_ega .Data ();return nil ;};func (_dad *Bitmap )GetByteIndex (x ,y int )int {return y *_dad .RowStride +(x >>3)};
func (_gfea *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _dagf ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _gfea ==nil {return nil ,_g .Error (_dagf ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_g .Error (_dagf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_gcdec :=len (_gfea .Values );_fdaa :=&Bitmaps {Values :make ([]*Bitmap ,_gcdec ),Boxes :make ([]*_c .Rectangle ,_gcdec )};
var (_dfeb ,_fcca *Bitmap ;_dafaa *_c .Rectangle ;_dbfec error ;);for _cggce :=0;_cggce < _gcdec ;_cggce ++{if _dfeb ,_dbfec =_gfea .GetBitmap (_cggce );_dbfec !=nil {return nil ,_g .Wrap (_dbfec ,_dagf ,"");};if _dafaa ,_dbfec =_gfea .GetBox (_cggce );
_dbfec !=nil {return nil ,_g .Wrap (_dbfec ,_dagf ,"");};if _fcca ,_dbfec =s .clipRectangle (_dafaa ,nil );_dbfec !=nil {return nil ,_g .Wrap (_dbfec ,_dagf ,"");};if _fcca ,_dbfec =_fcca .And (_dfeb );_dbfec !=nil {return nil ,_g .Wrap (_dbfec ,_dagf ,"");
};_fdaa .Values [_cggce ]=_fcca ;_fdaa .Boxes [_cggce ]=_dafaa ;};return _fdaa ,nil ;};func _fga ()(_bfa [256]uint32 ){for _eff :=0;_eff < 256;_eff ++{if _eff &0x01!=0{_bfa [_eff ]|=0xf;};if _eff &0x02!=0{_bfa [_eff ]|=0xf0;};if _eff &0x04!=0{_bfa [_eff ]|=0xf00;
};if _eff &0x08!=0{_bfa [_eff ]|=0xf000;};if _eff &0x10!=0{_bfa [_eff ]|=0xf0000;};if _eff &0x20!=0{_bfa [_eff ]|=0xf00000;};if _eff &0x40!=0{_bfa [_eff ]|=0xf000000;};if _eff &0x80!=0{_bfa [_eff ]|=0xf0000000;};};return _bfa ;};func (_cbfb *ClassedPoints )Len ()int {return _cbfb .IntSlice .Size ()};
func (_dadb *Bitmap )inverseData (){if _ede :=_dadb .RasterOperation (0,0,_dadb .Width ,_dadb .Height ,PixNotDst ,nil ,0,0);_ede !=nil {_cd .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ede );
};if _dadb .Color ==Chocolate {_dadb .Color =Vanilla ;}else {_dadb .Color =Chocolate ;};};func _dafab (_efbe ,_gccf *Bitmap ,_edcbg ,_dgca ,_fbac ,_aacf ,_fbe ,_cdff ,_ecbe ,_baff int ,_ggad CombinationOperator ,_dcaa int )error {var _acgg int ;_adbe :=func (){_acgg ++;
_fbac +=_gccf .RowStride ;_aacf +=_efbe .RowStride ;_fbe +=_efbe .RowStride };for _acgg =_edcbg ;_acgg < _dgca ;_adbe (){var _cbcd uint16 ;_aafb :=_fbac ;for _defa :=_aacf ;_defa <=_fbe ;_defa ++{_ebdd ,_aebg :=_gccf .GetByte (_aafb );if _aebg !=nil {return _aebg ;
};_gdd ,_aebg :=_efbe .GetByte (_defa );if _aebg !=nil {return _aebg ;};_cbcd =(_cbcd |(uint16 (_gdd )&0xff))<<uint (_baff );_gdd =byte (_cbcd >>8);if _aebg =_gccf .SetByte (_aafb ,_ggdc (_ebdd ,_gdd ,_ggad ));_aebg !=nil {return _aebg ;};_aafb ++;_cbcd <<=uint (_ecbe );
if _defa ==_fbe {_gdd =byte (_cbcd >>(8-uint8 (_baff )));if _dcaa !=0{_gdd =_acde (uint (8+_cdff ),_gdd );};_ebdd ,_aebg =_gccf .GetByte (_aafb );if _aebg !=nil {return _aebg ;};if _aebg =_gccf .SetByte (_aafb ,_ggdc (_ebdd ,_gdd ,_ggad ));_aebg !=nil {return _aebg ;
};};};};return nil ;};func _gddd (_bfgc ,_bcbfb *Bitmap ,_dcfc *Selection )(*Bitmap ,error ){const _ggfg ="\u0065\u0072\u006fd\u0065";var (_ffca error ;_dbad *Bitmap ;);_bfgc ,_ffca =_cffa (_bfgc ,_bcbfb ,_dcfc ,&_dbad );if _ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"");
};if _ffca =_bfgc .setAll ();_ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"");};var _gfab SelectionValue ;for _efcbd :=0;_efcbd < _dcfc .Height ;_efcbd ++{for _dbca :=0;_dbca < _dcfc .Width ;_dbca ++{_gfab =_dcfc .Data [_efcbd ][_dbca ];if _gfab ==SelHit {_ffca =_ffdf (_bfgc ,_dcfc .Cx -_dbca ,_dcfc .Cy -_efcbd ,_bcbfb .Width ,_bcbfb .Height ,PixSrcAndDst ,_dbad ,0,0);
if _ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bfgc ,nil ;};_edef ,_cbdeb ,_aaaa ,_ccgc :=_dcfc .findMaxTranslations ();if _edef > 0{if _ffca =_bfgc .RasterOperation (0,0,_edef ,_bcbfb .Height ,PixClr ,nil ,0,0);
_ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _aaaa > 0{if _ffca =_bfgc .RasterOperation (_bcbfb .Width -_aaaa ,0,_aaaa ,_bcbfb .Height ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _cbdeb > 0{if _ffca =_bfgc .RasterOperation (0,0,_bcbfb .Width ,_cbdeb ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ccgc > 0{if _ffca =_bfgc .RasterOperation (0,_bcbfb .Height -_ccgc ,_bcbfb .Width ,_ccgc ,PixClr ,nil ,0,0);
_ffca !=nil {return nil ,_g .Wrap (_ffca ,_ggfg ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bfgc ,nil ;};func _fbad (_edbb ,_dgdg *Bitmap ,_ecaf ,_aagcd int )(*Bitmap ,error ){const _agbe ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _dgdg ==nil {return nil ,_g .Error (_agbe ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ecaf < 1||_aagcd < 1{return nil ,_g .Error (_agbe ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _ecaf ==1&&_aagcd ==1{return _dgdg .Copy (),nil ;};if _ecaf ==1||_aagcd ==1{_face :=SelCreateBrick (_aagcd ,_ecaf ,_aagcd /2,_ecaf /2,SelHit );var _dgfa error ;_edbb ,_dgfa =_babb (_edbb ,_dgdg ,_face );if _dgfa !=nil {return nil ,_g .Wrap (_dgfa ,_agbe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _edbb ,nil ;};_baed :=SelCreateBrick (1,_ecaf ,0,_ecaf /2,SelHit );_aec :=SelCreateBrick (_aagcd ,1,_aagcd /2,0,SelHit );_adac ,_fcebe :=_ecaef (nil ,_dgdg ,_baed );if _fcebe !=nil {return nil ,_g .Wrap (_fcebe ,_agbe ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _edbb ,_fcebe =_ecaef (_edbb ,_adac ,_aec );_fcebe !=nil {return nil ,_g .Wrap (_fcebe ,_agbe ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fcebe =_gddd (_adac ,_edbb ,_baed );_fcebe !=nil {return nil ,_g .Wrap (_fcebe ,_agbe ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fcebe =_gddd (_edbb ,_adac ,_aec );_fcebe !=nil {return nil ,_g .Wrap (_fcebe ,_agbe ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _edbb ,nil ;};func (_cggd *Boxes )Add (box *_c .Rectangle )error {if _cggd ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_cggd =append (*_cggd ,box );return nil ;};func _eagg (_faa ,_eaga *Bitmap ,_dcc int ,_ccd []byte ,_efb int )(_gbg error ){const _edgf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_gaa ,_fdb ,_eafe ,_bddb ,_fge ,_bbaf ,_ebf ,_ebe int ;_ege ,_dge ,_cdde ,_cea uint32 ;_faga ,_fdbf byte ;_eeb uint16 ;);_fdc :=make ([]byte ,4);_gcd :=make ([]byte ,4);for _eafe =0;_eafe < _faa .Height -1;_eafe ,_bddb =_eafe +2,_bddb +1{_gaa =_eafe *_faa .RowStride ;
_fdb =_bddb *_eaga .RowStride ;for _fge ,_bbaf =0,0;_fge < _efb ;_fge ,_bbaf =_fge +4,_bbaf +1{for _ebf =0;_ebf < 4;_ebf ++{_ebe =_gaa +_fge +_ebf ;if _ebe <=len (_faa .Data )-1&&_ebe < _gaa +_faa .RowStride {_fdc [_ebf ]=_faa .Data [_ebe ];}else {_fdc [_ebf ]=0x00;
};_ebe =_gaa +_faa .RowStride +_fge +_ebf ;if _ebe <=len (_faa .Data )-1&&_ebe < _gaa +(2*_faa .RowStride ){_gcd [_ebf ]=_faa .Data [_ebe ];}else {_gcd [_ebf ]=0x00;};};_ege =_cda .BigEndian .Uint32 (_fdc );_dge =_cda .BigEndian .Uint32 (_gcd );_cdde =_ege &_dge ;
_cdde |=_cdde <<1;_cea =_ege |_dge ;_cea &=_cea <<1;_dge =_cdde &_cea ;_dge &=0xaaaaaaaa;_ege =_dge |(_dge <<7);_faga =byte (_ege >>24);_fdbf =byte ((_ege >>8)&0xff);_ebe =_fdb +_bbaf ;if _ebe +1==len (_eaga .Data )-1||_ebe +1>=_fdb +_eaga .RowStride {if _gbg =_eaga .SetByte (_ebe ,_ccd [_faga ]);
_gbg !=nil {return _g .Wrapf (_gbg ,_edgf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ebe );};}else {_eeb =(uint16 (_ccd [_faga ])<<8)|uint16 (_ccd [_fdbf ]);if _gbg =_eaga .setTwoBytes (_ebe ,_eeb );_gbg !=nil {return _g .Wrapf (_gbg ,_edgf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ebe );
};_bbaf ++;};};};return nil ;};func (_acbdg *Selection )setOrigin (_gdagg ,_bdeg int ){_acbdg .Cy ,_acbdg .Cx =_gdagg ,_bdeg };func (_gfgg *ClassedPoints )validateIntSlice ()error {const _cgb ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_agebe :=range _gfgg .IntSlice {if _agebe >=(_gfgg .Points .Size ()){return _g .Errorf (_cgb ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_agebe ,_gfgg .Points .Size ());
};};return nil ;};func (_ddd *Bitmap )countPixels ()int {var (_cecg int ;_ddbd uint8 ;_ecf byte ;_cee int ;);_acae :=_ddd .RowStride ;_cgg :=uint (_ddd .Width &0x07);if _cgg !=0{_ddbd =uint8 ((0xff<<(8-_cgg ))&0xff);_acae --;};for _ffd :=0;_ffd < _ddd .Height ;
_ffd ++{for _cee =0;_cee < _acae ;_cee ++{_ecf =_ddd .Data [_ffd *_ddd .RowStride +_cee ];_cecg +=int (_cge [_ecf ]);};if _cgg !=0{_cecg +=int (_cge [_ddd .Data [_ffd *_ddd .RowStride +_cee ]&_ddbd ]);};};return _cecg ;};func (_gabdb *byWidth )Len ()int {return len (_gabdb .Values )};
func (_adgbd *byWidth )Swap (i ,j int ){_adgbd .Values [i ],_adgbd .Values [j ]=_adgbd .Values [j ],_adgbd .Values [i ];if _adgbd .Boxes !=nil {_adgbd .Boxes [i ],_adgbd .Boxes [j ]=_adgbd .Boxes [j ],_adgbd .Boxes [i ];};};func _fcc (_gefb ,_gbdde *Bitmap ,_bda ,_bgeg int )(*Bitmap ,error ){const _fbdd ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _gbdde ==nil {return nil ,_g .Error (_fbdd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bda < 1&&_bgeg < 1{return nil ,_g .Error (_fbdd ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _bda ==1&&_bgeg ==1{return _gbdde .Copy (),nil ;};if _bda ==1||_bgeg ==1{var _abdaf error ;_ccbad :=SelCreateBrick (_bgeg ,_bda ,_bgeg /2,_bda /2,SelHit );_gefb ,_abdaf =_cdacf (_gefb ,_gbdde ,_ccbad );if _abdaf !=nil {return nil ,_g .Wrap (_abdaf ,_fbdd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gefb ,nil ;};_ffceb :=SelCreateBrick (1,_bda ,0,_bda /2,SelHit );_fagaeb :=SelCreateBrick (_bgeg ,1,_bgeg /2,0,SelHit );_fdcf ,_feeg :=_gddd (nil ,_gbdde ,_ffceb );if _feeg !=nil {return nil ,_g .Wrap (_feeg ,_fbdd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gefb ,_feeg =_gddd (_gefb ,_fdcf ,_fagaeb );if _feeg !=nil {return nil ,_g .Wrap (_feeg ,_fbdd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_feeg =_ecaef (_fdcf ,_gefb ,_ffceb );if _feeg !=nil {return nil ,_g .Wrap (_feeg ,_fbdd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_feeg =_ecaef (_gefb ,_fdcf ,_fagaeb );if _feeg !=nil {return nil ,_g .Wrap (_feeg ,_fbdd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gefb ,nil ;};func _aggf (_feac ,_cegbe *Bitmap ,_aegbb ,_cbeg int )(_aaeag error ){const _abfdf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_dbcf ,_bbad ,_affea ,_gabgf int ;_fadf ,_fbfc ,_bfeda ,_dace ,_bcgbf ,_fecaf ,_fdgea byte ;);for _dbcf =0;_dbcf < _aegbb ;_dbcf ++{_affea =_dbcf *_feac .RowStride ;_gabgf =_dbcf *_cegbe .RowStride ;for _bbad =0;_bbad < _cbeg ;_bbad ++{_fadf ,_aaeag =_feac .GetByte (_affea +_bbad );
if _aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_fbfc ,_aaeag =_cegbe .GetByte (_gabgf +_bbad );if _aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _dbcf > 0{_bfeda ,_aaeag =_feac .GetByte (_affea -_feac .RowStride +_bbad );if _aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0069\u0020\u003e \u0030");};_fadf |=_bfeda ;};if _bbad > 0{_dace ,_aaeag =_feac .GetByte (_affea +_bbad -1);if _aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u006a\u0020\u003e \u0030");
};_fadf |=_dace <<7;};_fadf &=_fbfc ;if _fadf ==0||(^_fadf )==0{if _aaeag =_feac .SetByte (_affea +_bbad ,_fadf );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_fdgea =_fadf ;_fadf =(_fadf |(_fadf >>1)|(_fadf <<1))&_fbfc ;if (_fadf ^_fdgea )==0{if _aaeag =_feac .SetByte (_affea +_bbad ,_fadf );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dbcf =_aegbb -1;_dbcf >=0;_dbcf --{_affea =_dbcf *_feac .RowStride ;_gabgf =_dbcf *_cegbe .RowStride ;for _bbad =_cbeg -1;_bbad >=0;_bbad --{if _fadf ,_aaeag =_feac .GetByte (_affea +_bbad );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _fbfc ,_aaeag =_cegbe .GetByte (_gabgf +_bbad );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dbcf < _aegbb -1{if _bcgbf ,_aaeag =_feac .GetByte (_affea +_feac .RowStride +_bbad );
_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_fadf |=_bcgbf ;};if _bbad < _cbeg -1{if _fecaf ,_aaeag =_feac .GetByte (_affea +_bbad +1);_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_fadf |=_fecaf >>7;};_fadf &=_fbfc ;if _fadf ==0||(^_fadf )==0{if _aaeag =_feac .SetByte (_affea +_bbad ,_fadf );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_fdgea =_fadf ;_fadf =(_fadf |(_fadf >>1)|(_fadf <<1))&_fbfc ;if (_fadf ^_fdgea )==0{if _aaeag =_feac .SetByte (_affea +_bbad ,_fadf );_aaeag !=nil {return _g .Wrap (_aaeag ,_abfdf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};type Boxes []*_c .Rectangle ;type CombinationOperator int ;type Points []Point ;func _bgcf (_efbge *Bitmap ,_gcafg *_gg .Stack ,_eagcb ,_adcdb ,_dcbb int )(_aaad *_c .Rectangle ,_gcce error ){const _babf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _efbge ==nil {return nil ,_g .Error (_babf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gcafg ==nil {return nil ,_g .Error (_babf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _dcbb {case 4:if _aaad ,_gcce =_gecc (_efbge ,_gcafg ,_eagcb ,_adcdb );_gcce !=nil {return nil ,_g .Wrap (_gcce ,_babf ,"");};return _aaad ,nil ;case 8:if _aaad ,_gcce =_bcee (_efbge ,_gcafg ,_eagcb ,_adcdb );_gcce !=nil {return nil ,_g .Wrap (_gcce ,_babf ,"");
};return _aaad ,nil ;default:return nil ,_g .Errorf (_babf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_dcbb );
};};func TstVSymbol (t *_ga .T ,scale ...int )*Bitmap {_fbgg ,_cgeaa :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_ge .NoError (t ,_cgeaa );return TstGetScaledSymbol (t ,_fbgg ,scale ...);};func _bcca (_fce *Bitmap ,_egce int )(*Bitmap ,error ){const _gc ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _fce ==nil {return nil ,_g .Error (_gc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _egce ==1{return _gabg (nil ,_fce );};if _egce !=2&&_egce !=4&&_egce !=8{return nil ,_g .Error (_gc ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_gcc :=_egce *_fce .Width ;_cae :=_egce *_fce .Height ;_fcf :=New (_gcc ,_cae );var _adg error ;switch _egce {case 2:_adg =_cb (_fcf ,_fce );case 4:_adg =_ab (_fcf ,_fce );case 8:_adg =_age (_fcf ,_fce );};if _adg !=nil {return nil ,_g .Wrap (_adg ,_gc ,"");
};return _fcf ,nil ;};func (_ecaff *Bitmaps )selectByIndexes (_afbd []int )(*Bitmaps ,error ){_eadab :=&Bitmaps {};for _ ,_ddcf :=range _afbd {_afce ,_aaff :=_ecaff .GetBitmap (_ddcf );if _aaff !=nil {return nil ,_g .Wrap (_aaff ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_eadab .AddBitmap (_afce );};return _eadab ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _gedca ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_g .Error (_gedca ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_g .Error (_gedca ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_g .Error (_gedca ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_g .Error (_gedca ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_gedca ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_cefg ,_dcec :=bm1 .Width ,bm1 .Height ;_acfa ,_ebbbf :=bm2 .Width ,bm2 .Height ;if _gg .Abs (_cefg -_acfa )> maxDiffW {return false ,nil ;};if _gg .Abs (_dcec -_ebbbf )> maxDiffH {return false ,nil ;};_daed :=int (delX +_gg .Sign (delX )*0.5);_dfbe :=int (delY +_gg .Sign (delY )*0.5);
_befd :=int (_eaf .Ceil (_eaf .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_ebg :=bm2 .RowStride ;_abdd :=_befa (_dfbe ,0);_ccddd :=_gdab (_ebbbf +_dfbe ,_dcec );_bccb :=bm1 .RowStride *_abdd ;_ddbec :=bm2 .RowStride *(_abdd -_dfbe );
var _gagc int ;if _ccddd <=_dcec {_gagc =downcount [_ccddd -1];};_becf :=_befa (_daed ,0);_adbg :=_gdab (_acfa +_daed ,_cefg );var _cgdd ,_dbgd int ;if _daed >=8{_cgdd =_daed >>3;_bccb +=_cgdd ;_becf -=_cgdd <<3;_adbg -=_cgdd <<3;_daed &=7;}else if _daed <=-8{_dbgd =-((_daed +7)>>3);
_ddbec +=_dbgd ;_ebg -=_dbgd ;_daed +=_dbgd <<3;};var (_dbe ,_edae ,_bad int ;_gfeg ,_caac ,_cde byte ;);if _becf >=_adbg ||_abdd >=_ccddd {return false ,nil ;};_cedfg :=(_adbg +7)>>3;switch {case _daed ==0:for _edae =_abdd ;_edae < _ccddd ;_edae ,_bccb ,_ddbec =_edae +1,_bccb +bm1 .RowStride ,_ddbec +bm2 .RowStride {for _bad =0;
_bad < _cedfg ;_bad ++{_gfeg =bm1 .Data [_bccb +_bad ]&bm2 .Data [_ddbec +_bad ];_dbe +=tab [_gfeg ];};if _dbe >=_befd {return true ,nil ;};if _adae :=_dbe +downcount [_edae ]-_gagc ;_adae < _befd {return false ,nil ;};};case _daed > 0&&_ebg < _cedfg :for _edae =_abdd ;
_edae < _ccddd ;_edae ,_bccb ,_ddbec =_edae +1,_bccb +bm1 .RowStride ,_ddbec +bm2 .RowStride {_caac =bm1 .Data [_bccb ];_cde =bm2 .Data [_ddbec ]>>uint (_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];for _bad =1;_bad < _ebg ;_bad ++{_caac =bm1 .Data [_bccb +_bad ];
_cde =bm2 .Data [_ddbec +_bad ]>>uint (_daed )|bm2 .Data [_ddbec +_bad -1]<<uint (8-_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];};_caac =bm1 .Data [_bccb +_bad ];_cde =bm2 .Data [_ddbec +_bad -1]<<uint (8-_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];
if _dbe >=_befd {return true ,nil ;}else if _dbe +downcount [_edae ]-_gagc < _befd {return false ,nil ;};};case _daed > 0&&_ebg >=_cedfg :for _edae =_abdd ;_edae < _ccddd ;_edae ,_bccb ,_ddbec =_edae +1,_bccb +bm1 .RowStride ,_ddbec +bm2 .RowStride {_caac =bm1 .Data [_bccb ];
_cde =bm2 .Data [_ddbec ]>>uint (_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];for _bad =1;_bad < _cedfg ;_bad ++{_caac =bm1 .Data [_bccb +_bad ];_cde =bm2 .Data [_ddbec +_bad ]>>uint (_daed );_cde |=bm2 .Data [_ddbec +_bad -1]<<uint (8-_daed );_gfeg =_caac &_cde ;
_dbe +=tab [_gfeg ];};if _dbe >=_befd {return true ,nil ;}else if _dbe +downcount [_edae ]-_gagc < _befd {return false ,nil ;};};case _cedfg < _ebg :for _edae =_abdd ;_edae < _ccddd ;_edae ,_bccb ,_ddbec =_edae +1,_bccb +bm1 .RowStride ,_ddbec +bm2 .RowStride {for _bad =0;
_bad < _cedfg ;_bad ++{_caac =bm1 .Data [_bccb +_bad ];_cde =bm2 .Data [_ddbec +_bad ]<<uint (-_daed );_cde |=bm2 .Data [_ddbec +_bad +1]>>uint (8+_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];};if _dbe >=_befd {return true ,nil ;}else if _gbe :=_dbe +downcount [_edae ]-_gagc ;
_gbe < _befd {return false ,nil ;};};case _ebg >=_cedfg :for _edae =_abdd ;_edae < _ccddd ;_edae ,_bccb ,_ddbec =_edae +1,_bccb +bm1 .RowStride ,_ddbec +bm2 .RowStride {for _bad =0;_bad < _cedfg ;_bad ++{_caac =bm1 .Data [_bccb +_bad ];_cde =bm2 .Data [_ddbec +_bad ]<<uint (-_daed );
_cde |=bm2 .Data [_ddbec +_bad +1]>>uint (8+_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];};_caac =bm1 .Data [_bccb +_bad ];_cde =bm2 .Data [_ddbec +_bad ]<<uint (-_daed );_gfeg =_caac &_cde ;_dbe +=tab [_gfeg ];if _dbe >=_befd {return true ,nil ;}else if _dbe +downcount [_edae ]-_gagc < _befd {return false ,nil ;
};};};_aagd :=float32 (_dbe )*float32 (_dbe )/(float32 (area1 )*float32 (area2 ));if _aagd >=scoreThreshold {_cd .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dbe ,_befd ,_aagd ,scoreThreshold );
};return false ,nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_c .Rectangle ;};func (_gdag *Bitmap )nextOnPixelLow (_cce ,_eeaa ,_gceg ,_gbfe ,_gcbc int )(_deaa _c .Point ,_cfca bool ,_cbfg error ){const _dgcg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_ebff int ;_ccdd byte ;);_bdec :=_gcbc *_gceg ;_afdd :=_bdec +(_gbfe /8);if _ccdd ,_cbfg =_gdag .GetByte (_afdd );_cbfg !=nil {return _deaa ,false ,_g .Wrap (_cbfg ,_dgcg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _ccdd !=0{_aeb :=_gbfe -(_gbfe %8)+7;for _ebff =_gbfe ;_ebff <=_aeb &&_ebff < _cce ;_ebff ++{if _gdag .GetPixel (_ebff ,_gcbc ){_deaa .X =_ebff ;_deaa .Y =_gcbc ;return _deaa ,true ,nil ;};};};_fcab :=(_gbfe /8)+1;_ebff =8*_fcab ;var _ebbb int ;for _afdd =_bdec +_fcab ;
_ebff < _cce ;_afdd ,_ebff =_afdd +1,_ebff +8{if _ccdd ,_cbfg =_gdag .GetByte (_afdd );_cbfg !=nil {return _deaa ,false ,_g .Wrap (_cbfg ,_dgcg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};
if _ccdd ==0{continue ;};for _ebbb =0;_ebbb < 8&&_ebff < _cce ;_ebbb ,_ebff =_ebbb +1,_ebff +1{if _gdag .GetPixel (_ebff ,_gcbc ){_deaa .X =_ebff ;_deaa .Y =_gcbc ;return _deaa ,true ,nil ;};};};for _gfga :=_gcbc +1;_gfga < _eeaa ;_gfga ++{_bdec =_gfga *_gceg ;
for _afdd ,_ebff =_bdec ,0;_ebff < _cce ;_afdd ,_ebff =_afdd +1,_ebff +8{if _ccdd ,_cbfg =_gdag .GetByte (_afdd );_cbfg !=nil {return _deaa ,false ,_g .Wrap (_cbfg ,_dgcg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _ccdd ==0{continue ;};for _ebbb =0;_ebbb < 8&&_ebff < _cce ;_ebbb ,_ebff =_ebbb +1,_ebff +1{if _gdag .GetPixel (_ebff ,_gfga ){_deaa .X =_ebff ;_deaa .Y =_gfga ;return _deaa ,true ,nil ;};};};};return _deaa ,false ,nil ;};func _eafed (_fbf int )int {if _fbf < 0{return -_fbf ;
};return _fbf ;};func _ggdc (_bcag ,_ceeg byte ,_gcegc CombinationOperator )byte {switch _gcegc {case CmbOpOr :return _ceeg |_bcag ;case CmbOpAnd :return _ceeg &_bcag ;case CmbOpXor :return _ceeg ^_bcag ;case CmbOpXNor :return ^(_ceeg ^_bcag );case CmbOpNot :return ^(_ceeg );
default:return _ceeg ;};};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func TstASymbol (t *_ga .T )*Bitmap {t .Helper ();_gbabg :=New (6,6);_ge .NoError (t ,_gbabg .SetPixel (1,0,1));_ge .NoError (t ,_gbabg .SetPixel (2,0,1));_ge .NoError (t ,_gbabg .SetPixel (3,0,1));
_ge .NoError (t ,_gbabg .SetPixel (4,0,1));_ge .NoError (t ,_gbabg .SetPixel (5,1,1));_ge .NoError (t ,_gbabg .SetPixel (1,2,1));_ge .NoError (t ,_gbabg .SetPixel (2,2,1));_ge .NoError (t ,_gbabg .SetPixel (3,2,1));_ge .NoError (t ,_gbabg .SetPixel (4,2,1));
_ge .NoError (t ,_gbabg .SetPixel (5,2,1));_ge .NoError (t ,_gbabg .SetPixel (0,3,1));_ge .NoError (t ,_gbabg .SetPixel (5,3,1));_ge .NoError (t ,_gbabg .SetPixel (0,4,1));_ge .NoError (t ,_gbabg .SetPixel (5,4,1));_ge .NoError (t ,_gbabg .SetPixel (1,5,1));
_ge .NoError (t ,_gbabg .SetPixel (2,5,1));_ge .NoError (t ,_gbabg .SetPixel (3,5,1));_ge .NoError (t ,_gbabg .SetPixel (4,5,1));_ge .NoError (t ,_gbabg .SetPixel (5,5,1));return _gbabg ;};type fillSegment struct{_eaae int ;_dec int ;_bdecg int ;_ddcd int ;
};func (_bdc *Bitmap )SetPadBits (value int ){_bdc .setPadBits (value )};func (_cdgec *Boxes )Get (i int )(*_c .Rectangle ,error ){const _ggeb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _cdgec ==nil {return nil ,_g .Error (_ggeb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_cdgec )-1{return nil ,_g .Errorf (_ggeb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_cdgec )[i ],nil ;};func (_fccf *Selection )findMaxTranslations ()(_cfed ,_fdag ,_faeccd ,_gddf int ){for _bdcda :=0;
_bdcda < _fccf .Height ;_bdcda ++{for _gaea :=0;_gaea < _fccf .Width ;_gaea ++{if _fccf .Data [_bdcda ][_gaea ]==SelHit {_cfed =_befa (_cfed ,_fccf .Cx -_gaea );_fdag =_befa (_fdag ,_fccf .Cy -_bdcda );_faeccd =_befa (_faeccd ,_gaea -_fccf .Cx );_gddf =_befa (_gddf ,_bdcda -_fccf .Cy );
};};};return _cfed ,_fdag ,_faeccd ,_gddf ;};func _fgga (_bdce *Bitmap ,_cgacg ,_ffec ,_bcfa ,_fgee int ,_agc RasterOperator ,_abad *Bitmap ,_fgdf ,_efcg int )error {var (_bdbbf bool ;_baafb bool ;_cbaa int ;_ffbg int ;_gfgaf int ;_geec bool ;_geae byte ;
_dffd int ;_dbfgf int ;_ddef int ;_eecf ,_cgc int ;);_dacg :=8-(_cgacg &7);_dfbgd :=_efg [_dacg ];_bbba :=_bdce .RowStride *_ffec +(_cgacg >>3);_bfed :=_abad .RowStride *_efcg +(_fgdf >>3);if _bcfa < _dacg {_bdbbf =true ;_dfbgd &=_bcaged [8-_dacg +_bcfa ];
};if !_bdbbf {_cbaa =(_bcfa -_dacg )>>3;if _cbaa > 0{_baafb =true ;_ffbg =_bbba +1;_gfgaf =_bfed +1;};};_dffd =(_cgacg +_bcfa )&7;if !(_bdbbf ||_dffd ==0){_geec =true ;_geae =_bcaged [_dffd ];_dbfgf =_bbba +1+_cbaa ;_ddef =_bfed +1+_cbaa ;};switch _agc {case PixSrc :for _eecf =0;
_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=_abad .Data [_gfgaf +_cgc ];
};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ],_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixNotSrc :for _eecf =0;
_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^_abad .Data [_bfed ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=^_abad .Data [_gfgaf +_cgc ];
};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^_abad .Data [_ddef ],_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixSrcOrDst :for _eecf =0;
_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ]|_bdce .Data [_bbba ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;
_cgc ++{_bdce .Data [_ffbg +_cgc ]|=_abad .Data [_gfgaf +_cgc ];};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ]|_bdce .Data [_dbfgf ],_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixSrcAndDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ]&_bdce .Data [_bbba ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]&=_abad .Data [_gfgaf +_cgc ];};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ]&_bdce .Data [_dbfgf ],_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixSrcXorDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ]^_bdce .Data [_bbba ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]^=_abad .Data [_gfgaf +_cgc ];};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ]^_bdce .Data [_dbfgf ],_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixNotSrcOrDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^(_abad .Data [_bfed ])|_bdce .Data [_bbba ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]|=^(_abad .Data [_gfgaf +_cgc ]);};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^(_abad .Data [_ddef ])|_bdce .Data [_dbfgf ],_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixNotSrcAndDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^(_abad .Data [_bfed ])&_bdce .Data [_bbba ],_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]&=^_abad .Data [_gfgaf +_cgc ];};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^(_abad .Data [_ddef ])&_bdce .Data [_dbfgf ],_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixSrcOrNotDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ]|^(_bdce .Data [_bbba ]),_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=_abad .Data [_gfgaf +_cgc ]|^(_bdce .Data [_ffbg +_cgc ]);};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;
_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ]|^(_bdce .Data [_dbfgf ]),_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixSrcAndNotDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],_abad .Data [_bfed ]&^(_bdce .Data [_bbba ]),_dfbgd );
_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=_abad .Data [_gfgaf +_cgc ]&^(_bdce .Data [_ffbg +_cgc ]);};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;
};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],_abad .Data [_ddef ]&^(_bdce .Data [_dbfgf ]),_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixNotPixSrcOrDst :for _eecf =0;_eecf < _fgee ;
_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^(_abad .Data [_bfed ]|_bdce .Data [_bbba ]),_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=^(_abad .Data [_gfgaf +_cgc ]|_bdce .Data [_ffbg +_cgc ]);
};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^(_abad .Data [_ddef ]|_bdce .Data [_dbfgf ]),_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;
};};case PixNotPixSrcAndDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^(_abad .Data [_bfed ]&_bdce .Data [_bbba ]),_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;};if _baafb {for _eecf =0;_eecf < _fgee ;
_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=^(_abad .Data [_gfgaf +_cgc ]&_bdce .Data [_ffbg +_cgc ]);};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^(_abad .Data [_ddef ]&_bdce .Data [_dbfgf ]),_geae );
_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};case PixNotPixSrcXorDst :for _eecf =0;_eecf < _fgee ;_eecf ++{_bdce .Data [_bbba ]=_dbcg (_bdce .Data [_bbba ],^(_abad .Data [_bfed ]^_bdce .Data [_bbba ]),_dfbgd );_bbba +=_bdce .RowStride ;_bfed +=_abad .RowStride ;
};if _baafb {for _eecf =0;_eecf < _fgee ;_eecf ++{for _cgc =0;_cgc < _cbaa ;_cgc ++{_bdce .Data [_ffbg +_cgc ]=^(_abad .Data [_gfgaf +_cgc ]^_bdce .Data [_ffbg +_cgc ]);};_ffbg +=_bdce .RowStride ;_gfgaf +=_abad .RowStride ;};};if _geec {for _eecf =0;_eecf < _fgee ;
_eecf ++{_bdce .Data [_dbfgf ]=_dbcg (_bdce .Data [_dbfgf ],^(_abad .Data [_ddef ]^_bdce .Data [_dbfgf ]),_geae );_dbfgf +=_bdce .RowStride ;_ddef +=_abad .RowStride ;};};default:_cd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_agc );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_aaadb *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _fbcg ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _aaadb ==nil {return nil ,_g .Error (_fbcg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_aaadb .Values )-1{return nil ,_g .Errorf (_fbcg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _aaadb .Values [i ],nil ;};func init (){const _dagce ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_afbdg =New (50,40);var _adec error ;_afbdg ,_adec =_afbdg .AddBorder (2,1);if _adec !=nil {panic (_g .Wrap (_adec ,_dagce ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cafeg ,_adec =NewWithData (50,22,_ecbfe );if _adec !=nil {panic (_g .Wrap (_adec ,_dagce ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_bcef *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _feef ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _bcef ==nil {return nil ,_g .Error (_feef ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_bcef .Values )-1{return nil ,_g .Errorf (_feef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bcef .Values [i ],nil ;};func (_aaeg *Bitmap )ToImage ()_c .Image {_bgdc ,_gfgc :=_bg .NewImage (_aaeg .Width ,_aaeg .Height ,1,1,_aaeg .Data ,nil ,nil );
if _gfgc !=nil {_cd .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gfgc );
};return _bgdc ;};func (_bcgb *Bitmap )GetChocolateData ()[]byte {if _bcgb .Color ==Vanilla {_bcgb .inverseData ();};return _bcgb .Data ;};func (_aecc *Bitmaps )String ()string {_dfab :=_ea .Builder {};for _ ,_ecdge :=range _aecc .Values {_dfab .WriteString (_ecdge .String ());
_dfab .WriteRune ('\n');};return _dfab .String ();};func _gcac (_ggfe *Bitmap ,_ceee ,_ccfd int ,_bbgfa ,_abdc int ,_efed RasterOperator ,_dfeec *Bitmap ,_eggc ,_dgag int )error {var _adgf ,_cffac ,_edcf ,_acca int ;if _ceee < 0{_eggc -=_ceee ;_bbgfa +=_ceee ;
_ceee =0;};if _eggc < 0{_ceee -=_eggc ;_bbgfa +=_eggc ;_eggc =0;};_adgf =_ceee +_bbgfa -_ggfe .Width ;if _adgf > 0{_bbgfa -=_adgf ;};_cffac =_eggc +_bbgfa -_dfeec .Width ;if _cffac > 0{_bbgfa -=_cffac ;};if _ccfd < 0{_dgag -=_ccfd ;_abdc +=_ccfd ;_ccfd =0;
};if _dgag < 0{_ccfd -=_dgag ;_abdc +=_dgag ;_dgag =0;};_edcf =_ccfd +_abdc -_ggfe .Height ;if _edcf > 0{_abdc -=_edcf ;};_acca =_dgag +_abdc -_dfeec .Height ;if _acca > 0{_abdc -=_acca ;};if _bbgfa <=0||_abdc <=0{return nil ;};var _gcg error ;switch {case _ceee &7==0&&_eggc &7==0:_gcg =_fdga (_ggfe ,_ceee ,_ccfd ,_bbgfa ,_abdc ,_efed ,_dfeec ,_eggc ,_dgag );
case _ceee &7==_eggc &7:_gcg =_fgga (_ggfe ,_ceee ,_ccfd ,_bbgfa ,_abdc ,_efed ,_dfeec ,_eggc ,_dgag );default:_gcg =_cbfd (_ggfe ,_ceee ,_ccfd ,_bbgfa ,_abdc ,_efed ,_dfeec ,_eggc ,_dgag );};if _gcg !=nil {return _g .Wrap (_gcg ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_gegc *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _gegc .addBorderGeneral (left ,right ,top ,bot ,val );};func (_geee *Bitmaps )Size ()int {return len (_geee .Values )};func (_gce *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cgee :=_gce .GetByteIndex (x ,y );
if _cgee > len (_gce .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cgee );};_bge :=_gce .GetBitOffset (x );
_bged :=uint (7-_bge );_fde :=_gce .Data [_cgee ];var _eecg byte ;if pixel ==1{_eecg =_fde |(pixel &0x01<<_bged );}else {_eecg =_fde &^(1<<_bged );};_gce .Data [_cgee ]=_eecg ;return nil ;};func (_afdb *Bitmap )setFourBytes (_eeeb int ,_bee uint32 )error {if _eeeb +3> len (_afdb .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_eeeb );
};_afdb .Data [_eeeb ]=byte ((_bee &0xff000000)>>24);_afdb .Data [_eeeb +1]=byte ((_bee &0xff0000)>>16);_afdb .Data [_eeeb +2]=byte ((_bee &0xff00)>>8);_afdb .Data [_eeeb +3]=byte (_bee &0xff);return nil ;};func (_bcbf MorphProcess )verify (_fgfa int ,_cbdd ,_bfcc *int )error {const _fea ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _bcbf .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bcbf .Arguments )!=2{return _g .Error (_fea ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_aagc ,_egegd :=_bcbf .getWidthHeight ();if _aagc <=0||_egegd <=0{return _g .Error (_fea ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_gbbe :=len (_bcbf .Arguments );*_cbdd +=_gbbe ;if _gbbe < 1||_gbbe > 4{return _g .Error (_fea ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _cfgad :=0;_cfgad < _gbbe ;_cfgad ++{if _bcbf .Arguments [_cfgad ]< 1||_bcbf .Arguments [_cfgad ]> 4{return _g .Error (_fea ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_bcbf .Arguments )==0{return _g .Error (_fea ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dbc :=_bcbf .Arguments [0];if _dbc !=2&&_dbc !=4&&_dbc !=8{return _g .Error (_fea ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_cbdd -=_fgaab [_dbc /4];case MopAddBorder :if len (_bcbf .Arguments )==0{return _g .Error (_fea ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceae :=_bcbf .Arguments [0];if _fgfa > 0{return _g .Error (_fea ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _ceae < 1{return _g .Error (_fea ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_bfcc =_ceae ;};return nil ;};func (_ddce *Bitmaps )AddBitmap (bm *Bitmap ){_ddce .Values =append (_ddce .Values ,bm )};
func (_faaa *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_faaa .Width ,Height :_faaa .Height ,RowStride :_faaa .RowStride ,Color :_faaa .Color ,Text :_faaa .Text ,BitmapNumber :_faaa .BitmapNumber ,Special :_faaa .Special ,Data :make ([]byte ,len (_faaa .Data ))};
};func (_adag *Bitmap )setPadBits (_cfa int ){_dfdb :=8-_adag .Width %8;if _dfdb ==8{return ;};_gfgee :=_adag .Width /8;_baa :=_efg [_dfdb ];if _cfa ==0{_baa ^=_baa ;};var _ffc int ;for _gcba :=0;_gcba < _adag .Height ;_gcba ++{_ffc =_gcba *_adag .RowStride +_gfgee ;
if _cfa ==0{_adag .Data [_ffc ]&=_baa ;}else {_adag .Data [_ffc ]|=_baa ;};};};func (_gfac *Bitmaps )makeSizeIndicator (_bffa ,_feaad int ,_agdb LocationFilter ,_daaf SizeComparison )(_afef *_gg .NumSlice ,_agae error ){const _beae ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gfac ==nil {return nil ,_g .Error (_beae ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _agdb {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_beae ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_agdb );
};switch _daaf {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_beae ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_daaf );
};_afef =&_gg .NumSlice {};var (_gbdda ,_dggf ,_feg int ;_cdbce *Bitmap ;);for _ ,_cdbce =range _gfac .Values {_gbdda =0;_dggf ,_feg =_cdbce .Width ,_cdbce .Height ;switch _agdb {case LocSelectWidth :if (_daaf ==SizeSelectIfLT &&_dggf < _bffa )||(_daaf ==SizeSelectIfGT &&_dggf > _bffa )||(_daaf ==SizeSelectIfLTE &&_dggf <=_bffa )||(_daaf ==SizeSelectIfGTE &&_dggf >=_bffa )||(_daaf ==SizeSelectIfEQ &&_dggf ==_bffa ){_gbdda =1;
};case LocSelectHeight :if (_daaf ==SizeSelectIfLT &&_feg < _feaad )||(_daaf ==SizeSelectIfGT &&_feg > _feaad )||(_daaf ==SizeSelectIfLTE &&_feg <=_feaad )||(_daaf ==SizeSelectIfGTE &&_feg >=_feaad )||(_daaf ==SizeSelectIfEQ &&_feg ==_feaad ){_gbdda =1;
};case LocSelectIfEither :if (_daaf ==SizeSelectIfLT &&(_dggf < _bffa ||_feg < _feaad ))||(_daaf ==SizeSelectIfGT &&(_dggf > _bffa ||_feg > _feaad ))||(_daaf ==SizeSelectIfLTE &&(_dggf <=_bffa ||_feg <=_feaad ))||(_daaf ==SizeSelectIfGTE &&(_dggf >=_bffa ||_feg >=_feaad ))||(_daaf ==SizeSelectIfEQ &&(_dggf ==_bffa ||_feg ==_feaad )){_gbdda =1;
};case LocSelectIfBoth :if (_daaf ==SizeSelectIfLT &&(_dggf < _bffa &&_feg < _feaad ))||(_daaf ==SizeSelectIfGT &&(_dggf > _bffa &&_feg > _feaad ))||(_daaf ==SizeSelectIfLTE &&(_dggf <=_bffa &&_feg <=_feaad ))||(_daaf ==SizeSelectIfGTE &&(_dggf >=_bffa &&_feg >=_feaad ))||(_daaf ==SizeSelectIfEQ &&(_dggf ==_bffa &&_feg ==_feaad )){_gbdda =1;
};};_afef .AddInt (_gbdda );};return _afef ,nil ;};func (_ddf *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_dfca *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _abdec ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_dfca .Values )==0{return nil ,_g .Error (_abdec ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_eegf :=&BitmapsArray {};_dfca .SortByHeight ();_dgcd :=-1;_bcde :=-1;for _afeec :=0;_afeec < len (_dfca .Values );
_afeec ++{_dbbe :=_dfca .Values [_afeec ].Height ;if _dbbe > _dgcd {_dgcd =_dbbe ;_bcde ++;_eegf .Values =append (_eegf .Values ,&Bitmaps {});};_eegf .Values [_bcde ].AddBitmap (_dfca .Values [_afeec ]);};return _eegf ,nil ;};const (_aafgg shift =iota ;
_bbgff ;);func _eef (_dbb *Bitmap ,_gbc ,_cec int )(*Bitmap ,error ){const _dag ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _dbb ==nil {return nil ,_g .Error (_dag ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gbc <=0||_cec <=0{return nil ,_g .Error (_dag ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _gbc ==_cec {if _gbc ==1{_cdd ,_ec :=_gabg (nil ,_dbb );
if _ec !=nil {return nil ,_g .Wrap (_ec ,_dag ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _cdd ,nil ;};if _gbc ==2||_gbc ==4||_gbc ==8{_dc ,_fdg :=_bcca (_dbb ,_gbc );if _fdg !=nil {return nil ,_g .Wrap (_fdg ,_dag ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _dc ,nil ;};};_fgc :=_gbc *_dbb .Width ;_cac :=_cec *_dbb .Height ;_cbf :=New (_fgc ,_cac );_bcg :=_cbf .RowStride ;var (_ef ,_bca ,_ba ,_gcb ,_aff int ;_egb byte ;_aba error ;);for _bca =0;_bca < _dbb .Height ;_bca ++{_ef =_cec *_bca *_bcg ;for _ba =0;
_ba < _dbb .Width ;_ba ++{if _gdb :=_dbb .GetPixel (_ba ,_bca );_gdb {_aff =_gbc *_ba ;for _gcb =0;_gcb < _gbc ;_gcb ++{_cbf .setBit (_ef *8+_aff +_gcb );};};};for _gcb =1;_gcb < _cec ;_gcb ++{_bef :=_ef +_gcb *_bcg ;for _fcfc :=0;_fcfc < _bcg ;_fcfc ++{if _egb ,_aba =_cbf .GetByte (_ef +_fcfc );
_aba !=nil {return nil ,_g .Wrapf (_aba ,_dag ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_gcb );};if _aba =_cbf .SetByte (_bef +_fcfc ,_egb );_aba !=nil {return nil ,_g .Wrap (_aba ,_dag ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _cbf ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gbab float64 ,_ggca error ){const _bbga ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_bbga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_bbga ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_g .Error (_bbga ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ecgf ,_cbdeg :=bm1 .Width ,bm1 .Height ;_dabe ,_fcfb :=bm2 .Width ,bm2 .Height ;
_bace :=_eafed (_ecgf -_dabe );if _bace > maxDiffW {return 0,nil ;};_bagd :=_eafed (_cbdeg -_fcfb );if _bagd > maxDiffH {return 0,nil ;};var _ecfdg ,_beba int ;if delX >=0{_ecfdg =int (delX +0.5);}else {_ecfdg =int (delX -0.5);};if delY >=0{_beba =int (delY +0.5);
}else {_beba =int (delY -0.5);};_aacd :=_befa (_beba ,0);_gagf :=_gdab (_fcfb +_beba ,_cbdeg );_aada :=bm1 .RowStride *_aacd ;_gfa :=bm2 .RowStride *(_aacd -_beba );_eeag :=_befa (_ecfdg ,0);_dbgb :=_gdab (_dabe +_ecfdg ,_ecgf );_fbgb :=bm2 .RowStride ;
var _cfbf ,_ccfb int ;if _ecfdg >=8{_cfbf =_ecfdg >>3;_aada +=_cfbf ;_eeag -=_cfbf <<3;_dbgb -=_cfbf <<3;_ecfdg &=7;}else if _ecfdg <=-8{_ccfb =-((_ecfdg +7)>>3);_gfa +=_ccfb ;_fbgb -=_ccfb ;_ecfdg +=_ccfb <<3;};if _eeag >=_dbgb ||_aacd >=_gagf {return 0,nil ;
};_cedd :=(_dbgb +7)>>3;var (_ccff ,_gcfd ,_dadf byte ;_bffb ,_fcdgb ,_faad int ;);switch {case _ecfdg ==0:for _faad =_aacd ;_faad < _gagf ;_faad ,_aada ,_gfa =_faad +1,_aada +bm1 .RowStride ,_gfa +bm2 .RowStride {for _fcdgb =0;_fcdgb < _cedd ;_fcdgb ++{_dadf =bm1 .Data [_aada +_fcdgb ]&bm2 .Data [_gfa +_fcdgb ];
_bffb +=tab [_dadf ];};};case _ecfdg > 0:if _fbgb < _cedd {for _faad =_aacd ;_faad < _gagf ;_faad ,_aada ,_gfa =_faad +1,_aada +bm1 .RowStride ,_gfa +bm2 .RowStride {_ccff ,_gcfd =bm1 .Data [_aada ],bm2 .Data [_gfa ]>>uint (_ecfdg );_dadf =_ccff &_gcfd ;
_bffb +=tab [_dadf ];for _fcdgb =1;_fcdgb < _fbgb ;_fcdgb ++{_ccff ,_gcfd =bm1 .Data [_aada +_fcdgb ],(bm2 .Data [_gfa +_fcdgb ]>>uint (_ecfdg ))|(bm2 .Data [_gfa +_fcdgb -1]<<uint (8-_ecfdg ));_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];};_ccff =bm1 .Data [_aada +_fcdgb ];
_gcfd =bm2 .Data [_gfa +_fcdgb -1]<<uint (8-_ecfdg );_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];};}else {for _faad =_aacd ;_faad < _gagf ;_faad ,_aada ,_gfa =_faad +1,_aada +bm1 .RowStride ,_gfa +bm2 .RowStride {_ccff ,_gcfd =bm1 .Data [_aada ],bm2 .Data [_gfa ]>>uint (_ecfdg );
_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];for _fcdgb =1;_fcdgb < _cedd ;_fcdgb ++{_ccff =bm1 .Data [_aada +_fcdgb ];_gcfd =(bm2 .Data [_gfa +_fcdgb ]>>uint (_ecfdg ))|(bm2 .Data [_gfa +_fcdgb -1]<<uint (8-_ecfdg ));_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];
};};};default:if _cedd < _fbgb {for _faad =_aacd ;_faad < _gagf ;_faad ,_aada ,_gfa =_faad +1,_aada +bm1 .RowStride ,_gfa +bm2 .RowStride {for _fcdgb =0;_fcdgb < _cedd ;_fcdgb ++{_ccff =bm1 .Data [_aada +_fcdgb ];_gcfd =bm2 .Data [_gfa +_fcdgb ]<<uint (-_ecfdg );
_gcfd |=bm2 .Data [_gfa +_fcdgb +1]>>uint (8+_ecfdg );_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];};};}else {for _faad =_aacd ;_faad < _gagf ;_faad ,_aada ,_gfa =_faad +1,_aada +bm1 .RowStride ,_gfa +bm2 .RowStride {for _fcdgb =0;_fcdgb < _cedd -1;_fcdgb ++{_ccff =bm1 .Data [_aada +_fcdgb ];
_gcfd =bm2 .Data [_gfa +_fcdgb ]<<uint (-_ecfdg );_gcfd |=bm2 .Data [_gfa +_fcdgb +1]>>uint (8+_ecfdg );_dadf =_ccff &_gcfd ;_bffb +=tab [_dadf ];};_ccff =bm1 .Data [_aada +_fcdgb ];_gcfd =bm2 .Data [_gfa +_fcdgb ]<<uint (-_ecfdg );_dadf =_ccff &_gcfd ;
_bffb +=tab [_dadf ];};};};_gbab =float64 (_bffb )*float64 (_bffb )/(float64 (area1 )*float64 (area2 ));return _gbab ,nil ;};func _gdab (_bddef ,_abdf int )int {if _bddef < _abdf {return _bddef ;};return _abdf ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _fcac (src ,sequence ...);
};func _bcee (_facf *Bitmap ,_fgbb *_gg .Stack ,_feeb ,_ceeef int )(_bggf *_c .Rectangle ,_aebed error ){const _fccd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _facf ==nil {return nil ,_g .Error (_fccd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _fgbb ==nil {return nil ,_g .Error (_fccd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_fcdc ,_abae :=_facf .Width ,_facf .Height ;_beca :=_fcdc -1;_deggc :=_abae -1;if _feeb < 0||_feeb > _beca ||_ceeef < 0||_ceeef > _deggc ||!_facf .GetPixel (_feeb ,_ceeef ){return nil ,nil ;
};_eaeb :=_c .Rect (100000,100000,0,0);if _aebed =_aafe (_fgbb ,_feeb ,_feeb ,_ceeef ,1,_deggc ,&_eaeb );_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _aebed =_aafe (_fgbb ,_feeb ,_feeb ,_ceeef +1,-1,_deggc ,&_eaeb );
_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_eaeb .Min .X ,_eaeb .Max .X =_feeb ,_feeb ;_eaeb .Min .Y ,_eaeb .Max .Y =_ceeef ,_ceeef ;var (_gbceb *fillSegment ;
_beab int ;);for _fgbb .Len ()> 0{if _gbceb ,_aebed =_fage (_fgbb );_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"");};_ceeef =_gbceb ._bdecg ;for _feeb =_gbceb ._eaae -1;_feeb >=0&&_facf .GetPixel (_feeb ,_ceeef );_feeb --{if _aebed =_facf .SetPixel (_feeb ,_ceeef ,0);
_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _feeb >=_gbceb ._eaae -1{for {for _feeb ++;_feeb <=_gbceb ._dec +1&&_feeb <=_beca &&!_facf .GetPixel (_feeb ,_ceeef );_feeb ++{};_beab =_feeb ;if !(_feeb <=_gbceb ._dec +1&&_feeb <=_beca ){break ;
};for ;_feeb <=_beca &&_facf .GetPixel (_feeb ,_ceeef );_feeb ++{if _aebed =_facf .SetPixel (_feeb ,_ceeef ,0);_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _aebed =_aafe (_fgbb ,_beab ,_feeb -1,_gbceb ._bdecg ,_gbceb ._ddcd ,_deggc ,&_eaeb );
_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _feeb > _gbceb ._dec {if _aebed =_aafe (_fgbb ,_gbceb ._dec +1,_feeb -1,_gbceb ._bdecg ,-_gbceb ._ddcd ,_deggc ,&_eaeb );_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_beab =_feeb +1;if _beab < _gbceb ._eaae {if _aebed =_aafe (_fgbb ,_beab ,_gbceb ._eaae -1,_gbceb ._bdecg ,-_gbceb ._ddcd ,_deggc ,&_eaeb );_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_feeb =_gbceb ._eaae ;for {for ;_feeb <=_beca &&_facf .GetPixel (_feeb ,_ceeef );_feeb ++{if _aebed =_facf .SetPixel (_feeb ,_ceeef ,0);_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _aebed =_aafe (_fgbb ,_beab ,_feeb -1,_gbceb ._bdecg ,_gbceb ._ddcd ,_deggc ,&_eaeb );
_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _feeb > _gbceb ._dec {if _aebed =_aafe (_fgbb ,_gbceb ._dec +1,_feeb -1,_gbceb ._bdecg ,-_gbceb ._ddcd ,_deggc ,&_eaeb );_aebed !=nil {return nil ,_g .Wrap (_aebed ,_fccd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _feeb ++;_feeb <=_gbceb ._dec +1&&_feeb <=_beca &&!_facf .GetPixel (_feeb ,_ceeef );_feeb ++{};_beab =_feeb ;if !(_feeb <=_gbceb ._dec +1&&_feeb <=_beca ){break ;};};};_eaeb .Max .X ++;_eaeb .Max .Y ++;return &_eaeb ,nil ;};