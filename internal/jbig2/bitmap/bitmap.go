//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_db "encoding/binary";_f "github.com/stretchr/testify/require";_ce "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/imageutil";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_cb "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fc "image";_bf "math";_ff "sort";_g "strings";_b "testing";);func (_dee *Bitmap )ToImage ()_fc .Image {_bbb ,_bedc :=_e .NewImage (_dee .Width ,_dee .Height ,1,1,_dee .Data ,nil ,nil );if _bedc !=nil {_ce .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bedc );
};return _bbb ;};func _gfe (_dbc ,_efd *Bitmap )(_dad error ){const _dd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_aga :=_efd .RowStride ;_bc :=_dbc .RowStride ;var _ba ,_cg ,_dada ,_bg ,_bgg int ;
for _dada =0;_dada < _efd .Height ;_dada ++{_ba =_dada *_aga ;_cg =8*_dada *_bc ;for _bg =0;_bg < _aga ;_bg ++{if _dad =_dbc .setEightBytes (_cg +_bg *8,_faag [_efd .Data [_ba +_bg ]]);_dad !=nil {return _cb .Wrap (_dad ,_dd ,"");};};for _bgg =1;_bgg < 8;
_bgg ++{for _bg =0;_bg < _bc ;_bg ++{if _dad =_dbc .SetByte (_cg +_bgg *_bc +_bg ,_dbc .Data [_cg +_bg ]);_dad !=nil {return _cb .Wrap (_dad ,_dd ,"");};};};};return nil ;};func (_gcb *Bitmap )Equivalent (s *Bitmap )bool {return _gcb .equivalent (s )};
func TstISymbol (t *_b .T ,scale ...int )*Bitmap {_aeaf ,_cbgbd :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_cbgbd );return TstGetScaledSymbol (t ,_aeaf ,scale ...);};func (_eeb *Bitmap )countPixels ()int {var (_aecf int ;_dbab uint8 ;
_cffe byte ;_bag int ;);_dce :=_eeb .RowStride ;_daeg :=uint (_eeb .Width &0x07);if _daeg !=0{_dbab =uint8 ((0xff<<(8-_daeg ))&0xff);_dce --;};for _bbcb :=0;_bbcb < _eeb .Height ;_bbcb ++{for _bag =0;_bag < _dce ;_bag ++{_cffe =_eeb .Data [_bbcb *_eeb .RowStride +_bag ];
_aecf +=int (_dba [_cffe ]);};if _daeg !=0{_aecf +=int (_dba [_eeb .Data [_bbcb *_eeb .RowStride +_bag ]&_dbab ]);};};return _aecf ;};func _gaad (_bbaff ,_fgdc *Bitmap ,_aagf ,_gefc int )(*Bitmap ,error ){const _babd ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _fgdc ==nil {_ce .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_cb .Error (_babd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _aagf < 1||_gefc < 1{return nil ,_cb .Error (_babd ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _aagf ==1&&_gefc ==1{_abba ,_ebaeb :=_bfgc (_bbaff ,_fgdc );if _ebaeb !=nil {return nil ,_cb .Wrap (_ebaeb ,_babd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _abba ,nil ;};if _aagf ==1||_gefc ==1{_fdgd :=SelCreateBrick (_gefc ,_aagf ,_gefc /2,_aagf /2,SelHit );_geegd ,_gceg :=_caa (_bbaff ,_fgdc ,_fdgd );if _gceg !=nil {return nil ,_cb .Wrap (_gceg ,_babd ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _geegd ,nil ;};_gedg :=SelCreateBrick (1,_aagf ,0,_aagf /2,SelHit );_cdff :=SelCreateBrick (_gefc ,1,_gefc /2,0,SelHit );_ddga ,_gfab :=_caa (nil ,_fgdc ,_gedg );if _gfab !=nil {return nil ,_cb .Wrap (_gfab ,_babd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_bbaff ,_gfab =_caa (_bbaff ,_ddga ,_cdff );if _gfab !=nil {return nil ,_cb .Wrap (_gfab ,_babd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bbaff ,nil ;};func (_aabf CombinationOperator )String ()string {var _geef string ;
switch _aabf {case CmbOpOr :_geef ="\u004f\u0052";case CmbOpAnd :_geef ="\u0041\u004e\u0044";case CmbOpXor :_geef ="\u0058\u004f\u0052";case CmbOpXNor :_geef ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_geef ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_geef ="\u004e\u004f\u0054";};return _geef ;};var _dba [256]uint8 ;type CombinationOperator int ;func TstFrameBitmap ()*Bitmap {return _egaeg .Copy ()};func (_geg *Bitmap )SetPadBits (value int ){_geg .setPadBits (value )};func TstDSymbol (t *_b .T ,scale ...int )*Bitmap {_cbad ,_fcdg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_f .NoError (t ,_fcdg );return TstGetScaledSymbol (t ,_cbad ,scale ...);};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _caa (d ,s ,sel )};func _eecda (_dcbf ,_cgge *Bitmap ,_ggbdb *Selection )(*Bitmap ,error ){const _bagec ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _bfcdc ,_fbbd int ;if _cgge ==nil {return nil ,_cb .Error (_bagec ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggbdb ==nil {return nil ,_cb .Error (_bagec ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_bfcdc =_ggbdb .Width ;_fbbd =_ggbdb .Height ;if _bfcdc ==0||_fbbd ==0{return nil ,_cb .Error (_bagec ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _dcbf ==nil {return _cgge .createTemplate (),nil ;};if _agee :=_dcbf .resizeImageData (_cgge );
_agee !=nil {return nil ,_agee ;};return _dcbf ,nil ;};func (_cfcb *Bitmap )CreateTemplate ()*Bitmap {return _cfcb .createTemplate ()};func (_dfgec *byWidth )Swap (i ,j int ){_dfgec .Values [i ],_dfgec .Values [j ]=_dfgec .Values [j ],_dfgec .Values [i ];
if _dfgec .Boxes !=nil {_dfgec .Boxes [i ],_dfgec .Boxes [j ]=_dfgec .Boxes [j ],_dfgec .Boxes [i ];};};func (_fbc *Bitmap )ClipRectangle (box *_fc .Rectangle )(_cdef *Bitmap ,_defa *_fc .Rectangle ,_gdeg error ){const _bce ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_cb .Error (_bce ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_eg ,_bfb :=_fbc .Width ,_fbc .Height ;_becc :=_fc .Rect (0,0,_eg ,_bfb );if !box .Overlaps (_becc ){return nil ,nil ,_cb .Error (_bce ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_abd :=box .Intersect (_becc );_gdd ,_fdcf :=_abd .Min .X ,_abd .Min .Y ;_fce ,_aef :=_abd .Dx (),_abd .Dy ();_cdef =New (_fce ,_aef );_cdef .Text =_fbc .Text ;if _gdeg =_cdef .RasterOperation (0,0,_fce ,_aef ,PixSrc ,_fbc ,_gdd ,_fdcf );_gdeg !=nil {return nil ,nil ,_cb .Wrap (_gdeg ,_bce ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_defa =&_abd ;return _cdef ,_defa ,nil ;};func init (){for _afda :=0;_afda < 256;_afda ++{_dba [_afda ]=uint8 (_afda &0x1)+(uint8 (_afda >>1)&0x1)+(uint8 (_afda >>2)&0x1)+(uint8 (_afda >>3)&0x1)+(uint8 (_afda >>4)&0x1)+(uint8 (_afda >>5)&0x1)+(uint8 (_afda >>6)&0x1)+(uint8 (_afda >>7)&0x1);
};};func (_eede *Bitmap )thresholdPixelSum (_cfdb int )bool {var (_cgee int ;_agfb uint8 ;_gag byte ;_gffg int ;);_dcb :=_eede .RowStride ;_bedg :=uint (_eede .Width &0x07);if _bedg !=0{_agfb =uint8 ((0xff<<(8-_bedg ))&0xff);_dcb --;};for _dfef :=0;_dfef < _eede .Height ;
_dfef ++{for _gffg =0;_gffg < _dcb ;_gffg ++{_gag =_eede .Data [_dfef *_eede .RowStride +_gffg ];_cgee +=int (_dba [_gag ]);};if _bedg !=0{_gag =_eede .Data [_dfef *_eede .RowStride +_gffg ]&_agfb ;_cgee +=int (_dba [_gag ]);};if _cgee > _cfdb {return true ;
};};return false ;};func (_bbag *Bitmap )GetByteIndex (x ,y int )int {return y *_bbag .RowStride +(x >>3)};func (_egg *Bitmap )GetChocolateData ()[]byte {if _egg .Color ==Vanilla {_egg .inverseData ();};return _egg .Data ;};func TstASymbol (t *_b .T )*Bitmap {t .Helper ();
_abcf :=New (6,6);_f .NoError (t ,_abcf .SetPixel (1,0,1));_f .NoError (t ,_abcf .SetPixel (2,0,1));_f .NoError (t ,_abcf .SetPixel (3,0,1));_f .NoError (t ,_abcf .SetPixel (4,0,1));_f .NoError (t ,_abcf .SetPixel (5,1,1));_f .NoError (t ,_abcf .SetPixel (1,2,1));
_f .NoError (t ,_abcf .SetPixel (2,2,1));_f .NoError (t ,_abcf .SetPixel (3,2,1));_f .NoError (t ,_abcf .SetPixel (4,2,1));_f .NoError (t ,_abcf .SetPixel (5,2,1));_f .NoError (t ,_abcf .SetPixel (0,3,1));_f .NoError (t ,_abcf .SetPixel (5,3,1));_f .NoError (t ,_abcf .SetPixel (0,4,1));
_f .NoError (t ,_abcf .SetPixel (5,4,1));_f .NoError (t ,_abcf .SetPixel (1,5,1));_f .NoError (t ,_abcf .SetPixel (2,5,1));_f .NoError (t ,_abcf .SetPixel (3,5,1));_f .NoError (t ,_abcf .SetPixel (4,5,1));_f .NoError (t ,_abcf .SetPixel (5,5,1));return _abcf ;
};func Centroids (bms []*Bitmap )(*Points ,error ){_geab :=make ([]Point ,len (bms ));_cdfb :=_ceea ();_bgee :=_fgbff ();var _abdf error ;for _gegc ,_efef :=range bms {_geab [_gegc ],_abdf =_efef .centroid (_cdfb ,_bgee );if _abdf !=nil {return nil ,_abdf ;
};};_fad :=Points (_geab );return &_fad ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gdde ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_debd ,_bdda :=p1 .Width ,p1 .Height ;_befge ,_ecaf :=p3 .Width ,p3 .Height ;
if _d .Abs (_debd -_befge )> maxDiffW {return false ,nil ;};if _d .Abs (_bdda -_ecaf )> maxDiffH {return false ,nil ;};_egeb :=int (delX +_d .Sign (delX )*0.5);_dafcc :=int (delY +_d .Sign (delY )*0.5);var _deff error ;_abgfc :=p1 .CreateTemplate ();if _deff =_abgfc .RasterOperation (0,0,_debd ,_bdda ,PixSrc ,p1 ,0,0);
_deff !=nil {return false ,_cb .Wrap (_deff ,_gdde ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _deff =_abgfc .RasterOperation (_egeb ,_dafcc ,_debd ,_bdda ,PixNotSrcAndDst ,p4 ,0,0);_deff !=nil {return false ,_cb .Wrap (_deff ,_gdde ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _abgfc .Zero (){return false ,nil ;};if _deff =_abgfc .RasterOperation (_egeb ,_dafcc ,_befge ,_ecaf ,PixSrc ,p3 ,0,0);_deff !=nil {return false ,_cb .Wrap (_deff ,_gdde ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _deff =_abgfc .RasterOperation (0,0,_befge ,_ecaf ,PixNotSrcAndDst ,p2 ,0,0);
_deff !=nil {return false ,_cb .Wrap (_deff ,_gdde ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _abgfc .Zero (),nil ;};func (_cgbd *Bitmap )GetPixel (x ,y int )bool {_eaae :=_cgbd .GetByteIndex (x ,y );_fec :=_cgbd .GetBitOffset (x );_bdc :=uint (7-_fec );
if _eaae > len (_cgbd .Data )-1{_ce .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_cgbd );
return false ;};if (_cgbd .Data [_eaae ]>>_bdc )&0x01>=1{return true ;};return false ;};func (_cegf *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _afff ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_cegf .Values )==0{return nil ,_cb .Error (_afff ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_fgag :=&BitmapsArray {};_cegf .SortByWidth ();_fafbc :=-1;_eedf :=-1;for _fagac :=0;_fagac < len (_cegf .Values );_fagac ++{_fcea :=_cegf .Values [_fagac ].Width ;if _fcea > _fafbc {_fafbc =_fcea ;_eedf ++;_fgag .Values =append (_fgag .Values ,&Bitmaps {});
};_fgag .Values [_eedf ].AddBitmap (_cegf .Values [_fagac ]);};return _fgag ,nil ;};func (_dbeff *ClassedPoints )XAtIndex (i int )float32 {return (*_dbeff .Points )[_dbeff .IntSlice [i ]].X };func (_eeba Points )YSorter ()func (_aece ,_acgg int )bool {return func (_dagf ,_ddcb int )bool {return _eeba [_dagf ].Y < _eeba [_ddcb ].Y };
};func (_fdgf *Bitmap )And (s *Bitmap )(_fgbg *Bitmap ,_bacd error ){const _fb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _fdgf ==nil {return nil ,_cb .Error (_fb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_cb .Error (_fb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_fdgf .SizesEqual (s ){_ce .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_fb );
};if _fgbg ,_bacd =_bfgc (_fgbg ,_fdgf );_bacd !=nil {return nil ,_cb .Wrap (_bacd ,_fb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bacd =_fgbg .RasterOperation (0,0,_fgbg .Width ,_fgbg .Height ,PixSrcAndDst ,s ,0,0);
_bacd !=nil {return nil ,_cb .Wrap (_bacd ,_fb ,"");};return _fgbg ,nil ;};func (_bef *Bitmap )GetUnpaddedData ()([]byte ,error ){_ebb :=uint (_bef .Width &0x07);if _ebb ==0{return _bef .Data ,nil ;};_ded :=_bef .Width *_bef .Height ;if _ded %8!=0{_ded >>=3;
_ded ++;}else {_ded >>=3;};_abgd :=make ([]byte ,_ded );_ccda :=_a .NewWriterMSB (_abgd );const _efb ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _gffa :=0;_gffa < _bef .Height ;_gffa ++{for _edg :=0;_edg < _bef .RowStride ;
_edg ++{_bfbb :=_bef .Data [_gffa *_bef .RowStride +_edg ];if _edg !=_bef .RowStride -1{_ccc :=_ccda .WriteByte (_bfbb );if _ccc !=nil {return nil ,_cb .Wrap (_ccc ,_efb ,"");};continue ;};for _fba :=uint (0);_fba < _ebb ;_fba ++{_dac :=_ccda .WriteBit (int (_bfbb >>(7-_fba )&0x01));
if _dac !=nil {return nil ,_cb .Wrap (_dac ,_efb ,"");};};};};return _abgd ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fgda (oldByte ,newByte ,op );};func _bffg (_aaed ,_cgeg int )int {if _aaed < _cgeg {return _aaed ;
};return _cgeg ;};func (_cbc *Bitmap )SizesEqual (s *Bitmap )bool {if _cbc ==s {return true ;};if _cbc .Width !=s .Width ||_cbc .Height !=s .Height {return false ;};return true ;};func (_aebd *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_aebd .Width ,Height :_aebd .Height ,RowStride :_aebd .RowStride ,Color :_aebd .Color ,Text :_aebd .Text ,BitmapNumber :_aebd .BitmapNumber ,Special :_aebd .Special ,Data :make ([]byte ,len (_aebd .Data ))};
};const (Vanilla Color =iota ;Chocolate ;);func _ageeb (_egbb *Bitmap ,_ededd ,_eadg ,_egde ,_abbag int ,_gfaca RasterOperator ,_dbedg *Bitmap ,_edbg ,_efag int )error {var (_agcbg bool ;_ecbd bool ;_adee byte ;_ggfd int ;_aceg int ;_degg int ;_eafae int ;
_deaf bool ;_dacgf int ;_fecc int ;_caed int ;_ccdab bool ;_fgdac byte ;_feece int ;_cecf int ;_geaf int ;_caag byte ;_ccdc int ;_fgbcb int ;_adfc uint ;_acfa uint ;_dbcc byte ;_ffce shift ;_efdd bool ;_effca bool ;_dfff ,_bgca int ;);if _edbg &7!=0{_fgbcb =8-(_edbg &7);
};if _ededd &7!=0{_aceg =8-(_ededd &7);};if _fgbcb ==0&&_aceg ==0{_dbcc =_gbgc [0];}else {if _aceg > _fgbcb {_adfc =uint (_aceg -_fgbcb );}else {_adfc =uint (8-(_fgbcb -_aceg ));};_acfa =8-_adfc ;_dbcc =_gbgc [_adfc ];};if (_ededd &7)!=0{_agcbg =true ;
_ggfd =8-(_ededd &7);_adee =_gbgc [_ggfd ];_degg =_egbb .RowStride *_eadg +(_ededd >>3);_eafae =_dbedg .RowStride *_efag +(_edbg >>3);_ccdc =8-(_edbg &7);if _ggfd > _ccdc {_ffce =_gabe ;if _egde >=_fgbcb {_efdd =true ;};}else {_ffce =_fcaf ;};};if _egde < _ggfd {_ecbd =true ;
_adee &=_efcb [8-_ggfd +_egde ];};if !_ecbd {_dacgf =(_egde -_ggfd )>>3;if _dacgf !=0{_deaf =true ;_fecc =_egbb .RowStride *_eadg +((_ededd +_aceg )>>3);_caed =_dbedg .RowStride *_efag +((_edbg +_aceg )>>3);};};_feece =(_ededd +_egde )&7;if !(_ecbd ||_feece ==0){_ccdab =true ;
_fgdac =_efcb [_feece ];_cecf =_egbb .RowStride *_eadg +((_ededd +_aceg )>>3)+_dacgf ;_geaf =_dbedg .RowStride *_efag +((_edbg +_aceg )>>3)+_dacgf ;if _feece > int (_acfa ){_effca =true ;};};switch _gfaca {case PixSrc :if _agcbg {for _dfff =0;_dfff < _abbag ;
_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag ,_adee );_degg +=_egbb .RowStride ;
_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]=_caag ;};
_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag ,_fgdac );
_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixNotSrc :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};
}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^_caag ,_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );
_egbb .Data [_fecc +_bgca ]=^_caag ;};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );
};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^_caag ,_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixSrcOrDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );
};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag |_egbb .Data [_degg ],_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;
_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]|=_caag ;};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;
_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag |_egbb .Data [_cecf ],_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;
};};case PixSrcAndDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag &_egbb .Data [_degg ],_adee );
_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]&=_caag ;
};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag &_egbb .Data [_cecf ],_fgdac );
_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixSrcXorDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );
};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag ^_egbb .Data [_degg ],_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;
_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]^=_caag ;};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;
_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag ^_egbb .Data [_cecf ],_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;
};};case PixNotSrcOrDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^_caag |_egbb .Data [_degg ],_adee );
_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]|=^_caag ;
};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^_caag |_egbb .Data [_cecf ],_fgdac );
_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixNotSrcAndDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );
};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^_caag &_egbb .Data [_degg ],_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;
_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]&=^_caag ;};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;
_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^_caag &_egbb .Data [_cecf ],_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;
};};case PixSrcOrNotDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag |^_egbb .Data [_degg ],_adee );
_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]=_caag |^_egbb .Data [_fecc +_bgca ];
};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag |^_egbb .Data [_cecf ],_fgdac );
_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixSrcAndNotDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );
};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],_caag &^_egbb .Data [_degg ],_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;
_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]=_caag &^_egbb .Data [_fecc +_bgca ];};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;
_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],_caag &^_egbb .Data [_cecf ],_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;
};};case PixNotPixSrcOrDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;
};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^(_caag |_egbb .Data [_degg ]),_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );
_egbb .Data [_fecc +_bgca ]=^(_caag |_egbb .Data [_fecc +_bgca ]);};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );
};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^(_caag |_egbb .Data [_cecf ]),_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixNotPixSrcAndDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;
if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^(_caag &_egbb .Data [_degg ]),_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;
};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]=^(_caag &_egbb .Data [_fecc +_bgca ]);
};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^(_caag &_egbb .Data [_cecf ]),_fgdac );
_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;};};case PixNotPixSrcXorDst :if _agcbg {for _dfff =0;_dfff < _abbag ;_dfff ++{if _ffce ==_gabe {_caag =_dbedg .Data [_eafae ]<<_adfc ;if _efdd {_caag =_cegd (_caag ,_dbedg .Data [_eafae +1]>>_acfa ,_dbcc );
};}else {_caag =_dbedg .Data [_eafae ]>>_acfa ;};_egbb .Data [_degg ]=_cegd (_egbb .Data [_degg ],^(_caag ^_egbb .Data [_degg ]),_adee );_degg +=_egbb .RowStride ;_eafae +=_dbedg .RowStride ;};};if _deaf {for _dfff =0;_dfff < _abbag ;_dfff ++{for _bgca =0;
_bgca < _dacgf ;_bgca ++{_caag =_cegd (_dbedg .Data [_caed +_bgca ]<<_adfc ,_dbedg .Data [_caed +_bgca +1]>>_acfa ,_dbcc );_egbb .Data [_fecc +_bgca ]=^(_caag ^_egbb .Data [_fecc +_bgca ]);};_fecc +=_egbb .RowStride ;_caed +=_dbedg .RowStride ;};};if _ccdab {for _dfff =0;
_dfff < _abbag ;_dfff ++{_caag =_dbedg .Data [_geaf ]<<_adfc ;if _effca {_caag =_cegd (_caag ,_dbedg .Data [_geaf +1]>>_acfa ,_dbcc );};_egbb .Data [_cecf ]=_cegd (_egbb .Data [_cecf ],^(_caag ^_egbb .Data [_cecf ]),_fgdac );_cecf +=_egbb .RowStride ;_geaf +=_dbedg .RowStride ;
};};default:_ce .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gfaca );return _cb .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_cfcf *Bitmap )centroid (_ccbbd ,_ddaa []int )(Point ,error ){_faga :=Point {};_cfcf .setPadBits (0);if len (_ccbbd )==0{_ccbbd =_ceea ();};if len (_ddaa )==0{_ddaa =_fgbff ();};var _eccb ,_ccdae ,_fcg ,_gaa ,_egae ,_agbg int ;var _eabe byte ;
for _egae =0;_egae < _cfcf .Height ;_egae ++{_accb :=_cfcf .RowStride *_egae ;_gaa =0;for _agbg =0;_agbg < _cfcf .RowStride ;_agbg ++{_eabe =_cfcf .Data [_accb +_agbg ];if _eabe !=0{_gaa +=_ddaa [_eabe ];_eccb +=_ccbbd [_eabe ]+_agbg *8*_ddaa [_eabe ];
};};_fcg +=_gaa ;_ccdae +=_gaa *_egae ;};if _fcg !=0{_faga .X =float32 (_eccb )/float32 (_fcg );_faga .Y =float32 (_ccdae )/float32 (_fcg );};return _faga ,nil ;};type LocationFilter int ;func _fdea (_ebaaa ,_aefdd *Bitmap ,_aeag ,_cdfd int )(*Bitmap ,error ){const _efaf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _aefdd ==nil {return nil ,_cb .Error (_efaf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aeag < 1||_cdfd < 1{return nil ,_cb .Error (_efaf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _aeag ==1&&_cdfd ==1{return _aefdd .Copy (),nil ;};if _aeag ==1||_cdfd ==1{_bedda :=SelCreateBrick (_cdfd ,_aeag ,_cdfd /2,_aeag /2,SelHit );var _edff error ;_ebaaa ,_edff =_bfgce (_ebaaa ,_aefdd ,_bedda );if _edff !=nil {return nil ,_cb .Wrap (_edff ,_efaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebaaa ,nil ;};_cdce :=SelCreateBrick (1,_aeag ,0,_aeag /2,SelHit );_gdaf :=SelCreateBrick (_cdfd ,1,_cdfd /2,0,SelHit );_dcebc ,_eedb :=_caa (nil ,_aefdd ,_cdce );if _eedb !=nil {return nil ,_cb .Wrap (_eedb ,_efaf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ebaaa ,_eedb =_caa (_ebaaa ,_dcebc ,_gdaf );_eedb !=nil {return nil ,_cb .Wrap (_eedb ,_efaf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_eedb =_dcgg (_dcebc ,_ebaaa ,_cdce );_eedb !=nil {return nil ,_cb .Wrap (_eedb ,_efaf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_eedb =_dcgg (_ebaaa ,_dcebc ,_gdaf );_eedb !=nil {return nil ,_cb .Wrap (_eedb ,_efaf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ebaaa ,nil ;};func _fag (_gbb ,_ade int )*Bitmap {return &Bitmap {Width :_gbb ,Height :_ade ,RowStride :(_gbb +7)>>3};
};func (_fggda *BitmapsArray )AddBox (box *_fc .Rectangle ){_fggda .Boxes =append (_fggda .Boxes ,box )};func (_gfeaa *Bitmaps )String ()string {_cegff :=_g .Builder {};for _ ,_cggfe :=range _gfeaa .Values {_cegff .WriteString (_cggfe .String ());_cegff .WriteRune ('\n');
};return _cegff .String ();};func (_aaa *Bitmap )Copy ()*Bitmap {_fbf :=make ([]byte ,len (_aaa .Data ));copy (_fbf ,_aaa .Data );return &Bitmap {Width :_aaa .Width ,Height :_aaa .Height ,RowStride :_aaa .RowStride ,Data :_fbf ,Color :_aaa .Color ,Text :_aaa .Text ,BitmapNumber :_aaa .BitmapNumber ,Special :_aaa .Special };
};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bddc bool ,_cffd error ){const _fefg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_accf ,_dcba :=p1 .Width ,p1 .Height ;_cggg ,_gbcg :=p3 .Width ,p3 .Height ;if _d .Abs (_accf -_cggg )> maxDiffW {return false ,nil ;};if _d .Abs (_dcba -_gbcg )> maxDiffH {return false ,nil ;};_eeaa :=int (float32 (area1 )*(1.0-rank )+0.5);_ceefe :=int (float32 (area3 )*(1.0-rank )+0.5);
var _daeb ,_eebe int ;if delX >=0{_daeb =int (delX +0.5);}else {_daeb =int (delX -0.5);};if delY >=0{_eebe =int (delY +0.5);}else {_eebe =int (delY -0.5);};_edfa :=p1 .CreateTemplate ();if _cffd =_edfa .RasterOperation (0,0,_accf ,_dcba ,PixSrc ,p1 ,0,0);
_cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cffd =_edfa .RasterOperation (_daeb ,_eebe ,_accf ,_dcba ,PixNotSrcAndDst ,p4 ,0,0);_cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_bddc ,_cffd =_edfa .ThresholdPixelSum (_eeaa ,tab8 );if _cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bddc {return false ,nil ;};if _cffd =_edfa .RasterOperation (_daeb ,_eebe ,_cggg ,_gbcg ,PixSrc ,p3 ,0,0);
_cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cffd =_edfa .RasterOperation (0,0,_cggg ,_gbcg ,PixNotSrcAndDst ,p2 ,0,0);_cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_bddc ,_cffd =_edfa .ThresholdPixelSum (_ceefe ,tab8 );if _cffd !=nil {return false ,_cb .Wrap (_cffd ,_fefg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bddc ,nil ;};func TstWriteSymbols (t *_b .T ,bms *Bitmaps ,src *Bitmap ){for _bgcd :=0;
_bgcd < bms .Size ();_bgcd ++{_adbc :=bms .Values [_bgcd ];_bbdg :=bms .Boxes [_bgcd ];_fcef :=src .RasterOperation (_bbdg .Min .X ,_bbdg .Min .Y ,_adbc .Width ,_adbc .Height ,PixSrc ,_adbc ,0,0);_f .NoError (t ,_fcef );};};func (_dgcd *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _cbec ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _bddeg :=_dgcd .validateIntSlice ();_bddeg !=nil {return nil ,_cb .Wrap (_bddeg ,_cbec ,"");};if _dgcd .IntSlice .Size ()==0{return nil ,_cb .Error (_cbec ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_dgcd .SortByY ();var (_agaab []*ClassedPoints ;_aecc int ;);_ebcc :=-1;var _aagg *ClassedPoints ;for _bffa :=0;_bffa < len (_dgcd .IntSlice );_bffa ++{_aecc =int (_dgcd .YAtIndex (_bffa ));if _aecc !=_ebcc {_aagg =&ClassedPoints {Points :_dgcd .Points };
_ebcc =_aecc ;_agaab =append (_agaab ,_aagg );};_aagg .IntSlice =append (_aagg .IntSlice ,_dgcd .IntSlice [_bffa ]);};for _ ,_cfgd :=range _agaab {_cfgd .SortByX ();};return _agaab ,nil ;};func _bb (_bed *Bitmap ,_cgf ,_eag int )(*Bitmap ,error ){const _ceg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _bed ==nil {return nil ,_cb .Error (_ceg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cgf <=0||_eag <=0{return nil ,_cb .Error (_ceg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _cgf ==_eag {if _cgf ==1{_ecb ,_fged :=_bfgc (nil ,_bed );if _fged !=nil {return nil ,_cb .Wrap (_fged ,_ceg ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ecb ,nil ;};if _cgf ==2||_cgf ==4||_cgf ==8{_gcc ,_caf :=_bfa (_bed ,_cgf );
if _caf !=nil {return nil ,_cb .Wrap (_caf ,_ceg ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _gcc ,nil ;};};_aaf :=_cgf *_bed .Width ;_cge :=_eag *_bed .Height ;_dadf :=New (_aaf ,_cge );_fdf :=_dadf .RowStride ;
var (_ae ,_aab ,_bdb ,_bga ,_agd int ;_dg byte ;_gb error ;);for _aab =0;_aab < _bed .Height ;_aab ++{_ae =_eag *_aab *_fdf ;for _bdb =0;_bdb < _bed .Width ;_bdb ++{if _ab :=_bed .GetPixel (_bdb ,_aab );_ab {_agd =_cgf *_bdb ;for _bga =0;_bga < _cgf ;_bga ++{_dadf .setBit (_ae *8+_agd +_bga );
};};};for _bga =1;_bga < _eag ;_bga ++{_cce :=_ae +_bga *_fdf ;for _ceb :=0;_ceb < _fdf ;_ceb ++{if _dg ,_gb =_dadf .GetByte (_ae +_ceb );_gb !=nil {return nil ,_cb .Wrapf (_gb ,_ceg ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bga );
};if _gb =_dadf .SetByte (_cce +_ceb ,_dg );_gb !=nil {return nil ,_cb .Wrap (_gb ,_ceg ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _dadf ,nil ;};func (_fedc *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _cdffb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_fedc .Values )==0{return nil ,_cb .Error (_cdffb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_gdbf :=&BitmapsArray {};_fedc .SortByHeight ();_aeegbf :=-1;_ddag :=-1;for _fbdg :=0;_fbdg < len (_fedc .Values );
_fbdg ++{_dacb :=_fedc .Values [_fbdg ].Height ;if _dacb > _aeegbf {_aeegbf =_dacb ;_ddag ++;_gdbf .Values =append (_gdbf .Values ,&Bitmaps {});};_gdbf .Values [_ddag ].AddBitmap (_fedc .Values [_fbdg ]);};return _gdbf ,nil ;};func _cdeg (_badd *Bitmap )(_gdbd *Bitmap ,_geba int ,_fcae error ){const _adbe ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _badd ==nil {return nil ,0,_cb .Errorf (_adbe ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _dgdd ,_ggded *Bitmap ;if _dgdd ,_fcae =_bfgc (nil ,_badd );_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_ddbb [13]int ;_abea ,_eabg int ;);_bdcc :=12;_dcfd :=_d .NewNumSlice (_bdcc +1);_dfcf :=_d .NewNumSlice (_bdcc +1);var _ggcc *Boxes ;for _bddb :=0;_bddb <=_bdcc ;_bddb ++{if _bddb ==0{if _ggded ,_fcae =_bfgc (nil ,_dgdd );_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _ggded ,_fcae =_abda (_dgdd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ggcc ,_fcae =_ggded .connComponentsBB (4);
_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"");};_ddbb [_bddb ]=len (*_ggcc );_dcfd .AddInt (_ddbb [_bddb ]);switch _bddb {case 0:_abea =_ddbb [0];default:_eabg =_ddbb [_bddb -1]-_ddbb [_bddb ];_dfcf .AddInt (_eabg );};_dgdd =_ggded ;};_ccdeb :=true ;
_acagf :=2;var _cfg ,_bcd int ;for _dbfa :=1;_dbfa < len (*_dfcf );_dbfa ++{if _cfg ,_fcae =_dcfd .GetInt (_dbfa );_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _ccdeb &&_cfg < int (0.3*float32 (_abea )){_acagf =_dbfa +1;_ccdeb =false ;};if _eabg ,_fcae =_dfcf .GetInt (_dbfa );_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _eabg > _bcd {_bcd =_eabg ;};};_ceeea :=_badd .XResolution ;if _ceeea ==0{_ceeea =150;};if _ceeea > 110{_acagf ++;};if _acagf < 2{_ce .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_acagf =2;};_geba =_acagf +1;if _gdbd ,_fcae =_fdea (nil ,_badd ,_acagf +1,1);_fcae !=nil {return nil ,0,_cb .Wrap (_fcae ,_adbe ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _gdbd ,_geba ,nil ;
};func _dfdf (_abe ,_ffc *Bitmap ,_eafg ,_ecab ,_cdf ,_cdcb ,_beag ,_ebae ,_ceee ,_ggde int ,_deg CombinationOperator ,_dcf int )error {var _gggd int ;_acg :=func (){_gggd ++;_cdf +=_ffc .RowStride ;_cdcb +=_abe .RowStride ;_beag +=_abe .RowStride };for _gggd =_eafg ;
_gggd < _ecab ;_acg (){var _gfef uint16 ;_eaab :=_cdf ;for _afc :=_cdcb ;_afc <=_beag ;_afc ++{_fcebf ,_cgeb :=_ffc .GetByte (_eaab );if _cgeb !=nil {return _cgeb ;};_dcc ,_cgeb :=_abe .GetByte (_afc );if _cgeb !=nil {return _cgeb ;};_gfef =(_gfef |(uint16 (_dcc )&0xff))<<uint (_ggde );
_dcc =byte (_gfef >>8);if _cgeb =_ffc .SetByte (_eaab ,_fgda (_fcebf ,_dcc ,_deg ));_cgeb !=nil {return _cgeb ;};_eaab ++;_gfef <<=uint (_ceee );if _afc ==_beag {_dcc =byte (_gfef >>(8-uint8 (_ggde )));if _dcf !=0{_dcc =_edcg (uint (8+_ebae ),_dcc );};
_fcebf ,_cgeb =_ffc .GetByte (_eaab );if _cgeb !=nil {return _cgeb ;};if _cgeb =_ffc .SetByte (_eaab ,_fgda (_fcebf ,_dcc ,_deg ));_cgeb !=nil {return _cgeb ;};};};};return nil ;};func (_fafc *Selection )setOrigin (_bbeb ,_bfcc int ){_fafc .Cy ,_fafc .Cx =_bbeb ,_bfcc };
func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cfef (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _dcgd (_beefa ,_dafeb *Bitmap ,_cdbc ,_ggef int )(*Bitmap ,error ){const _bbf ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _dafeb ==nil {return nil ,_cb .Error (_bbf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cdbc < 1&&_ggef < 1{return nil ,_cb .Error (_bbf ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _cdbc ==1&&_ggef ==1{return _dafeb .Copy (),nil ;};if _cdbc ==1||_ggef ==1{var _fecf error ;_cad :=SelCreateBrick (_ggef ,_cdbc ,_ggef /2,_cdbc /2,SelHit );_beefa ,_fecf =_gaf (_beefa ,_dafeb ,_cad );if _fecf !=nil {return nil ,_cb .Wrap (_fecf ,_bbf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _beefa ,nil ;};_bcegc :=SelCreateBrick (1,_cdbc ,0,_cdbc /2,SelHit );_feae :=SelCreateBrick (_ggef ,1,_ggef /2,0,SelHit );_ecdg ,_agag :=_dcgg (nil ,_dafeb ,_bcegc );if _agag !=nil {return nil ,_cb .Wrap (_agag ,_bbf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_beefa ,_agag =_dcgg (_beefa ,_ecdg ,_feae );if _agag !=nil {return nil ,_cb .Wrap (_agag ,_bbf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_agag =_caa (_ecdg ,_beefa ,_bcegc );if _agag !=nil {return nil ,_cb .Wrap (_agag ,_bbf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_agag =_caa (_beefa ,_ecdg ,_feae );if _agag !=nil {return nil ,_cb .Wrap (_agag ,_bbf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _beefa ,nil ;};func (_fdad *Bitmap )removeBorderGeneral (_gbf ,_dbge ,_fea ,_bccb int )(*Bitmap ,error ){const _gebc ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gbf < 0||_dbge < 0||_fea < 0||_bccb < 0{return nil ,_cb .Error (_gebc ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_dfgg ,_fbab :=_fdad .Width ,_fdad .Height ;
_efaa :=_dfgg -_gbf -_dbge ;_beaca :=_fbab -_fea -_bccb ;if _efaa <=0{return nil ,_cb .Errorf (_gebc ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_efaa );};if _beaca <=0{return nil ,_cb .Errorf (_gebc ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_beaca );
};_gcf :=New (_efaa ,_beaca );_gcf .Color =_fdad .Color ;_eeg :=_gcf .RasterOperation (0,0,_efaa ,_beaca ,PixSrc ,_fdad ,_gbf ,_fea );if _eeg !=nil {return nil ,_cb .Wrap (_eeg ,_gebc ,"");};return _gcf ,nil ;};func TstFrameBitmapData ()[]byte {return _egaeg .Data };
func _fafb (_abfde ,_abfeb *Bitmap ,_ebec ,_ebbcd int )(_edgcg error ){const _efeb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_aebb ,_ffdbac ,_efaab ,_gded int ;_ddea ,_aabfb ,_agdc ,_edbef ,_bedbe ,_gdfcg ,_efcd ,_cbab byte ;
);for _aebb =0;_aebb < _ebec ;_aebb ++{_efaab =_aebb *_abfde .RowStride ;_gded =_aebb *_abfeb .RowStride ;for _ffdbac =0;_ffdbac < _ebbcd ;_ffdbac ++{if _ddea ,_edgcg =_abfde .GetByte (_efaab +_ffdbac );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _aabfb ,_edgcg =_abfeb .GetByte (_gded +_ffdbac );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _aebb > 0{if _agdc ,_edgcg =_abfde .GetByte (_efaab -_abfde .RowStride +_ffdbac );
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ddea |=_agdc |(_agdc <<1)|(_agdc >>1);if _ffdbac > 0{if _cbab ,_edgcg =_abfde .GetByte (_efaab -_abfde .RowStride +_ffdbac -1);_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_ddea |=_cbab <<7;};if _ffdbac < _ebbcd -1{if _cbab ,_edgcg =_abfde .GetByte (_efaab -_abfde .RowStride +_ffdbac +1);_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");
};_ddea |=_cbab >>7;};};if _ffdbac > 0{if _edbef ,_edgcg =_abfde .GetByte (_efaab +_ffdbac -1);_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u006a\u0020\u003e \u0030");};_ddea |=_edbef <<7;};_ddea &=_aabfb ;if _ddea ==0||^_ddea ==0{if _edgcg =_abfde .SetByte (_efaab +_ffdbac ,_ddea );
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_efcd =_ddea ;_ddea =(_ddea |(_ddea >>1)|(_ddea <<1))&_aabfb ;if (_ddea ^_efcd )==0{if _edgcg =_abfde .SetByte (_efaab +_ffdbac ,_ddea );
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _aebb =_ebec -1;_aebb >=0;_aebb --{_efaab =_aebb *_abfde .RowStride ;_gded =_aebb *_abfeb .RowStride ;
for _ffdbac =_ebbcd -1;_ffdbac >=0;_ffdbac --{if _ddea ,_edgcg =_abfde .GetByte (_efaab +_ffdbac );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _aabfb ,_edgcg =_abfeb .GetByte (_gded +_ffdbac );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _aebb < _ebec -1{if _bedbe ,_edgcg =_abfde .GetByte (_efaab +_abfde .RowStride +_ffdbac );
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_ddea |=_bedbe |(_bedbe <<1)|_bedbe >>1;if _ffdbac > 0{if _cbab ,_edgcg =_abfde .GetByte (_efaab +_abfde .RowStride +_ffdbac -1);
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_ddea |=_cbab <<7;};if _ffdbac < _ebbcd -1{if _cbab ,_edgcg =_abfde .GetByte (_efaab +_abfde .RowStride +_ffdbac +1);
_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_ddea |=_cbab >>7;};};if _ffdbac < _ebbcd -1{if _gdfcg ,_edgcg =_abfde .GetByte (_efaab +_ffdbac +1);_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_ddea |=_gdfcg >>7;};_ddea &=_aabfb ;if _ddea ==0||(^_ddea )==0{if _edgcg =_abfde .SetByte (_efaab +_ffdbac ,_ddea );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};
};for {_efcd =_ddea ;_ddea =(_ddea |(_ddea >>1)|(_ddea <<1))&_aabfb ;if (_ddea ^_efcd )==0{if _edgcg =_abfde .SetByte (_efaab +_ffdbac ,_ddea );_edgcg !=nil {return _cb .Wrap (_edgcg ,_efeb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _fdfb (_dga ,_efa *Bitmap ,_fdg int ,_dgf []byte ,_aac int )(_ee error ){const _gfac ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_fgc ,_bec ,_fac ,_ffdba ,_aae ,_dbgg ,_gcge ,_eff int ;_eagb ,_cgb ,_eec ,_ggd uint32 ;_eagbb ,_cd byte ;_edc uint16 ;);_cbg :=make ([]byte ,4);_fdc :=make ([]byte ,4);for _fac =0;_fac < _dga .Height -1;_fac ,_ffdba =_fac +2,_ffdba +1{_fgc =_fac *_dga .RowStride ;
_bec =_ffdba *_efa .RowStride ;for _aae ,_dbgg =0,0;_aae < _aac ;_aae ,_dbgg =_aae +4,_dbgg +1{for _gcge =0;_gcge < 4;_gcge ++{_eff =_fgc +_aae +_gcge ;if _eff <=len (_dga .Data )-1&&_eff < _fgc +_dga .RowStride {_cbg [_gcge ]=_dga .Data [_eff ];}else {_cbg [_gcge ]=0x00;
};_eff =_fgc +_dga .RowStride +_aae +_gcge ;if _eff <=len (_dga .Data )-1&&_eff < _fgc +(2*_dga .RowStride ){_fdc [_gcge ]=_dga .Data [_eff ];}else {_fdc [_gcge ]=0x00;};};_eagb =_db .BigEndian .Uint32 (_cbg );_cgb =_db .BigEndian .Uint32 (_fdc );_eec =_eagb &_cgb ;
_eec |=_eec <<1;_ggd =_eagb |_cgb ;_ggd &=_ggd <<1;_cgb =_eec |_ggd ;_cgb &=0xaaaaaaaa;_eagb =_cgb |(_cgb <<7);_eagbb =byte (_eagb >>24);_cd =byte ((_eagb >>8)&0xff);_eff =_bec +_dbgg ;if _eff +1==len (_efa .Data )-1||_eff +1>=_bec +_efa .RowStride {if _ee =_efa .SetByte (_eff ,_dgf [_eagbb ]);
_ee !=nil {return _cb .Wrapf (_ee ,_gfac ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eff );};}else {_edc =(uint16 (_dgf [_eagbb ])<<8)|uint16 (_dgf [_cd ]);if _ee =_efa .setTwoBytes (_eff ,_edc );_ee !=nil {return _cb .Wrapf (_ee ,_gfac ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eff );
};_dbgg ++;};};};return nil ;};type RasterOperator int ;func _abf ()(_eaaf [256]uint32 ){for _ffd :=0;_ffd < 256;_ffd ++{if _ffd &0x01!=0{_eaaf [_ffd ]|=0xf;};if _ffd &0x02!=0{_eaaf [_ffd ]|=0xf0;};if _ffd &0x04!=0{_eaaf [_ffd ]|=0xf00;};if _ffd &0x08!=0{_eaaf [_ffd ]|=0xf000;
};if _ffd &0x10!=0{_eaaf [_ffd ]|=0xf0000;};if _ffd &0x20!=0{_eaaf [_ffd ]|=0xf00000;};if _ffd &0x40!=0{_eaaf [_ffd ]|=0xf000000;};if _ffd &0x80!=0{_eaaf [_ffd ]|=0xf0000000;};};return _eaaf ;};func ClipBoxToRectangle (box *_fc .Rectangle ,wi ,hi int )(_efbe *_fc .Rectangle ,_cdcf error ){const _cagc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_cb .Error (_cagc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_cb .Error (_cagc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_ddgd :=*box ;_efbe =&_ddgd ;if _efbe .Min .X < 0{_efbe .Max .X +=_efbe .Min .X ;_efbe .Min .X =0;};if _efbe .Min .Y < 0{_efbe .Max .Y +=_efbe .Min .Y ;_efbe .Min .Y =0;};if _efbe .Max .X > wi {_efbe .Max .X =wi ;};if _efbe .Max .Y > hi {_efbe .Max .Y =hi ;
};return _efbe ,nil ;};func (_dcfce *Bitmaps )selectByIndexes (_ddabc []int )(*Bitmaps ,error ){_faed :=&Bitmaps {};for _ ,_egac :=range _ddabc {_gddg ,_ddfc :=_dcfce .GetBitmap (_egac );if _ddfc !=nil {return nil ,_cb .Wrap (_ddfc ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_faed .AddBitmap (_gddg );};return _faed ,nil ;};func _edd (_ceba ...MorphProcess )(_ffgc error ){const _affaf ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _gebg ,_cbeb int ;for _ecgf ,_edcf :=range _ceba {if _ffgc =_edcf .verify (_ecgf ,&_gebg ,&_cbeb );
_ffgc !=nil {return _cb .Wrap (_ffgc ,_affaf ,"");};};if _cbeb !=0&&_gebg !=0{return _cb .Error (_affaf ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_dfe *Bitmap )Equals (s *Bitmap )bool {if len (_dfe .Data )!=len (s .Data )||_dfe .Width !=s .Width ||_dfe .Height !=s .Height {return false ;};for _ebafd :=0;_ebafd < _dfe .Height ;_ebafd ++{_fagd :=_ebafd *_dfe .RowStride ;for _ace :=0;
_ace < _dfe .RowStride ;_ace ++{if _dfe .Data [_fagd +_ace ]!=s .Data [_fagd +_ace ]{return false ;};};};return true ;};func _cabfb (_egee ,_bdef *Bitmap ,_aeeg ,_bcbe int )(*Bitmap ,error ){const _cec ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _bdef ==nil {return nil ,_cb .Error (_cec ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aeeg < 1||_bcbe < 1{return nil ,_cb .Error (_cec ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _aeeg ==1&&_bcbe ==1{_fcfe ,_aged :=_bfgc (_egee ,_bdef );if _aged !=nil {return nil ,_cb .Wrap (_aged ,_cec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fcfe ,nil ;};if _aeeg ==1||_bcbe ==1{_aagb :=SelCreateBrick (_bcbe ,_aeeg ,_bcbe /2,_aeeg /2,SelHit );_cedfa ,_cfbg :=_dcgg (_egee ,_bdef ,_aagb );if _cfbg !=nil {return nil ,_cb .Wrap (_cfbg ,_cec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cedfa ,nil ;};_gdff :=SelCreateBrick (1,_aeeg ,0,_aeeg /2,SelHit );_gge :=SelCreateBrick (_bcbe ,1,_bcbe /2,0,SelHit );_facba ,_abbb :=_dcgg (nil ,_bdef ,_gdff );if _abbb !=nil {return nil ,_cb .Wrap (_abbb ,_cec ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_egee ,_abbb =_dcgg (_egee ,_facba ,_gge );if _abbb !=nil {return nil ,_cb .Wrap (_abbb ,_cec ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _egee ,nil ;};func (_cggfa *Points )AddPoint (x ,y float32 ){*_cggfa =append (*_cggfa ,Point {x ,y })};
func (_dbef *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_afbd *Bitmaps ,_dfag *Boxes ,_eafd error ){const _cggf ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _dbef ==nil {return nil ,nil ,_cb .Error (_cggf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_cb .Error (_cggf ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _dbef .Zero (){_dfag =&Boxes {};_afbd =&Bitmaps {};return _afbd ,_dfag ,nil ;};switch components {case ComponentConn :_afbd =&Bitmaps {};if _dfag ,_eafd =_dbef .ConnComponents (_afbd ,8);_eafd !=nil {return nil ,nil ,_cb .Wrap (_eafd ,_cggf ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_bbdb ,_gfaf :=MorphSequence (_dbef ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gfaf !=nil {return nil ,nil ,_cb .Wrap (_gfaf ,_cggf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ce .Log .IsLogLevel (_ce .LogLevelTrace ){_ce .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_bbdb .String ());
};_beaac :=&Bitmaps {};_dfag ,_gfaf =_bbdb .ConnComponents (_beaac ,8);if _gfaf !=nil {return nil ,nil ,_cb .Wrap (_gfaf ,_cggf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _ce .Log .IsLogLevel (_ce .LogLevelTrace ){_ce .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_beaac .String ());
};if _afbd ,_gfaf =_beaac .ClipToBitmap (_dbef );_gfaf !=nil {return nil ,nil ,_cb .Wrap (_gfaf ,_cggf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_bfcd :=1;
var _gade *Bitmap ;switch {case _dbef .XResolution <=200:_gade =_dbef ;case _dbef .XResolution <=400:_bfcd =2;_gade ,_eafd =_fcf (_dbef ,1,0,0,0);if _eafd !=nil {return nil ,nil ,_cb .Wrap (_eafd ,_cggf ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_bfcd =4;_gade ,_eafd =_fcf (_dbef ,1,1,0,0);if _eafd !=nil {return nil ,nil ,_cb .Wrap (_eafd ,_cggf ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_cdaef ,_ ,_bdcdf :=_cdeg (_gade );if _bdcdf !=nil {return nil ,nil ,_cb .Wrap (_bdcdf ,_cggf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_dcg ,_bdcdf :=_ccbd (_cdaef ,_bfcd );if _bdcdf !=nil {return nil ,nil ,_cb .Wrap (_bdcdf ,_cggf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_cedf :=&Bitmaps {};if _dfag ,_bdcdf =_dcg .ConnComponents (_cedf ,4);_bdcdf !=nil {return nil ,nil ,_cb .Wrap (_bdcdf ,_cggf ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _afbd ,_bdcdf =_cedf .ClipToBitmap (_dbef );_bdcdf !=nil {return nil ,nil ,_cb .Wrap (_bdcdf ,_cggf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_afbd ,_eafd =_afbd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _eafd !=nil {return nil ,nil ,_cb .Wrap (_eafd ,_cggf ,"");};_dfag ,_eafd =_dfag .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eafd !=nil {return nil ,nil ,_cb .Wrap (_eafd ,_cggf ,"");};return _afbd ,_dfag ,nil ;};func _bfa (_fge *Bitmap ,_beaa int )(*Bitmap ,error ){const _af ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _fge ==nil {return nil ,_cb .Error (_af ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _beaa ==1{return _bfgc (nil ,_fge );};if _beaa !=2&&_beaa !=4&&_beaa !=8{return nil ,_cb .Error (_af ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ebg :=_beaa *_fge .Width ;_aff :=_beaa *_fge .Height ;_adf :=New (_ebg ,_aff );var _df error ;switch _beaa {case 2:_df =_cba (_adf ,_fge );case 4:_df =_bd (_adf ,_fge );case 8:_df =_gfe (_adf ,_fge );};if _df !=nil {return nil ,_cb .Wrap (_df ,_af ,"");
};return _adf ,nil ;};func _cagg (_acedg ,_eggc *Bitmap ,_gfeff CombinationOperator )*Bitmap {_daa :=New (_acedg .Width ,_acedg .Height );for _adac :=0;_adac < len (_daa .Data );_adac ++{_daa .Data [_adac ]=_fgda (_acedg .Data [_adac ],_eggc .Data [_adac ],_gfeff );
};return _daa ;};func _edgg (_affe *Bitmap ,_badb *Bitmap ,_ecbc *Selection ,_fbdd **Bitmap )(*Bitmap ,error ){const _cggbf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _badb ==nil {return nil ,_cb .Error (_cggbf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _ecbc ==nil {return nil ,_cb .Error (_cggbf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_efffd ,_gege :=_ecbc .Height ,_ecbc .Width ;if _efffd ==0||_gege ==0{return nil ,_cb .Error (_cggbf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _affe ==nil {_affe =_badb .createTemplate ();*_fbdd =_badb ;return _affe ,nil ;};_affe .Width =_badb .Width ;_affe .Height =_badb .Height ;_affe .RowStride =_badb .RowStride ;_affe .Color =_badb .Color ;_affe .Data =make ([]byte ,_badb .RowStride *_badb .Height );
if _affe ==_badb {*_fbdd =_badb .Copy ();}else {*_fbdd =_badb ;};return _affe ,nil ;};func (_cceg *byWidth )Len ()int {return len (_cceg .Values )};func (_ede *Bitmap )String ()string {var _dcd ="\u000a";for _cfd :=0;_cfd < _ede .Height ;_cfd ++{var _dgdc string ;
for _aaff :=0;_aaff < _ede .Width ;_aaff ++{_fbag :=_ede .GetPixel (_aaff ,_cfd );if _fbag {_dgdc +="\u0031";}else {_dgdc +="\u0030";};};_dcd +=_dgdc +"\u000a";};return _dcd ;};func (_gab Points )GetIntX (i int )(int ,error ){if i >=len (_gab ){return 0,_cb .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gab [i ].X ),nil ;};var _cefg =[5]int {1,2,3,0,4};func (_edb *Bitmap )equivalent (_cac *Bitmap )bool {if _edb ==_cac {return true ;};if !_edb .SizesEqual (_cac ){return false ;};_ddgg :=_cagg (_edb ,_cac ,CmbOpXor );_fae :=_edb .countPixels ();
_dbbc :=int (0.25*float32 (_fae ));if _ddgg .thresholdPixelSum (_dbbc ){return false ;};var (_ccbb [9][9]int ;_faaa [18][9]int ;_gfdf [9][18]int ;_bdcf int ;_faea int ;);_eea :=9;_ece :=_edb .Height /_eea ;_eef :=_edb .Width /_eea ;_befd ,_gfeb :=_ece /2,_eef /2;
if _ece < _eef {_befd =_eef /2;_gfeb =_ece /2;};_fga :=float64 (_befd )*float64 (_gfeb )*_bf .Pi ;_ebfd :=int (float64 (_ece *_eef /2)*0.9);_dgcf :=int (float64 (_eef *_ece /2)*0.9);for _ggbd :=0;_ggbd < _eea ;_ggbd ++{_gac :=_eef *_ggbd +_bdcf ;var _abdg int ;
if _ggbd ==_eea -1{_bdcf =0;_abdg =_edb .Width ;}else {_abdg =_gac +_eef ;if ((_edb .Width -_bdcf )%_eea )> 0{_bdcf ++;_abdg ++;};};for _gef :=0;_gef < _eea ;_gef ++{_dfeg :=_ece *_gef +_faea ;var _gbc int ;if _gef ==_eea -1{_faea =0;_gbc =_edb .Height ;
}else {_gbc =_dfeg +_ece ;if (_edb .Height -_faea )%_eea > 0{_faea ++;_gbc ++;};};var _gfbc ,_beee ,_bbec ,_ddc int ;_aed :=(_gac +_abdg )/2;_fbfdf :=(_dfeg +_gbc )/2;for _aafe :=_gac ;_aafe < _abdg ;_aafe ++{for _dafg :=_dfeg ;_dafg < _gbc ;_dafg ++{if _ddgg .GetPixel (_aafe ,_dafg ){if _aafe < _aed {_gfbc ++;
}else {_beee ++;};if _dafg < _fbfdf {_ddc ++;}else {_bbec ++;};};};};_ccbb [_ggbd ][_gef ]=_gfbc +_beee ;_faaa [_ggbd *2][_gef ]=_gfbc ;_faaa [_ggbd *2+1][_gef ]=_beee ;_gfdf [_ggbd ][_gef *2]=_ddc ;_gfdf [_ggbd ][_gef *2+1]=_bbec ;};};for _bcaa :=0;_bcaa < _eea *2-1;
_bcaa ++{for _gcee :=0;_gcee < (_eea -1);_gcee ++{var _abgf int ;for _dbgf :=0;_dbgf < 2;_dbgf ++{for _fef :=0;_fef < 2;_fef ++{_abgf +=_faaa [_bcaa +_dbgf ][_gcee +_fef ];};};if _abgf > _dgcf {return false ;};};};for _aabg :=0;_aabg < (_eea -1);_aabg ++{for _bdea :=0;
_bdea < ((_eea *2)-1);_bdea ++{var _eaaa int ;for _dag :=0;_dag < 2;_dag ++{for _acc :=0;_acc < 2;_acc ++{_eaaa +=_gfdf [_aabg +_dag ][_bdea +_acc ];};};if _eaaa > _ebfd {return false ;};};};for _dbf :=0;_dbf < (_eea -2);_dbf ++{for _ddab :=0;_ddab < (_eea -2);
_ddab ++{var _aeg ,_fcbg int ;for _fgaa :=0;_fgaa < 3;_fgaa ++{for _fggc :=0;_fggc < 3;_fggc ++{if _fgaa ==_fggc {_aeg +=_ccbb [_dbf +_fgaa ][_ddab +_fggc ];};if (2-_fgaa )==_fggc {_fcbg +=_ccbb [_dbf +_fgaa ][_ddab +_fggc ];};};};if _aeg > _dgcf ||_fcbg > _dgcf {return false ;
};};};for _ebfce :=0;_ebfce < (_eea -1);_ebfce ++{for _cagd :=0;_cagd < (_eea -1);_cagd ++{var _afg int ;for _affa :=0;_affa < 2;_affa ++{for _egge :=0;_egge < 2;_egge ++{_afg +=_ccbb [_ebfce +_affa ][_cagd +_egge ];};};if float64 (_afg )> _fga {return false ;
};};};return true ;};func _ccbd (_agcc *Bitmap ,_egfd int )(*Bitmap ,error ){const _cecc ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _agcc ==nil {return nil ,_cb .Error (_cecc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _egfd <=0{return nil ,_cb .Error (_cecc ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _egfd ==1{_ecde ,_agfff :=_bfgc (nil ,_agcc );if _agfff !=nil {return nil ,_cb .Wrap (_agfff ,_cecc ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _ecde ,nil ;};_aedcc ,_edef :=_bb (_agcc ,_egfd ,_egfd );if _edef !=nil {return nil ,_cb .Wrap (_edef ,_cecc ,"");};return _aedcc ,nil ;};func (_aade *Bitmap )clipRectangle (_bedd ,_gdgc *_fc .Rectangle )(_befg *Bitmap ,_aecb error ){const _acf ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _bedd ==nil {return nil ,_cb .Error (_acf ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_daf ,_bfc :=_aade .Width ,_aade .Height ;_beef ,_aecb :=ClipBoxToRectangle (_bedd ,_daf ,_bfc );if _aecb !=nil {_ce .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_aecb );
return nil ,nil ;};_eca ,_gdgb :=_beef .Min .X ,_beef .Min .Y ;_gce ,_agc :=_beef .Max .X -_beef .Min .X ,_beef .Max .Y -_beef .Min .Y ;_befg =New (_gce ,_agc );_befg .Text =_aade .Text ;if _aecb =_befg .RasterOperation (0,0,_gce ,_agc ,PixSrc ,_aade ,_eca ,_gdgb );
_aecb !=nil {return nil ,_cb .Wrap (_aecb ,_acf ,"");};if _gdgc !=nil {*_gdgc =*_beef ;};return _befg ,nil ;};func (_dacg *Bitmap )setTwoBytes (_aaca int ,_faf uint16 )error {if _aaca +1> len (_dacg .Data )-1{return _cb .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_aaca );
};_dacg .Data [_aaca ]=byte ((_faf &0xff00)>>8);_dacg .Data [_aaca +1]=byte (_faf &0xff);return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fc .Rectangle ;};func _bd (_fd ,_ad *Bitmap )(_eaa error ){const _fcc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_fff :=_ad .RowStride ;_gff :=_fd .RowStride ;_ecf :=_ad .RowStride *4-_fd .RowStride ;var (_cae ,_ag byte ;_gd uint32 ;_be ,_aa ,_ebc ,_gc ,_bea ,_dab ,_fg int ;);for _ebc =0;_ebc < _ad .Height ;_ebc ++{_be =_ebc *_fff ;_aa =4*_ebc *_gff ;for _gc =0;_gc < _fff ;
_gc ++{_cae =_ad .Data [_be +_gc ];_gd =_ccdg [_cae ];_dab =_aa +_gc *4;if _ecf !=0&&(_gc +1)*4> _fd .RowStride {for _bea =_ecf ;_bea > 0;_bea --{_ag =byte ((_gd >>uint (_bea *8))&0xff);_fg =_dab +(_ecf -_bea );if _eaa =_fd .SetByte (_fg ,_ag );_eaa !=nil {return _cb .Wrapf (_eaa ,_fcc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_bea );
};};}else if _eaa =_fd .setFourBytes (_dab ,_gd );_eaa !=nil {return _cb .Wrap (_eaa ,_fcc ,"");};if _eaa =_fd .setFourBytes (_aa +_gc *4,_ccdg [_ad .Data [_be +_gc ]]);_eaa !=nil {return _cb .Wrap (_eaa ,_fcc ,"");};};for _bea =1;_bea < 4;_bea ++{for _gc =0;
_gc < _gff ;_gc ++{if _eaa =_fd .SetByte (_aa +_bea *_gff +_gc ,_fd .Data [_aa +_gc ]);_eaa !=nil {return _cb .Wrapf (_eaa ,_fcc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_bea ,_gc );
};};};};return nil ;};func TstImageBitmap ()*Bitmap {return _adfd .Copy ()};func (_edga *Selection )findMaxTranslations ()(_gfg ,_febc ,_aaga ,_aaac int ){for _daege :=0;_daege < _edga .Height ;_daege ++{for _fgfg :=0;_fgfg < _edga .Width ;_fgfg ++{if _edga .Data [_daege ][_fgfg ]==SelHit {_gfg =_edba (_gfg ,_edga .Cx -_fgfg );
_febc =_edba (_febc ,_edga .Cy -_daege );_aaga =_edba (_aaga ,_fgfg -_edga .Cx );_aaac =_edba (_aaac ,_daege -_edga .Cy );};};};return _gfg ,_febc ,_aaga ,_aaac ;};func Rect (x ,y ,w ,h int )(*_fc .Rectangle ,error ){const _fffa ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_cb .Errorf (_fffa ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_cb .Error (_fffa ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_afbb :=_fc .Rect (x ,y ,x +w ,y +h );return &_afbb ,nil ;};var MorphBC BoundaryCondition ;type byHeight Bitmaps ;func _gg (_bee *Bitmap ,_cf *Bitmap ,_agb int )(_fa error ){const _bfd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _agb {case 2:_fa =_cba (_bee ,_cf );case 4:_fa =_bd (_bee ,_cf );case 8:_fa =_gfe (_bee ,_cf );default:return _cb .Error (_bfd ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _fa !=nil {_fa =_cb .Wrap (_fa ,_bfd ,"");};return _fa ;};func (_dbb *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_dca bool ,_ebbe error ){const _ggb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_fgbff ();};_bca :=_dbb .Width >>3;_geb :=_dbb .Width &7;_feb :=byte (0xff<<uint (8-_geb ));var (_defb ,_ccde ,_edeb ,_aeb int ;_cbe byte ;);for _defb =0;_defb < _dbb .Height ;_defb ++{_edeb =_dbb .RowStride *_defb ;for _ccde =0;_ccde < _bca ;
_ccde ++{_cbe ,_ebbe =_dbb .GetByte (_edeb +_ccde );if _ebbe !=nil {return false ,_cb .Wrap (_ebbe ,_ggb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_aeb +=tab8 [_cbe ];};if _geb !=0{_cbe ,_ebbe =_dbb .GetByte (_edeb +_ccde );if _ebbe !=nil {return false ,_cb .Wrap (_ebbe ,_ggb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_cbe &=_feb ;_aeb +=tab8 [_cbe ];};if _aeb > thresh {return true ,nil ;};};return _dca ,nil ;};func (_dcdf *Boxes )makeSizeIndicator (_gdb ,_gae int ,_cdaf LocationFilter ,_dfge SizeComparison )*_d .NumSlice {_dadb :=&_d .NumSlice {};var _dfegc ,_bcea ,_bbbg int ;
for _ ,_fca :=range *_dcdf {_dfegc =0;_bcea ,_bbbg =_fca .Dx (),_fca .Dy ();switch _cdaf {case LocSelectWidth :if (_dfge ==SizeSelectIfLT &&_bcea < _gdb )||(_dfge ==SizeSelectIfGT &&_bcea > _gdb )||(_dfge ==SizeSelectIfLTE &&_bcea <=_gdb )||(_dfge ==SizeSelectIfGTE &&_bcea >=_gdb ){_dfegc =1;
};case LocSelectHeight :if (_dfge ==SizeSelectIfLT &&_bbbg < _gae )||(_dfge ==SizeSelectIfGT &&_bbbg > _gae )||(_dfge ==SizeSelectIfLTE &&_bbbg <=_gae )||(_dfge ==SizeSelectIfGTE &&_bbbg >=_gae ){_dfegc =1;};case LocSelectIfEither :if (_dfge ==SizeSelectIfLT &&(_bbbg < _gae ||_bcea < _gdb ))||(_dfge ==SizeSelectIfGT &&(_bbbg > _gae ||_bcea > _gdb ))||(_dfge ==SizeSelectIfLTE &&(_bbbg <=_gae ||_bcea <=_gdb ))||(_dfge ==SizeSelectIfGTE &&(_bbbg >=_gae ||_bcea >=_gdb )){_dfegc =1;
};case LocSelectIfBoth :if (_dfge ==SizeSelectIfLT &&(_bbbg < _gae &&_bcea < _gdb ))||(_dfge ==SizeSelectIfGT &&(_bbbg > _gae &&_bcea > _gdb ))||(_dfge ==SizeSelectIfLTE &&(_bbbg <=_gae &&_bcea <=_gdb ))||(_dfge ==SizeSelectIfGTE &&(_bbbg >=_gae &&_bcea >=_gdb )){_dfegc =1;
};};_dadb .AddInt (_dfegc );};return _dadb ;};func (_faac *ClassedPoints )YAtIndex (i int )float32 {return (*_faac .Points )[_faac .IntSlice [i ]].Y };func (_efc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _efc .Copy (),nil ;
};_gee ,_dde :=_efc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _dde !=nil {return nil ,_cb .Wrap (_dde ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gee ,nil ;};type MorphOperation int ;func _ggg (_fffe ,_fccc *Bitmap ,_ddd ,_ecbe ,_ebbd ,_fgaf ,_agca int ,_bcce CombinationOperator )error {var _afe int ;
_ege :=func (){_afe ++;_ebbd +=_fccc .RowStride ;_fgaf +=_fffe .RowStride ;_agca +=_fffe .RowStride };for _afe =_ddd ;_afe < _ecbe ;_ege (){_bgb :=_ebbd ;for _bgab :=_fgaf ;_bgab <=_agca ;_bgab ++{_ggc ,_dbgb :=_fccc .GetByte (_bgb );if _dbgb !=nil {return _dbgb ;
};_bbcg ,_dbgb :=_fffe .GetByte (_bgab );if _dbgb !=nil {return _dbgb ;};if _dbgb =_fccc .SetByte (_bgb ,_fgda (_ggc ,_bbcg ,_bcce ));_dbgb !=nil {return _dbgb ;};_bgb ++;};};return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fgedb float64 ,_cfffd error ){const _beaf ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_cb .Error (_beaf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_cb .Error (_beaf ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_cb .Error (_beaf ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_dacd ,_fgec :=bm1 .Width ,bm1 .Height ;_feg ,_adaf :=bm2 .Width ,bm2 .Height ;
_fbfb :=_cdg (_dacd -_feg );if _fbfb > maxDiffW {return 0,nil ;};_bbgc :=_cdg (_fgec -_adaf );if _bbgc > maxDiffH {return 0,nil ;};var _bbcc ,_bdfa int ;if delX >=0{_bbcc =int (delX +0.5);}else {_bbcc =int (delX -0.5);};if delY >=0{_bdfa =int (delY +0.5);
}else {_bdfa =int (delY -0.5);};_defc :=_edba (_bdfa ,0);_fgbf :=_bffg (_adaf +_bdfa ,_fgec );_eege :=bm1 .RowStride *_defc ;_gbee :=bm2 .RowStride *(_defc -_bdfa );_egga :=_edba (_bbcc ,0);_gdf :=_bffg (_feg +_bbcc ,_dacd );_gbfa :=bm2 .RowStride ;var _beddc ,_edbe int ;
if _bbcc >=8{_beddc =_bbcc >>3;_eege +=_beddc ;_egga -=_beddc <<3;_gdf -=_beddc <<3;_bbcc &=7;}else if _bbcc <=-8{_edbe =-((_bbcc +7)>>3);_gbee +=_edbe ;_gbfa -=_edbe ;_bbcc +=_edbe <<3;};if _egga >=_gdf ||_defc >=_fgbf {return 0,nil ;};_ebbc :=(_gdf +7)>>3;
var (_egd ,_caeg ,_acge byte ;_dcgf ,_fccb ,_eefgc int ;);switch {case _bbcc ==0:for _eefgc =_defc ;_eefgc < _fgbf ;_eefgc ,_eege ,_gbee =_eefgc +1,_eege +bm1 .RowStride ,_gbee +bm2 .RowStride {for _fccb =0;_fccb < _ebbc ;_fccb ++{_acge =bm1 .Data [_eege +_fccb ]&bm2 .Data [_gbee +_fccb ];
_dcgf +=tab [_acge ];};};case _bbcc > 0:if _gbfa < _ebbc {for _eefgc =_defc ;_eefgc < _fgbf ;_eefgc ,_eege ,_gbee =_eefgc +1,_eege +bm1 .RowStride ,_gbee +bm2 .RowStride {_egd ,_caeg =bm1 .Data [_eege ],bm2 .Data [_gbee ]>>uint (_bbcc );_acge =_egd &_caeg ;
_dcgf +=tab [_acge ];for _fccb =1;_fccb < _gbfa ;_fccb ++{_egd ,_caeg =bm1 .Data [_eege +_fccb ],(bm2 .Data [_gbee +_fccb ]>>uint (_bbcc ))|(bm2 .Data [_gbee +_fccb -1]<<uint (8-_bbcc ));_acge =_egd &_caeg ;_dcgf +=tab [_acge ];};_egd =bm1 .Data [_eege +_fccb ];
_caeg =bm2 .Data [_gbee +_fccb -1]<<uint (8-_bbcc );_acge =_egd &_caeg ;_dcgf +=tab [_acge ];};}else {for _eefgc =_defc ;_eefgc < _fgbf ;_eefgc ,_eege ,_gbee =_eefgc +1,_eege +bm1 .RowStride ,_gbee +bm2 .RowStride {_egd ,_caeg =bm1 .Data [_eege ],bm2 .Data [_gbee ]>>uint (_bbcc );
_acge =_egd &_caeg ;_dcgf +=tab [_acge ];for _fccb =1;_fccb < _ebbc ;_fccb ++{_egd =bm1 .Data [_eege +_fccb ];_caeg =(bm2 .Data [_gbee +_fccb ]>>uint (_bbcc ))|(bm2 .Data [_gbee +_fccb -1]<<uint (8-_bbcc ));_acge =_egd &_caeg ;_dcgf +=tab [_acge ];};};
};default:if _ebbc < _gbfa {for _eefgc =_defc ;_eefgc < _fgbf ;_eefgc ,_eege ,_gbee =_eefgc +1,_eege +bm1 .RowStride ,_gbee +bm2 .RowStride {for _fccb =0;_fccb < _ebbc ;_fccb ++{_egd =bm1 .Data [_eege +_fccb ];_caeg =bm2 .Data [_gbee +_fccb ]<<uint (-_bbcc );
_caeg |=bm2 .Data [_gbee +_fccb +1]>>uint (8+_bbcc );_acge =_egd &_caeg ;_dcgf +=tab [_acge ];};};}else {for _eefgc =_defc ;_eefgc < _fgbf ;_eefgc ,_eege ,_gbee =_eefgc +1,_eege +bm1 .RowStride ,_gbee +bm2 .RowStride {for _fccb =0;_fccb < _ebbc -1;_fccb ++{_egd =bm1 .Data [_eege +_fccb ];
_caeg =bm2 .Data [_gbee +_fccb ]<<uint (-_bbcc );_caeg |=bm2 .Data [_gbee +_fccb +1]>>uint (8+_bbcc );_acge =_egd &_caeg ;_dcgf +=tab [_acge ];};_egd =bm1 .Data [_eege +_fccb ];_caeg =bm2 .Data [_gbee +_fccb ]<<uint (-_bbcc );_acge =_egd &_caeg ;_dcgf +=tab [_acge ];
};};};_fgedb =float64 (_dcgf )*float64 (_dcgf )/(float64 (area1 )*float64 (area2 ));return _fgedb ,nil ;};func _fcf (_efg *Bitmap ,_fgf ...int )(_dge *Bitmap ,_dgg error ){const _ecbb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _efg ==nil {return nil ,_cb .Error (_ecbb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_fgf )==0||len (_fgf )> 4{return nil ,_cb .Error (_ecbb ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _fgf [0]<=0{_ce .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dge ,_dgg =_bfgc (nil ,_efg );if _dgg !=nil {return nil ,_cb .Wrap (_dgg ,_ecbb ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _dge ,nil ;};_ebac :=_cda ();_dge =_efg ;for _gea ,_dgc :=range _fgf {if _dgc <=0{break ;};_dge ,_dgg =_dbg (_dge ,_dgc ,_ebac );if _dgg !=nil {return nil ,_cb .Wrapf (_dgg ,_ecbb ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_gea );
};};return _dge ,nil ;};func TstWordBitmap (t *_b .T ,scale ...int )*Bitmap {_gcbad :=1;if len (scale )> 0{_gcbad =scale [0];};_gfcb :=3;_cbd :=9+7+15+2*_gfcb ;_cbce :=5+_gfcb +5;_bcgc :=New (_cbd *_gcbad ,_cbce *_gcbad );_efage :=&Bitmaps {};var _fbcb *int ;
_gfcb *=_gcbad ;_cfeb :=0;_fbcb =&_cfeb ;_ccfa :=0;_deae :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,_gfcb );_deae =TstISymbol (t ,scale ...);
TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,_gfcb );_deae =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,0);*_fbcb =0;_ccfa =5*_gcbad +_gfcb ;_deae =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );
_deae =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,_gfcb );_deae =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );
_deae =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,1*_gcbad );_deae =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efage ,_deae ,_fbcb ,_ccfa ,0);
TstWriteSymbols (t ,_efage ,_bcgc );return _bcgc ;};func _gaf (_dged ,_bcaf *Bitmap ,_cdaff *Selection )(*Bitmap ,error ){const _bcdc ="\u006f\u0070\u0065\u006e";var _cfe error ;_dged ,_cfe =_eecda (_dged ,_bcaf ,_cdaff );if _cfe !=nil {return nil ,_cb .Wrap (_cfe ,_bcdc ,"");
};_eaac ,_cfe :=_dcgg (nil ,_bcaf ,_cdaff );if _cfe !=nil {return nil ,_cb .Wrap (_cfe ,_bcdc ,"");};_ ,_cfe =_caa (_dged ,_eaac ,_cdaff );if _cfe !=nil {return nil ,_cb .Wrap (_cfe ,_bcdc ,"");};return _dged ,nil ;};func (_ebfa *Bitmaps )makeSizeIndicator (_gfdga ,_dadfe int ,_eggg LocationFilter ,_acdaa SizeComparison )(_gcef *_d .NumSlice ,_ggbf error ){const _eaec ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebfa ==nil {return nil ,_cb .Error (_eaec ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _eggg {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cb .Errorf (_eaec ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_eggg );
};switch _acdaa {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_cb .Errorf (_eaec ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_acdaa );
};_gcef =&_d .NumSlice {};var (_cagfg ,_cfcag ,_egef int ;_gdca *Bitmap ;);for _ ,_gdca =range _ebfa .Values {_cagfg =0;_cfcag ,_egef =_gdca .Width ,_gdca .Height ;switch _eggg {case LocSelectWidth :if (_acdaa ==SizeSelectIfLT &&_cfcag < _gfdga )||(_acdaa ==SizeSelectIfGT &&_cfcag > _gfdga )||(_acdaa ==SizeSelectIfLTE &&_cfcag <=_gfdga )||(_acdaa ==SizeSelectIfGTE &&_cfcag >=_gfdga )||(_acdaa ==SizeSelectIfEQ &&_cfcag ==_gfdga ){_cagfg =1;
};case LocSelectHeight :if (_acdaa ==SizeSelectIfLT &&_egef < _dadfe )||(_acdaa ==SizeSelectIfGT &&_egef > _dadfe )||(_acdaa ==SizeSelectIfLTE &&_egef <=_dadfe )||(_acdaa ==SizeSelectIfGTE &&_egef >=_dadfe )||(_acdaa ==SizeSelectIfEQ &&_egef ==_dadfe ){_cagfg =1;
};case LocSelectIfEither :if (_acdaa ==SizeSelectIfLT &&(_cfcag < _gfdga ||_egef < _dadfe ))||(_acdaa ==SizeSelectIfGT &&(_cfcag > _gfdga ||_egef > _dadfe ))||(_acdaa ==SizeSelectIfLTE &&(_cfcag <=_gfdga ||_egef <=_dadfe ))||(_acdaa ==SizeSelectIfGTE &&(_cfcag >=_gfdga ||_egef >=_dadfe ))||(_acdaa ==SizeSelectIfEQ &&(_cfcag ==_gfdga ||_egef ==_dadfe )){_cagfg =1;
};case LocSelectIfBoth :if (_acdaa ==SizeSelectIfLT &&(_cfcag < _gfdga &&_egef < _dadfe ))||(_acdaa ==SizeSelectIfGT &&(_cfcag > _gfdga &&_egef > _dadfe ))||(_acdaa ==SizeSelectIfLTE &&(_cfcag <=_gfdga &&_egef <=_dadfe ))||(_acdaa ==SizeSelectIfGTE &&(_cfcag >=_gfdga &&_egef >=_dadfe ))||(_acdaa ==SizeSelectIfEQ &&(_cfcag ==_gfdga &&_egef ==_dadfe )){_cagfg =1;
};};_gcef .AddInt (_cagfg );};return _gcef ,nil ;};func (_aafb Points )GetIntY (i int )(int ,error ){if i >=len (_aafb ){return 0,_cb .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_aafb [i ].Y ),nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);type SizeComparison int ;func New (width ,height int )*Bitmap {_gbg :=_fag (width ,height );_gbg .Data =make ([]byte ,height *_gbg .RowStride );return _gbg ;
};func (_bebg *Bitmaps )WidthSorter ()func (_aeeb ,_edgcf int )bool {return func (_dcfdc ,_dgca int )bool {return _bebg .Values [_dcfdc ].Width < _bebg .Values [_dgca ].Width };};func _cdg (_cef int )int {if _cef < 0{return -_cef ;};return _cef ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _aea ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_cfca :=_fag (width ,height );_cfca .Data =data ;if _gfd :=((width *height )+7)>>3;len (data )< _gfd {return nil ,_cb .Errorf (_aea ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gfd );
};if _ccb :=_cfca .addPadBits ();_ccb !=nil {return nil ,_cb .Wrap (_ccb ,_aea ,"");};return _cfca ,nil ;};func (_fgee *Bitmap )Zero ()bool {_cag :=_fgee .Width /8;_bde :=_fgee .Width &7;var _aadd byte ;if _bde !=0{_aadd =byte (0xff<<uint (8-_bde ));};
var _fbcd ,_efad ,_edgd int ;for _efad =0;_efad < _fgee .Height ;_efad ++{_fbcd =_fgee .RowStride *_efad ;for _edgd =0;_edgd < _cag ;_edgd ,_fbcd =_edgd +1,_fbcd +1{if _fgee .Data [_fbcd ]!=0{return false ;};};if _bde > 0{if _fgee .Data [_fbcd ]&_aadd !=0{return false ;
};};};return true ;};func (_ged *Bitmap )setEightFullBytes (_bdcdc int ,_ebaa uint64 )error {if _bdcdc +7> len (_ged .Data )-1{return _cb .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ged .Data [_bdcdc ]=byte ((_ebaa &0xff00000000000000)>>56);_ged .Data [_bdcdc +1]=byte ((_ebaa &0xff000000000000)>>48);_ged .Data [_bdcdc +2]=byte ((_ebaa &0xff0000000000)>>40);_ged .Data [_bdcdc +3]=byte ((_ebaa &0xff00000000)>>32);_ged .Data [_bdcdc +4]=byte ((_ebaa &0xff000000)>>24);
_ged .Data [_bdcdc +5]=byte ((_ebaa &0xff0000)>>16);_ged .Data [_bdcdc +6]=byte ((_ebaa &0xff00)>>8);_ged .Data [_bdcdc +7]=byte (_ebaa &0xff);return nil ;};func (_fgbc *Bitmap )GetBitOffset (x int )int {return x &0x07};func _fed (_bffb *Bitmap ,_gfabf *Bitmap ,_bbafe int )(_decfe error ){const _dbdb ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_cdde :=_bffg (_bffb .Height ,_gfabf .Height );_dcec :=_bffg (_bffb .RowStride ,_gfabf .RowStride );switch _bbafe {case 4:_decfe =_eeab (_bffb ,_gfabf ,_cdde ,_dcec );case 8:_decfe =_fafb (_bffb ,_gfabf ,_cdde ,_dcec );default:return _cb .Errorf (_dbdb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bbafe );
};if _decfe !=nil {return _cb .Wrap (_decfe ,_dbdb ,"");};return nil ;};const (_gabe shift =iota ;_fcaf ;);func (_ccbde *Bitmaps )Size ()int {return len (_ccbde .Values )};func _abfe ()(_bda [256]uint64 ){for _bbd :=0;_bbd < 256;_bbd ++{if _bbd &0x01!=0{_bda [_bbd ]|=0xff;
};if _bbd &0x02!=0{_bda [_bbd ]|=0xff00;};if _bbd &0x04!=0{_bda [_bbd ]|=0xff0000;};if _bbd &0x08!=0{_bda [_bbd ]|=0xff000000;};if _bbd &0x10!=0{_bda [_bbd ]|=0xff00000000;};if _bbd &0x20!=0{_bda [_bbd ]|=0xff0000000000;};if _bbd &0x40!=0{_bda [_bbd ]|=0xff000000000000;
};if _bbd &0x80!=0{_bda [_bbd ]|=0xff00000000000000;};};return _bda ;};func TstVSymbol (t *_b .T ,scale ...int )*Bitmap {_beeee ,_fdfe :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_fdfe );return TstGetScaledSymbol (t ,_beeee ,scale ...);
};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_efec float64 ,_ddee error ){const _adacb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _efec ,_cb .Error (_adacb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _efec ,_cb .Error (_adacb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _efec ,_cb .Error (_adacb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_bdee ,_addf :=bm1 .Width ,bm1 .Height ;
_bffgf ,_fde :=bm2 .Width ,bm2 .Height ;if _cdg (_bdee -_bffgf )> maxDiffW {return 0,nil ;};if _cdg (_addf -_fde )> maxDiffH {return 0,nil ;};var _ccaaf ,_cgaa int ;if delX >=0{_ccaaf =int (delX +0.5);}else {_ccaaf =int (delX -0.5);};if delY >=0{_cgaa =int (delY +0.5);
}else {_cgaa =int (delY -0.5);};_afeg :=bm1 .createTemplate ();if _ddee =_afeg .RasterOperation (_ccaaf ,_cgaa ,_bffgf ,_fde ,PixSrc ,bm2 ,0,0);_ddee !=nil {return _efec ,_cb .Wrap (_ddee ,_adacb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _ddee =_afeg .RasterOperation (0,0,_bdee ,_addf ,PixSrcAndDst ,bm1 ,0,0);_ddee !=nil {return _efec ,_cb .Wrap (_ddee ,_adacb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_bfcf :=_afeg .countPixels ();_efec =float64 (_bfcf )*float64 (_bfcf )/(float64 (area1 )*float64 (area2 ));
return _efec ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _ceea ()[]int {_adga :=make ([]int ,256);_adga [0]=0;_adga [1]=7;var _cdad int ;for _cdad =2;_cdad < 4;_cdad ++{_adga [_cdad ]=_adga [_cdad -2]+6;
};for _cdad =4;_cdad < 8;_cdad ++{_adga [_cdad ]=_adga [_cdad -4]+5;};for _cdad =8;_cdad < 16;_cdad ++{_adga [_cdad ]=_adga [_cdad -8]+4;};for _cdad =16;_cdad < 32;_cdad ++{_adga [_cdad ]=_adga [_cdad -16]+3;};for _cdad =32;_cdad < 64;_cdad ++{_adga [_cdad ]=_adga [_cdad -32]+2;
};for _cdad =64;_cdad < 128;_cdad ++{_adga [_cdad ]=_adga [_cdad -64]+1;};for _cdad =128;_cdad < 256;_cdad ++{_adga [_cdad ]=_adga [_cdad -128];};return _adga ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gaad (d ,s ,hSize ,vSize )};
const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _baga (_cdae ,_ccaa ,_cccc *Bitmap )(*Bitmap ,error ){const _cege ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _ccaa ==nil {return nil ,_cb .Error (_cege ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cccc ==nil {return nil ,_cb .Error (_cege ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ebcb error ;switch {case _cdae ==_ccaa :if _ebcb =_cdae .RasterOperation (0,0,_ccaa .Width ,_ccaa .Height ,PixNotSrcAndDst ,_cccc ,0,0);
_ebcb !=nil {return nil ,_cb .Wrap (_ebcb ,_cege ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _cdae ==_cccc :if _ebcb =_cdae .RasterOperation (0,0,_ccaa .Width ,_ccaa .Height ,PixNotSrcAndDst ,_ccaa ,0,0);_ebcb !=nil {return nil ,_cb .Wrap (_ebcb ,_cege ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_cdae ,_ebcb =_bfgc (_cdae ,_ccaa );if _ebcb !=nil {return nil ,_cb .Wrap (_ebcb ,_cege ,"");};if _ebcb =_cdae .RasterOperation (0,0,_ccaa .Width ,_ccaa .Height ,PixNotSrcAndDst ,_cccc ,0,0);_ebcb !=nil {return nil ,_cb .Wrap (_ebcb ,_cege ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _cdae ,nil ;};func (_fbgg *ClassedPoints )Less (i ,j int )bool {return _fbgg ._dage (i ,j )};func _eaafb (_ceadb *Bitmap ,_dbag ,_edbb int ,_fcccb ,_gcdd int ,_gcfd RasterOperator ){var (_bbad int ;_gadg byte ;_cgac ,_edfe int ;_gaac int ;);
_ebcf :=_fcccb >>3;_bgeef :=_fcccb &7;if _bgeef > 0{_gadg =_efcb [_bgeef ];};_bbad =_ceadb .RowStride *_edbb +(_dbag >>3);switch _gcfd {case PixClr :for _cgac =0;_cgac < _gcdd ;_cgac ++{_gaac =_bbad +_cgac *_ceadb .RowStride ;for _edfe =0;_edfe < _ebcf ;
_edfe ++{_ceadb .Data [_gaac ]=0x0;_gaac ++;};if _bgeef > 0{_ceadb .Data [_gaac ]=_cegd (_ceadb .Data [_gaac ],0x0,_gadg );};};case PixSet :for _cgac =0;_cgac < _gcdd ;_cgac ++{_gaac =_bbad +_cgac *_ceadb .RowStride ;for _edfe =0;_edfe < _ebcf ;_edfe ++{_ceadb .Data [_gaac ]=0xff;
_gaac ++;};if _bgeef > 0{_ceadb .Data [_gaac ]=_cegd (_ceadb .Data [_gaac ],0xff,_gadg );};};case PixNotDst :for _cgac =0;_cgac < _gcdd ;_cgac ++{_gaac =_bbad +_cgac *_ceadb .RowStride ;for _edfe =0;_edfe < _ebcf ;_edfe ++{_ceadb .Data [_gaac ]=^_ceadb .Data [_gaac ];
_gaac ++;};if _bgeef > 0{_ceadb .Data [_gaac ]=_cegd (_ceadb .Data [_gaac ],^_ceadb .Data [_gaac ],_gadg );};};};};func (_bfbc *ClassedPoints )xSortFunction ()func (_fgbdf int ,_aggc int )bool {return func (_gggdf ,_geac int )bool {return _bfbc .XAtIndex (_gggdf )< _bfbc .XAtIndex (_geac )};
};func (_gbcgg *Bitmaps )AddBox (box *_fc .Rectangle ){_gbcgg .Boxes =append (_gbcgg .Boxes ,box )};func (_dggd *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _eafc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_dggd .IntSlice .Size (){return 0,_cb .Errorf (_eafc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dggd .YAtIndex (i )),nil ;};func _bbafa (_bdfb *Bitmap ,_abae *_d .Stack ,_edad ,_ggag ,_fbeb int )(_dcbed *_fc .Rectangle ,_daea error ){const _fdgff ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _bdfb ==nil {return nil ,_cb .Error (_fdgff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _abae ==nil {return nil ,_cb .Error (_fdgff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _fbeb {case 4:if _dcbed ,_daea =_fdfbc (_bdfb ,_abae ,_edad ,_ggag );_daea !=nil {return nil ,_cb .Wrap (_daea ,_fdgff ,"");
};return _dcbed ,nil ;case 8:if _dcbed ,_daea =_fecd (_bdfb ,_abae ,_edad ,_ggag );_daea !=nil {return nil ,_cb .Wrap (_daea ,_fdgff ,"");};return _dcbed ,nil ;default:return nil ,_cb .Errorf (_fdgff ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_fbeb );
};};func (_acag *Bitmap )addBorderGeneral (_gdga ,_acaf ,_bbaf ,_gbe int ,_fcfa int )(*Bitmap ,error ){const _eafa ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gdga < 0||_acaf < 0||_bbaf < 0||_gbe < 0{return nil ,_cb .Error (_eafa ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_bad ,_dfbe :=_acag .Width ,_acag .Height ;_feca :=_bad +_gdga +_acaf ;_aefd :=_dfbe +_bbaf +_gbe ;_bddeb :=New (_feca ,_aefd );_bddeb .Color =_acag .Color ;_ffffd :=PixClr ;if _fcfa > 0{_ffffd =PixSet ;};_dadcec :=_bddeb .RasterOperation (0,0,_gdga ,_aefd ,_ffffd ,nil ,0,0);
if _dadcec !=nil {return nil ,_cb .Wrap (_dadcec ,_eafa ,"\u006c\u0065\u0066\u0074");};_dadcec =_bddeb .RasterOperation (_feca -_acaf ,0,_acaf ,_aefd ,_ffffd ,nil ,0,0);if _dadcec !=nil {return nil ,_cb .Wrap (_dadcec ,_eafa ,"\u0072\u0069\u0067h\u0074");
};_dadcec =_bddeb .RasterOperation (0,0,_feca ,_bbaf ,_ffffd ,nil ,0,0);if _dadcec !=nil {return nil ,_cb .Wrap (_dadcec ,_eafa ,"\u0074\u006f\u0070");};_dadcec =_bddeb .RasterOperation (0,_aefd -_gbe ,_feca ,_gbe ,_ffffd ,nil ,0,0);if _dadcec !=nil {return nil ,_cb .Wrap (_dadcec ,_eafa ,"\u0062\u006f\u0074\u0074\u006f\u006d");
};_dadcec =_bddeb .RasterOperation (_gdga ,_bbaf ,_bad ,_dfbe ,PixSrc ,_acag ,0,0);if _dadcec !=nil {return nil ,_cb .Wrap (_dadcec ,_eafa ,"\u0063\u006f\u0070\u0079");};return _bddeb ,nil ;};func _fecd (_gcdfe *Bitmap ,_dcdbc *_d .Stack ,_beae ,_dgcg int )(_bgaf *_fc .Rectangle ,_dfbc error ){const _bbgd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gcdfe ==nil {return nil ,_cb .Error (_bbgd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dcdbc ==nil {return nil ,_cb .Error (_bbgd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_dccb ,_bgccb :=_gcdfe .Width ,_gcdfe .Height ;_geec :=_dccb -1;_fdce :=_bgccb -1;if _beae < 0||_beae > _geec ||_dgcg < 0||_dgcg > _fdce ||!_gcdfe .GetPixel (_beae ,_dgcg ){return nil ,nil ;};_fcee :=_fc .Rect (100000,100000,0,0);if _dfbc =_acb (_dcdbc ,_beae ,_beae ,_dgcg ,1,_fdce ,&_fcee );
_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dfbc =_acb (_dcdbc ,_beae ,_beae ,_dgcg +1,-1,_fdce ,&_fcee );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_fcee .Min .X ,_fcee .Max .X =_beae ,_beae ;_fcee .Min .Y ,_fcee .Max .Y =_dgcg ,_dgcg ;var (_bfea *fillSegment ;_gaeb int ;);for _dcdbc .Len ()> 0{if _bfea ,_dfbc =_faaag (_dcdbc );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"");};_dgcg =_bfea ._agccb ;
for _beae =_bfea ._bbadc -1;_beae >=0&&_gcdfe .GetPixel (_beae ,_dgcg );_beae --{if _dfbc =_gcdfe .SetPixel (_beae ,_dgcg ,0);_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _beae >=_bfea ._bbadc -1{for {for _beae ++;
_beae <=_bfea ._gfcd +1&&_beae <=_geec &&!_gcdfe .GetPixel (_beae ,_dgcg );_beae ++{};_gaeb =_beae ;if !(_beae <=_bfea ._gfcd +1&&_beae <=_geec ){break ;};for ;_beae <=_geec &&_gcdfe .GetPixel (_beae ,_dgcg );_beae ++{if _dfbc =_gcdfe .SetPixel (_beae ,_dgcg ,0);
_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dfbc =_acb (_dcdbc ,_gaeb ,_beae -1,_bfea ._agccb ,_bfea ._cabfc ,_fdce ,&_fcee );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _beae > _bfea ._gfcd {if _dfbc =_acb (_dcdbc ,_bfea ._gfcd +1,_beae -1,_bfea ._agccb ,-_bfea ._cabfc ,_fdce ,&_fcee );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_gaeb =_beae +1;if _gaeb < _bfea ._bbadc {if _dfbc =_acb (_dcdbc ,_gaeb ,_bfea ._bbadc -1,_bfea ._agccb ,-_bfea ._cabfc ,_fdce ,&_fcee );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_beae =_bfea ._bbadc ;for {for ;_beae <=_geec &&_gcdfe .GetPixel (_beae ,_dgcg );_beae ++{if _dfbc =_gcdfe .SetPixel (_beae ,_dgcg ,0);_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dfbc =_acb (_dcdbc ,_gaeb ,_beae -1,_bfea ._agccb ,_bfea ._cabfc ,_fdce ,&_fcee );
_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _beae > _bfea ._gfcd {if _dfbc =_acb (_dcdbc ,_bfea ._gfcd +1,_beae -1,_bfea ._agccb ,-_bfea ._cabfc ,_fdce ,&_fcee );_dfbc !=nil {return nil ,_cb .Wrap (_dfbc ,_bbgd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _beae ++;_beae <=_bfea ._gfcd +1&&_beae <=_geec &&!_gcdfe .GetPixel (_beae ,_dgcg );_beae ++{};_gaeb =_beae ;if !(_beae <=_bfea ._gfcd +1&&_beae <=_geec ){break ;};};};_fcee .Max .X ++;_fcee .Max .Y ++;return &_fcee ,nil ;};func _bbdf (_bced ,_edaeb *Bitmap ,_bged ,_ffbc int )(*Bitmap ,error ){const _cfdg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _edaeb ==nil {return nil ,_cb .Error (_cfdg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _bged < 1||_ffbc < 1{return nil ,_cb .Error (_cfdg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _bged ==1&&_ffbc ==1{return _bfgc (_bced ,_edaeb );};if MorphBC ==SymmetricMorphBC {_gdad ,_egb :=_fdea (_bced ,_edaeb ,_bged ,_ffbc );if _egb !=nil {return nil ,_cb .Wrap (_egb ,_cfdg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _gdad ,nil ;};_ededg :=_edba (_bged /2,_ffbc /2);_dcdb :=8*((_ededg +7)/8);_dcfc ,_adfg :=_edaeb .AddBorder (_dcdb ,0);if _adfg !=nil {return nil ,_cb .Wrapf (_adfg ,_cfdg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_dcdb );
};var _dffd ,_beaad *Bitmap ;if _bged ==1||_ffbc ==1{_bfaa :=SelCreateBrick (_ffbc ,_bged ,_ffbc /2,_bged /2,SelHit );_dffd ,_adfg =_bfgce (nil ,_dcfc ,_bfaa );if _adfg !=nil {return nil ,_cb .Wrap (_adfg ,_cfdg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_adad :=SelCreateBrick (1,_bged ,0,_bged /2,SelHit );_abgb ,_edea :=_caa (nil ,_dcfc ,_adad );if _edea !=nil {return nil ,_cb .Wrap (_edea ,_cfdg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_fcfg :=SelCreateBrick (_ffbc ,1,_ffbc /2,0,SelHit );_dffd ,_edea =_caa (nil ,_abgb ,_fcfg );if _edea !=nil {return nil ,_cb .Wrap (_edea ,_cfdg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_edea =_dcgg (_abgb ,_dffd ,_adad );_edea !=nil {return nil ,_cb .Wrap (_edea ,_cfdg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_edea =_dcgg (_dffd ,_abgb ,_fcfg );_edea !=nil {return nil ,_cb .Wrap (_edea ,_cfdg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _beaad ,_adfg =_dffd .RemoveBorder (_dcdb );_adfg !=nil {return nil ,_cb .Wrap (_adfg ,_cfdg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _bced ==nil {return _beaad ,nil ;};if _ ,_adfg =_bfgc (_bced ,_beaad );_adfg !=nil {return nil ,_adfg ;};
return _bced ,nil ;};func (_cccb *ClassedPoints )validateIntSlice ()error {const _ccdac ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_dacda :=range _cccb .IntSlice {if _dacda >=(_cccb .Points .Size ()){return _cb .Errorf (_ccdac ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dacda ,_cccb .Points .Size ());
};};return nil ;};func _acb (_cddf *_d .Stack ,_bcaab ,_ddbe ,_gcgb ,_bfgd ,_efebd int ,_dabae *_fc .Rectangle )(_gdgca error ){const _fcbf ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _cddf ==nil {return _cb .Error (_fcbf ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dabae ==nil {return _cb .Error (_fcbf ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_dabae .Min .X =_d .Min (_dabae .Min .X ,_bcaab );_dabae .Max .X =_d .Max (_dabae .Max .X ,_ddbe );_dabae .Min .Y =_d .Min (_dabae .Min .Y ,_gcgb );_dabae .Max .Y =_d .Max (_dabae .Max .Y ,_gcgb );if !(_gcgb +_bfgd >=0&&_gcgb +_bfgd <=_efebd ){return nil ;
};if _cddf .Aux ==nil {return _cb .Error (_fcbf ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fbgc *fillSegment ;_gbfgd ,_eaef :=_cddf .Aux .Pop ();if _eaef {if _fbgc ,_eaef =_gbfgd .(*fillSegment );
!_eaef {return _cb .Error (_fcbf ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fbgc =&fillSegment {};
};_fbgc ._bbadc =_bcaab ;_fbgc ._gfcd =_ddbe ;_fbgc ._agccb =_gcgb ;_fbgc ._cabfc =_bfgd ;_cddf .Push (_fbgc );return nil ;};var (_abga =_dadc ();_ccdg =_abf ();_faag =_abfe (););func _dbg (_afd *Bitmap ,_def int ,_fe []byte )(_bab *Bitmap ,_ecfd error ){const _gdg ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _afd ==nil {return nil ,_cb .Error (_gdg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _def < 1||_def > 4{return nil ,_cb .Error (_gdg ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _afd .Height <=1{return nil ,_cb .Errorf (_gdg ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_afd .Height );
};_bab =New (_afd .Width /2,_afd .Height /2);if _fe ==nil {_fe =_cda ();};_ffff :=_bffg (_afd .RowStride ,2*_bab .RowStride );switch _def {case 1:_ecfd =_dfg (_afd ,_bab ,_def ,_fe ,_ffff );case 2:_ecfd =_fdfb (_afd ,_bab ,_def ,_fe ,_ffff );case 3:_ecfd =_bac (_afd ,_bab ,_def ,_fe ,_ffff );
case 4:_ecfd =_beac (_afd ,_bab ,_def ,_fe ,_ffff );};if _ecfd !=nil {return nil ,_ecfd ;};return _bab ,nil ;};func (_gcgea *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_bbebd *Bitmaps ,_addd error ){const _ccdaca ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _gcgea ==nil {return nil ,_cb .Error (_ccdaca ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cb .Errorf (_ccdaca ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_cb .Errorf (_ccdaca ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_dfegf ,_addd :=_gcgea .makeSizeIndicator (width ,height ,tp ,relation );if _addd !=nil {return nil ,_cb .Wrap (_addd ,_ccdaca ,"");};_bbebd ,_addd =_gcgea .selectByIndicator (_dfegf );if _addd !=nil {return nil ,_cb .Wrap (_addd ,_ccdaca ,"");};return _bbebd ,nil ;
};func (_bddebe *Bitmap )connComponentsBB (_gaeg int )(_bcf *Boxes ,_gdcg error ){const _fddd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _gaeg !=4&&_gaeg !=8{return nil ,_cb .Error (_fddd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _bddebe .Zero (){return &Boxes {},nil ;};_bddebe .setPadBits (0);_dfda ,_gdcg :=_bfgc (nil ,_bddebe );if _gdcg !=nil {return nil ,_cb .Wrap (_gdcg ,_fddd ,"\u0062\u006d\u0031");};_gegb :=&_d .Stack {};_gegb .Aux =&_d .Stack {};_bcf =&Boxes {};var (_bbbd ,_dfbed int ;
_aggbb _fc .Point ;_gedd bool ;_gga *_fc .Rectangle ;);for {if _aggbb ,_gedd ,_gdcg =_dfda .nextOnPixel (_dfbed ,_bbbd );_gdcg !=nil {return nil ,_cb .Wrap (_gdcg ,_fddd ,"");};if !_gedd {break ;};if _gga ,_gdcg =_bbafa (_dfda ,_gegb ,_aggbb .X ,_aggbb .Y ,_gaeg );
_gdcg !=nil {return nil ,_cb .Wrap (_gdcg ,_fddd ,"");};if _gdcg =_bcf .Add (_gga );_gdcg !=nil {return nil ,_cb .Wrap (_gdcg ,_fddd ,"");};_dfbed =_aggbb .X ;_bbbd =_aggbb .Y ;};return _bcf ,nil ;};func (_dfb *Bitmap )SetDefaultPixel (){for _gfbg :=range _dfb .Data {_dfb .Data [_gfbg ]=byte (0xff);
};};func (_fagb *Bitmap )nextOnPixel (_ecff ,_dff int )(_dbaf _fc .Point ,_gbce bool ,_cbb error ){const _bedb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dbaf ,_gbce ,_cbb =_fagb .nextOnPixelLow (_fagb .Width ,_fagb .Height ,_fagb .RowStride ,_ecff ,_dff );
if _cbb !=nil {return _dbaf ,false ,_cb .Wrap (_cbb ,_bedb ,"");};return _dbaf ,_gbce ,nil ;};func _bcbf (_bceba *Bitmap ,_deba ,_egfb ,_ggcgf ,_cdee int ,_eagc RasterOperator ,_edaed *Bitmap ,_cecb ,_daga int )error {var (_cggc bool ;_cecg bool ;_deed int ;
_aegc int ;_gdfc int ;_cebee bool ;_cgd byte ;_cggd int ;_ffdd int ;_debdf int ;_caff ,_feace int ;);_beaaa :=8-(_deba &7);_abad :=_gbgc [_beaaa ];_ddggd :=_bceba .RowStride *_egfb +(_deba >>3);_gdfa :=_edaed .RowStride *_daga +(_cecb >>3);if _ggcgf < _beaaa {_cggc =true ;
_abad &=_efcb [8-_beaaa +_ggcgf ];};if !_cggc {_deed =(_ggcgf -_beaaa )>>3;if _deed > 0{_cecg =true ;_aegc =_ddggd +1;_gdfc =_gdfa +1;};};_cggd =(_deba +_ggcgf )&7;if !(_cggc ||_cggd ==0){_cebee =true ;_cgd =_efcb [_cggd ];_ffdd =_ddggd +1+_deed ;_debdf =_gdfa +1+_deed ;
};switch _eagc {case PixSrc :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ],_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;
_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]=_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ],_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotSrc :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^_edaed .Data [_gdfa ],_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};
if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]=^_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^_edaed .Data [_debdf ],_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixSrcOrDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ]|_bceba .Data [_ddggd ],_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;
};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]|=_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ]|_bceba .Data [_ffdd ],_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixSrcAndDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ]&_bceba .Data [_ddggd ],_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;
};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]&=_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ]&_bceba .Data [_ffdd ],_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixSrcXorDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ]^_bceba .Data [_ddggd ],_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;
};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]^=_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ]^_bceba .Data [_ffdd ],_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotSrcOrDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^(_edaed .Data [_gdfa ])|_bceba .Data [_ddggd ],_abad );_ddggd +=_bceba .RowStride ;
_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]|=^(_edaed .Data [_gdfc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;
_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^(_edaed .Data [_debdf ])|_bceba .Data [_ffdd ],_cgd );_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotSrcAndDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^(_edaed .Data [_gdfa ])&_bceba .Data [_ddggd ],_abad );
_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]&=^_edaed .Data [_gdfc +_feace ];};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;
};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^(_edaed .Data [_debdf ])&_bceba .Data [_ffdd ],_cgd );_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixSrcOrNotDst :for _caff =0;_caff < _cdee ;
_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ]|^(_bceba .Data [_ddggd ]),_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;
_feace ++{_bceba .Data [_aegc +_feace ]=_edaed .Data [_gdfc +_feace ]|^(_bceba .Data [_aegc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ]|^(_bceba .Data [_ffdd ]),_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixSrcAndNotDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],_edaed .Data [_gdfa ]&^(_bceba .Data [_ddggd ]),_abad );_ddggd +=_bceba .RowStride ;
_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]=_edaed .Data [_gdfc +_feace ]&^(_bceba .Data [_aegc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;
};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],_edaed .Data [_debdf ]&^(_bceba .Data [_ffdd ]),_cgd );_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotPixSrcOrDst :for _caff =0;
_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^(_edaed .Data [_gdfa ]|_bceba .Data [_ddggd ]),_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;
_feace ++{_bceba .Data [_aegc +_feace ]=^(_edaed .Data [_gdfc +_feace ]|_bceba .Data [_aegc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^(_edaed .Data [_debdf ]|_bceba .Data [_ffdd ]),_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotPixSrcAndDst :for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^(_edaed .Data [_gdfa ]&_bceba .Data [_ddggd ]),_abad );_ddggd +=_bceba .RowStride ;
_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;_feace ++{_bceba .Data [_aegc +_feace ]=^(_edaed .Data [_gdfc +_feace ]&_bceba .Data [_aegc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;
};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^(_edaed .Data [_debdf ]&_bceba .Data [_ffdd ]),_cgd );_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};case PixNotPixSrcXorDst :for _caff =0;
_caff < _cdee ;_caff ++{_bceba .Data [_ddggd ]=_cegd (_bceba .Data [_ddggd ],^(_edaed .Data [_gdfa ]^_bceba .Data [_ddggd ]),_abad );_ddggd +=_bceba .RowStride ;_gdfa +=_edaed .RowStride ;};if _cecg {for _caff =0;_caff < _cdee ;_caff ++{for _feace =0;_feace < _deed ;
_feace ++{_bceba .Data [_aegc +_feace ]=^(_edaed .Data [_gdfc +_feace ]^_bceba .Data [_aegc +_feace ]);};_aegc +=_bceba .RowStride ;_gdfc +=_edaed .RowStride ;};};if _cebee {for _caff =0;_caff < _cdee ;_caff ++{_bceba .Data [_ffdd ]=_cegd (_bceba .Data [_ffdd ],^(_edaed .Data [_debdf ]^_bceba .Data [_ffdd ]),_cgd );
_ffdd +=_bceba .RowStride ;_debdf +=_edaed .RowStride ;};};default:_ce .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_eagc );return _cb .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func TstImageBitmapData ()[]byte {return _adfd .Data };func _edcg (_dceb uint ,_ebcga byte )byte {return _ebcga >>_dceb <<_dceb };func _cabb (_afea *Bitmap ,_bcfe ,_aegd ,_fbff ,_bgff int ,_gacg RasterOperator ){if _bcfe < 0{_fbff +=_bcfe ;
_bcfe =0;};_dcbfc :=_bcfe +_fbff -_afea .Width ;if _dcbfc > 0{_fbff -=_dcbfc ;};if _aegd < 0{_bgff +=_aegd ;_aegd =0;};_ffca :=_aegd +_bgff -_afea .Height ;if _ffca > 0{_bgff -=_ffca ;};if _fbff <=0||_bgff <=0{return ;};if (_bcfe &7)==0{_eaafb (_afea ,_bcfe ,_aegd ,_fbff ,_bgff ,_gacg );
}else {_fbbe (_afea ,_bcfe ,_aegd ,_fbff ,_bgff ,_gacg );};};func _beca (_cgba ,_agda int ,_cbef string )*Selection {_aecga :=&Selection {Height :_cgba ,Width :_agda ,Name :_cbef };_aecga .Data =make ([][]SelectionValue ,_cgba );for _dbea :=0;_dbea < _cgba ;
_dbea ++{_aecga .Data [_dbea ]=make ([]SelectionValue ,_agda );};return _aecga ;};type Point struct{X ,Y float32 ;};func TstTSymbol (t *_b .T ,scale ...int )*Bitmap {_gcbee ,_bccbg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_bccbg );
return TstGetScaledSymbol (t ,_gcbee ,scale ...);};func (_eebc *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _fab ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_bdcg ,_ecdeg :=_eebc .selectByIndexes (idx );if _ecdeg !=nil {return nil ,_cb .Wrap (_ecdeg ,_fab ,"");};return _bdcg ,nil ;};func (_ebfc *Bitmap )CountPixels ()int {return _ebfc .countPixels ()};var (_egaeg *Bitmap ;_adfd *Bitmap ;);func (_ebca *Bitmap )setEightBytes (_edbf int ,_agg uint64 )error {_gccc :=_ebca .RowStride -(_edbf %_ebca .RowStride );
if _ebca .RowStride !=_ebca .Width >>3{_gccc --;};if _gccc >=8{return _ebca .setEightFullBytes (_edbf ,_agg );};return _ebca .setEightPartlyBytes (_edbf ,_gccc ,_agg );};func (_fgeb *Bitmap )setFourBytes (_gec int ,_ddef uint32 )error {if _gec +3> len (_fgeb .Data )-1{return _cb .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gec );
};_fgeb .Data [_gec ]=byte ((_ddef &0xff000000)>>24);_fgeb .Data [_gec +1]=byte ((_ddef &0xff0000)>>16);_fgeb .Data [_gec +2]=byte ((_ddef &0xff00)>>8);_fgeb .Data [_gec +3]=byte (_ddef &0xff);return nil ;};func _faaag (_adgd *_d .Stack )(_bgfb *fillSegment ,_ebaag error ){const _egeca ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _adgd ==nil {return nil ,_cb .Error (_egeca ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _adgd .Aux ==nil {return nil ,_cb .Error (_egeca ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_baag ,_bafc :=_adgd .Pop ();if !_bafc {return nil ,nil ;};_edbfa ,_bafc :=_baag .(*fillSegment );if !_bafc {return nil ,_cb .Error (_egeca ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_bgfb =&fillSegment {_edbfa ._bbadc ,_edbfa ._gfcd ,_edbfa ._agccb +_edbfa ._cabfc ,_edbfa ._cabfc };_adgd .Aux .Push (_edbfa );return _bgfb ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _egec (_ddfd ,_gccfa ,_cbbd *Bitmap ,_cfdd int )(*Bitmap ,error ){const _cddb ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _gccfa ==nil {return nil ,_cb .Error (_cddb ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cbbd ==nil {return nil ,_cb .Error (_cddb ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _cfdd !=4&&_cfdd !=8{return nil ,_cb .Error (_cddb ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _baab error ;_ddfd ,_baab =_bfgc (_ddfd ,_gccfa );
if _baab !=nil {return nil ,_cb .Wrap (_baab ,_cddb ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cabba :=_gccfa .createTemplate ();_cbbd .setPadBits (0);for _gebad :=0;_gebad < _adea ;_gebad ++{_cabba ,_baab =_bfgc (_cabba ,_ddfd );
if _baab !=nil {return nil ,_cb .Wrapf (_baab ,_cddb ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gebad );};if _baab =_fed (_ddfd ,_cbbd ,_cfdd );_baab !=nil {return nil ,_cb .Wrapf (_baab ,_cddb ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gebad );
};if _cabba .Equals (_ddfd ){break ;};};return _ddfd ,nil ;};func (_aecg *Bitmap )SetByte (index int ,v byte )error {if index > len (_aecg .Data )-1||index < 0{return _cb .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_aecg .Data [index ]=v ;return nil ;};func (_gca *Boxes )Get (i int )(*_fc .Rectangle ,error ){const _aeec ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _gca ==nil {return nil ,_cb .Error (_aeec ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_gca )-1{return nil ,_cb .Errorf (_aeec ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_gca )[i ],nil ;};func (_aced *Bitmap )InverseData (){_aced .inverseData ()};
func (_eeaf *Points )Add (pt *Points )error {const _gbd ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _eeaf ==nil {return _cb .Error (_gbd ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _cb .Error (_gbd ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_eeaf =append (*_eeaf ,*pt ...);return nil ;};func (_bgeda *byHeight )Swap (i ,j int ){_bgeda .Values [i ],_bgeda .Values [j ]=_bgeda .Values [j ],_bgeda .Values [i ];
if _bgeda .Boxes !=nil {_bgeda .Boxes [i ],_bgeda .Boxes [j ]=_bgeda .Boxes [j ],_bgeda .Boxes [i ];};};func (_aagd Points )GetGeometry (i int )(_fdeg ,_gdgf float32 ,_fagbe error ){if i > len (_aagd )-1{return 0,0,_cb .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_gedf :=_aagd [i ];return _gedf .X ,_gedf .Y ,nil ;};func _ccad (_baggc *Bitmap ,_bcba ,_dgec ,_dcaa ,_bgcc int ,_bdfc RasterOperator ,_cfab *Bitmap ,_dafa ,_cacg int )error {var (_dacf byte ;_eedd int ;_egag int ;_edgf ,_dccf int ;_bbgfg ,_gfefg int ;
);_fdab :=_dcaa >>3;_eee :=_dcaa &7;if _eee > 0{_dacf =_efcb [_eee ];};_eedd =_cfab .RowStride *_cacg +(_dafa >>3);_egag =_baggc .RowStride *_dgec +(_bcba >>3);switch _bdfc {case PixSrc :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;
_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=_cfab .Data [_edgf ];_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ],_dacf );};};case PixNotSrc :for _bbgfg =0;
_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=^(_cfab .Data [_edgf ]);_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^_cfab .Data [_edgf ],_dacf );
};};case PixSrcOrDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]|=_cfab .Data [_edgf ];_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ]|_baggc .Data [_dccf ],_dacf );
};};case PixSrcAndDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]&=_cfab .Data [_edgf ];_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ]&_baggc .Data [_dccf ],_dacf );
};};case PixSrcXorDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]^=_cfab .Data [_edgf ];_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ]^_baggc .Data [_dccf ],_dacf );
};};case PixNotSrcOrDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]|=^(_cfab .Data [_edgf ]);_dccf ++;_edgf ++;};
if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^(_cfab .Data [_edgf ])|_baggc .Data [_dccf ],_dacf );};};case PixNotSrcAndDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;
for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]&=^(_cfab .Data [_edgf ]);_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^(_cfab .Data [_edgf ])&_baggc .Data [_dccf ],_dacf );};};case PixSrcOrNotDst :for _bbgfg =0;
_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=_cfab .Data [_edgf ]|^(_baggc .Data [_dccf ]);_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ]|^(_baggc .Data [_dccf ]),_dacf );
};};case PixSrcAndNotDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=_cfab .Data [_edgf ]&^(_baggc .Data [_dccf ]);
_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],_cfab .Data [_edgf ]&^(_baggc .Data [_dccf ]),_dacf );};};case PixNotPixSrcOrDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;
for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=^(_cfab .Data [_edgf ]|_baggc .Data [_dccf ]);_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^(_cfab .Data [_edgf ]|_baggc .Data [_dccf ]),_dacf );};};case PixNotPixSrcAndDst :for _bbgfg =0;
_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=^(_cfab .Data [_edgf ]&_baggc .Data [_dccf ]);_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^(_cfab .Data [_edgf ]&_baggc .Data [_dccf ]),_dacf );
};};case PixNotPixSrcXorDst :for _bbgfg =0;_bbgfg < _bgcc ;_bbgfg ++{_edgf =_eedd +_bbgfg *_cfab .RowStride ;_dccf =_egag +_bbgfg *_baggc .RowStride ;for _gfefg =0;_gfefg < _fdab ;_gfefg ++{_baggc .Data [_dccf ]=^(_cfab .Data [_edgf ]^_baggc .Data [_dccf ]);
_dccf ++;_edgf ++;};if _eee > 0{_baggc .Data [_dccf ]=_cegd (_baggc .Data [_dccf ],^(_cfab .Data [_edgf ]^_baggc .Data [_dccf ]),_dacf );};};default:_ce .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bdfc );
return _cb .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};var _ _ff .Interface =&ClassedPoints {};func (_befe *Bitmap )setBit (_gbac int ){_befe .Data [(_gbac >>3)]|=0x80>>uint (_gbac &7)};
func (_cfff *Bitmap )resizeImageData (_cbac *Bitmap )error {if _cbac ==nil {return _cb .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cfff .SizesEqual (_cbac ){return nil ;};_cfff .Data =make ([]byte ,len (_cbac .Data ));_cfff .Width =_cbac .Width ;_cfff .Height =_cbac .Height ;_cfff .RowStride =_cbac .RowStride ;return nil ;};func (_dfgbc *Bitmaps )GetBox (i int )(*_fc .Rectangle ,error ){const _dgfe ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _dfgbc ==nil {return nil ,_cb .Error (_dgfe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_dfgbc .Boxes )-1{return nil ,_cb .Errorf (_dgfe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dfgbc .Boxes [i ],nil ;};func (_aee *Bitmap )GetVanillaData ()[]byte {if _aee .Color ==Chocolate {_aee .inverseData ();};return _aee .Data ;};type ClassedPoints struct{*Points ;_d .IntSlice ;_dage func (_feab ,_bdefb int )bool ;};const (MopDilation MorphOperation =iota ;
MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_egf *Bitmap )nextOnPixelLow (_agde ,_bcb ,_adb ,_abfd ,_geaa int )(_bgaa _fc .Point ,_ebff bool ,_dgdce error ){const _bfg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_dfd int ;_bcc byte ;);_efda :=_geaa *_adb ;_fbfe :=_efda +(_abfd /8);if _bcc ,_dgdce =_egf .GetByte (_fbfe );_dgdce !=nil {return _bgaa ,false ,_cb .Wrap (_dgdce ,_bfg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _bcc !=0{_egc :=_abfd -(_abfd %8)+7;for _dfd =_abfd ;_dfd <=_egc &&_dfd < _agde ;_dfd ++{if _egf .GetPixel (_dfd ,_geaa ){_bgaa .X =_dfd ;_bgaa .Y =_geaa ;return _bgaa ,true ,nil ;};};};_bgec :=(_abfd /8)+1;_dfd =8*_bgec ;var _eage int ;for _fbfe =_efda +_bgec ;
_dfd < _agde ;_fbfe ,_dfd =_fbfe +1,_dfd +8{if _bcc ,_dgdce =_egf .GetByte (_fbfe );_dgdce !=nil {return _bgaa ,false ,_cb .Wrap (_dgdce ,_bfg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _bcc ==0{continue ;
};for _eage =0;_eage < 8&&_dfd < _agde ;_eage ,_dfd =_eage +1,_dfd +1{if _egf .GetPixel (_dfd ,_geaa ){_bgaa .X =_dfd ;_bgaa .Y =_geaa ;return _bgaa ,true ,nil ;};};};for _fdcb :=_geaa +1;_fdcb < _bcb ;_fdcb ++{_efda =_fdcb *_adb ;for _fbfe ,_dfd =_efda ,0;
_dfd < _agde ;_fbfe ,_dfd =_fbfe +1,_dfd +8{if _bcc ,_dgdce =_egf .GetByte (_fbfe );_dgdce !=nil {return _bgaa ,false ,_cb .Wrap (_dgdce ,_bfg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bcc ==0{continue ;
};for _eage =0;_eage < 8&&_dfd < _agde ;_eage ,_dfd =_eage +1,_dfd +1{if _egf .GetPixel (_dfd ,_fdcb ){_bgaa .X =_dfd ;_bgaa .Y =_fdcb ;return _bgaa ,true ,nil ;};};};};return _bgaa ,false ,nil ;};type SelectionValue int ;func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _abda (src ,sequence ...);
};func _dadc ()(_cegc [256]uint16 ){for _ga :=0;_ga < 256;_ga ++{if _ga &0x01!=0{_cegc [_ga ]|=0x3;};if _ga &0x02!=0{_cegc [_ga ]|=0xc;};if _ga &0x04!=0{_cegc [_ga ]|=0x30;};if _ga &0x08!=0{_cegc [_ga ]|=0xc0;};if _ga &0x10!=0{_cegc [_ga ]|=0x300;};if _ga &0x20!=0{_cegc [_ga ]|=0xc00;
};if _ga &0x40!=0{_cegc [_ga ]|=0x3000;};if _ga &0x80!=0{_cegc [_ga ]|=0xc000;};};return _cegc ;};func _cegd (_ceag ,_baf ,_gafb byte )byte {return (_ceag &^(_gafb ))|(_baf &_gafb )};func (_aggb *Boxes )selectWithIndicator (_edf *_d .NumSlice )(_gbea *Boxes ,_fbg error ){const _cbba ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _aggb ==nil {return nil ,_cb .Error (_cbba ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _edf ==nil {return nil ,_cb .Error (_cbba ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_edf )!=len (*_aggb ){return nil ,_cb .Error (_cbba ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _edgc ,_gega int ;for _beg :=0;_beg < len (*_edf );_beg ++{if _edgc ,_fbg =_edf .GetInt (_beg );_fbg !=nil {return nil ,_cb .Wrap (_fbg ,_cbba ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _edgc ==1{_gega ++;
};};if _gega ==len (*_aggb ){return _aggb ,nil ;};_dec :=Boxes {};for _gebe :=0;_gebe < len (*_edf );_gebe ++{_edgc =int ((*_edf )[_gebe ]);if _edgc ==0{continue ;};_dec =append (_dec ,(*_aggb )[_gebe ]);};_gbea =&_dec ;return _gbea ,nil ;};type Points []Point ;
var (_efcb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gbgc =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _beac (_deb ,_bbe *Bitmap ,_dda int ,_dbed []byte ,_abce int )(_ebcg error ){const _bddf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_cbf ,_fgb ,_dc ,_agaa ,_debe ,_fdbc ,_cfc ,_aad int ;_aca ,_eda uint32 ;_bgf ,_aafg byte ;_fgd uint16 ;);_cde :=make ([]byte ,4);_dfc :=make ([]byte ,4);for _dc =0;_dc < _deb .Height -1;_dc ,_agaa =_dc +2,_agaa +1{_cbf =_dc *_deb .RowStride ;_fgb =_agaa *_bbe .RowStride ;
for _debe ,_fdbc =0,0;_debe < _abce ;_debe ,_fdbc =_debe +4,_fdbc +1{for _cfc =0;_cfc < 4;_cfc ++{_aad =_cbf +_debe +_cfc ;if _aad <=len (_deb .Data )-1&&_aad < _cbf +_deb .RowStride {_cde [_cfc ]=_deb .Data [_aad ];}else {_cde [_cfc ]=0x00;};_aad =_cbf +_deb .RowStride +_debe +_cfc ;
if _aad <=len (_deb .Data )-1&&_aad < _cbf +(2*_deb .RowStride ){_dfc [_cfc ]=_deb .Data [_aad ];}else {_dfc [_cfc ]=0x00;};};_aca =_db .BigEndian .Uint32 (_cde );_eda =_db .BigEndian .Uint32 (_dfc );_eda &=_aca ;_eda &=_eda <<1;_eda &=0xaaaaaaaa;_aca =_eda |(_eda <<7);
_bgf =byte (_aca >>24);_aafg =byte ((_aca >>8)&0xff);_aad =_fgb +_fdbc ;if _aad +1==len (_bbe .Data )-1||_aad +1>=_fgb +_bbe .RowStride {_bbe .Data [_aad ]=_dbed [_bgf ];if _ebcg =_bbe .SetByte (_aad ,_dbed [_bgf ]);_ebcg !=nil {return _cb .Wrapf (_ebcg ,_bddf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aad );
};}else {_fgd =(uint16 (_dbed [_bgf ])<<8)|uint16 (_dbed [_aafg ]);if _ebcg =_bbe .setTwoBytes (_aad ,_fgd );_ebcg !=nil {return _cb .Wrapf (_ebcg ,_bddf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aad );
};_fdbc ++;};};};return nil ;};func _fdfbc (_aacdc *Bitmap ,_gbfg *_d .Stack ,_baabf ,_aadg int )(_bbdfd *_fc .Rectangle ,_ceefa error ){const _eccc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _aacdc ==nil {return nil ,_cb .Error (_eccc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gbfg ==nil {return nil ,_cb .Error (_eccc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_eccbe ,_baeg :=_aacdc .Width ,_aacdc .Height ;_cbacg :=_eccbe -1;_beeg :=_baeg -1;if _baabf < 0||_baabf > _cbacg ||_aadg < 0||_aadg > _beeg ||!_aacdc .GetPixel (_baabf ,_aadg ){return nil ,nil ;
};var _cdaea *_fc .Rectangle ;_cdaea ,_ceefa =Rect (100000,100000,0,0);if _ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"");};if _ceefa =_acb (_gbfg ,_baabf ,_baabf ,_aadg ,1,_beeg ,_cdaea );_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _ceefa =_acb (_gbfg ,_baabf ,_baabf ,_aadg +1,-1,_beeg ,_cdaea );_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cdaea .Min .X ,_cdaea .Max .X =_baabf ,_baabf ;
_cdaea .Min .Y ,_cdaea .Max .Y =_aadg ,_aadg ;var (_ebcbd *fillSegment ;_bagfb int ;);for _gbfg .Len ()> 0{if _ebcbd ,_ceefa =_faaag (_gbfg );_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"");};_aadg =_ebcbd ._agccb ;for _baabf =_ebcbd ._bbadc ;_baabf >=0&&_aacdc .GetPixel (_baabf ,_aadg );
_baabf --{if _ceefa =_aacdc .SetPixel (_baabf ,_aadg ,0);_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"");};};if _baabf >=_ebcbd ._bbadc {for _baabf ++;_baabf <=_ebcbd ._gfcd &&_baabf <=_cbacg &&!_aacdc .GetPixel (_baabf ,_aadg );_baabf ++{};_bagfb =_baabf ;
if !(_baabf <=_ebcbd ._gfcd &&_baabf <=_cbacg ){continue ;};}else {_bagfb =_baabf +1;if _bagfb < _ebcbd ._bbadc -1{if _ceefa =_acb (_gbfg ,_bagfb ,_ebcbd ._bbadc -1,_ebcbd ._agccb ,-_ebcbd ._cabfc ,_beeg ,_cdaea );_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_baabf =_ebcbd ._bbadc +1;};for {for ;_baabf <=_cbacg &&_aacdc .GetPixel (_baabf ,_aadg );_baabf ++{if _ceefa =_aacdc .SetPixel (_baabf ,_aadg ,0);_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ceefa =_acb (_gbfg ,_bagfb ,_baabf -1,_ebcbd ._agccb ,_ebcbd ._cabfc ,_beeg ,_cdaea );
_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _baabf > _ebcbd ._gfcd +1{if _ceefa =_acb (_gbfg ,_ebcbd ._gfcd +1,_baabf -1,_ebcbd ._agccb ,-_ebcbd ._cabfc ,_beeg ,_cdaea );_ceefa !=nil {return nil ,_cb .Wrap (_ceefa ,_eccc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _baabf ++;_baabf <=_ebcbd ._gfcd &&_baabf <=_cbacg &&!_aacdc .GetPixel (_baabf ,_aadg );_baabf ++{};_bagfb =_baabf ;if !(_baabf <=_ebcbd ._gfcd &&_baabf <=_cbacg ){break ;};};};_cdaea .Max .X ++;_cdaea .Max .Y ++;return _cdaea ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;
};type Boxes []*_fc .Rectangle ;func _ecc (_daba ,_fggec *Bitmap ,_ecbbd ,_agba ,_gad ,_dead ,_cbfa ,_ddcc ,_gda ,_ada int ,_bcef CombinationOperator )error {var _age int ;_gefb :=func (){_age ++;_gad +=_fggec .RowStride ;_dead +=_daba .RowStride ;_cbfa +=_daba .RowStride };
for _age =_ecbbd ;_age < _agba ;_gefb (){var _cbag uint16 ;_eedg :=_gad ;for _dfcgc :=_dead ;_dfcgc <=_cbfa ;_dfcgc ++{_acea ,_ccf :=_fggec .GetByte (_eedg );if _ccf !=nil {return _ccf ;};_befea ,_ccf :=_daba .GetByte (_dfcgc );if _ccf !=nil {return _ccf ;
};_cbag =(_cbag |uint16 (_befea ))<<uint (_ada );_befea =byte (_cbag >>8);if _dfcgc ==_cbfa {_befea =_edcg (uint (_ddcc ),_befea );};if _ccf =_fggec .SetByte (_eedg ,_fgda (_acea ,_befea ,_bcef ));_ccf !=nil {return _ccf ;};_eedg ++;_cbag <<=uint (_gda );
};};return nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_dfgb *Bitmap )inverseData (){if _cbge :=_dfgb .RasterOperation (0,0,_dfgb .Width ,_dfgb .Height ,PixNotDst ,nil ,0,0);
_cbge !=nil {_ce .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_cbge );};if _dfgb .Color ==Chocolate {_dfgb .Color =Vanilla ;}else {_dfgb .Color =Chocolate ;};};func (_cebf *byWidth )Less (i ,j int )bool {return _cebf .Values [i ].Width < _cebf .Values [j ].Width };
type byWidth Bitmaps ;func (_agbgd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _gbgb ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_agbgd .IntSlice .Size (){return 0,_cb .Errorf (_gbgb ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_agbgd .XAtIndex (i )),nil ;};func (_cdadb *byHeight )Less (i ,j int )bool {return _cdadb .Values [i ].Height < _cdadb .Values [j ].Height };func _cfef (_aeegd *Bitmap ,_ccee ,_bfcfc ,_ggbb ,_gcab int ,_bgd RasterOperator ,_babe *Bitmap ,_accg ,_fcbgc int )error {const _gffgg ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _aeegd ==nil {return _cb .Error (_gffgg ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _bgd ==PixDst {return nil ;};switch _bgd {case PixClr ,PixSet ,PixNotDst :_cabb (_aeegd ,_ccee ,_bfcfc ,_ggbb ,_gcab ,_bgd );
return nil ;};if _babe ==nil {_ce .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _cb .Error (_gffgg ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gfea :=_febf (_aeegd ,_ccee ,_bfcfc ,_ggbb ,_gcab ,_bgd ,_babe ,_accg ,_fcbgc );_gfea !=nil {return _cb .Wrap (_gfea ,_gffgg ,"");
};return nil ;};func (_bfaab *ClassedPoints )Len ()int {return _bfaab .IntSlice .Size ()};type shift int ;func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fgg ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_fcb :=_fag (width ,height );_fcb .Data =data ;if len (data )< height *_fcb .RowStride {return nil ,_cb .Errorf (_fgg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_fcb .RowStride );
};return _fcb ,nil ;};func (_dfege *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _dcde ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _dfege ==nil {return nil ,_cb .Error (_dcde ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_cb .Error (_dcde ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_agaf :=len (_dfege .Values );_gbgee :=&Bitmaps {Values :make ([]*Bitmap ,_agaf ),Boxes :make ([]*_fc .Rectangle ,_agaf )};
var (_aegf ,_gdef *Bitmap ;_dbcb *_fc .Rectangle ;_bdaag error ;);for _gefg :=0;_gefg < _agaf ;_gefg ++{if _aegf ,_bdaag =_dfege .GetBitmap (_gefg );_bdaag !=nil {return nil ,_cb .Wrap (_bdaag ,_dcde ,"");};if _dbcb ,_bdaag =_dfege .GetBox (_gefg );_bdaag !=nil {return nil ,_cb .Wrap (_bdaag ,_dcde ,"");
};if _gdef ,_bdaag =s .clipRectangle (_dbcb ,nil );_bdaag !=nil {return nil ,_cb .Wrap (_bdaag ,_dcde ,"");};if _gdef ,_bdaag =_gdef .And (_aegf );_bdaag !=nil {return nil ,_cb .Wrap (_bdaag ,_dcde ,"");};_gbgee .Values [_gefg ]=_gdef ;_gbgee .Boxes [_gefg ]=_dbcb ;
};return _gbgee ,nil ;};func _bfgc (_befb ,_faad *Bitmap )(*Bitmap ,error ){if _faad ==nil {return nil ,_cb .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _faad ==_befb {return _befb ,nil ;};if _befb ==nil {_befb =_faad .createTemplate ();copy (_befb .Data ,_faad .Data );return _befb ,nil ;};_cbcf :=_befb .resizeImageData (_faad );if _cbcf !=nil {return nil ,_cb .Wrap (_cbcf ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_befb .Text =_faad .Text ;copy (_befb .Data ,_faad .Data );return _befb ,nil ;};func _fgbff ()[]int {_gbaa :=make ([]int ,256);for _cgfe :=0;_cgfe <=0xff;_cgfe ++{_bgeg :=byte (_cgfe );_gbaa [_bgeg ]=int (_bgeg &0x1)+(int (_bgeg >>1)&0x1)+(int (_bgeg >>2)&0x1)+(int (_bgeg >>3)&0x1)+(int (_bgeg >>4)&0x1)+(int (_bgeg >>5)&0x1)+(int (_bgeg >>6)&0x1)+(int (_bgeg >>7)&0x1);
};return _gbaa ;};func TstPSymbol (t *_b .T )*Bitmap {t .Helper ();_gbbb :=New (5,8);_f .NoError (t ,_gbbb .SetPixel (0,0,1));_f .NoError (t ,_gbbb .SetPixel (1,0,1));_f .NoError (t ,_gbbb .SetPixel (2,0,1));_f .NoError (t ,_gbbb .SetPixel (3,0,1));_f .NoError (t ,_gbbb .SetPixel (4,1,1));
_f .NoError (t ,_gbbb .SetPixel (0,1,1));_f .NoError (t ,_gbbb .SetPixel (4,2,1));_f .NoError (t ,_gbbb .SetPixel (0,2,1));_f .NoError (t ,_gbbb .SetPixel (4,3,1));_f .NoError (t ,_gbbb .SetPixel (0,3,1));_f .NoError (t ,_gbbb .SetPixel (0,4,1));_f .NoError (t ,_gbbb .SetPixel (1,4,1));
_f .NoError (t ,_gbbb .SetPixel (2,4,1));_f .NoError (t ,_gbbb .SetPixel (3,4,1));_f .NoError (t ,_gbbb .SetPixel (0,5,1));_f .NoError (t ,_gbbb .SetPixel (0,6,1));_f .NoError (t ,_gbbb .SetPixel (0,7,1));return _gbbb ;};type Selection struct{Height ,Width int ;
Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_edae *Bitmap )GetByte (index int )(byte ,error ){if index > len (_edae .Data )-1||index < 0{return 0,_cb .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _edae .Data [index ],nil ;};func (_debf *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _debf .removeBorderGeneral (left ,right ,top ,bot );};func _fbbe (_dcgda *Bitmap ,_aeegb ,_acaa int ,_gbbf ,_gbab int ,_eadd RasterOperator ){var (_accc bool ;
_cdge bool ;_agdd int ;_eaca int ;_eaaea int ;_ddcgc int ;_ebd bool ;_gebeg byte ;);_bdcfc :=8-(_aeegb &7);_bfe :=_gbgc [_bdcfc ];_ffbg :=_dcgda .RowStride *_acaa +(_aeegb >>3);if _gbbf < _bdcfc {_accc =true ;_bfe &=_efcb [8-_bdcfc +_gbbf ];};if !_accc {_agdd =(_gbbf -_bdcfc )>>3;
if _agdd !=0{_cdge =true ;_eaca =_ffbg +1;};};_eaaea =(_aeegb +_gbbf )&7;if !(_accc ||_eaaea ==0){_ebd =true ;_gebeg =_efcb [_eaaea ];_ddcgc =_ffbg +1+_agdd ;};var _ddeff ,_fdcbd int ;switch _eadd {case PixClr :for _ddeff =0;_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ffbg ]=_cegd (_dcgda .Data [_ffbg ],0x0,_bfe );
_ffbg +=_dcgda .RowStride ;};if _cdge {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{for _fdcbd =0;_fdcbd < _agdd ;_fdcbd ++{_dcgda .Data [_eaca +_fdcbd ]=0x0;};_eaca +=_dcgda .RowStride ;};};if _ebd {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ddcgc ]=_cegd (_dcgda .Data [_ddcgc ],0x0,_gebeg );
_ddcgc +=_dcgda .RowStride ;};};case PixSet :for _ddeff =0;_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ffbg ]=_cegd (_dcgda .Data [_ffbg ],0xff,_bfe );_ffbg +=_dcgda .RowStride ;};if _cdge {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{for _fdcbd =0;_fdcbd < _agdd ;
_fdcbd ++{_dcgda .Data [_eaca +_fdcbd ]=0xff;};_eaca +=_dcgda .RowStride ;};};if _ebd {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ddcgc ]=_cegd (_dcgda .Data [_ddcgc ],0xff,_gebeg );_ddcgc +=_dcgda .RowStride ;};};case PixNotDst :for _ddeff =0;
_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ffbg ]=_cegd (_dcgda .Data [_ffbg ],^_dcgda .Data [_ffbg ],_bfe );_ffbg +=_dcgda .RowStride ;};if _cdge {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{for _fdcbd =0;_fdcbd < _agdd ;_fdcbd ++{_dcgda .Data [_eaca +_fdcbd ]=^(_dcgda .Data [_eaca +_fdcbd ]);
};_eaca +=_dcgda .RowStride ;};};if _ebd {for _ddeff =0;_ddeff < _gbab ;_ddeff ++{_dcgda .Data [_ddcgc ]=_cegd (_dcgda .Data [_ddcgc ],^_dcgda .Data [_ddcgc ],_gebeg );_ddcgc +=_dcgda .RowStride ;};};};};type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func (_cdab Points )Size ()int {return len (_cdab )};func TstImageBitmapInverseData ()[]byte {_afcc :=_adfd .Copy ();_afcc .InverseData ();return _afcc .Data ;};func (_gdbga *Bitmaps )HeightSorter ()func (_bddbg ,_geecg int )bool {return func (_fagg ,_bbagb int )bool {_cdgg :=_gdbga .Values [_fagg ].Height < _gdbga .Values [_bbagb ].Height ;
_ce .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_gdbga .Values [_fagg ].Height ,_gdbga .Values [_bbagb ].Height ,_cdgg );return _cdgg ;};};func (_dfgd *ClassedPoints )ySortFunction ()func (_gbbg int ,_fgebc int )bool {return func (_egad ,_ffde int )bool {return _dfgd .YAtIndex (_egad )< _dfgd .YAtIndex (_ffde )};
};func (_fcbd *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _dcbeg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _fcbd ==nil {return nil ,_cb .Error (_dcbeg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_fcbd .Values )-1{return nil ,_cb .Errorf (_dcbeg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fcbd .Values [i ],nil ;};func (_edaeg *ClassedPoints )SortByY (){_edaeg ._dage =_edaeg .ySortFunction ();
_ff .Sort (_edaeg )};const _adea =5000;func (_gggg *Boxes )Add (box *_fc .Rectangle )error {if _gggg ==nil {return _cb .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_gggg =append (*_gggg ,box );return nil ;};func TstGetScaledSymbol (t *_b .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_cbbaf ,_bcge :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_f .NoError (t ,_bcge );return _cbbaf ;};func _bfgce (_ggdd ,_debea *Bitmap ,_eded *Selection )(*Bitmap ,error ){const _agef ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _gagb error ;if _ggdd ,_gagb =_eecda (_ggdd ,_debea ,_eded );
_gagb !=nil {return nil ,_gagb ;};_dfdfc ,_gagb :=_caa (nil ,_debea ,_eded );if _gagb !=nil {return nil ,_cb .Wrap (_gagb ,_agef ,"");};if _ ,_gagb =_dcgg (_ggdd ,_dfdfc ,_eded );_gagb !=nil {return nil ,_cb .Wrap (_gagb ,_agef ,"");};return _ggdd ,nil ;
};func _abda (_cfffc *Bitmap ,_bgc ...MorphProcess )(_dcgb *Bitmap ,_fggdc error ){const _accfad ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _cfffc ==nil {return nil ,_cb .Error (_accfad ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_bgc )==0{return nil ,_cb .Error (_accfad ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _fggdc =_edd (_bgc ...);
_fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};var _fbac ,_cecca ,_feac int ;_dcgb =_cfffc .Copy ();for _ ,_begc :=range _bgc {switch _begc .Operation {case MopDilation :_fbac ,_cecca =_begc .getWidthHeight ();_dcgb ,_fggdc =DilateBrick (nil ,_dcgb ,_fbac ,_cecca );
if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};case MopErosion :_fbac ,_cecca =_begc .getWidthHeight ();_dcgb ,_fggdc =_cabfb (nil ,_dcgb ,_fbac ,_cecca );if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};case MopOpening :_fbac ,_cecca =_begc .getWidthHeight ();
_dcgb ,_fggdc =_dcgd (nil ,_dcgb ,_fbac ,_cecca );if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};case MopClosing :_fbac ,_cecca =_begc .getWidthHeight ();_dcgb ,_fggdc =_bbdf (nil ,_dcgb ,_fbac ,_cecca );if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");
};case MopRankBinaryReduction :_dcgb ,_fggdc =_fcf (_dcgb ,_begc .Arguments ...);if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};case MopReplicativeBinaryExpansion :_dcgb ,_fggdc =_ccbd (_dcgb ,_begc .Arguments [0]);if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");
};case MopAddBorder :_feac =_begc .Arguments [0];_dcgb ,_fggdc =_dcgb .AddBorder (_feac ,0);if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"");};default:return nil ,_cb .Error (_accfad ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _feac > 0{_dcgb ,_fggdc =_dcgb .RemoveBorder (_feac );if _fggdc !=nil {return nil ,_cb .Wrap (_fggdc ,_accfad ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _dcgb ,nil ;};func TstESymbol (t *_b .T ,scale ...int )*Bitmap {_fdga ,_aefda :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_f .NoError (t ,_aefda );return TstGetScaledSymbol (t ,_fdga ,scale ...);};func (_bbgf MorphProcess )getWidthHeight ()(_bcbgd ,_bacg int ){return _bbgf .Arguments [0],_bbgf .Arguments [1];};func _febf (_ebe *Bitmap ,_cffb ,_gabg int ,_acda ,_cagf int ,_aaeg RasterOperator ,_ccdgc *Bitmap ,_fdba ,_aceab int )error {var _adda ,_cfga ,_fbgb ,_gadf int ;
if _cffb < 0{_fdba -=_cffb ;_acda +=_cffb ;_cffb =0;};if _fdba < 0{_cffb -=_fdba ;_acda +=_fdba ;_fdba =0;};_adda =_cffb +_acda -_ebe .Width ;if _adda > 0{_acda -=_adda ;};_cfga =_fdba +_acda -_ccdgc .Width ;if _cfga > 0{_acda -=_cfga ;};if _gabg < 0{_aceab -=_gabg ;
_cagf +=_gabg ;_gabg =0;};if _aceab < 0{_gabg -=_aceab ;_cagf +=_aceab ;_aceab =0;};_fbgb =_gabg +_cagf -_ebe .Height ;if _fbgb > 0{_cagf -=_fbgb ;};_gadf =_aceab +_cagf -_ccdgc .Height ;if _gadf > 0{_cagf -=_gadf ;};if _acda <=0||_cagf <=0{return nil ;
};var _beb error ;switch {case _cffb &7==0&&_fdba &7==0:_beb =_ccad (_ebe ,_cffb ,_gabg ,_acda ,_cagf ,_aaeg ,_ccdgc ,_fdba ,_aceab );case _cffb &7==_fdba &7:_beb =_bcbf (_ebe ,_cffb ,_gabg ,_acda ,_cagf ,_aaeg ,_ccdgc ,_fdba ,_aceab );default:_beb =_ageeb (_ebe ,_cffb ,_gabg ,_acda ,_cagf ,_aaeg ,_ccdgc ,_fdba ,_aceab );
};if _beb !=nil {return _cb .Wrap (_beb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_dafe *Bitmap )setPadBits (_ddgga int ){_fgge :=8-_dafe .Width %8;if _fgge ==8{return ;};_acff :=_dafe .Width /8;_cdc :=_gbgc [_fgge ];
if _ddgga ==0{_cdc ^=_cdc ;};var _cbgf int ;for _bbg :=0;_bbg < _dafe .Height ;_bbg ++{_cbgf =_bbg *_dafe .RowStride +_acff ;if _ddgga ==0{_dafe .Data [_cbgf ]&=_cdc ;}else {_dafe .Data [_cbgf ]|=_cdc ;};};};func _fggd (_eefg ,_cdd ,_afb *Bitmap )(*Bitmap ,error ){const _bgae ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _cdd ==nil {return nil ,_cb .Error (_bgae ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _afb ==nil {return nil ,_cb .Error (_bgae ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eefg ==_afb {return nil ,_cb .Error (_bgae ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_cdd .SizesEqual (_afb ){_ce .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bgae );
};var _gacc error ;if _eefg ,_gacc =_bfgc (_eefg ,_cdd );_gacc !=nil {return nil ,_cb .Wrap (_gacc ,_bgae ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gacc =_eefg .RasterOperation (0,0,_eefg .Width ,_eefg .Height ,PixSrcXorDst ,_afb ,0,0);
_gacc !=nil {return nil ,_cb .Wrap (_gacc ,_bgae ,"");};return _eefg ,nil ;};func TstRSymbol (t *_b .T ,scale ...int )*Bitmap {_cffbb ,_bfgg :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_bfgg );return TstGetScaledSymbol (t ,_cffbb ,scale ...);
};func (_dfcg *Bitmap )addPadBits ()(_bceg error ){const _eab ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_fbb :=_dfcg .Width %8;if _fbb ==0{return nil ;};_bcec :=_dfcg .Width /8;_eagd :=_a .NewReader (_dfcg .Data );
_bace :=make ([]byte ,_dfcg .Height *_dfcg .RowStride );_dae :=_a .NewWriterMSB (_bace );_cgbdf :=make ([]byte ,_bcec );var (_cff int ;_bdf uint64 ;);for _cff =0;_cff < _dfcg .Height ;_cff ++{if _ ,_bceg =_eagd .Read (_cgbdf );_bceg !=nil {return _cb .Wrap (_bceg ,_eab ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");
};if _ ,_bceg =_dae .Write (_cgbdf );_bceg !=nil {return _cb .Wrap (_bceg ,_eab ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _bdf ,_bceg =_eagd .ReadBits (byte (_fbb ));_bceg !=nil {return _cb .Wrap (_bceg ,_eab ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");
};if _bceg =_dae .WriteByte (byte (_bdf )<<uint (8-_fbb ));_bceg !=nil {return _cb .Wrap (_bceg ,_eab ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_dfcg .Data =_dae .Data ();return nil ;};func (_bbc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_bdae :=_bbc .GetByteIndex (x ,y );
if _bdae > len (_bbc .Data )-1{return _cb .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_bdae );};_bdcd :=_bbc .GetBitOffset (x );
_aefa :=uint (7-_bdcd );_eed :=_bbc .Data [_bdae ];var _fbfd byte ;if pixel ==1{_fbfd =_eed |(pixel &0x01<<_aefa );}else {_fbfd =_eed &^(1<<_aefa );};_bbc .Data [_bdae ]=_fbfd ;return nil ;};func TstWordBitmapWithSpaces (t *_b .T ,scale ...int )*Bitmap {_cgbg :=1;
if len (scale )> 0{_cgbg =scale [0];};_addg :=3;_dacdc :=9+7+15+2*_addg +2*_addg ;_dcda :=5+_addg +5+2*_addg ;_gbbd :=New (_dacdc *_cgbg ,_dcda *_cgbg );_fegb :=&Bitmaps {};var _eece *int ;_addg *=_cgbg ;_gaaa :=_addg ;_eece =&_gaaa ;_cecgc :=_addg ;_cedfcd :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,_addg );_cedfcd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,_addg );_cedfcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,0);*_eece =_addg ;_cecgc =5*_cgbg +_addg ;_cedfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,_addg );
_cedfcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );
_cedfcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,1*_cgbg );_cedfcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fegb ,_cedfcd ,_eece ,_cecgc ,0);TstWriteSymbols (t ,_fegb ,_gbbd );return _gbbd ;};func (_gbgf *ClassedPoints )SortByX (){_gbgf ._dage =_gbgf .xSortFunction ();
_ff .Sort (_gbgf )};func (_cgc *Bitmaps )SortByWidth (){_cfabc :=(*byWidth )(_cgc );_ff .Sort (_cfabc )};func (_adc *Bitmap )setEightPartlyBytes (_cafa ,_fggg int ,_gegf uint64 )(_bcg error ){var (_bage byte ;_bcbg int ;);const _eae ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _acfd :=1;_acfd <=_fggg ;_acfd ++{_bcbg =64-_acfd *8;_bage =byte (_gegf >>uint (_bcbg )&0xff);_ce .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bage ,_cafa ,_cafa +_acfd -1,_fggg ,_bcbg );
if _bcg =_adc .SetByte (_cafa +_acfd -1,_bage );_bcg !=nil {return _cb .Wrap (_bcg ,_eae ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_facc :=_adc .RowStride *8-_adc .Width ;if _facc ==0{return nil ;};_bcbg -=8;_bage =byte (_gegf >>uint (_bcbg )&0xff)<<uint (_facc );
if _bcg =_adc .SetByte (_cafa +_fggg ,_bage );_bcg !=nil {return _cb .Wrap (_bcg ,_eae ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bfgc (d ,s )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_ddeaf :=_beca (h ,w ,"");
_ddeaf .setOrigin (cy ,cx );var _cede ,_gcbd int ;for _cede =0;_cede < h ;_cede ++{for _gcbd =0;_gcbd < w ;_gcbd ++{_ddeaf .Data [_cede ][_gcbd ]=tp ;};};return _ddeaf ;};func (_ddeb *byHeight )Len ()int {return len (_ddeb .Values )};func TstWSymbol (t *_b .T ,scale ...int )*Bitmap {_fbddd ,_fgce :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_f .NoError (t ,_fgce );return TstGetScaledSymbol (t ,_fbddd ,scale ...);};func _caa (_ebgd *Bitmap ,_afbg *Bitmap ,_dfdab *Selection )(*Bitmap ,error ){var (_ecae *Bitmap ;_fbe error ;);_ebgd ,_fbe =_edgg (_ebgd ,_afbg ,_dfdab ,&_ecae );if _fbe !=nil {return nil ,_fbe ;
};if _fbe =_ebgd .clearAll ();_fbe !=nil {return nil ,_fbe ;};var _fbcf SelectionValue ;for _abfc :=0;_abfc < _dfdab .Height ;_abfc ++{for _bagg :=0;_bagg < _dfdab .Width ;_bagg ++{_fbcf =_dfdab .Data [_abfc ][_bagg ];if _fbcf ==SelHit {if _fbe =_ebgd .RasterOperation (_bagg -_dfdab .Cx ,_abfc -_dfdab .Cy ,_afbg .Width ,_afbg .Height ,PixSrcOrDst ,_ecae ,0,0);
_fbe !=nil {return nil ,_fbe ;};};};};return _ebgd ,nil ;};func (_efca *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _efca .addBorderGeneral (left ,right ,top ,bot ,val );};func MakePixelSumTab8 ()[]int {return _fgbff ()};
func _eeab (_fffb ,_cgbf *Bitmap ,_fgdd ,_dbfad int )(_fcec error ){const _egea ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dggf ,_caaa ,_dgab ,_ddaf int ;_dagg ,_ffcf ,_gbgcc ,_cfcc ,_beda ,_aedf ,_caca byte ;
);for _dggf =0;_dggf < _fgdd ;_dggf ++{_dgab =_dggf *_fffb .RowStride ;_ddaf =_dggf *_cgbf .RowStride ;for _caaa =0;_caaa < _dbfad ;_caaa ++{_dagg ,_fcec =_fffb .GetByte (_dgab +_caaa );if _fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_ffcf ,_fcec =_cgbf .GetByte (_ddaf +_caaa );if _fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dggf > 0{_gbgcc ,_fcec =_fffb .GetByte (_dgab -_fffb .RowStride +_caaa );if _fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0069\u0020\u003e \u0030");
};_dagg |=_gbgcc ;};if _caaa > 0{_cfcc ,_fcec =_fffb .GetByte (_dgab +_caaa -1);if _fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u006a\u0020\u003e \u0030");};_dagg |=_cfcc <<7;};_dagg &=_ffcf ;if _dagg ==0||(^_dagg )==0{if _fcec =_fffb .SetByte (_dgab +_caaa ,_dagg );
_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_caca =_dagg ;_dagg =(_dagg |(_dagg >>1)|(_dagg <<1))&_ffcf ;if (_dagg ^_caca )==0{if _fcec =_fffb .SetByte (_dgab +_caaa ,_dagg );
_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dggf =_fgdd -1;_dggf >=0;_dggf --{_dgab =_dggf *_fffb .RowStride ;_ddaf =_dggf *_cgbf .RowStride ;
for _caaa =_dbfad -1;_caaa >=0;_caaa --{if _dagg ,_fcec =_fffb .GetByte (_dgab +_caaa );_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _ffcf ,_fcec =_cgbf .GetByte (_ddaf +_caaa );
_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dggf < _fgdd -1{if _beda ,_fcec =_fffb .GetByte (_dgab +_fffb .RowStride +_caaa );_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_dagg |=_beda ;};if _caaa < _dbfad -1{if _aedf ,_fcec =_fffb .GetByte (_dgab +_caaa +1);_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_dagg |=_aedf >>7;
};_dagg &=_ffcf ;if _dagg ==0||(^_dagg )==0{if _fcec =_fffb .SetByte (_dgab +_caaa ,_dagg );_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_caca =_dagg ;_dagg =(_dagg |(_dagg >>1)|(_dagg <<1))&_ffcf ;if (_dagg ^_caca )==0{if _fcec =_fffb .SetByte (_dgab +_caaa ,_dagg );_fcec !=nil {return _cb .Wrap (_fcec ,_egea ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func Extract (roi _fc .Rectangle ,src *Bitmap )(*Bitmap ,error ){_cfa :=New (roi .Dx (),roi .Dy ());_dceg :=roi .Min .X &0x07;_efged :=8-_dceg ;_ebacb :=uint (8-_cfa .Width &0x07);_cacc :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_cafb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dcbe :=_cfa .RowStride ==_cafb +1-_cacc ;var _aaeda int ;for _feed :=roi .Min .Y ;_feed < roi .Max .Y ;_feed ++{_dbcf :=_cacc ;_bccf :=_aaeda ;switch {case _cacc ==_cafb :_cga ,_ggcg :=src .GetByte (_dbcf );
if _ggcg !=nil {return nil ,_ggcg ;};_cga <<=uint (_dceg );_ggcg =_cfa .SetByte (_bccf ,_edcg (_ebacb ,_cga ));if _ggcg !=nil {return nil ,_ggcg ;};case _dceg ==0:for _ecg :=_cacc ;_ecg <=_cafb ;_ecg ++{_bagb ,_cbgd :=src .GetByte (_dbcf );if _cbgd !=nil {return nil ,_cbgd ;
};_dbcf ++;if _ecg ==_cafb &&_dcbe {_bagb =_edcg (_ebacb ,_bagb );};_cbgd =_cfa .SetByte (_bccf ,_bagb );if _cbgd !=nil {return nil ,_cbgd ;};_bccf ++;};default:_dcff :=_ecd (src ,_cfa ,uint (_dceg ),uint (_efged ),_ebacb ,_cacc ,_cafb ,_dcbe ,_dbcf ,_bccf );
if _dcff !=nil {return nil ,_dcff ;};};_cacc +=src .RowStride ;_cafb +=src .RowStride ;_aaeda +=_cfa .RowStride ;};return _cfa ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fc .Rectangle ;};func (_egff *Bitmap )setAll ()error {_aceb :=_cfef (_egff ,0,0,_egff .Width ,_egff .Height ,PixSet ,nil ,0,0);
if _aceb !=nil {return _cb .Wrap (_aceb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func TstNSymbol (t *_b .T ,scale ...int )*Bitmap {_bbecc ,_afeaa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_f .NoError (t ,_afeaa );return TstGetScaledSymbol (t ,_bbecc ,scale ...);
};func _cba (_gf ,_da *Bitmap )(_ec error ){const _ef ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_gfb :=_da .RowStride ;_cc :=_gf .RowStride ;var (_ca byte ;_ge uint16 ;_eb ,_efe ,_ea ,_de ,_eba int ;
);for _ea =0;_ea < _da .Height ;_ea ++{_eb =_ea *_gfb ;_efe =2*_ea *_cc ;for _de =0;_de < _gfb ;_de ++{_ca =_da .Data [_eb +_de ];_ge =_abga [_ca ];_eba =_efe +_de *2;if _gf .RowStride !=_da .RowStride *2&&(_de +1)*2> _gf .RowStride {_ec =_gf .SetByte (_eba ,byte (_ge >>8));
}else {_ec =_gf .setTwoBytes (_eba ,_ge );};if _ec !=nil {return _cb .Wrap (_ec ,_ef ,"");};};for _de =0;_de < _cc ;_de ++{_eba =_efe +_cc +_de ;_ca =_gf .Data [_efe +_de ];if _ec =_gf .SetByte (_eba ,_ca );_ec !=nil {return _cb .Wrapf (_ec ,_ef ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_efe +_de ,_efe +_cc +_de );
};};};return nil ;};func (_ecfdc *BitmapsArray )GetBox (i int )(*_fc .Rectangle ,error ){const _gcbeb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _ecfdc ==nil {return nil ,_cb .Error (_gcbeb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ecfdc .Boxes )-1{return nil ,_cb .Errorf (_gcbeb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ecfdc .Boxes [i ],nil ;};type Color int ;
func TstAddSymbol (t *_b .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_cdea :=_fc .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_cdea );*x +=sym .Width +space ;};func (_eaf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _eaf .Copy (),nil ;
};_cebe ,_fbd :=_eaf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _fbd !=nil {return nil ,_cb .Wrap (_fbd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _cebe ,nil ;};var _gbag =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func TstCSymbol (t *_b .T )*Bitmap {t .Helper ();_cedg :=New (6,6);_f .NoError (t ,_cedg .SetPixel (1,0,1));_f .NoError (t ,_cedg .SetPixel (2,0,1));_f .NoError (t ,_cedg .SetPixel (3,0,1));_f .NoError (t ,_cedg .SetPixel (4,0,1));_f .NoError (t ,_cedg .SetPixel (0,1,1));
_f .NoError (t ,_cedg .SetPixel (5,1,1));_f .NoError (t ,_cedg .SetPixel (0,2,1));_f .NoError (t ,_cedg .SetPixel (0,3,1));_f .NoError (t ,_cedg .SetPixel (0,4,1));_f .NoError (t ,_cedg .SetPixel (5,4,1));_f .NoError (t ,_cedg .SetPixel (1,5,1));_f .NoError (t ,_cedg .SetPixel (2,5,1));
_f .NoError (t ,_cedg .SetPixel (3,5,1));_f .NoError (t ,_cedg .SetPixel (4,5,1));return _cedg ;};func (_cgfg *Bitmaps )CountPixels ()*_d .NumSlice {_bcbge :=&_d .NumSlice {};for _ ,_baea :=range _cgfg .Values {_bcbge .AddInt (_baea .CountPixels ());};
return _bcbge ;};func (_gfafe *Bitmaps )SortByHeight (){_bgcf :=(*byHeight )(_gfafe );_ff .Sort (_bgcf )};func _ecd (_geeg ,_ffb *Bitmap ,_bdbg ,_ecbf ,_cea uint ,_bae ,_fbda int ,_ega bool ,_cbgb ,_ecgd int )error {for _dafc :=_bae ;_dafc < _fbda ;_dafc ++{if _cbgb +1< len (_geeg .Data ){_fdd :=_dafc +1==_fbda ;
_egab ,_dcdc :=_geeg .GetByte (_cbgb );if _dcdc !=nil {return _dcdc ;};_cbgb ++;_egab <<=_bdbg ;_gcba ,_dcdc :=_geeg .GetByte (_cbgb );if _dcdc !=nil {return _dcdc ;};_gcba >>=_ecbf ;_ffe :=_egab |_gcba ;if _fdd &&!_ega {_ffe =_edcg (_cea ,_ffe );};_dcdc =_ffb .SetByte (_ecgd ,_ffe );
if _dcdc !=nil {return _dcdc ;};_ecgd ++;if _fdd &&_ega {_cead ,_acd :=_geeg .GetByte (_cbgb );if _acd !=nil {return _acd ;};_cead <<=_bdbg ;_ffe =_edcg (_cea ,_cead );if _acd =_ffb .SetByte (_ecgd ,_ffe );_acd !=nil {return _acd ;};};continue ;};_ebbf ,_ddb :=_geeg .GetByte (_cbgb );
if _ddb !=nil {_ce .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cbgb ,_ddb );return _ddb ;};_ebbf <<=_bdbg ;
_cbgb ++;_ddb =_ffb .SetByte (_ecgd ,_ebbf );if _ddb !=nil {return _ddb ;};_ecgd ++;};return nil ;};func (_gbef *Bitmaps )selectByIndicator (_gffe *_d .NumSlice )(_bfdc *Bitmaps ,_cabe error ){const _baad ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gbef ==nil {return nil ,_cb .Error (_baad ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gffe ==nil {return nil ,_cb .Error (_baad ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_gbef .Values )==0{return _gbef ,nil ;};if len (*_gffe )!=len (_gbef .Values ){return nil ,_cb .Errorf (_baad ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gffe ),len (_gbef .Values ));
};var _efgf ,_adaa ,_bfae int ;for _adaa =0;_adaa < len (*_gffe );_adaa ++{if _efgf ,_cabe =_gffe .GetInt (_adaa );_cabe !=nil {return nil ,_cb .Wrap (_cabe ,_baad ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _efgf ==1{_bfae ++;
};};if _bfae ==len (_gbef .Values ){return _gbef ,nil ;};_bfdc =&Bitmaps {};_ffea :=len (_gbef .Values )==len (_gbef .Boxes );for _adaa =0;_adaa < len (*_gffe );_adaa ++{if _efgf =int ((*_gffe )[_adaa ]);_efgf ==0{continue ;};_bfdc .Values =append (_bfdc .Values ,_gbef .Values [_adaa ]);
if _ffea {_bfdc .Boxes =append (_bfdc .Boxes ,_gbef .Boxes [_adaa ]);};};return _bfdc ,nil ;};type Component int ;func _edba (_bacf ,_dgad int )int {if _bacf > _dgad {return _bacf ;};return _dgad ;};func _dcgg (_fecab ,_aege *Bitmap ,_ddeg *Selection )(*Bitmap ,error ){const _egdg ="\u0065\u0072\u006fd\u0065";
var (_cffc error ;_eecd *Bitmap ;);_fecab ,_cffc =_edgg (_fecab ,_aege ,_ddeg ,&_eecd );if _cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"");};if _cffc =_fecab .setAll ();_cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"");};var _bagf SelectionValue ;
for _gcdf :=0;_gcdf < _ddeg .Height ;_gcdf ++{for _fffae :=0;_fffae < _ddeg .Width ;_fffae ++{_bagf =_ddeg .Data [_gcdf ][_fffae ];if _bagf ==SelHit {_cffc =_cfef (_fecab ,_ddeg .Cx -_fffae ,_ddeg .Cy -_gcdf ,_aege .Width ,_aege .Height ,PixSrcAndDst ,_eecd ,0,0);
if _cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fecab ,nil ;};_aedc ,_ggdedc ,_cabf ,_afegd :=_ddeg .findMaxTranslations ();if _aedc > 0{if _cffc =_fecab .RasterOperation (0,0,_aedc ,_aege .Height ,PixClr ,nil ,0,0);
_cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _cabf > 0{if _cffc =_fecab .RasterOperation (_aege .Width -_cabf ,0,_cabf ,_aege .Height ,PixClr ,nil ,0,0);_cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _ggdedc > 0{if _cffc =_fecab .RasterOperation (0,0,_aege .Width ,_ggdedc ,PixClr ,nil ,0,0);_cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _afegd > 0{if _cffc =_fecab .RasterOperation (0,_aege .Height -_afegd ,_aege .Width ,_afegd ,PixClr ,nil ,0,0);
_cffc !=nil {return nil ,_cb .Wrap (_cffc ,_egdg ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fecab ,nil ;};func (_cgg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dcfb *Boxes ,_effc error ){const _feec ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _cgg ==nil {return nil ,_cb .Error (_feec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_cgg )==0{return _cgg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_cb .Errorf (_feec ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_cb .Errorf (_feec ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_agff :=_cgg .makeSizeIndicator (width ,height ,tp ,relation );_gdab ,_effc :=_cgg .selectWithIndicator (_agff );if _effc !=nil {return nil ,_cb .Wrap (_effc ,_feec ,"");};return _gdab ,nil ;};func TstOSymbol (t *_b .T ,scale ...int )*Bitmap {_ccfc ,_gadee :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_f .NoError (t ,_gadee );return TstGetScaledSymbol (t ,_ccfc ,scale ...);};func _bac (_bff ,_baa *Bitmap ,_gdc int ,_bacb []byte ,_gba int )(_bdd error ){const _facb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_bdbb ,_dbe ,_cdb ,_cee ,_bedf ,_aec ,_ccd ,_dgac int ;_dfa ,_cca ,_fgff ,_eac uint32 ;_fee ,_fdb byte ;_ebf uint16 ;);_bdde :=make ([]byte ,4);_gde :=make ([]byte ,4);for _cdb =0;_cdb < _bff .Height -1;_cdb ,_cee =_cdb +2,_cee +1{_bdbb =_cdb *_bff .RowStride ;
_dbe =_cee *_baa .RowStride ;for _bedf ,_aec =0,0;_bedf < _gba ;_bedf ,_aec =_bedf +4,_aec +1{for _ccd =0;_ccd < 4;_ccd ++{_dgac =_bdbb +_bedf +_ccd ;if _dgac <=len (_bff .Data )-1&&_dgac < _bdbb +_bff .RowStride {_bdde [_ccd ]=_bff .Data [_dgac ];}else {_bdde [_ccd ]=0x00;
};_dgac =_bdbb +_bff .RowStride +_bedf +_ccd ;if _dgac <=len (_bff .Data )-1&&_dgac < _bdbb +(2*_bff .RowStride ){_gde [_ccd ]=_bff .Data [_dgac ];}else {_gde [_ccd ]=0x00;};};_dfa =_db .BigEndian .Uint32 (_bdde );_cca =_db .BigEndian .Uint32 (_gde );_fgff =_dfa &_cca ;
_fgff |=_fgff <<1;_eac =_dfa |_cca ;_eac &=_eac <<1;_cca =_fgff &_eac ;_cca &=0xaaaaaaaa;_dfa =_cca |(_cca <<7);_fee =byte (_dfa >>24);_fdb =byte ((_dfa >>8)&0xff);_dgac =_dbe +_aec ;if _dgac +1==len (_baa .Data )-1||_dgac +1>=_dbe +_baa .RowStride {if _bdd =_baa .SetByte (_dgac ,_bacb [_fee ]);
_bdd !=nil {return _cb .Wrapf (_bdd ,_facb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dgac );};}else {_ebf =(uint16 (_bacb [_fee ])<<8)|uint16 (_bacb [_fdb ]);if _bdd =_baa .setTwoBytes (_dgac ,_ebf );_bdd !=nil {return _cb .Wrapf (_bdd ,_facb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgac );
};_aec ++;};};};return nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func init (){const _fbcde ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_egaeg =New (50,40);var _cfad error ;_egaeg ,_cfad =_egaeg .AddBorder (2,1);if _cfad !=nil {panic (_cb .Wrap (_cfad ,_fbcde ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_adfd ,_cfad =NewWithData (50,22,_gbag );if _cfad !=nil {panic (_cb .Wrap (_cfad ,_fbcde ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_cfag *ClassedPoints )Swap (i ,j int ){_cfag .IntSlice [i ],_cfag .IntSlice [j ]=_cfag .IntSlice [j ],_cfag .IntSlice [i ];};func (_fbge *BitmapsArray )AddBitmaps (bm *Bitmaps ){_fbge .Values =append (_fbge .Values ,bm )};func _dfg (_abg ,_abc *Bitmap ,_gfa int ,_gffb []byte ,_efge int )(_bba error ){const _dgge ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_ffdb ,_ddf ,_ced ,_gcg ,_faa ,_cbaf ,_dadce ,_ddg int ;_dgd ,_agf uint32 ;_ffg ,_ac byte ;_ebaf uint16 ;);_ed :=make ([]byte ,4);_fda :=make ([]byte ,4);for _ced =0;_ced < _abg .Height -1;_ced ,_gcg =_ced +2,_gcg +1{_ffdb =_ced *_abg .RowStride ;
_ddf =_gcg *_abc .RowStride ;for _faa ,_cbaf =0,0;_faa < _efge ;_faa ,_cbaf =_faa +4,_cbaf +1{for _dadce =0;_dadce < 4;_dadce ++{_ddg =_ffdb +_faa +_dadce ;if _ddg <=len (_abg .Data )-1&&_ddg < _ffdb +_abg .RowStride {_ed [_dadce ]=_abg .Data [_ddg ];}else {_ed [_dadce ]=0x00;
};_ddg =_ffdb +_abg .RowStride +_faa +_dadce ;if _ddg <=len (_abg .Data )-1&&_ddg < _ffdb +(2*_abg .RowStride ){_fda [_dadce ]=_abg .Data [_ddg ];}else {_fda [_dadce ]=0x00;};};_dgd =_db .BigEndian .Uint32 (_ed );_agf =_db .BigEndian .Uint32 (_fda );_agf |=_dgd ;
_agf |=_agf <<1;_agf &=0xaaaaaaaa;_dgd =_agf |(_agf <<7);_ffg =byte (_dgd >>24);_ac =byte ((_dgd >>8)&0xff);_ddg =_ddf +_cbaf ;if _ddg +1==len (_abc .Data )-1||_ddg +1>=_ddf +_abc .RowStride {_abc .Data [_ddg ]=_gffb [_ffg ];}else {_ebaf =(uint16 (_gffb [_ffg ])<<8)|uint16 (_gffb [_ac ]);
if _bba =_abc .setTwoBytes (_ddg ,_ebaf );_bba !=nil {return _cb .Wrapf (_bba ,_dgge ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ddg );
};_cbaf ++;};};};return nil ;};func _cda ()(_bgfg []byte ){_bgfg =make ([]byte ,256);for _bge :=0;_bge < 256;_bge ++{_gfc :=byte (_bge );_bgfg [_gfc ]=(_gfc &0x01)|((_gfc &0x04)>>1)|((_gfc &0x10)>>2)|((_gfc &0x40)>>3)|((_gfc &0x02)<<3)|((_gfc &0x08)<<2)|((_gfc &0x20)<<1)|(_gfc &0x80);
};return _bgfg ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _dgbb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_cb .Error (_dgbb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_cb .Error (_dgbb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_cb .Error (_dgbb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_cb .Error (_dgbb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_cb .Error (_dgbb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_dadcf ,_bdaa :=bm1 .Width ,bm1 .Height ;_gbbcd ,_dgeg :=bm2 .Width ,bm2 .Height ;if _d .Abs (_dadcf -_gbbcd )> maxDiffW {return false ,nil ;};if _d .Abs (_bdaa -_dgeg )> maxDiffH {return false ,nil ;};_gccf :=int (delX +_d .Sign (delX )*0.5);_agcb :=int (delY +_d .Sign (delY )*0.5);
_fdgb :=int (_bf .Ceil (_bf .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_abb :=bm2 .RowStride ;_ddcf :=_edba (_agcb ,0);_gbaf :=_bffg (_dgeg +_agcb ,_bdaa );_dbafc :=bm1 .RowStride *_ddcf ;_ccbg :=bm2 .RowStride *(_ddcf -_agcb );
var _edbd int ;if _gbaf <=_bdaa {_edbd =downcount [_gbaf -1];};_cab :=_edba (_gccf ,0);_cdbf :=_bffg (_gbbcd +_gccf ,_dadcf );var _dgdb ,_dfab int ;if _gccf >=8{_dgdb =_gccf >>3;_dbafc +=_dgdb ;_cab -=_dgdb <<3;_cdbf -=_dgdb <<3;_gccf &=7;}else if _gccf <=-8{_dfab =-((_gccf +7)>>3);
_ccbg +=_dfab ;_abb -=_dfab ;_gccf +=_dfab <<3;};var (_aebg ,_ebbfb ,_cggb int ;_aada ,_dbcfb ,_fcad byte ;);if _cab >=_cdbf ||_ddcf >=_gbaf {return false ,nil ;};_bbgcc :=(_cdbf +7)>>3;switch {case _gccf ==0:for _ebbfb =_ddcf ;_ebbfb < _gbaf ;_ebbfb ,_dbafc ,_ccbg =_ebbfb +1,_dbafc +bm1 .RowStride ,_ccbg +bm2 .RowStride {for _cggb =0;
_cggb < _bbgcc ;_cggb ++{_aada =bm1 .Data [_dbafc +_cggb ]&bm2 .Data [_ccbg +_cggb ];_aebg +=tab [_aada ];};if _aebg >=_fdgb {return true ,nil ;};if _dbd :=_aebg +downcount [_ebbfb ]-_edbd ;_dbd < _fdgb {return false ,nil ;};};case _gccf > 0&&_abb < _bbgcc :for _ebbfb =_ddcf ;
_ebbfb < _gbaf ;_ebbfb ,_dbafc ,_ccbg =_ebbfb +1,_dbafc +bm1 .RowStride ,_ccbg +bm2 .RowStride {_dbcfb =bm1 .Data [_dbafc ];_fcad =bm2 .Data [_ccbg ]>>uint (_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];for _cggb =1;_cggb < _abb ;_cggb ++{_dbcfb =bm1 .Data [_dbafc +_cggb ];
_fcad =bm2 .Data [_ccbg +_cggb ]>>uint (_gccf )|bm2 .Data [_ccbg +_cggb -1]<<uint (8-_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];};_dbcfb =bm1 .Data [_dbafc +_cggb ];_fcad =bm2 .Data [_ccbg +_cggb -1]<<uint (8-_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];
if _aebg >=_fdgb {return true ,nil ;}else if _aebg +downcount [_ebbfb ]-_edbd < _fdgb {return false ,nil ;};};case _gccf > 0&&_abb >=_bbgcc :for _ebbfb =_ddcf ;_ebbfb < _gbaf ;_ebbfb ,_dbafc ,_ccbg =_ebbfb +1,_dbafc +bm1 .RowStride ,_ccbg +bm2 .RowStride {_dbcfb =bm1 .Data [_dbafc ];
_fcad =bm2 .Data [_ccbg ]>>uint (_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];for _cggb =1;_cggb < _bbgcc ;_cggb ++{_dbcfb =bm1 .Data [_dbafc +_cggb ];_fcad =bm2 .Data [_ccbg +_cggb ]>>uint (_gccf );_fcad |=bm2 .Data [_ccbg +_cggb -1]<<uint (8-_gccf );
_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];};if _aebg >=_fdgb {return true ,nil ;}else if _aebg +downcount [_ebbfb ]-_edbd < _fdgb {return false ,nil ;};};case _bbgcc < _abb :for _ebbfb =_ddcf ;_ebbfb < _gbaf ;_ebbfb ,_dbafc ,_ccbg =_ebbfb +1,_dbafc +bm1 .RowStride ,_ccbg +bm2 .RowStride {for _cggb =0;
_cggb < _bbgcc ;_cggb ++{_dbcfb =bm1 .Data [_dbafc +_cggb ];_fcad =bm2 .Data [_ccbg +_cggb ]<<uint (-_gccf );_fcad |=bm2 .Data [_ccbg +_cggb +1]>>uint (8+_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];};if _aebg >=_fdgb {return true ,nil ;}else if _dbdd :=_aebg +downcount [_ebbfb ]-_edbd ;
_dbdd < _fdgb {return false ,nil ;};};case _abb >=_bbgcc :for _ebbfb =_ddcf ;_ebbfb < _gbaf ;_ebbfb ,_dbafc ,_ccbg =_ebbfb +1,_dbafc +bm1 .RowStride ,_ccbg +bm2 .RowStride {for _cggb =0;_cggb < _bbgcc ;_cggb ++{_dbcfb =bm1 .Data [_dbafc +_cggb ];_fcad =bm2 .Data [_ccbg +_cggb ]<<uint (-_gccf );
_fcad |=bm2 .Data [_ccbg +_cggb +1]>>uint (8+_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];};_dbcfb =bm1 .Data [_dbafc +_cggb ];_fcad =bm2 .Data [_ccbg +_cggb ]<<uint (-_gccf );_aada =_dbcfb &_fcad ;_aebg +=tab [_aada ];if _aebg >=_fdgb {return true ,nil ;
}else if _aebg +downcount [_ebbfb ]-_edbd < _fdgb {return false ,nil ;};};};_gcd :=float32 (_aebg )*float32 (_aebg )/(float32 (area1 )*float32 (area2 ));if _gcd >=scoreThreshold {_ce .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_aebg ,_fdgb ,_gcd ,scoreThreshold );
};return false ,nil ;};func _fgda (_ddgdf ,_add byte ,_ebab CombinationOperator )byte {switch _ebab {case CmbOpOr :return _add |_ddgdf ;case CmbOpAnd :return _add &_ddgdf ;case CmbOpXor :return _add ^_ddgdf ;case CmbOpXNor :return ^(_add ^_ddgdf );case CmbOpNot :return ^(_add );
default:return _add ;};};func (_ggbc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_efff *Boxes ,_dcfe error ){const _decf ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _ggbc ==nil {return nil ,_cb .Error (_decf ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_cb .Error (_decf ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _efff ,_dcfe =_ggbc .connComponentsBB (connectivity );
_dcfe !=nil {return nil ,_cb .Wrap (_dcfe ,_decf ,"");};}else {if _efff ,_dcfe =_ggbc .connComponentsBitmapsBB (bms ,connectivity );_dcfe !=nil {return nil ,_cb .Wrap (_dcfe ,_decf ,"");};};return _efff ,nil ;};func (_egfc *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _cddff ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _egfc ==nil {return nil ,_cb .Error (_cddff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_egfc .Values )-1{return nil ,_cb .Errorf (_cddff ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _egfc .Values [i ],nil ;};func MakePixelCentroidTab8 ()[]int {return _ceea ()};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _gbge ,_aebde int ;_dffe :=src .RowStride -1;if x < 0{_aebde =-x ;x =0;}else if x +src .Width > dst .Width {_dffe -=src .Width +x -dst .Width ;
};if y < 0{_gbge =-y ;y =0;_aebde +=src .RowStride ;_dffe +=src .RowStride ;}else if y +src .Height > dst .Height {_gbge =src .Height +y -dst .Height ;};var (_cafc int ;_dgb error ;);_agab :=x &0x07;_dabc :=8-_agab ;_fbbg :=src .Width &0x07;_adg :=_dabc -_fbbg ;
_fceb :=_dabc &0x07!=0;_ceef :=src .Width <=((_dffe -_aebde )<<3)+_dabc ;_bbeg :=dst .GetByteIndex (x ,y );_cgfc :=_gbge +dst .Height ;if src .Height > _cgfc {_cafc =_cgfc ;}else {_cafc =src .Height ;};switch {case !_fceb :_dgb =_ggg (src ,dst ,_gbge ,_cafc ,_bbeg ,_aebde ,_dffe ,op );
case _ceef :_dgb =_ecc (src ,dst ,_gbge ,_cafc ,_bbeg ,_aebde ,_dffe ,_adg ,_agab ,_dabc ,op );default:_dgb =_dfdf (src ,dst ,_gbge ,_cafc ,_bbeg ,_aebde ,_dffe ,_adg ,_agab ,_dabc ,op ,_fbbg );};return _dgb ;};func (_adeg *Bitmap )clearAll ()error {return _adeg .RasterOperation (0,0,_adeg .Width ,_adeg .Height ,PixClr ,nil ,0,0);
};type SizeSelection int ;func (_cgacb *Bitmaps )AddBitmap (bm *Bitmap ){_cgacb .Values =append (_cgacb .Values ,bm )};func (_ffbb Points )XSorter ()func (_fbaf ,_fcdb int )bool {return func (_abdb ,_fgbd int )bool {return _ffbb [_abdb ].X < _ffbb [_fgbd ].X };
};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_bcda MorphProcess )verify (_aba int ,_faaf ,_defbf *int )error {const _dgddg ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _bcda .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bcda .Arguments )!=2{return _cb .Error (_dgddg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_daaa ,_ggaa :=_bcda .getWidthHeight ();if _daaa <=0||_ggaa <=0{return _cb .Error (_dgddg ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_accfa :=len (_bcda .Arguments );*_faaf +=_accfa ;if _accfa < 1||_accfa > 4{return _cb .Error (_dgddg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _defg :=0;_defg < _accfa ;_defg ++{if _bcda .Arguments [_defg ]< 1||_bcda .Arguments [_defg ]> 4{return _cb .Error (_dgddg ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_bcda .Arguments )==0{return _cb .Error (_dgddg ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bdbf :=_bcda .Arguments [0];if _bdbf !=2&&_bdbf !=4&&_bdbf !=8{return _cb .Error (_dgddg ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_faaf -=_cefg [_bdbf /4];case MopAddBorder :if len (_bcda .Arguments )==0{return _cb .Error (_dgddg ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaee :=_bcda .Arguments [0];if _aba > 0{return _cb .Error (_dgddg ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gaee < 1{return _cb .Error (_dgddg ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_defbf =_gaee ;};return nil ;};type BoundaryCondition int ;
type fillSegment struct{_bbadc int ;_gfcd int ;_agccb int ;_cabfc int ;};func (_adada Points )Get (i int )(Point ,error ){if i > len (_adada )-1{return Point {},_cb .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _adada [i ],nil ;};func (_feff *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cfef (_feff ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func NewClassedPoints (points *Points ,classes _d .IntSlice )(*ClassedPoints ,error ){const _edbc ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_cb .Error (_edbc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_cb .Error (_edbc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_gcbe :=&ClassedPoints {Points :points ,IntSlice :classes };if _feef :=_gcbe .validateIntSlice ();_feef !=nil {return nil ,_cb .Wrap (_feef ,_edbc ,"");};return _gcbe ,nil ;};func (_caga *Bitmap )connComponentsBitmapsBB (_ggf *Bitmaps ,_cfb int )(_addb *Boxes ,_gdbg error ){const _ggge ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cfb !=4&&_cfb !=8{return nil ,_cb .Error (_ggge ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ggf ==nil {return nil ,_cb .Error (_ggge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_ggf .Values )> 0{return nil ,_cb .Error (_ggge ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _caga .Zero (){return &Boxes {},nil ;};
var (_ceeg ,_fdcbb ,_bcegf ,_dece *Bitmap ;);_caga .setPadBits (0);if _ceeg ,_gdbg =_bfgc (nil ,_caga );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062\u006d\u0031");};if _fdcbb ,_gdbg =_bfgc (nil ,_caga );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062\u006d\u0032");
};_feaf :=&_d .Stack {};_feaf .Aux =&_d .Stack {};_addb =&Boxes {};var (_ccbf ,_ecfc int ;_bdec _fc .Point ;_gbbc bool ;_cedfc *_fc .Rectangle ;);for {if _bdec ,_gbbc ,_gdbg =_ceeg .nextOnPixel (_ccbf ,_ecfc );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"");
};if !_gbbc {break ;};if _cedfc ,_gdbg =_bbafa (_ceeg ,_feaf ,_bdec .X ,_bdec .Y ,_cfb );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"");};if _gdbg =_addb .Add (_cedfc );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"");};if _bcegf ,_gdbg =_ceeg .clipRectangle (_cedfc ,nil );
_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062\u006d\u0033");};if _dece ,_gdbg =_fdcbb .clipRectangle (_cedfc ,nil );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062\u006d\u0034");};if _ ,_gdbg =_fggd (_bcegf ,_bcegf ,_dece );_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _gdbg =_fdcbb .RasterOperation (_cedfc .Min .X ,_cedfc .Min .Y ,_cedfc .Dx (),_cedfc .Dy (),PixSrcXorDst ,_bcegf ,0,0);_gdbg !=nil {return nil ,_cb .Wrap (_gdbg ,_ggge ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_ggf .AddBitmap (_bcegf );_ccbf =_bdec .X ;_ecfc =_bdec .Y ;};_ggf .Boxes =*_addb ;return _addb ,nil ;};