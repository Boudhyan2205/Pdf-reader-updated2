//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_fb "fmt";_ec "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_c "io";_e "math";_fe "strings";);func (_ba *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_dd int ;_ecd =_ee [stats .cx ()][0];_ddc =int32 (stats .cx ()););defer func (){_ba ._a ++}();_ba ._ce -=_ecd ;if (_ba ._ece >>16)< uint64 (_ecd ){_dd =_ba .lpsExchange (stats ,_ddc ,_ecd );if _dgb :=_ba .renormalize ();_dgb !=nil {return 0,_dgb ;};}else {_ba ._ece -=uint64 (_ecd )<<16;if (_ba ._ce &0x8000)==0{_dd =_ba .mpsExchange (stats ,_ddc );if _ae :=_ba .renormalize ();_ae !=nil {return 0,_ae ;};}else {_dd =int (stats .getMps ());};};return _dd ,nil ;};func New (r _d .StreamReader )(*Decoder ,error ){_cf :=&Decoder {_b :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _ea :=_cf .init ();_ea !=nil {return nil ,_ea ;};return _cf ,nil ;};var (_ee =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_ecea *DecoderStats )Overwrite (dNew *DecoderStats ){for _faa :=0;_faa < len (_ecea ._bae );_faa ++{_ecea ._bae [_faa ]=dNew ._bae [_faa ];_ecea ._dgg [_faa ]=dNew ._dgg [_faa ];};};func (_eg *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bc ,_efe int32 ;_g ,_cg ,_bd int ;_ed error ;);if stats ==nil {stats =NewStats (512,1);};_eg ._ef =1;_cg ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};if _g ==1{_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};if _g ==1{_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};if _g ==1{_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};if _g ==1{_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};if _g ==1{_bd =32;_efe =4436;}else {_bd =12;_efe =340;};}else {_bd =8;_efe =84;};}else {_bd =6;_efe =20;};}else {_bd =4;_efe =4;};}else {_bd =2;_efe =0;};for _ff :=0;_ff < _bd ;_ff ++{_g ,_ed =_eg .decodeIntBit (stats );if _ed !=nil {return 0,_ed ;};_bc =(_bc <<1)|int32 (_g );};_bc +=_efe ;if _cg ==0{return _bc ,nil ;}else if _cg ==1&&_bc > 0{return -_bc ,nil ;};return _e .MaxInt32 ,nil ;};func (_fae *DecoderStats )SetIndex (index int32 ){_fae ._ffc =index };func (_fa *Decoder )init ()error {_fa ._bf =_fa ._b .StreamPosition ();_da ,_ceb :=_fa ._b .ReadByte ();if _ceb !=nil {_ec .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ceb );return _ceb ;};_fa ._fbe =_da ;_fa ._ece =uint64 (_da )<<16;if _ceb =_fa .readByte ();_ceb !=nil {return _ceb ;};_fa ._ece <<=7;_fa ._dg -=7;_fa ._ce =0x8000;_fa ._a ++;return nil ;};func (_fd *Decoder )lpsExchange (_aga *DecoderStats ,_cgc int32 ,_ffe uint32 )int {_eadd :=_aga .getMps ();if _fd ._ce < _ffe {_aga .setEntry (int (_ee [_cgc ][1]));_fd ._ce =_ffe ;return int (_eadd );};if _ee [_cgc ][3]==1{_aga .toggleMps ();};_aga .setEntry (int (_ee [_cgc ][2]));_fd ._ce =_ffe ;return int (1-_eadd );};func (_ecec *Decoder )readByte ()error {if _ecec ._b .StreamPosition ()> _ecec ._bf {if _ ,_gc :=_ecec ._b .Seek (-1,_c .SeekCurrent );_gc !=nil {return _gc ;};};_dce ,_daf :=_ecec ._b .ReadByte ();if _daf !=nil {return _daf ;};_ecec ._fbe =_dce ;if _ecec ._fbe ==0xFF{_ced ,_faf :=_ecec ._b .ReadByte ();if _faf !=nil {return _faf ;};if _ced > 0x8F{_ecec ._ece +=0xFF00;_ecec ._dg =8;if _ ,_ead :=_ecec ._b .Seek (-2,_c .SeekCurrent );_ead !=nil {return _ead ;};}else {_ecec ._ece +=uint64 (_ced )<<9;_ecec ._dg =7;};}else {_dce ,_daf =_ecec ._b .ReadByte ();if _daf !=nil {return _daf ;};_ecec ._fbe =_dce ;_ecec ._ece +=uint64 (_ecec ._fbe )<<8;_ecec ._dg =8;};_ecec ._ece &=0xFFFFFFFFFF;return nil ;};func (_bab *Decoder )decodeIntBit (_afe *DecoderStats )(int ,error ){_afe .SetIndex (int32 (_bab ._ef ));_agc ,_gb :=_bab .DecodeBit (_afe );if _gb !=nil {_ec .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gb );return _agc ,_gb ;};if _bab ._ef < 256{_bab ._ef =((_bab ._ef <<uint64 (1))|int64 (_agc ))&0x1ff;}else {_bab ._ef =(((_bab ._ef <<uint64 (1)|int64 (_agc ))&511)|256)&0x1ff;};return _agc ,nil ;};func (_cef *DecoderStats )cx ()byte {return _cef ._bae [_cef ._ffc ]};func (_aa *DecoderStats )Copy ()*DecoderStats {_bac :=&DecoderStats {_gcf :_aa ._gcf ,_bae :make ([]byte ,_aa ._gcf )};for _ecc :=0;_ecc < len (_aa ._bae );_ecc ++{_bac ._bae [_ecc ]=_aa ._bae [_ecc ];};return _bac ;};func (_db *DecoderStats )Reset (){for _de :=0;_de < len (_db ._bae );_de ++{_db ._bae [_de ]=0;_db ._dgg [_de ]=0;};};type DecoderStats struct{_ffc int32 ;_gcf int32 ;_bae []byte ;_dgg []byte ;};func (_fag *DecoderStats )toggleMps (){_fag ._dgg [_fag ._ffc ]^=1};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_b _d .StreamReader ;_fbe uint8 ;_ece uint64 ;_ce uint32 ;_ef int64 ;_dg int32 ;_a int32 ;_bf int64 ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ffc :index ,_gcf :contextSize ,_bae :make ([]byte ,contextSize ),_dgg :make ([]byte ,contextSize )};};func (_eef *Decoder )renormalize ()error {for {if _eef ._dg ==0{if _ag :=_eef .readByte ();_ag !=nil {return _ag ;};};_eef ._ce <<=1;_eef ._ece <<=1;_eef ._dg --;if (_eef ._ce &0x8000)!=0{break ;};};_eef ._ece &=0xffffffff;return nil ;};func (_dad *DecoderStats )String ()string {_ded :=&_fe .Builder {};_ded .WriteString (_fb .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dad ._bae )));for _afg ,_dge :=range _dad ._bae {if _dge !=0{_ded .WriteString (_fb .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_afg ,_dge ));};};return _ded .String ();};func (_bda *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_bda ._ef =1;var _dc uint64 ;for _dc =0;_dc < codeLen ;_dc ++{stats .SetIndex (int32 (_bda ._ef ));_df ,_gg :=_bda .DecodeBit (stats );if _gg !=nil {return 0,_gg ;};_bda ._ef =(_bda ._ef <<1)|int64 (_df );};_fec :=_bda ._ef -(1<<codeLen );return _fec ,nil ;};func (_bde *DecoderStats )getMps ()byte {return _bde ._dgg [_bde ._ffc ]};func (_cge *DecoderStats )setEntry (_cb int ){_ca :=byte (_cb &0x7f);_cge ._bae [_cge ._ffc ]=_ca };func (_gca *Decoder )mpsExchange (_bff *DecoderStats ,_dcb int32 )int {_aef :=_bff ._dgg [_bff ._ffc ];if _gca ._ce < _ee [_dcb ][0]{if _ee [_dcb ][3]==1{_bff .toggleMps ();};_bff .setEntry (int (_ee [_dcb ][2]));return int (1-_aef );};_bff .setEntry (int (_ee [_dcb ][1]));return int (_aef );};