//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_g "fmt";_a "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_f "io";_fg "strings";);func (_eg *Decoder )readByte ()error {if _eg ._ac .StreamPosition ()> _eg ._eaa {if _ ,_cfb :=_eg ._ac .Seek (-1,_f .SeekCurrent );
_cfb !=nil {return _cfb ;};};_ag ,_cad :=_eg ._ac .ReadByte ();if _cad !=nil {return _cad ;};_eg ._cg =_ag ;if _eg ._cg ==0xFF{_ddd ,_bgd :=_eg ._ac .ReadByte ();if _bgd !=nil {return _bgd ;};if _ddd > 0x8F{_eg ._e +=0xFF00;_eg ._ea =8;if _ ,_da :=_eg ._ac .Seek (-2,_f .SeekCurrent );
_da !=nil {return _da ;};}else {_eg ._e +=uint64 (_ddd )<<9;_eg ._ea =7;};}else {_ag ,_cad =_eg ._ac .ReadByte ();if _cad !=nil {return _cad ;};_eg ._cg =_ag ;_eg ._e +=uint64 (_eg ._cg )<<8;_eg ._ea =8;};_eg ._e &=0xFFFFFFFFFF;return nil ;};func (_ae *DecoderStats )String ()string {_fdc :=&_fg .Builder {};
_fdc .WriteString (_g .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ae ._egb )));for _bdc ,_efg :=range _ae ._egb {if _efg !=0{_fdc .WriteString (_g .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bdc ,_efg ));
};};return _fdc .String ();};func (_cbb *DecoderStats )setEntry (_faa int ){_deg :=byte (_faa &0x7f);_cbb ._egb [_cbb ._gaa ]=_deg };func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_gaa :index ,_acda :contextSize ,_egb :make ([]byte ,contextSize ),_dce :make ([]byte ,contextSize )};
};func (_bc *Decoder )mpsExchange (_cada *DecoderStats ,_gbb int32 )int {_cfc :=_cada ._dce [_cada ._gaa ];if _bc ._cc < _dd [_gbb ][0]{if _dd [_gbb ][3]==1{_cada .toggleMps ();};_cada .setEntry (int (_dd [_gbb ][2]));return int (1-_cfc );};_cada .setEntry (int (_dd [_gbb ][1]));
return int (_cfc );};func (_ca *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_cb int ;_ga =_dd [stats .cx ()][0];_bg =int32 (stats .cx ()););defer func (){_ca ._ad ++}();_ca ._cc -=_ga ;if (_ca ._e >>16)< uint64 (_ga ){_cb =_ca .lpsExchange (stats ,_bg ,_ga );
if _bd :=_ca .renormalize ();_bd !=nil {return 0,_bd ;};}else {_ca ._e -=uint64 (_ga )<<16;if (_ca ._cc &0x8000)==0{_cb =_ca .mpsExchange (stats ,_bg );if _gf :=_ca .renormalize ();_gf !=nil {return 0,_gf ;};}else {_cb =int (stats .getMps ());};};return _cb ,nil ;
};func (_df *Decoder )init ()error {_df ._eaa =_df ._ac .StreamPosition ();_dbe ,_af :=_df ._ac .ReadByte ();if _af !=nil {_a .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_af );
return _af ;};_df ._cg =_dbe ;_df ._e =uint64 (_dbe )<<16;if _af =_df .readByte ();_af !=nil {return _af ;};_df ._e <<=7;_df ._ea -=7;_df ._cc =0x8000;_df ._ad ++;return nil ;};func (_aea *DecoderStats )cx ()byte {return _aea ._egb [_aea ._gaa ]};func (_gbg *DecoderStats )SetIndex (index int32 ){_gbg ._gaa =index };
func (_ec *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_fd ,_db int32 ;_de ,_dc ,_ecd int ;_gd error ;);if stats ==nil {stats =NewStats (512,1);};_ec ._be =1;_dc ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;};_de ,_gd =_ec .decodeIntBit (stats );
if _gd !=nil {return 0,_gd ;};if _de ==1{_de ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;};if _de ==1{_de ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;};if _de ==1{_de ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;
};if _de ==1{_de ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;};if _de ==1{_ecd =32;_db =4436;}else {_ecd =12;_db =340;};}else {_ecd =8;_db =84;};}else {_ecd =6;_db =20;};}else {_ecd =4;_db =4;};}else {_ecd =2;_db =0;};for _bgb :=0;_bgb < _ecd ;
_bgb ++{_de ,_gd =_ec .decodeIntBit (stats );if _gd !=nil {return 0,_gd ;};_fd =(_fd <<1)|int32 (_de );};_fd +=_db ;if _dc ==0{return _fd ,nil ;}else if _dc ==1&&_fd > 0{return -_fd ,nil ;};return 0,_d .ErrOOB ;};func (_dba *DecoderStats )getMps ()byte {return _dba ._dce [_dba ._gaa ]};
func (_egf *Decoder )decodeIntBit (_cge *DecoderStats )(int ,error ){_cge .SetIndex (int32 (_egf ._be ));_gae ,_eee :=_egf .DecodeBit (_cge );if _eee !=nil {_a .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_eee );
return _gae ,_eee ;};if _egf ._be < 256{_egf ._be =((_egf ._be <<uint64 (1))|int64 (_gae ))&0x1ff;}else {_egf ._be =(((_egf ._be <<uint64 (1)|int64 (_gae ))&511)|256)&0x1ff;};return _gae ,nil ;};func (_add *DecoderStats )Copy ()*DecoderStats {_addd :=&DecoderStats {_acda :_add ._acda ,_egb :make ([]byte ,_add ._acda )};
for _ega :=0;_ega < len (_add ._egb );_ega ++{_addd ._egb [_ega ]=_add ._egb [_ega ];};return _addd ;};var (_dd =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_ac _c .StreamReader ;_cg uint8 ;_e uint64 ;_cc uint32 ;_be int64 ;_ea int32 ;_ad int32 ;_eaa int64 ;};func (_ab *Decoder )renormalize ()error {for {if _ab ._ea ==0{if _gfd :=_ab .readByte ();
_gfd !=nil {return _gfd ;};};_ab ._cc <<=1;_ab ._e <<=1;_ab ._ea --;if (_ab ._cc &0x8000)!=0{break ;};};_ab ._e &=0xffffffff;return nil ;};func (_fa *DecoderStats )Overwrite (dNew *DecoderStats ){for _ebf :=0;_ebf < len (_fa ._egb );_ebf ++{_fa ._egb [_ebf ]=dNew ._egb [_ebf ];
_fa ._dce [_ebf ]=dNew ._dce [_ebf ];};};func (_dfe *DecoderStats )Reset (){for _cbg :=0;_cbg < len (_dfe ._egb );_cbg ++{_dfe ._egb [_cbg ]=0;_dfe ._dce [_cbg ]=0;};};func New (r _c .StreamReader )(*Decoder ,error ){_ge :=&Decoder {_ac :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _acc :=_ge .init ();_acc !=nil {return nil ,_acc ;};return _ge ,nil ;};func (_cgf *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_cgf ._be =1;var _gb uint64 ;for _gb =0;_gb < codeLen ;_gb ++{stats .SetIndex (int32 (_cgf ._be ));
_ee ,_acd :=_cgf .DecodeBit (stats );if _acd !=nil {return 0,_acd ;};_cgf ._be =(_cgf ._be <<1)|int64 (_ee );};_cf :=_cgf ._be -(1<<codeLen );return _cf ,nil ;};func (_fda *DecoderStats )toggleMps (){_fda ._dce [_fda ._gaa ]^=1};type DecoderStats struct{_gaa int32 ;
_acda int32 ;_egb []byte ;_dce []byte ;};func (_ff *Decoder )lpsExchange (_ccc *DecoderStats ,_gdg int32 ,_ef uint32 )int {_adf :=_ccc .getMps ();if _ff ._cc < _ef {_ccc .setEntry (int (_dd [_gdg ][1]));_ff ._cc =_ef ;return int (_adf );};if _dd [_gdg ][3]==1{_ccc .toggleMps ();
};_ccc .setEntry (int (_dd [_gdg ][2]));_ff ._cc =_ef ;return int (1-_adf );};