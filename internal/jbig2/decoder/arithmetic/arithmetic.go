//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_b "fmt";_fa "github.com/unidoc/unipdf/v3/common";_dg "github.com/unidoc/unipdf/v3/internal/bitwise";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_f "io";_c "strings";);func (_cgf *DecoderStats )String ()string {_ag :=&_c .Builder {};
_ag .WriteString (_b .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_cgf ._abe )));for _dd ,_dfg :=range _cgf ._abe {if _dfg !=0{_ag .WriteString (_b .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_dd ,_dfg ));
};};return _ag .String ();};func New (r *_dg .Reader )(*Decoder ,error ){_e :=&Decoder {_g :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _cda :=_e .init ();_cda !=nil {return nil ,_cda ;};return _e ,nil ;};type DecoderStats struct{_ace int32 ;
_ga int32 ;_abe []byte ;_fcg []byte ;};func (_acf *DecoderStats )Copy ()*DecoderStats {_cfa :=&DecoderStats {_ga :_acf ._ga ,_abe :make ([]byte ,_acf ._ga )};copy (_cfa ._abe ,_acf ._abe );return _cfa ;};func (_fcfc *DecoderStats )getMps ()byte {return _fcfc ._fcg [_fcfc ._ace ]};
func (_gdg *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ce ,_gb int32 ;_ed ,_fd ,_gbe int ;_cdd error ;);if stats ==nil {stats =NewStats (512,1);};_gdg ._ab =1;_fd ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;};_ed ,_cdd =_gdg .decodeIntBit (stats );
if _cdd !=nil {return 0,_cdd ;};if _ed ==1{_ed ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;};if _ed ==1{_ed ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;};if _ed ==1{_ed ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;
};if _ed ==1{_ed ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;};if _ed ==1{_gbe =32;_gb =4436;}else {_gbe =12;_gb =340;};}else {_gbe =8;_gb =84;};}else {_gbe =6;_gb =20;};}else {_gbe =4;_gb =4;};}else {_gbe =2;_gb =0;};for _gfb :=0;
_gfb < _gbe ;_gfb ++{_ed ,_cdd =_gdg .decodeIntBit (stats );if _cdd !=nil {return 0,_cdd ;};_ce =(_ce <<1)|int32 (_ed );};_ce +=_gb ;if _fd ==0{return _ce ,nil ;}else if _fd ==1&&_ce > 0{return -_ce ,nil ;};return 0,_cf .ErrOOB ;};func (_bfe *Decoder )init ()error {_bfe ._fb =_bfe ._g .AbsolutePosition ();
_cb ,_bd :=_bfe ._g .ReadByte ();if _bd !=nil {_fa .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_bd );return _bd ;};_bfe ._cd =_cb ;_bfe ._gf =uint64 (_cb )<<16;
if _bd =_bfe .readByte ();_bd !=nil {return _bd ;};_bfe ._gf <<=7;_bfe ._gc -=7;_bfe ._bf =0x8000;_bfe ._bfg ++;return nil ;};var (_a =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_acb *DecoderStats )toggleMps (){_acb ._fcg [_acb ._ace ]^=1};func (_aa *DecoderStats )Reset (){for _cag :=0;_cag < len (_aa ._abe );_cag ++{_aa ._abe [_cag ]=0;_aa ._fcg [_cag ]=0;};};func (_faf *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fbc int ;
_ge =_a [stats .cx ()][0];_df =int32 (stats .cx ()););defer func (){_faf ._bfg ++}();_faf ._bf -=_ge ;if (_faf ._gf >>16)< uint64 (_ge ){_fbc =_faf .lpsExchange (stats ,_df ,_ge );if _fc :=_faf .renormalize ();_fc !=nil {return 0,_fc ;};}else {_faf ._gf -=uint64 (_ge )<<16;
if (_faf ._bf &0x8000)==0{_fbc =_faf .mpsExchange (stats ,_df );if _gd :=_faf .renormalize ();_gd !=nil {return 0,_gd ;};}else {_fbc =int (stats .getMps ());};};return _fbc ,nil ;};func (_fe *Decoder )decodeIntBit (_acg *DecoderStats )(int ,error ){_acg .SetIndex (int32 (_fe ._ab ));
_bfa ,_bffg :=_fe .DecodeBit (_acg );if _bffg !=nil {_fa .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bffg );
return _bfa ,_bffg ;};if _fe ._ab < 256{_fe ._ab =((_fe ._ab <<uint64 (1))|int64 (_bfa ))&0x1ff;}else {_fe ._ab =(((_fe ._ab <<uint64 (1)|int64 (_bfa ))&511)|256)&0x1ff;};return _bfa ,nil ;};func (_cab *DecoderStats )SetIndex (index int32 ){_cab ._ace =index };
func (_geb *Decoder )lpsExchange (_fcf *DecoderStats ,_ae int32 ,_bdg uint32 )int {_dfb :=_fcf .getMps ();if _geb ._bf < _bdg {_fcf .setEntry (int (_a [_ae ][1]));_geb ._bf =_bdg ;return int (_dfb );};if _a [_ae ][3]==1{_fcf .toggleMps ();};_fcf .setEntry (int (_a [_ae ][2]));
_geb ._bf =_bdg ;return int (1-_dfb );};func (_gg *Decoder )mpsExchange (_bc *DecoderStats ,_ffb int32 )int {_bdd :=_bc ._fcg [_bc ._ace ];if _gg ._bf < _a [_ffb ][0]{if _a [_ffb ][3]==1{_bc .toggleMps ();};_bc .setEntry (int (_a [_ffb ][2]));return int (1-_bdd );
};_bc .setEntry (int (_a [_ffb ][1]));return int (_bdd );};func (_ea *DecoderStats )setEntry (_fafe int ){_egb :=byte (_fafe &0x7f);_ea ._abe [_ea ._ace ]=_egb };type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_g *_dg .Reader ;
_cd uint8 ;_gf uint64 ;_bf uint32 ;_ab int64 ;_gc int32 ;_bfg int32 ;_fb int64 ;};func (_gbeb *Decoder )renormalize ()error {for {if _gbeb ._gc ==0{if _ad :=_gbeb .readByte ();_ad !=nil {return _ad ;};};_gbeb ._bf <<=1;_gbeb ._gf <<=1;_gbeb ._gc --;if (_gbeb ._bf &0x8000)!=0{break ;
};};_gbeb ._gf &=0xffffffff;return nil ;};func (_fef *DecoderStats )Overwrite (dNew *DecoderStats ){for _fca :=0;_fca < len (_fef ._abe );_fca ++{_fef ._abe [_fca ]=dNew ._abe [_fca ];_fef ._fcg [_fca ]=dNew ._fcg [_fca ];};};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ace :index ,_ga :contextSize ,_abe :make ([]byte ,contextSize ),_fcg :make ([]byte ,contextSize )};
};func (_agd *DecoderStats )cx ()byte {return _agd ._abe [_agd ._ace ]};func (_af *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_af ._ab =1;var _cg uint64 ;for _cg =0;_cg < codeLen ;_cg ++{stats .SetIndex (int32 (_af ._ab ));
_eg ,_fg :=_af .DecodeBit (stats );if _fg !=nil {return 0,_fg ;};_af ._ab =(_af ._ab <<1)|int64 (_eg );};_ac :=_af ._ab -(1<<codeLen );return _ac ,nil ;};func (_ee *Decoder )readByte ()error {if _ee ._g .AbsolutePosition ()> _ee ._fb {if _ ,_geg :=_ee ._g .Seek (-1,_f .SeekCurrent );
_geg !=nil {return _geg ;};};_fga ,_ff :=_ee ._g .ReadByte ();if _ff !=nil {return _ff ;};_ee ._cd =_fga ;if _ee ._cd ==0xFF{_ef ,_bff :=_ee ._g .ReadByte ();if _bff !=nil {return _bff ;};if _ef > 0x8F{_ee ._gf +=0xFF00;_ee ._gc =8;if _ ,_cbg :=_ee ._g .Seek (-2,_f .SeekCurrent );
_cbg !=nil {return _cbg ;};}else {_ee ._gf +=uint64 (_ef )<<9;_ee ._gc =7;};}else {_fga ,_ff =_ee ._g .ReadByte ();if _ff !=nil {return _ff ;};_ee ._cd =_fga ;_ee ._gf +=uint64 (_ee ._cd )<<8;_ee ._gc =8;};_ee ._gf &=0xFFFFFFFFFF;return nil ;};