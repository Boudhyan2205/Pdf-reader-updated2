//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_f "fmt";_g "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/internal/bitwise";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "io";_d "strings";);func (_bfe *DecoderStats )Overwrite (dNew *DecoderStats ){for _dd :=0;
_dd < len (_bfe ._aeg );_dd ++{_bfe ._aeg [_dd ]=dNew ._aeg [_dd ];_bfe ._gef [_dd ]=dNew ._gef [_dd ];};};func (_ffcc *DecoderStats )SetIndex (index int32 ){_ffcc ._cbc =index };func (_gdc *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fb int ;
_ba =_cf [stats .cx ()][0];_ffc =int32 (stats .cx ()););defer func (){_gdc ._bd ++}();_gdc ._b -=_ba ;if (_gdc ._af >>16)< uint64 (_ba ){_fb =_gdc .lpsExchange (stats ,_ffc ,_ba );if _ge :=_gdc .renormalize ();_ge !=nil {return 0,_ge ;};}else {_gdc ._af -=uint64 (_ba )<<16;
if (_gdc ._b &0x8000)==0{_fb =_gdc .mpsExchange (stats ,_ffc );if _fe :=_gdc .renormalize ();_fe !=nil {return 0,_fe ;};}else {_fb =int (stats .getMps ());};};return _fb ,nil ;};func (_aad *DecoderStats )setEntry (_cda int ){_ddb :=byte (_cda &0x7f);_aad ._aeg [_aad ._cbc ]=_ddb };
func (_gge *DecoderStats )Reset (){for _ceb :=0;_ceb < len (_gge ._aeg );_ceb ++{_gge ._aeg [_ceb ]=0;_gge ._gef [_ceb ]=0;};};type DecoderStats struct{_cbc int32 ;_ega int32 ;_aeg []byte ;_gef []byte ;};func (_ca *Decoder )init ()error {_ca ._ad =_ca ._aed .StreamPosition ();
_eg ,_fff :=_ca ._aed .ReadByte ();if _fff !=nil {_g .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_fff );return _fff ;};_ca ._cg =_eg ;_ca ._af =uint64 (_eg )<<16;
if _fff =_ca .readByte ();_fff !=nil {return _fff ;};_ca ._af <<=7;_ca ._gd -=7;_ca ._b =0x8000;_ca ._bd ++;return nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_cbc :index ,_ega :contextSize ,_aeg :make ([]byte ,contextSize ),_gef :make ([]byte ,contextSize )};
};func (_de *Decoder )readByte ()error {if _de ._aed .StreamPosition ()> _de ._ad {if _ ,_ac :=_de ._aed .Seek (-1,_c .SeekCurrent );_ac !=nil {return _ac ;};};_cdg ,_fcc :=_de ._aed .ReadByte ();if _fcc !=nil {return _fcc ;};_de ._cg =_cdg ;if _de ._cg ==0xFF{_fd ,_bb :=_de ._aed .ReadByte ();
if _bb !=nil {return _bb ;};if _fd > 0x8F{_de ._af +=0xFF00;_de ._gd =8;if _ ,_ef :=_de ._aed .Seek (-2,_c .SeekCurrent );_ef !=nil {return _ef ;};}else {_de ._af +=uint64 (_fd )<<9;_de ._gd =7;};}else {_cdg ,_fcc =_de ._aed .ReadByte ();if _fcc !=nil {return _fcc ;
};_de ._cg =_cdg ;_de ._af +=uint64 (_de ._cg )<<8;_de ._gd =8;};_de ._af &=0xFFFFFFFFFF;return nil ;};func (_gff *DecoderStats )cx ()byte {return _gff ._aeg [_gff ._cbc ]};var (_cf =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_aed _ae .StreamReader ;_cg uint8 ;_af uint64 ;_b uint32 ;_ff int64 ;_gd int32 ;_bd int32 ;_ad int64 ;};func (_dee *Decoder )decodeIntBit (_ed *DecoderStats )(int ,error ){_ed .SetIndex (int32 (_dee ._ff ));
_bad ,_fda :=_dee .DecodeBit (_ed );if _fda !=nil {_g .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_fda );
return _bad ,_fda ;};if _dee ._ff < 256{_dee ._ff =((_dee ._ff <<uint64 (1))|int64 (_bad ))&0x1ff;}else {_dee ._ff =(((_dee ._ff <<uint64 (1)|int64 (_bad ))&511)|256)&0x1ff;};return _bad ,nil ;};func (_fbe *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_db ,_ab int32 ;
_cd ,_ce ,_bf int ;_e error ;);if stats ==nil {stats =NewStats (512,1);};_fbe ._ff =1;_ce ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;};_cd ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;};if _cd ==1{_cd ,_e =_fbe .decodeIntBit (stats );
if _e !=nil {return 0,_e ;};if _cd ==1{_cd ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;};if _cd ==1{_cd ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;};if _cd ==1{_cd ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;
};if _cd ==1{_bf =32;_ab =4436;}else {_bf =12;_ab =340;};}else {_bf =8;_ab =84;};}else {_bf =6;_ab =20;};}else {_bf =4;_ab =4;};}else {_bf =2;_ab =0;};for _fg :=0;_fg < _bf ;_fg ++{_cd ,_e =_fbe .decodeIntBit (stats );if _e !=nil {return 0,_e ;};_db =(_db <<1)|int32 (_cd );
};_db +=_ab ;if _ce ==0{return _db ,nil ;}else if _ce ==1&&_db > 0{return -_db ,nil ;};return 0,_gg .ErrOOB ;};func (_bg *Decoder )mpsExchange (_ccf *DecoderStats ,_eb int32 )int {_aaf :=_ccf ._gef [_ccf ._cbc ];if _bg ._b < _cf [_eb ][0]{if _cf [_eb ][3]==1{_ccf .toggleMps ();
};_ccf .setEntry (int (_cf [_eb ][2]));return int (1-_aaf );};_ccf .setEntry (int (_cf [_eb ][1]));return int (_aaf );};func (_egf *Decoder )renormalize ()error {for {if _egf ._gd ==0{if _baa :=_egf .readByte ();_baa !=nil {return _baa ;};};_egf ._b <<=1;
_egf ._af <<=1;_egf ._gd --;if (_egf ._b &0x8000)!=0{break ;};};_egf ._af &=0xffffffff;return nil ;};func New (r _ae .StreamReader )(*Decoder ,error ){_dg :=&Decoder {_aed :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _fc :=_dg .init ();_fc !=nil {return nil ,_fc ;};return _dg ,nil ;};func (_ecg *DecoderStats )String ()string {_ddc :=&_d .Builder {};_ddc .WriteString (_f .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ecg ._aeg )));
for _aab ,_afb :=range _ecg ._aeg {if _afb !=0{_ddc .WriteString (_f .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_aab ,_afb ));};};return _ddc .String ();};func (_ag *DecoderStats )toggleMps (){_ag ._gef [_ag ._cbc ]^=1};
func (_fdb *Decoder )lpsExchange (_cb *DecoderStats ,_gfc int32 ,_edf uint32 )int {_cab :=_cb .getMps ();if _fdb ._b < _edf {_cb .setEntry (int (_cf [_gfc ][1]));_fdb ._b =_edf ;return int (_cab );};if _cf [_gfc ][3]==1{_cb .toggleMps ();};_cb .setEntry (int (_cf [_gfc ][2]));
_fdb ._b =_edf ;return int (1-_cab );};func (_ga *DecoderStats )getMps ()byte {return _ga ._gef [_ga ._cbc ]};func (_fba *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_fba ._ff =1;var _aa uint64 ;for _aa =0;_aa < codeLen ;_aa ++{stats .SetIndex (int32 (_fba ._ff ));
_gee ,_cc :=_fba .DecodeBit (stats );if _cc !=nil {return 0,_cc ;};_fba ._ff =(_fba ._ff <<1)|int64 (_gee );};_ec :=_fba ._ff -(1<<codeLen );return _ec ,nil ;};func (_cdc *DecoderStats )Copy ()*DecoderStats {_gc :=&DecoderStats {_ega :_cdc ._ega ,_aeg :make ([]byte ,_cdc ._ega )};
for _abf :=0;_abf < len (_cdc ._aeg );_abf ++{_gc ._aeg [_abf ]=_cdc ._aeg [_abf ];};return _gc ;};