//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_ag "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/document";_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";
);func (_ed *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _cb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_age ,_bb :=_ed .decodePageImage (pageNumber );
if _bb !=nil {return nil ,_c .Wrap (_bb ,_cb ,"");};return _age ,nil ;};type Parameters struct{UnpaddedData bool ;Color _e .Color ;};func Decode (input []byte ,parameters Parameters ,globals *_cf .Globals )(*Decoder ,error ){_ebd :=_ag .NewReader (input );
_de ,_bd :=_cf .DecodeDocument (_ebd ,globals );if _bd !=nil {return nil ,_bd ;};return &Decoder {_df :_ebd ,_cd :_de ,_cdc :parameters },nil ;};func (_fg *Decoder )decodePageImage (_db int )(_d .Image ,error ){const _ebf ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _db < 0{return nil ,_c .Errorf (_ebf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_db );};if _db > int (_fg ._cd .NumberOfPages ){return nil ,_c .Errorf (_ebf ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_db );
};_ae ,_ge :=_fg ._cd .GetPage (_db );if _ge !=nil {return nil ,_c .Wrap (_ge ,_ebf ,"");};_cdb ,_ge :=_ae .GetBitmap ();if _ge !=nil {return nil ,_c .Wrap (_ge ,_ebf ,"");};_cdb .InverseData ();return _cdb .ToImage (),nil ;};func (_dd *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _dd .decodePage (pageNumber )};
func (_agd *Decoder )PageNumber ()(int ,error ){const _ga ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _agd ._cd ==nil {return 0,_c .Error (_ga ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_agd ._cd .NumberOfPages ),nil ;};func (_g *Decoder )DecodeNextPage ()([]byte ,error ){_g ._b ++;_cde :=_g ._b ;return _g .decodePage (_cde );};func (_dde *Decoder )decodePage (_f int )([]byte ,error ){const _ec ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _f < 0{return nil ,_c .Errorf (_ec ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_f );};if _f > int (_dde ._cd .NumberOfPages ){return nil ,_c .Errorf (_ec ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_f );
};_gag ,_edb :=_dde ._cd .GetPage (_f );if _edb !=nil {return nil ,_c .Wrap (_edb ,_ec ,"");};_eb ,_edb :=_gag .GetBitmap ();if _edb !=nil {return nil ,_c .Wrap (_edb ,_ec ,"");};_eb .InverseData ();if !_dde ._cdc .UnpaddedData {return _eb .Data ,nil ;
};return _eb .GetUnpaddedData ();};type Decoder struct{_df _ag .StreamReader ;_cd *_cf .Document ;_b int ;_cdc Parameters ;};