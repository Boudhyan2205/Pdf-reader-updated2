//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ee "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fd "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_fa *Decoder )PageNumber ()(int ,error ){const _gc ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _fa ._g ==nil {return 0,_ea .Error (_gc ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_fa ._g .NumberOfPages ),nil ;};func (_fdb *Decoder )DecodeNextPage ()([]byte ,error ){_fdb ._fc ++;_ge :=_fdb ._fc ;return _fdb .decodePage (_ge );};func (_fg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fg .decodePage (pageNumber )};
type Decoder struct{_d _f .StreamReader ;_g *_fd .Document ;_fc int ;_eg Parameters ;};func (_b *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _cc ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_ef ,_eeb :=_b .decodePageImage (pageNumber );if _eeb !=nil {return nil ,_ea .Wrap (_eeb ,_cc ,"");};return _ef ,nil ;};func (_df *Decoder )decodePageImage (_bf int )(_c .Image ,error ){const _ccg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _bf < 0{return nil ,_ea .Errorf (_ccg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bf );};if _bf > int (_df ._g .NumberOfPages ){return nil ,_ea .Errorf (_ccg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bf );
};_gg ,_aec :=_df ._g .GetPage (_bf );if _aec !=nil {return nil ,_ea .Wrap (_aec ,_ccg ,"");};_ba ,_aec :=_gg .GetBitmap ();if _aec !=nil {return nil ,_ea .Wrap (_aec ,_ccg ,"");};_ba .InverseData ();return _ba .ToImage (),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_fd .Globals )(*Decoder ,error ){_gb :=_f .NewReader (input );
_ged ,_bef :=_fd .DecodeDocument (_gb ,globals );if _bef !=nil {return nil ,_bef ;};return &Decoder {_d :_gb ,_g :_ged ,_eg :parameters },nil ;};type Parameters struct{UnpaddedData bool ;Color _ee .Color ;};func (_a *Decoder )decodePage (_be int )([]byte ,error ){const _db ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _be < 0{return nil ,_ea .Errorf (_db ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_be );};if _be > int (_a ._g .NumberOfPages ){return nil ,_ea .Errorf (_db ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_be );
};_fdd ,_cg :=_a ._g .GetPage (_be );if _cg !=nil {return nil ,_ea .Wrap (_cg ,_db ,"");};_ae ,_cg :=_fdd .GetBitmap ();if _cg !=nil {return nil ,_ea .Wrap (_cg ,_db ,"");};_ae .InverseData ();if !_a ._eg .UnpaddedData {return _ae .Data ,nil ;};return _ae .GetUnpaddedData ();
};