//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_e "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ed "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ef "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";);func (_fb *Decoder )PageNumber ()(int ,error ){const _fc ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _fb ._cb ==nil {return 0,_ef .Error (_fc ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_fb ._cb .NumberOfPages ),nil ;};func (_ab *Decoder )decodePage (_dge int )([]byte ,error ){const _ce ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _dge < 0{return nil ,_ef .Errorf (_ce ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dge );};if _dge > int (_ab ._cb .NumberOfPages ){return nil ,_ef .Errorf (_ce ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dge );};_g ,_efb :=_ab ._cb .GetPage (_dge );if _efb !=nil {return nil ,_ef .Wrap (_efb ,_ce ,"");};_af ,_efb :=_g .GetBitmap ();if _efb !=nil {return nil ,_ef .Wrap (_efb ,_ce ,"");};_af .InverseData ();if !_ab ._a .UnpaddedData {return _af .Data ,nil ;};return _af .GetUnpaddedData ();};type Decoder struct{_b _e .StreamReader ;_cb *_ed .Document ;_fd int ;_a Parameters ;};func (_ag *Decoder )DecodePageImage (pageNumber int )(_f .Image ,error ){const _ad ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_dg ,_df :=_ag .decodePageImage (pageNumber );if _df !=nil {return nil ,_ef .Wrap (_df ,_ad ,"");};return _dg ,nil ;};func (_cc *Decoder )DecodeNextPage ()([]byte ,error ){_cc ._fd ++;_de :=_cc ._fd ;return _cc .decodePage (_de );};func (_fg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fg .decodePage (pageNumber )};func Decode (input []byte ,parameters Parameters ,globals *_ed .Globals )(*Decoder ,error ){_gf :=_e .NewReader (input );_ded ,_ba :=_ed .DecodeDocument (_gf ,globals );if _ba !=nil {return nil ,_ba ;};return &Decoder {_b :_gf ,_cb :_ded ,_a :parameters },nil ;};func (_ea *Decoder )decodePageImage (_gg int )(_f .Image ,error ){const _edg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _gg < 0{return nil ,_ef .Errorf (_edg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gg );};if _gg > int (_ea ._cb .NumberOfPages ){return nil ,_ef .Errorf (_edg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gg );};_gc ,_gge :=_ea ._cb .GetPage (_gg );if _gge !=nil {return nil ,_ef .Wrap (_gge ,_edg ,"");};_gce ,_gge :=_gc .GetBitmap ();if _gge !=nil {return nil ,_ef .Wrap (_gge ,_edg ,"");};return _gce .ToImage (),nil ;};type Parameters struct{UnpaddedData bool ;Color _c .Color ;};