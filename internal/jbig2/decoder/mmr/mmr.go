//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_e "errors";_f "fmt";_ge "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "io";);func _af (_be ,_bb int )int {if _be > _bb {return _bb ;
};return _be ;};type runData struct{_egf *_g .SubstreamReader ;_dcgc int ;_dbg int ;_eefa int ;_eba []byte ;_gaga int ;_bbb int ;};func (_bfdc *runData )fillBuffer (_egb int )error {_bfdc ._gaga =_egb ;_ ,_fcf :=_bfdc ._egf .Seek (int64 (_egb ),_b .SeekStart );
if _fcf !=nil {if _fcf ==_b .EOF {_ge .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_bfdc ._bbb =-1;}else {return _fcf ;};};if _fcf ==nil {_bfdc ._bbb ,_fcf =_bfdc ._egf .Read (_bfdc ._eba );if _fcf !=nil {if _fcf ==_b .EOF {_ge .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");
_bfdc ._bbb =-1;}else {return _fcf ;};};};if _bfdc ._bbb > -1&&_bfdc ._bbb < 3{for _bfdc ._bbb < 3{_geca ,_cda :=_bfdc ._egf .ReadByte ();if _cda !=nil {if _cda ==_b .EOF {_bfdc ._eba [_bfdc ._bbb ]=0;}else {return _cda ;};}else {_bfdc ._eba [_bfdc ._bbb ]=_geca &0xFF;
};_bfdc ._bbb ++;};};_bfdc ._bbb -=3;if _bfdc ._bbb < 0{_bfdc ._eba =make ([]byte ,len (_bfdc ._eba ));_bfdc ._bbb =len (_bfdc ._eba )-3;};return nil ;};func (_ece *Decoder )fillBitmap (_gfd *_d .Bitmap ,_fcc int ,_fadc []int ,_eecg int )error {var _ceeg byte ;
_aed :=0;_ecb :=_gfd .GetByteIndex (_aed ,_fcc );for _ede :=0;_ede < _eecg ;_ede ++{_fcg :=byte (1);_bfd :=_fadc [_ede ];if (_ede &1)==0{_fcg =0;};for _aed < _bfd {_ceeg =(_ceeg <<1)|_fcg ;_aed ++;if (_aed &7)==0{if _geb :=_gfd .SetByte (_ecb ,_ceeg );
_geb !=nil {return _geb ;};_ecb ++;_ceeg =0;};};};if (_aed &7)!=0{_ceeg <<=uint (8-(_aed &7));if _ceba :=_gfd .SetByte (_ecb ,_ceeg );_ceba !=nil {return _ceba ;};};return nil ;};func (_edd *Decoder )uncompress2d (_efg *runData ,_edc []int ,_eee int ,_eecf []int ,_fabg int )(int ,error ){var (_gfbg int ;
_ega int ;_eea int ;_fag =true ;_dge error ;_baf *code ;);_edc [_eee ]=_fabg ;_edc [_eee +1]=_fabg ;_edc [_eee +2]=_fabg +1;_edc [_eee +3]=_fabg +1;_cae :for _eea < _fabg {_baf ,_dge =_efg .uncompressGetCode (_edd ._bf );if _dge !=nil {return EOL ,nil ;
};if _baf ==nil {_efg ._dcgc ++;break _cae ;};_efg ._dcgc +=_baf ._gec ;switch mmrCode (_baf ._ee ){case _ba :_eea =_edc [_gfbg ];case _aa :_eea =_edc [_gfbg ]+1;case _afb :_eea =_edc [_gfbg ]-1;case _ac :for {var _aab []*code ;if _fag {_aab =_edd ._fc ;
}else {_aab =_edd ._cce ;};_baf ,_dge =_efg .uncompressGetCode (_aab );if _dge !=nil {return 0,_dge ;};if _baf ==nil {break _cae ;};_efg ._dcgc +=_baf ._gec ;if _baf ._ee < 64{if _baf ._ee < 0{_eecf [_ega ]=_eea ;_ega ++;_baf =nil ;break _cae ;};_eea +=_baf ._ee ;
_eecf [_ega ]=_eea ;_ega ++;break ;};_eea +=_baf ._ee ;};_edce :=_eea ;_gef :for {var _cdb []*code ;if !_fag {_cdb =_edd ._fc ;}else {_cdb =_edd ._cce ;};_baf ,_dge =_efg .uncompressGetCode (_cdb );if _dge !=nil {return 0,_dge ;};if _baf ==nil {break _cae ;
};_efg ._dcgc +=_baf ._gec ;if _baf ._ee < 64{if _baf ._ee < 0{_eecf [_ega ]=_eea ;_ega ++;break _cae ;};_eea +=_baf ._ee ;if _eea < _fabg ||_eea !=_edce {_eecf [_ega ]=_eea ;_ega ++;};break _gef ;};_eea +=_baf ._ee ;};for _eea < _fabg &&_edc [_gfbg ]<=_eea {_gfbg +=2;
};continue _cae ;case _bc :_gfbg ++;_eea =_edc [_gfbg ];_gfbg ++;continue _cae ;case _cb :_eea =_edc [_gfbg ]+2;case _dd :_eea =_edc [_gfbg ]-2;case _de :_eea =_edc [_gfbg ]+3;case _cc :_eea =_edc [_gfbg ]-3;default:if _efg ._dcgc ==12&&_baf ._ee ==EOL {_efg ._dcgc =0;
if _ ,_dge =_edd .uncompress1d (_efg ,_edc ,_fabg );_dge !=nil {return 0,_dge ;};_efg ._dcgc ++;if _ ,_dge =_edd .uncompress1d (_efg ,_eecf ,_fabg );_dge !=nil {return 0,_dge ;};_dcg ,_bbf :=_edd .uncompress1d (_efg ,_edc ,_fabg );if _bbf !=nil {return EOF ,_bbf ;
};_efg ._dcgc ++;return _dcg ,nil ;};_eea =_fabg ;continue _cae ;};if _eea <=_fabg {_fag =!_fag ;_eecf [_ega ]=_eea ;_ega ++;if _gfbg > 0{_gfbg --;}else {_gfbg ++;};for _eea < _fabg &&_edc [_gfbg ]<=_eea {_gfbg +=2;};};};if _eecf [_ega ]!=_fabg {_eecf [_ega ]=_fabg ;
};if _baf ==nil {return EOL ,nil ;};return _ega ,nil ;};func New (r _g .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_bef :=&Decoder {_db :width ,_ggb :height };_eg ,_cbe :=_g .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));
if _cbe !=nil {return nil ,_cbe ;};_gge ,_cbe :=_ebg (_eg );if _cbe !=nil {return nil ,_cbe ;};_bef ._gag =_gge ;if _adc :=_bef .initTables ();_adc !=nil {return nil ,_adc ;};return _bef ,nil ;};const (_fcb int =1024<<7;_fgc int =3;_fga uint =24;);func (_ged *Decoder )uncompress1d (_deda *runData ,_gd []int ,_fb int )(int ,error ){var (_faeg =true ;
_edb int ;_eb *code ;_bfg int ;_agc error ;);_faee :for _edb < _fb {_afee :for {if _faeg {_eb ,_agc =_deda .uncompressGetCode (_ged ._fc );if _agc !=nil {return 0,_agc ;};}else {_eb ,_agc =_deda .uncompressGetCode (_ged ._cce );if _agc !=nil {return 0,_agc ;
};};_deda ._dcgc +=_eb ._gec ;if _eb ._ee < 0{break _faee ;};_edb +=_eb ._ee ;if _eb ._ee < 64{_faeg =!_faeg ;_gd [_bfg ]=_edb ;_bfg ++;break _afee ;};};};if _gd [_bfg ]!=_fb {_gd [_bfg ]=_fb ;};_dbb :=EOL ;if _eb !=nil &&_eb ._ee !=EOL {_dbb =_bfg ;};
return _dbb ,nil ;};func (_egg *runData )uncompressGetCode (_ccee []*code )(*code ,error ){return _egg .uncompressGetCodeLittleEndian (_ccee );};const (_bc mmrCode =iota ;_ac ;_ba ;_aa ;_cb ;_de ;_afb ;_dd ;_cc ;_ff ;_ce ;);type code struct{_gec int ;_gg int ;
_ee int ;_da []*code ;_fg bool ;};func (_egd *Decoder )UncompressMMR ()(_dc *_d .Bitmap ,_afe error ){_dc =_d .New (_egd ._db ,_egd ._ggb );_ceb :=make ([]int ,_dc .Width +5);_acd :=make ([]int ,_dc .Width +5);_acd [0]=_dc .Width ;_fae :=1;var _eec int ;
for _cee :=0;_cee < _dc .Height ;_cee ++{_eec ,_afe =_egd .uncompress2d (_egd ._gag ,_acd ,_fae ,_ceb ,_dc .Width );if _afe !=nil {return nil ,_afe ;};if _eec ==EOF {break ;};if _eec > 0{_afe =_egd .fillBitmap (_dc ,_cee ,_ceb ,_eec );if _afe !=nil {return nil ,_afe ;
};};_acd ,_ceb =_ceb ,_acd ;_fae =_eec ;};if _afe =_egd .detectAndSkipEOL ();_afe !=nil {return nil ,_afe ;};_egd ._gag .align ();return _dc ,nil ;};func (_dfa *Decoder )createLittleEndianTable (_egc [][3]int )([]*code ,error ){_ded :=make ([]*code ,_ad +1);
for _cfg :=0;_cfg < len (_egc );_cfg ++{_ddd :=_a (_egc [_cfg ]);if _ddd ._gec <=_ag {_cea :=_ag -_ddd ._gec ;_bde :=_ddd ._gg <<uint (_cea );for _cgf :=(1<<uint (_cea ))-1;_cgf >=0;_cgf --{_fad :=_bde |_cgf ;_ded [_fad ]=_ddd ;};}else {_ec :=_ddd ._gg >>uint (_ddd ._gec -_ag );
if _ded [_ec ]==nil {var _eef =_a ([3]int {});_eef ._da =make ([]*code ,_cg +1);_ded [_ec ]=_eef ;};if _ddd ._gec <=_ag +_ae {_dg :=_ag +_ae -_ddd ._gec ;_gfb :=(_ddd ._gg <<uint (_dg ))&_cg ;_ded [_ec ]._fg =true ;for _cd :=(1<<uint (_dg ))-1;_cd >=0;
_cd --{_ded [_ec ]._da [_gfb |_cd ]=_ddd ;};}else {return nil ,_e .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _ded ,nil ;};func (_ggbd *runData )uncompressGetCodeLittleEndian (_bg []*code )(*code ,error ){_cdf ,_bcc :=_ggbd .uncompressGetNextCodeLittleEndian ();if _bcc !=nil {_ge .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_bcc );
return nil ,_bcc ;};_cdf &=0xffffff;_dce :=_cdf >>(_fga -_ag );_faf :=_bg [_dce ];if _faf !=nil &&_faf ._fg {_dce =(_cdf >>(_fga -_ag -_ae ))&_cg ;_faf =_faf ._da [_dce ];};return _faf ,nil ;};func _fa (_gf ,_ga int )int {if _gf < _ga {return _ga ;};return _gf ;
};func (_agf *Decoder )detectAndSkipEOL ()error {for {_fab ,_ed :=_agf ._gag .uncompressGetCode (_agf ._bf );if _ed !=nil {return _ed ;};if _fab !=nil &&_fab ._ee ==EOL {_agf ._gag ._dcgc +=_fab ._gec ;}else {return nil ;};};};type Decoder struct{_db ,_ggb int ;
_gag *runData ;_fc []*code ;_cce []*code ;_bf []*code ;};func (_egde *runData )align (){_egde ._dcgc =((_egde ._dcgc +7)>>3)<<3};func (_bd *code )String ()string {return _f .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bd ._gec ,_bd ._gg ,_bd ._ee );
};func _a (_df [3]int )*code {return &code {_gec :_df [0],_gg :_df [1],_ee :_df [2]}};func _ebg (_deg *_g .SubstreamReader )(*runData ,error ){_ccg :=&runData {_egf :_deg ,_dcgc :0,_dbg :1};_dddf :=_af (_fa (_fgc ,int (_deg .Length ())),_fcb );_ccg ._eba =make ([]byte ,_dddf );
if _fbc :=_ccg .fillBuffer (0);_fbc !=nil {if _fbc ==_b .EOF {_ccg ._eba =make ([]byte ,10);_ge .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fbc );}else {return nil ,_fbc ;};};return _ccg ,nil ;
};func (_ef *Decoder )initTables ()(_ffe error ){if _ef ._fc ==nil {_ef ._fc ,_ffe =_ef .createLittleEndianTable (_gff );if _ffe !=nil {return ;};_ef ._cce ,_ffe =_ef .createLittleEndianTable (_cf );if _ffe !=nil {return ;};_ef ._bf ,_ffe =_ef .createLittleEndianTable (_bbc );
if _ffe !=nil {return ;};};return nil ;};func (_abc *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_cgff :=_abc ._dcgc -_abc ._dbg ;if _cgff < 0||_cgff > 24{_bee :=(_abc ._dcgc >>3)-_abc ._gaga ;if _bee >=_abc ._bbb {_bee +=_abc ._gaga ;if _fd :=_abc .fillBuffer (_bee );
_fd !=nil {return 0,_fd ;};_bee -=_abc ._gaga ;};_ggg :=(uint32 (_abc ._eba [_bee ]&0xFF)<<16)|(uint32 (_abc ._eba [_bee +1]&0xFF)<<8)|(uint32 (_abc ._eba [_bee +2]&0xFF));_eeea :=uint32 (_abc ._dcgc &7);_ggg <<=_eeea ;_abc ._eefa =int (_ggg );}else {_aaa :=_abc ._dbg &7;
_gea :=7-_aaa ;if _cgff <=_gea {_abc ._eefa <<=uint (_cgff );}else {_fccd :=(_abc ._dbg >>3)+3-_abc ._gaga ;if _fccd >=_abc ._bbb {_fccd +=_abc ._gaga ;if _eceb :=_abc .fillBuffer (_fccd );_eceb !=nil {return 0,_eceb ;};_fccd -=_abc ._gaga ;};_aaa =8-_aaa ;
for {_abc ._eefa <<=uint (_aaa );_abc ._eefa |=int (uint (_abc ._eba [_fccd ])&0xFF);_cgff -=_aaa ;_fccd ++;_aaa =8;if !(_cgff >=8){break ;};};_abc ._eefa <<=uint (_cgff );};};_abc ._dbg =_abc ._dcgc ;return _abc ._eefa ,nil ;};var (_bbc =[][3]int {{4,0x1,int (_bc )},{3,0x1,int (_ac )},{1,0x1,int (_ba )},{3,0x3,int (_aa )},{6,0x3,int (_cb )},{7,0x3,int (_de )},{3,0x2,int (_afb )},{6,0x2,int (_dd )},{7,0x2,int (_cc )},{10,0xf,int (_ff )},{12,0xf,int (_ce )},{12,0x1,int (EOL )}};
_gff =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_ca },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_ca },{11,0x01,_ca },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_cf =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_ca },{9,0x18,15},{10,0x01,_ca },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_ca },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);type mmrCode int ;const (EOF =-3;_ca =-2;EOL =-1;_ag =8;_ad =(1<<_ag )-1;_ae =5;_cg =(1<<_ae )-1;);