//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_ab "errors";_b "fmt";_d "github.com/unidoc/unipdf/v3/common";_abe "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_a "io";);type mmrCode int ;func _fage (_fbf *_abe .SubstreamReader )(*runData ,error ){_eca :=&runData {_gee :_fbf ,_cbf :0,_dbb :1};_ede :=_gd (_ege (_fdb ,int (_fbf .Length ())),_ced );_eca ._bff =make ([]byte ,_ede );if _fed :=_eca .fillBuffer (0);_fed !=nil {if _fed ==_a .EOF {_eca ._bff =make ([]byte ,10);_d .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fed );}else {return nil ,_fed ;};};return _eca ,nil ;};func (_cb *Decoder )UncompressMMR ()(_ceb *_e .Bitmap ,_ccf error ){_ceb =_e .New (_cb ._dca ,_cb ._ec );_bc :=make ([]int ,_ceb .Width +5);_edg :=make ([]int ,_ceb .Width +5);_edg [0]=_ceb .Width ;_fea :=1;var _ggf int ;for _af :=0;_af < _ceb .Height ;_af ++{_ggf ,_ccf =_cb .uncompress2d (_cb ._dgd ,_edg ,_fea ,_bc ,_ceb .Width );if _ccf !=nil {return nil ,_ccf ;};if _ggf ==EOF {break ;};if _ggf > 0{_ccf =_cb .fillBitmap (_ceb ,_af ,_bc ,_ggf );if _ccf !=nil {return nil ,_ccf ;};};_edg ,_bc =_bc ,_edg ;_fea =_ggf ;};if _ccf =_cb .detectAndSkipEOL ();_ccf !=nil {return nil ,_ccf ;};_cb ._dgd .align ();return _ceb ,nil ;};func (_dbc *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_cf :=_dbc ._cbf -_dbc ._dbb ;if _cf < 0||_cf > 24{_cce :=(_dbc ._cbf >>3)-_dbc ._ceda ;if _cce >=_dbc ._fead {_cce +=_dbc ._ceda ;if _adf :=_dbc .fillBuffer (_cce );_adf !=nil {return 0,_adf ;};_cce -=_dbc ._ceda ;};_cfb :=(uint32 (_dbc ._bff [_cce ]&0xFF)<<16)|(uint32 (_dbc ._bff [_cce +1]&0xFF)<<8)|(uint32 (_dbc ._bff [_cce +2]&0xFF));_adg :=uint32 (_dbc ._cbf &7);_cfb <<=_adg ;_dbc ._ac =int (_cfb );}else {_fcde :=_dbc ._dbb &7;_geeg :=7-_fcde ;if _cf <=_geeg {_dbc ._ac <<=uint (_cf );}else {_dccd :=(_dbc ._dbb >>3)+3-_dbc ._ceda ;if _dccd >=_dbc ._fead {_dccd +=_dbc ._ceda ;if _gaf :=_dbc .fillBuffer (_dccd );_gaf !=nil {return 0,_gaf ;};_dccd -=_dbc ._ceda ;};_fcde =8-_fcde ;for {_dbc ._ac <<=uint (_fcde );_dbc ._ac |=int (uint (_dbc ._bff [_dccd ])&0xFF);_cf -=_fcde ;_dccd ++;_fcde =8;if !(_cf >=8){break ;};};_dbc ._ac <<=uint (_cf );};};_dbc ._dbb =_dbc ._cbf ;return _dbc ._ac ,nil ;};const (EOF =-3;_ebb =-2;EOL =-1;_dc =8;_gc =(1<<_dc )-1;_aa =5;_aec =(1<<_aa )-1;);func _ege (_cg ,_ba int )int {if _cg < _ba {return _ba ;};return _cg ;};func _eg (_bb [3]int )*code {return &code {_g :_bb [0],_eb :_bb [1],_c :_bb [2]}};func (_dda *Decoder )initTables ()(_ea error ){if _dda ._fa ==nil {_dda ._fa ,_ea =_dda .createLittleEndianTable (_bbf );if _ea !=nil {return ;};_dda ._ee ,_ea =_dda .createLittleEndianTable (_da );if _ea !=nil {return ;};_dda ._fb ,_ea =_dda .createLittleEndianTable (_ag );if _ea !=nil {return ;};};return nil ;};func (_fac *runData )fillBuffer (_dad int )error {_fac ._ceda =_dad ;_ ,_ccec :=_fac ._gee .Seek (int64 (_dad ),_a .SeekStart );if _ccec !=nil {if _ccec ==_a .EOF {_d .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_fac ._fead =-1;}else {return _ccec ;};};if _ccec ==nil {_fac ._fead ,_ccec =_fac ._gee .Read (_fac ._bff );if _ccec !=nil {if _ccec ==_a .EOF {_d .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_fac ._fead =-1;}else {return _ccec ;};};};if _fac ._fead > -1&&_fac ._fead < 3{for _fac ._fead < 3{_ebg ,_eff :=_fac ._gee .ReadByte ();if _eff !=nil {if _eff ==_a .EOF {_fac ._bff [_fac ._fead ]=0;}else {return _eff ;};}else {_fac ._bff [_fac ._fead ]=_ebg &0xFF;};_fac ._fead ++;};};_fac ._fead -=3;if _fac ._fead < 0{_fac ._bff =make ([]byte ,len (_fac ._bff ));_fac ._fead =len (_fac ._bff )-3;};return nil ;};const (_ced int =1024<<7;_fdb int =3;_cde uint =24;);func (_agg *runData )uncompressGetCodeLittleEndian (_cge []*code )(*code ,error ){_dcc ,_gb :=_agg .uncompressGetNextCodeLittleEndian ();if _gb !=nil {_d .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_gb );return nil ,_gb ;};_dcc &=0xffffff;_ad :=_dcc >>(_cde -_dc );_abed :=_cge [_ad ];if _abed !=nil &&_abed ._ga {_ad =(_dcc >>(_cde -_dc -_aa ))&_aec ;_abed =_abed ._fc [_ad ];};return _abed ,nil ;};func (_bacd *runData )align (){_bacd ._cbf =((_bacd ._cbf +7)>>3)<<3};func (_gge *Decoder )uncompress2d (_ecc *runData ,_ff []int ,_dgdc int ,_ccc []int ,_baf int )(int ,error ){var (_fcd int ;_fdc int ;_gf int ;_feaf =true ;_fba error ;_fde *code ;);_ff [_dgdc ]=_baf ;_ff [_dgdc +1]=_baf ;_ff [_dgdc +2]=_baf +1;_ff [_dgdc +3]=_baf +1;_ggfa :for _gf < _baf {_fde ,_fba =_ecc .uncompressGetCode (_gge ._fb );if _fba !=nil {return EOL ,nil ;};if _fde ==nil {_ecc ._cbf ++;break _ggfa ;};_ecc ._cbf +=_fde ._g ;switch mmrCode (_fde ._c ){case _cd :_gf =_ff [_fcd ];case _ef :_gf =_ff [_fcd ]+1;case _ge :_gf =_ff [_fcd ]-1;case _baa :_bf :=1;for _bf > 0{var _dgf []*code ;if _feaf {_dgf =_gge ._fa ;}else {_dgf =_gge ._ee ;};_fde ,_fba =_ecc .uncompressGetCode (_dgf );if _fba !=nil {return 0,_fba ;};if _fde ==nil {break _ggfa ;};_ecc ._cbf +=_fde ._g ;if _fde ._c < 64{if _fde ._c < 0{_ccc [_fdc ]=_gf ;_fdc ++;_fde =nil ;break _ggfa ;};_gf +=_fde ._c ;_ccc [_fdc ]=_gf ;_fdc ++;break ;};_gf +=_fde ._c ;};_faa :=_gf ;_dac :=1;_cbg :for _dac > 0{var _cbd []*code ;if !_feaf {_cbd =_gge ._fa ;}else {_cbd =_gge ._ee ;};_fde ,_fba =_ecc .uncompressGetCode (_cbd );if _fba !=nil {return 0,_fba ;};if _fde ==nil {break _ggfa ;};_ecc ._cbf +=_fde ._g ;if _fde ._c < 64{if _fde ._c < 0{_ccc [_fdc ]=_gf ;_fdc ++;break _ggfa ;};_gf +=_fde ._c ;if _gf < _baf ||_gf !=_faa {_ccc [_fdc ]=_gf ;_fdc ++;};break _cbg ;};_gf +=_fde ._c ;};for _gf < _baf &&_ff [_fcd ]<=_gf {_fcd +=2;};continue _ggfa ;case _ce :_fcd ++;_gf =_ff [_fcd ];_fcd ++;continue _ggfa ;case _df :_gf =_ff [_fcd ]+2;case _dfe :_gf =_ff [_fcd ]-2;case _cc :_gf =_ff [_fcd ]+3;case _ae :_gf =_ff [_fcd ]-3;default:if _ecc ._cbf ==12&&_fde ._c ==EOL {_ecc ._cbf =0;if _ ,_fba =_gge .uncompress1d (_ecc ,_ff ,_baf );_fba !=nil {return 0,_fba ;};_ecc ._cbf ++;if _ ,_fba =_gge .uncompress1d (_ecc ,_ccc ,_baf );_fba !=nil {return 0,_fba ;};_dgb ,_bac :=_gge .uncompress1d (_ecc ,_ff ,_baf );if _bac !=nil {return EOF ,_bac ;};_ecc ._cbf ++;return _dgb ,nil ;};_gf =_baf ;continue _ggfa ;};if _gf <=_baf {_feaf =!_feaf ;_ccc [_fdc ]=_gf ;_fdc ++;if _fcd > 0{_fcd --;}else {_fcd ++;};for _gf < _baf &&_ff [_fcd ]<=_gf {_fcd +=2;};};};if _ccc [_fdc ]!=_baf {_ccc [_fdc ]=_baf ;};if _fde ==nil {return EOL ,nil ;};return _fdc ,nil ;};func (_dg *code )String ()string {return _b .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dg ._g ,_dg ._eb ,_dg ._c );};type runData struct{_gee *_abe .SubstreamReader ;_cbf int ;_dbb int ;_ac int ;_bff []byte ;_ceda int ;_fead int ;};func (_efc *Decoder )detectAndSkipEOL ()error {for {_db ,_aab :=_efc ._dgd .uncompressGetCode (_efc ._fb );if _aab !=nil {return _aab ;};if _db !=nil &&_db ._c ==EOL {_efc ._dgd ._cbf +=_db ._g ;}else {return nil ;};};};func (_caf *runData )uncompressGetCode (_fbaa []*code )(*code ,error ){return _caf .uncompressGetCodeLittleEndian (_fbaa );};const (_ce mmrCode =iota ;_baa ;_cd ;_ef ;_df ;_cc ;_ge ;_dfe ;_ae ;_fd ;_dd ;);type code struct{_g int ;_eb int ;_c int ;_fc []*code ;_ga bool ;};var (_ag =[][3]int {{4,0x1,int (_ce )},{3,0x1,int (_baa )},{1,0x1,int (_cd )},{3,0x3,int (_ef )},{6,0x3,int (_df )},{7,0x3,int (_cc )},{3,0x2,int (_ge )},{6,0x2,int (_dfe )},{7,0x2,int (_ae )},{10,0xf,int (_fd )},{12,0xf,int (_dd )},{12,0x1,int (EOL )}};_bbf =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_ebb },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_ebb },{11,0x01,_ebb },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};_da =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_ebb },{9,0x18,15},{10,0x01,_ebb },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_ebb },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};);func (_fg *Decoder )uncompress1d (_edb *runData ,_gad []int ,_ebf int )(int ,error ){var (_gaa =true ;_efd int ;_caa *code ;_fag int ;_gda error ;);_cebg :for _efd < _ebf {_fbef :for {if _gaa {_caa ,_gda =_edb .uncompressGetCode (_fg ._fa );if _gda !=nil {return 0,_gda ;};}else {_caa ,_gda =_edb .uncompressGetCode (_fg ._ee );if _gda !=nil {return 0,_gda ;};};_edb ._cbf +=_caa ._g ;if _caa ._c < 0{break _cebg ;};_efd +=_caa ._c ;if _caa ._c < 64{_gaa =!_gaa ;_gad [_fag ]=_efd ;_fag ++;break _fbef ;};};};if _gad [_fag ]!=_ebf {_gad [_fag ]=_ebf ;};_dgc :=EOL ;if _caa !=nil &&_caa ._c !=EOL {_dgc =_fag ;};return _dgc ,nil ;};func _gd (_gae ,_gg int )int {if _gae > _gg {return _gg ;};return _gae ;};func (_fbe *Decoder )fillBitmap (_fbg *_e .Bitmap ,_be int ,_fcb []int ,_de int )error {var _cgb byte ;_cdc :=0;_bd :=_fbg .GetByteIndex (_cdc ,_be );for _ebbe :=0;_ebbe < _de ;_ebbe ++{_dcb :=byte (1);_bgb :=_fcb [_ebbe ];if (_ebbe &1)==0{_dcb =0;};for _cdc < _bgb {_cgb =(_cgb <<1)|_dcb ;_cdc ++;if (_cdc &7)==0{if _bge :=_fbg .SetByte (_bd ,_cgb );_bge !=nil {return _bge ;};_bd ++;_cgb =0;};};};if (_cdc &7)!=0{_cgb <<=uint (8-(_cdc &7));if _age :=_fbg .SetByte (_bd ,_cgb );_age !=nil {return _age ;};};return nil ;};func New (r _abe .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_fe :=&Decoder {_dca :width ,_ec :height };_ddc ,_eec :=_abe .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _eec !=nil {return nil ,_eec ;};_ece ,_eec :=_fage (_ddc );if _eec !=nil {return nil ,_eec ;};_fe ._dgd =_ece ;if _ed :=_fe .initTables ();_ed !=nil {return nil ,_ed ;};return _fe ,nil ;};func (_dcab *Decoder )createLittleEndianTable (_eef [][3]int )([]*code ,error ){_cgg :=make ([]*code ,_gc +1);for _ca :=0;_ca < len (_eef );_ca ++{_gef :=_eg (_eef [_ca ]);if _gef ._g <=_dc {_ebd :=_dc -_gef ._g ;_fcf :=_gef ._eb <<uint (_ebd );for _gag :=(1<<uint (_ebd ))-1;_gag >=0;_gag --{_egf :=_fcf |_gag ;_cgg [_egf ]=_gef ;};}else {_bg :=_gef ._eb >>uint (_gef ._g -_dc );if _cgg [_bg ]==nil {var _bcg =_eg ([3]int {});_bcg ._fc =make ([]*code ,_aec +1);_cgg [_bg ]=_bcg ;};if _gef ._g <=_dc +_aa {_dfc :=_dc +_aa -_gef ._g ;_ddf :=(_gef ._eb <<uint (_dfc ))&_aec ;_cgg [_bg ]._ga =true ;for _feg :=(1<<uint (_dfc ))-1;_feg >=0;_feg --{_cgg [_bg ]._fc [_ddf |_feg ]=_gef ;};}else {return nil ,_ab .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _cgg ,nil ;};type Decoder struct{_dca ,_ec int ;_dgd *runData ;_fa []*code ;_ee []*code ;_fb []*code ;};