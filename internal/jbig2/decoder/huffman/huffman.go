//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_df "errors";_db "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_d "math";_ac "strings";);func (_ga *OutOfBandNode )Decode (r *_a .Reader )(int64 ,error ){return 0,_c .ErrOOB };
func (_cfd *ValueNode )Decode (r *_a .Reader )(int64 ,error ){_gga ,_gac :=r .ReadBits (byte (_cfd ._ef ));if _gac !=nil {return 0,_gac ;};if _cfd ._afb {_gga =-_gga ;};return int64 (_cfd ._eff )+int64 (_gga ),nil ;};var _ Node =&ValueNode {};type InternalNode struct{_ad int32 ;
_bfc Node ;_edc Node ;};var _ Node =&InternalNode {};var _gee =make ([]Tabler ,len (_bee ));func _bd (_gdb *Code )*ValueNode {return &ValueNode {_ef :_gdb ._bcbd ,_eff :_gdb ._gc ,_afb :_gdb ._eag }};func (_dg *FixedSizeTable )Decode (r *_a .Reader )(int64 ,error ){return _dg ._dc .Decode (r )};
func (_ee *StandardTable )InitTree (codeTable []*Code )error {_cea (codeTable );for _ ,_bfe :=range codeTable {if _fbg :=_ee ._abd .append (_bfe );_fbg !=nil {return _fbg ;};};return nil ;};type OutOfBandNode struct{};var _ Tabler =&EncodedTable {};func _cea (_bdd []*Code ){var _cfg int32 ;
for _ ,_aac :=range _bdd {_cfg =_efe (_cfg ,_aac ._fbd );};_fbe :=make ([]int32 ,_cfg +1);for _ ,_bgd :=range _bdd {_fbe [_bgd ._fbd ]++;};var _ggaf int32 ;_cag :=make ([]int32 ,len (_fbe )+1);_fbe [0]=0;for _cg :=int32 (1);_cg <=int32 (len (_fbe ));_cg ++{_cag [_cg ]=(_cag [_cg -1]+(_fbe [_cg -1]))<<1;
_ggaf =_cag [_cg ];for _ ,_cdcf :=range _bdd {if _cdcf ._fbd ==_cg {_cdcf ._dcd =_ggaf ;_ggaf ++;};};};};func (_ab *InternalNode )append (_fa *Code )(_cec error ){if _fa ._fbd ==0{return nil ;};_daa :=_fa ._fbd -1-_ab ._ad ;if _daa < 0{return _df .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_bfff :=(_fa ._dcd >>uint (_daa ))&0x1;if _daa ==0{if _fa ._bcbd ==-1{if _bfff ==1{if _ab ._edc !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fa );
};_ab ._edc =_de (_fa );}else {if _ab ._bfc !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fa );};_ab ._bfc =_de (_fa );};}else {if _bfff ==1{if _ab ._edc !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fa );
};_ab ._edc =_bd (_fa );}else {if _ab ._bfc !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fa );
};_ab ._bfc =_bd (_fa );};};}else {if _bfff ==1{if _ab ._edc ==nil {_ab ._edc =_abe (_ab ._ad +1);};if _cec =_ab ._edc .(*InternalNode ).append (_fa );_cec !=nil {return _cec ;};}else {if _ab ._bfc ==nil {_ab ._bfc =_abe (_ab ._ad +1);};if _cec =_ab ._bfc .(*InternalNode ).append (_fa );
_cec !=nil {return _cec ;};};};return nil ;};type Node interface{Decode (_gd *_a .Reader )(int64 ,error );String ()string ;};var _ Node =&OutOfBandNode {};func (_bb *StandardTable )Decode (r *_a .Reader )(int64 ,error ){return _bb ._abd .Decode (r )};func (_bff *InternalNode )String ()string {_cba :=&_ac .Builder {};
_cba .WriteString ("\u000a");_bff .pad (_cba );_cba .WriteString ("\u0030\u003a\u0020");_cba .WriteString (_bff ._bfc .String ()+"\u000a");_bff .pad (_cba );_cba .WriteString ("\u0031\u003a\u0020");_cba .WriteString (_bff ._edc .String ()+"\u000a");return _cba .String ();
};func (_gacb *Code )String ()string {var _ecg string ;if _gacb ._dcd !=-1{_ecg =_fc (_gacb ._dcd ,_gacb ._fbd );}else {_ecg ="\u003f";};return _db .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ecg ,_gacb ._fbd ,_gacb ._bcbd ,_gacb ._gc );
};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gee ){return nil ,_df .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gdf :=_gee [number -1];if _gdf ==nil {var _ge error ;
_gdf ,_ge =_bcd (_bee [number -1]);if _ge !=nil {return nil ,_ge ;};_gee [number -1]=_gdf ;};return _gdf ,nil ;};var _bee =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ead *OutOfBandNode )String ()string {return _db .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_d .MaxInt64 ));};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_bf :=&FixedSizeTable {_dc :&InternalNode {}};if _ae :=_bf .InitTree (codeTable );
_ae !=nil {return nil ,_ae ;};return _bf ,nil ;};func (_cdf *EncodedTable )String ()string {return _cdf ._gg .String ()+"\u000a"};func (_ag *StandardTable )RootNode ()*InternalNode {return _ag ._abd };type ValueNode struct{_ef int32 ;_eff int32 ;_afb bool ;
};func _de (_gaa *Code )*OutOfBandNode {return &OutOfBandNode {}};type StandardTable struct{_abd *InternalNode };func (_e *EncodedTable )RootNode ()*InternalNode {return _e ._gg };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_fbd :prefixLength ,_bcbd :rangeLength ,_gc :rangeLow ,_eag :isLowerRange ,_dcd :-1};
};func (_acb *FixedSizeTable )InitTree (codeTable []*Code )error {_cea (codeTable );for _ ,_ea :=range codeTable {_beg :=_acb ._dc .append (_ea );if _beg !=nil {return _beg ;};};return nil ;};func (_dba *EncodedTable )Decode (r *_a .Reader )(int64 ,error ){return _dba ._gg .Decode (r )};
type Code struct{_fbd int32 ;_bcbd int32 ;_gc int32 ;_eag bool ;_dcd int32 ;};func (_afd *InternalNode )pad (_bdc *_ac .Builder ){for _dbac :=int32 (0);_dbac < _afd ._ad ;_dbac ++{_bdc .WriteString ("\u0020\u0020\u0020");};};func (_ce *FixedSizeTable )String ()string {return _ce ._dc .String ()+"\u000a"};
type FixedSizeTable struct{_dc *InternalNode };func (_fg *FixedSizeTable )RootNode ()*InternalNode {return _fg ._dc };func _bcd (_eb [][]int32 )(*StandardTable ,error ){var _cff []*Code ;for _ff :=0;_ff < len (_eb );_ff ++{_gef :=_eb [_ff ][0];_fe :=_eb [_ff ][1];
_cc :=_eb [_ff ][2];var _eae bool ;if len (_eb [_ff ])> 3{_eae =true ;};_cff =append (_cff ,NewCode (_gef ,_fe ,_cc ,_eae ));};_ccd :=&StandardTable {_abd :_abe (0)};if _faf :=_ccd .InitTree (_cff );_faf !=nil {return nil ,_faf ;};return _ccd ,nil ;};func (_bc *EncodedTable )parseTable ()error {var (_ba []*Code ;
_dbe ,_cb ,_ec int32 ;_aa uint64 ;_cdc error ;);_af :=_bc .StreamReader ();_cf :=_bc .HtLow ();for _cf < _bc .HtHigh (){_aa ,_cdc =_af .ReadBits (byte (_bc .HtPS ()));if _cdc !=nil {return _cdc ;};_dbe =int32 (_aa );_aa ,_cdc =_af .ReadBits (byte (_bc .HtRS ()));
if _cdc !=nil {return _cdc ;};_cb =int32 (_aa );_ba =append (_ba ,NewCode (_dbe ,_cb ,_ec ,false ));_cf +=1<<uint (_cb );};_aa ,_cdc =_af .ReadBits (byte (_bc .HtPS ()));if _cdc !=nil {return _cdc ;};_dbe =int32 (_aa );_cb =32;_ec =_bc .HtLow ()-1;_ba =append (_ba ,NewCode (_dbe ,_cb ,_ec ,true ));
_aa ,_cdc =_af .ReadBits (byte (_bc .HtPS ()));if _cdc !=nil {return _cdc ;};_dbe =int32 (_aa );_cb =32;_ec =_bc .HtHigh ();_ba =append (_ba ,NewCode (_dbe ,_cb ,_ec ,false ));if _bc .HtOOB ()==1{_aa ,_cdc =_af .ReadBits (byte (_bc .HtPS ()));if _cdc !=nil {return _cdc ;
};_dbe =int32 (_aa );_ba =append (_ba ,NewCode (_dbe ,-1,-1,false ));};if _cdc =_bc .InitTree (_ba );_cdc !=nil {return _cdc ;};return nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_a .Reader ;HtPS ()int32 ;HtRS ()int32 ;
HtOOB ()int32 ;};func _fc (_bfcg ,_ccg int32 )string {var _afe int32 ;_gfa :=make ([]rune ,_ccg );for _bg :=int32 (1);_bg <=_ccg ;_bg ++{_afe =_bfcg >>uint (_ccg -_bg )&1;if _afe !=0{_gfa [_bg -1]='1';}else {_gfa [_bg -1]='0';};};return string (_gfa );
};func _efe (_ced ,_dec int32 )int32 {if _ced > _dec {return _ced ;};return _dec ;};func (_dab *StandardTable )String ()string {return _dab ._abd .String ()+"\u000a"};func (_bcb *InternalNode )Decode (r *_a .Reader )(int64 ,error ){_fbf ,_cbe :=r .ReadBit ();
if _cbe !=nil {return 0,_cbe ;};if _fbf ==0{return _bcb ._bfc .Decode (r );};return _bcb ._edc .Decode (r );};type EncodedTable struct{BasicTabler ;_gg *InternalNode ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_da :=&EncodedTable {_gg :&InternalNode {},BasicTabler :table };
if _b :=_da .parseTable ();_b !=nil {return nil ,_b ;};return _da ,nil ;};func _abe (_aec int32 )*InternalNode {return &InternalNode {_ad :_aec }};func (_be *EncodedTable )InitTree (codeTable []*Code )error {_cea (codeTable );for _ ,_cd :=range codeTable {if _gf :=_be ._gg .append (_cd );
_gf !=nil {return _gf ;};};return nil ;};type Tabler interface{Decode (_dbb *_a .Reader )(int64 ,error );InitTree (_cfa []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_fb *ValueNode )String ()string {return _db .Sprintf ("\u0025\u0064\u002f%\u0064",_fb ._ef ,_fb ._eff );
};