//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_dd "errors";_gg "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_df "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_dc "math";_g "strings";);type OutOfBandNode struct{};func (_dg *EncodedTable )String ()string {return _dg ._de .String ()+"\u000a"};
var _ebf =make ([]Tabler ,len (_dgc ));func (_eb *FixedSizeTable )Decode (r _d .StreamReader )(int64 ,error ){return _eb ._gfbg .Decode (r )};func (_ea *ValueNode )Decode (r _d .StreamReader )(int64 ,error ){_fbd ,_cbf :=r .ReadBits (byte (_ea ._bf ));
if _cbf !=nil {return 0,_cbf ;};if _ea ._gb {_fbd =-_fbd ;};return int64 (_ea ._fe )+int64 (_fbd ),nil ;};func _fg (_ddc *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_abg *StandardTable )RootNode ()*InternalNode {return _abg ._eeb };type InternalNode struct{_fdg int32 ;
_fgb Node ;_bg Node ;};var _ Node =&ValueNode {};func (_aa *OutOfBandNode )Decode (r _d .StreamReader )(int64 ,error ){return 0,_df .ErrOOB };func (_dgb *OutOfBandNode )String ()string {return _gg .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_dc .MaxInt64 ));
};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_aca :prefixLength ,_fdd :rangeLength ,_agc :rangeLow ,_bdf :isLowerRange ,_cfe :-1};};func (_da *EncodedTable )Decode (r _d .StreamReader )(int64 ,error ){return _da ._de .Decode (r )};
func (_af *InternalNode )Decode (r _d .StreamReader )(int64 ,error ){_ag ,_ebd :=r .ReadBit ();if _ebd !=nil {return 0,_ebd ;};if _ag ==0{return _af ._fgb .Decode (r );};return _af ._bg .Decode (r );};func (_fgg *StandardTable )Decode (r _d .StreamReader )(int64 ,error ){return _fgg ._eeb .Decode (r )};
type EncodedTable struct{BasicTabler ;_de *InternalNode ;};type Code struct{_aca int32 ;_fdd int32 ;_agc int32 ;_bdf bool ;_cfe int32 ;};var _ Tabler =&EncodedTable {};var _ Node =&InternalNode {};func _bec (_ff int32 )*InternalNode {return &InternalNode {_fdg :_ff }};
func _eaec (_fba [][]int32 )(*StandardTable ,error ){var _acd []*Code ;for _fec :=0;_fec < len (_fba );_fec ++{_ebe :=_fba [_fec ][0];_ecd :=_fba [_fec ][1];_gda :=_fba [_fec ][2];var _fa bool ;if len (_fba [_fec ])> 3{_fa =true ;};_acd =append (_acd ,NewCode (_ebe ,_ecd ,_gda ,_fa ));
};_cg :=&StandardTable {_eeb :_bec (0)};if _db :=_cg .InitTree (_acd );_db !=nil {return nil ,_db ;};return _cg ,nil ;};var _ Node =&OutOfBandNode {};type Node interface{Decode (_ca _d .StreamReader )(int64 ,error );String ()string ;};func (_eae *InternalNode )pad (_ggb *_g .Builder ){for _dfaa :=int32 (0);
_dfaa < _eae ._fdg ;_dfaa ++{_ggb .WriteString ("\u0020\u0020\u0020");};};func _dfb (_dcg ,_fgf int32 )int32 {if _dcg > _fgf {return _dcg ;};return _fgf ;};func (_cfb *StandardTable )InitTree (codeTable []*Code )error {_eed (codeTable );for _ ,_acc :=range codeTable {if _ef :=_cfb ._eeb .append (_acc );
_ef !=nil {return _ef ;};};return nil ;};type FixedSizeTable struct{_gfbg *InternalNode };func (_ddg *FixedSizeTable )String ()string {return _ddg ._gfbg .String ()+"\u000a"};func (_afe *StandardTable )String ()string {return _afe ._eeb .String ()+"\u000a"};
func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_a :=&FixedSizeTable {_gfbg :&InternalNode {}};if _ab :=_a .InitTree (codeTable );_ab !=nil {return nil ,_ab ;};return _a ,nil ;};func _eed (_dac []*Code ){var _agd int32 ;for _ ,_dgd :=range _dac {_agd =_dfb (_agd ,_dgd ._aca );
};_adg :=make ([]int32 ,_agd +1);for _ ,_fae :=range _dac {_adg [_fae ._aca ]++;};var _ecb int32 ;_acdb :=make ([]int32 ,len (_adg )+1);_adg [0]=0;for _dfg :=int32 (1);_dfg <=int32 (len (_adg ));_dfg ++{_acdb [_dfg ]=(_acdb [_dfg -1]+(_adg [_dfg -1]))<<1;
_ecb =_acdb [_dfg ];for _ ,_fgd :=range _dac {if _fgd ._aca ==_dfg {_fgd ._cfe =_ecb ;_ecb ++;};};};};type ValueNode struct{_bf int32 ;_fe int32 ;_gb bool ;};func (_dfa *InternalNode )append (_cae *Code )(_ac error ){if _cae ._aca ==0{return nil ;};_cfa :=_cae ._aca -1-_dfa ._fdg ;
if _cfa < 0{return _dd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_gfgb :=(_cae ._cfe >>uint (_cfa ))&0x1;
if _cfa ==0{if _cae ._fdd ==-1{if _gfgb ==1{if _dfa ._bg !=nil {return _gg .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cae );};_dfa ._bg =_fg (_cae );
}else {if _dfa ._fgb !=nil {return _gg .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cae );};_dfa ._fgb =_fg (_cae );};}else {if _gfgb ==1{if _dfa ._bg !=nil {return _gg .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cae );
};_dfa ._bg =_be (_cae );}else {if _dfa ._fgb !=nil {return _gg .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cae );
};_dfa ._fgb =_be (_cae );};};}else {if _gfgb ==1{if _dfa ._bg ==nil {_dfa ._bg =_bec (_dfa ._fdg +1);};if _ac =_dfa ._bg .(*InternalNode ).append (_cae );_ac !=nil {return _ac ;};}else {if _dfa ._fgb ==nil {_dfa ._fgb =_bec (_dfa ._fdg +1);};if _ac =_dfa ._fgb .(*InternalNode ).append (_cae );
_ac !=nil {return _ac ;};};};return nil ;};func (_bdb *InternalNode )String ()string {_ae :=&_g .Builder {};_ae .WriteString ("\u000a");_bdb .pad (_ae );_ae .WriteString ("\u0030\u003a\u0020");_ae .WriteString (_bdb ._fgb .String ()+"\u000a");_bdb .pad (_ae );
_ae .WriteString ("\u0031\u003a\u0020");_ae .WriteString (_bdb ._bg .String ()+"\u000a");return _ae .String ();};func (_fgbb *Code )String ()string {var _gdc string ;if _fgbb ._cfe !=-1{_gdc =_faa (_fgbb ._cfe ,_fgbb ._aca );}else {_gdc ="\u003f";};return _gg .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gdc ,_fgbb ._aca ,_fgbb ._fdd ,_fgbb ._agc );
};func (_dcbc *FixedSizeTable )RootNode ()*InternalNode {return _dcbc ._gfbg };func (_gac *ValueNode )String ()string {return _gg .Sprintf ("\u0025\u0064\u002f%\u0064",_gac ._bf ,_gac ._fe );};func (_fc *EncodedTable )parseTable ()error {var (_cc []*Code ;
_cd ,_gd ,_bd int32 ;_dff uint64 ;_cf error ;);_fd :=_fc .StreamReader ();_ee :=_fc .HtLow ();for _ee < _fc .HtHigh (){_dff ,_cf =_fd .ReadBits (byte (_fc .HtPS ()));if _cf !=nil {return _cf ;};_cd =int32 (_dff );_dff ,_cf =_fd .ReadBits (byte (_fc .HtRS ()));
if _cf !=nil {return _cf ;};_gd =int32 (_dff );_cc =append (_cc ,NewCode (_cd ,_gd ,_bd ,false ));_ee +=1<<uint (_gd );};_dff ,_cf =_fd .ReadBits (byte (_fc .HtPS ()));if _cf !=nil {return _cf ;};_cd =int32 (_dff );_gd =32;_bd =_fc .HtLow ()-1;_cc =append (_cc ,NewCode (_cd ,_gd ,_bd ,true ));
_dff ,_cf =_fd .ReadBits (byte (_fc .HtPS ()));if _cf !=nil {return _cf ;};_cd =int32 (_dff );_gd =32;_bd =_fc .HtHigh ();_cc =append (_cc ,NewCode (_cd ,_gd ,_bd ,false ));if _fc .HtOOB ()==1{_dff ,_cf =_fd .ReadBits (byte (_fc .HtPS ()));if _cf !=nil {return _cf ;
};_cd =int32 (_dff );_cc =append (_cc ,NewCode (_cd ,-1,-1,false ));};if _cf =_fc .InitTree (_cc );_cf !=nil {return _cf ;};return nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_d .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;
HtOOB ()int32 ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_dcb :=&EncodedTable {_de :&InternalNode {},BasicTabler :table };if _gfb :=_dcb .parseTable ();_gfb !=nil {return nil ,_gfb ;};return _dcb ,nil ;};func (_ga *EncodedTable )RootNode ()*InternalNode {return _ga ._de };
func (_cb *FixedSizeTable )InitTree (codeTable []*Code )error {_eed (codeTable );for _ ,_dec :=range codeTable {_ba :=_cb ._gfbg .append (_dec );if _ba !=nil {return _ba ;};};return nil ;};var _dgc =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ebf ){return nil ,_dd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ec :=_ebf [number -1];if _ec ==nil {var _cdb error ;
_ec ,_cdb =_eaec (_dgc [number -1]);if _cdb !=nil {return nil ,_cdb ;};_ebf [number -1]=_ec ;};return _ec ,nil ;};func _faa (_bfc ,_ffe int32 )string {var _efg int32 ;_afa :=make ([]rune ,_ffe );for _ce :=int32 (1);_ce <=_ffe ;_ce ++{_efg =_bfc >>uint (_ffe -_ce )&1;
if _efg !=0{_afa [_ce -1]='1';}else {_afa [_ce -1]='0';};};return string (_afa );};type Tabler interface{Decode (_gfbgc _d .StreamReader )(int64 ,error );InitTree (_gcc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type StandardTable struct{_eeb *InternalNode };
func (_e *EncodedTable )InitTree (codeTable []*Code )error {_eed (codeTable );for _ ,_c :=range codeTable {if _gc :=_e ._de .append (_c );_gc !=nil {return _gc ;};};return nil ;};func _be (_ge *Code )*ValueNode {return &ValueNode {_bf :_ge ._fdd ,_fe :_ge ._agc ,_gb :_ge ._bdf }};
