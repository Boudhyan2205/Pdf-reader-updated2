//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_bd "errors";_d "fmt";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_ba "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ad "math";_a "strings";);func (_f *EncodedTable )String ()string {return _f ._ada .String ()+"\u000a"};
var _ Node =&ValueNode {};var _ Tabler =&EncodedTable {};func (_aa *FixedSizeTable )Decode (r _b .StreamReader )(int64 ,error ){return _aa ._af .Decode (r )};func (_de *ValueNode )Decode (r _b .StreamReader )(int64 ,error ){_gdg ,_bed :=r .ReadBits (byte (_de ._ca ));
if _bed !=nil {return 0,_bed ;};if _de ._adf {_gdg =-_gdg ;};return int64 (_de ._ab )+int64 (_gdg ),nil ;};type FixedSizeTable struct{_af *InternalNode };func (_fa *StandardTable )InitTree (codeTable []*Code )error {_feg (codeTable );for _ ,_feb :=range codeTable {if _bdc :=_fa ._gef .append (_feb );
_bdc !=nil {return _bdc ;};};return nil ;};func (_c *EncodedTable )Decode (r _b .StreamReader )(int64 ,error ){return _c ._ada .Decode (r )};type Node interface{Decode (_bbf _b .StreamReader )(int64 ,error );String ()string ;};func (_ead *InternalNode )pad (_adab *_a .Builder ){for _dba :=int32 (0);
_dba < _ead ._efc ;_dba ++{_adab .WriteString ("\u0020\u0020\u0020");};};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bfg ){return nil ,_bd .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ggb :=_bfg [number -1];if _ggb ==nil {var _cgb error ;_ggb ,_cgb =_fg (_gge [number -1]);if _cgb !=nil {return nil ,_cgb ;};_bfg [number -1]=_ggb ;};return _ggb ,nil ;};func (_cgg *FixedSizeTable )RootNode ()*InternalNode {return _cgg ._af };func (_ecc *InternalNode )append (_caa *Code )(_ecaa error ){if _caa ._gdc ==0{return nil ;
};_gc :=_caa ._gdc -1-_ecc ._efc ;if _gc < 0{return _bd .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_fe :=(_caa ._fef >>uint (_gc ))&0x1;
if _gc ==0{if _caa ._dbg ==-1{if _fe ==1{if _ecc ._ce !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_caa );};_ecc ._ce =_efe (_caa );
}else {if _ecc ._bec !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_caa );};_ecc ._bec =_efe (_caa );};}else {if _fe ==1{if _ecc ._ce !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_caa );
};_ecc ._ce =_gf (_caa );}else {if _ecc ._bec !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_caa );
};_ecc ._bec =_gf (_caa );};};}else {if _fe ==1{if _ecc ._ce ==nil {_ecc ._ce =_fca (_ecc ._efc +1);};if _ecaa =_ecc ._ce .(*InternalNode ).append (_caa );_ecaa !=nil {return _ecaa ;};}else {if _ecc ._bec ==nil {_ecc ._bec =_fca (_ecc ._efc +1);};if _ecaa =_ecc ._bec .(*InternalNode ).append (_caa );
_ecaa !=nil {return _ecaa ;};};};return nil ;};type Code struct{_gdc int32 ;_dbg int32 ;_bdac int32 ;_dbae bool ;_fef int32 ;};func (_ee *StandardTable )RootNode ()*InternalNode {return _ee ._gef };type Tabler interface{Decode (_cce _b .StreamReader )(int64 ,error );
InitTree (_gb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_afc *InternalNode )Decode (r _b .StreamReader )(int64 ,error ){_dee ,_fde :=r .ReadBit ();if _fde !=nil {return 0,_fde ;};if _dee ==0{return _afc ._bec .Decode (r );};return _afc ._ce .Decode (r );
};func _efe (_ed *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_gd *EncodedTable )InitTree (codeTable []*Code )error {_feg (codeTable );for _ ,_bda :=range codeTable {if _ae :=_gd ._ada .append (_bda );_ae !=nil {return _ae ;};};return nil ;};
func _feg (_gbg []*Code ){var _dg int32 ;for _ ,_gcf :=range _gbg {_dg =_fad (_dg ,_gcf ._gdc );};_dac :=make ([]int32 ,_dg +1);for _ ,_bdcc :=range _gbg {_dac [_bdcc ._gdc ]++;};var _faf int32 ;_fea :=make ([]int32 ,len (_dac )+1);_dac [0]=0;for _dad :=int32 (1);
_dad <=int32 (len (_dac ));_dad ++{_fea [_dad ]=(_fea [_dad -1]+(_dac [_dad -1]))<<1;_faf =_fea [_dad ];for _ ,_gdgd :=range _gbg {if _gdgd ._gdc ==_dad {_gdgd ._fef =_faf ;_faf ++;};};};};type OutOfBandNode struct{};func (_dbf *StandardTable )Decode (r _b .StreamReader )(int64 ,error ){return _dbf ._gef .Decode (r )};
type ValueNode struct{_ca int32 ;_ab int32 ;_adf bool ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_g :=&EncodedTable {_ada :&InternalNode {},BasicTabler :table };if _df :=_g .parseTable ();_df !=nil {return nil ,_df ;};return _g ,nil ;
};var _ Node =&InternalNode {};func _fad (_fcc ,_ebe int32 )int32 {if _fcc > _ebe {return _fcc ;};return _ebe ;};type InternalNode struct{_efc int32 ;_bec Node ;_ce Node ;};func (_db *FixedSizeTable )InitTree (codeTable []*Code )error {_feg (codeTable );
for _ ,_gg :=range codeTable {_cc :=_db ._af .append (_gg );if _cc !=nil {return _cc ;};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_gdc :prefixLength ,_dbg :rangeLength ,_bdac :rangeLow ,_dbae :isLowerRange ,_fef :-1};
};type StandardTable struct{_gef *InternalNode };type EncodedTable struct{BasicTabler ;_ada *InternalNode ;};func _fca (_dc int32 )*InternalNode {return &InternalNode {_efc :_dc }};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_bf :=&FixedSizeTable {_af :&InternalNode {}};
if _dfg :=_bf .InitTree (codeTable );_dfg !=nil {return nil ,_dfg ;};return _bf ,nil ;};func (_cga *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ad .MaxInt64 ));};func (_aef *EncodedTable )RootNode ()*InternalNode {return _aef ._ada };
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_b .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_dbd *FixedSizeTable )String ()string {return _dbd ._af .String ()+"\u000a"};var _ Node =&OutOfBandNode {};func _dd (_gfb ,_bce int32 )string {var _fge int32 ;
_bag :=make ([]rune ,_bce );for _eb :=int32 (1);_eb <=_bce ;_eb ++{_fge =_gfb >>uint (_bce -_eb )&1;if _fge !=0{_bag [_eb -1]='1';}else {_bag [_eb -1]='0';};};return string (_bag );};func (_ggf *Code )String ()string {var _fcg string ;if _ggf ._fef !=-1{_fcg =_dd (_ggf ._fef ,_ggf ._gdc );
}else {_fcg ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fcg ,_ggf ._gdc ,_ggf ._dbg ,_ggf ._bdac );};func _fg (_eae [][]int32 )(*StandardTable ,error ){var _bbc []*Code ;for _dbb :=0;_dbb < len (_eae );
_dbb ++{_ecca :=_eae [_dbb ][0];_bddb :=_eae [_dbb ][1];_cb :=_eae [_dbb ][2];var _cbd bool ;if len (_eae [_dbb ])> 3{_cbd =true ;};_bbc =append (_bbc ,NewCode (_ecca ,_bddb ,_cb ,_cbd ));};_ff :=&StandardTable {_gef :_fca (0)};if _dcg :=_ff .InitTree (_bbc );
_dcg !=nil {return nil ,_dcg ;};return _ff ,nil ;};func _gf (_eca *Code )*ValueNode {return &ValueNode {_ca :_eca ._dbg ,_ab :_eca ._bdac ,_adf :_eca ._dbae }};func (_fed *StandardTable )String ()string {return _fed ._gef .String ()+"\u000a"};func (_becf *InternalNode )String ()string {_fbb :=&_a .Builder {};
_fbb .WriteString ("\u000a");_becf .pad (_fbb );_fbb .WriteString ("\u0030\u003a\u0020");_fbb .WriteString (_becf ._bec .String ()+"\u000a");_becf .pad (_fbb );_fbb .WriteString ("\u0031\u003a\u0020");_fbb .WriteString (_becf ._ce .String ()+"\u000a");
return _fbb .String ();};func (_be *OutOfBandNode )Decode (r _b .StreamReader )(int64 ,error ){return 0,_ba .ErrOOB };var _gge =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
var _bfg =make ([]Tabler ,len (_gge ));func (_ec *EncodedTable )parseTable ()error {var (_ea []*Code ;_cg ,_ge ,_ef int32 ;_geg uint64 ;_fd error ;);_fdf :=_ec .StreamReader ();_fdg :=_ec .HtLow ();for _fdg < _ec .HtHigh (){_geg ,_fd =_fdf .ReadBits (byte (_ec .HtPS ()));
if _fd !=nil {return _fd ;};_cg =int32 (_geg );_geg ,_fd =_fdf .ReadBits (byte (_ec .HtRS ()));if _fd !=nil {return _fd ;};_ge =int32 (_geg );_ea =append (_ea ,NewCode (_cg ,_ge ,_ef ,false ));_fdg +=1<<uint (_ge );};_geg ,_fd =_fdf .ReadBits (byte (_ec .HtPS ()));
if _fd !=nil {return _fd ;};_cg =int32 (_geg );_ge =32;_ef =_ec .HtLow ()-1;_ea =append (_ea ,NewCode (_cg ,_ge ,_ef ,true ));_geg ,_fd =_fdf .ReadBits (byte (_ec .HtPS ()));if _fd !=nil {return _fd ;};_cg =int32 (_geg );_ge =32;_ef =_ec .HtHigh ();_ea =append (_ea ,NewCode (_cg ,_ge ,_ef ,false ));
if _ec .HtOOB ()==1{_geg ,_fd =_fdf .ReadBits (byte (_ec .HtPS ()));if _fd !=nil {return _fd ;};_cg =int32 (_geg );_ea =append (_ea ,NewCode (_cg ,-1,-1,false ));};if _fd =_ec .InitTree (_ea );_fd !=nil {return _fd ;};return nil ;};func (_bc *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_bc ._ca ,_bc ._ab );
};