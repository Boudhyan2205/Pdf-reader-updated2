//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_c "errors";_aa "fmt";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_a "math";_b "strings";);type StandardTable struct{_fed *InternalNode };var _ Tabler =&EncodedTable {};type InternalNode struct{_ga int32 ;_ff Node ;_ebc Node ;};func _g (_adc *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_da *EncodedTable )InitTree (codeTable []*Code )error {_bfb (codeTable );for _ ,_de :=range codeTable {if _aaf :=_da ._fa .append (_de );_aaf !=nil {return _aaf ;};};return nil ;};func (_e *EncodedTable )String ()string {return _e ._fa .String ()+"\u000a"};func (_gff *StandardTable )Decode (r _f .StreamReader )(int64 ,error ){return _gff ._fed .Decode (r )};func (_ac *FixedSizeTable )Decode (r _f .StreamReader )(int64 ,error ){return _ac ._cc .Decode (r )};func (_dbac *StandardTable )String ()string {return _dbac ._fed .String ()+"\u000a"};func (_cg *OutOfBandNode )Decode (r _f .StreamReader )(int64 ,error ){return int64 (_a .MaxInt64 ),nil };var _cbd =make ([]Tabler ,len (_cbe ));func (_ceef *Code )String ()string {var _ecb string ;if _ceef ._dbag !=-1{_ecb =_cbb (_ceef ._dbag ,_ceef ._ef );}else {_ecb ="\u003f";};return _aa .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ecb ,_ceef ._ef ,_ceef ._agc ,_ceef ._ge );};func _fd (_gef ,_ed int32 )int32 {if _gef > _ed {return _gef ;};return _ed ;};type EncodedTable struct{BasicTabler ;_fa *InternalNode ;};func (_dg *ValueNode )String ()string {return _aa .Sprintf ("\u0025\u0064\u002f%\u0064",_dg ._dba ,_dg ._ada );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dag :=&FixedSizeTable {_cc :&InternalNode {}};if _beg :=_dag .InitTree (codeTable );_beg !=nil {return nil ,_beg ;};return _dag ,nil ;};func (_ag *EncodedTable )RootNode ()*InternalNode {return _ag ._fa };func _cee (_ccd *Code )*ValueNode {return &ValueNode {_dba :_ccd ._agc ,_ada :_ccd ._ge ,_fga :_ccd ._ege }};func _cbb (_fgd ,_ffg int32 )string {var _aga int32 ;_bgc :=make ([]rune ,_ffg );for _ceg :=int32 (1);_ceg <=_ffg ;_ceg ++{_aga =_fgd >>uint (_ffg -_ceg )&1;if _aga !=0{_bgc [_ceg -1]='1';}else {_bgc [_ceg -1]='0';};};return string (_bgc );};func (_fbc *ValueNode )Decode (r _f .StreamReader )(int64 ,error ){_df ,_eb :=r .ReadBits (byte (_fbc ._dba ));if _eb !=nil {return 0,_eb ;};if _fbc ._fga {_df =-_df ;};return int64 (_fbc ._ada )+int64 (_df ),nil ;};type Code struct{_ef int32 ;_agc int32 ;_ge int32 ;_ege bool ;_dbag int32 ;};type Tabler interface{Decode (_ec _f .StreamReader )(int64 ,error );InitTree (_gcd []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_bb *EncodedTable )parseTable ()error {var (_af []*Code ;_ae ,_fg ,_aab int32 ;_eg uint64 ;_ad error ;);_bed :=_bb .StreamReader ();_aag :=_bb .HtLow ();for _aag < _bb .HtHigh (){_eg ,_ad =_bed .ReadBits (byte (_bb .HtPS ()));if _ad !=nil {return _ad ;};_ae =int32 (_eg );_eg ,_ad =_bed .ReadBits (byte (_bb .HtRS ()));if _ad !=nil {return _ad ;};_fg =int32 (_eg );_af =append (_af ,NewCode (_ae ,_fg ,_aab ,false ));_aag +=1<<uint (_fg );};_eg ,_ad =_bed .ReadBits (byte (_bb .HtPS ()));if _ad !=nil {return _ad ;};_ae =int32 (_eg );_fg =32;_aab =_bb .HtLow ()-1;_af =append (_af ,NewCode (_ae ,_fg ,_aab ,true ));_eg ,_ad =_bed .ReadBits (byte (_bb .HtPS ()));if _ad !=nil {return _ad ;};_ae =int32 (_eg );_fg =32;_aab =_bb .HtHigh ();_af =append (_af ,NewCode (_ae ,_fg ,_aab ,false ));if _bb .HtOOB ()==1{_eg ,_ad =_bed .ReadBits (byte (_bb .HtPS ()));if _ad !=nil {return _ad ;};_ae =int32 (_eg );_af =append (_af ,NewCode (_ae ,-1,-1,false ));};if _ad =_bb .InitTree (_af );_ad !=nil {return _ad ;};return nil ;};func (_fb *OutOfBandNode )String ()string {return _aa .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_a .MaxInt64 ));};func (_dec *InternalNode )append (_afb *Code )(_egb error ){if _afb ._ef ==0{return nil ;};_gb :=_afb ._ef -1-_dec ._ga ;if _gb < 0{return _c .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_aae :=(_afb ._dbag >>uint (_gb ))&0x1;if _gb ==0{if _afb ._agc ==-1{if _aae ==1{if _dec ._ebc !=nil {return _aa .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_afb );};_dec ._ebc =_g (_afb );}else {if _dec ._ff !=nil {return _aa .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_afb );};_dec ._ff =_g (_afb );};}else {if _aae ==1{if _dec ._ebc !=nil {return _aa .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_afb );};_dec ._ebc =_cee (_afb );}else {if _dec ._ff !=nil {return _aa .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_afb );};_dec ._ff =_cee (_afb );};};}else {if _aae ==1{if _dec ._ebc ==nil {_dec ._ebc =_dee (_dec ._ga +1);};if _egb =_dec ._ebc .(*InternalNode ).append (_afb );_egb !=nil {return _egb ;};}else {if _dec ._ff ==nil {_dec ._ff =_dee (_dec ._ga +1);};if _egb =_dec ._ff .(*InternalNode ).append (_afb );_egb !=nil {return _egb ;};};};return nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_f .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type FixedSizeTable struct{_cc *InternalNode };func (_aed *InternalNode )Decode (r _f .StreamReader )(int64 ,error ){_gf ,_bbg :=r .ReadBit ();if _bbg !=nil {return 0,_bbg ;};if _gf ==0{return _aed ._ff .Decode (r );};return _aed ._ebc .Decode (r );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cbd ){return nil ,_c .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bg :=_cbd [number -1];if _bg ==nil {var _cd error ;_bg ,_cd =_ca (_cbe [number -1]);if _cd !=nil {return nil ,_cd ;};_cbd [number -1]=_bg ;};return _bg ,nil ;};var _ Node =&ValueNode {};func (_aef *StandardTable )RootNode ()*InternalNode {return _aef ._fed };func (_bee *FixedSizeTable )RootNode ()*InternalNode {return _bee ._cc };var _ Node =&InternalNode {};func (_gg *InternalNode )String ()string {_gd :=&_b .Builder {};_gd .WriteString ("\u000a");_gg .pad (_gd );_gd .WriteString ("\u0030\u003a\u0020");_gd .WriteString (_gg ._ff .String ()+"\u000a");_gg .pad (_gd );_gd .WriteString ("\u0031\u003a\u0020");_gd .WriteString (_gg ._ebc .String ()+"\u000a");return _gd .String ();};func _dee (_gdg int32 )*InternalNode {return &InternalNode {_ga :_gdg }};func (_ce *FixedSizeTable )String ()string {return _ce ._cc .String ()+"\u000a"};func (_cb *EncodedTable )Decode (r _f .StreamReader )(int64 ,error ){return _cb ._fa .Decode (r )};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_db :=&EncodedTable {_fa :&InternalNode {},BasicTabler :table };if _faa :=_db .parseTable ();_faa !=nil {return nil ,_faa ;};return _db ,nil ;};type Node interface{Decode (_fe _f .StreamReader )(int64 ,error );String ()string ;};func _bfb (_fc []*Code ){var _bfd int32 ;for _ ,_cf :=range _fc {_bfd =_fd (_bfd ,_cf ._ef );};_fad :=make ([]int32 ,_bfd +1);for _ ,_bbd :=range _fc {_fad [_bbd ._ef ]++;};var _gdd int32 ;_fba :=make ([]int32 ,len (_fad )+1);_fad [0]=0;for _fec :=int32 (1);_fec <=int32 (len (_fad ));_fec ++{_fba [_fec ]=(_fba [_fec -1]+(_fad [_fec -1]))<<1;_gdd =_fba [_fec ];for _ ,_deeg :=range _fc {if _deeg ._ef ==_fec {_deeg ._dbag =_gdd ;_gdd ++;};};};};func _ca (_bae [][]int32 )(*StandardTable ,error ){var _ea []*Code ;for _ggc :=0;_ggc < len (_bae );_ggc ++{_dgd :=_bae [_ggc ][0];_dbe :=_bae [_ggc ][1];_fgf :=_bae [_ggc ][2];var _gbb bool ;if len (_bae [_ggc ])> 3{_gbb =true ;};_ea =append (_ea ,NewCode (_dgd ,_dbe ,_fgf ,_gbb ));};_bac :=&StandardTable {_fed :_dee (0)};if _gc :=_bac .InitTree (_ea );_gc !=nil {return nil ,_gc ;};return _bac ,nil ;};func (_ade *FixedSizeTable )InitTree (codeTable []*Code )error {_bfb (codeTable );for _ ,_bf :=range codeTable {_fae :=_ade ._cc .append (_bf );if _fae !=nil {return _fae ;};};return nil ;};var _ Node =&OutOfBandNode {};func (_dagc *InternalNode )pad (_dcb *_b .Builder ){for _decd :=int32 (0);_decd < _dagc ._ga ;_decd ++{_dcb .WriteString ("\u0020\u0020\u0020");};};var _cbe =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ef :prefixLength ,_agc :rangeLength ,_ge :rangeLow ,_ege :isLowerRange ,_dbag :-1};};type ValueNode struct{_dba int32 ;_ada int32 ;_fga bool ;};func (_ee *StandardTable )InitTree (codeTable []*Code )error {_bfb (codeTable );for _ ,_bc :=range codeTable {if _ba :=_ee ._fed .append (_bc );_ba !=nil {return _ba ;};};return nil ;};type OutOfBandNode struct{};