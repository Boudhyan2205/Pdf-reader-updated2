//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_a "fmt";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_fc "math";_df "strings";);func (_edc *StandardTable )String ()string {return _edc ._gddd .String ()+"\u000a"};
func _abg (_gf *Code )*OutOfBandNode {return &OutOfBandNode {}};type StandardTable struct{_gddd *InternalNode };type EncodedTable struct{BasicTabler ;_g *InternalNode ;};type InternalNode struct{_bfd int32 ;_ca Node ;_bba Node ;};type Tabler interface{Decode (_gac *_f .Reader )(int64 ,error );
InitTree (_fce []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_dc *EncodedTable )Decode (r *_f .Reader )(int64 ,error ){return _dc ._g .Decode (r )};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_f .Reader ;
HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_aa *FixedSizeTable )String ()string {return _aa ._bf .String ()+"\u000a"};type FixedSizeTable struct{_bf *InternalNode };func (_gb *ValueNode )Decode (r *_f .Reader )(int64 ,error ){_gba ,_fe :=r .ReadBits (byte (_gb ._gc ));
if _fe !=nil {return 0,_fe ;};if _gb ._bb {_gba =-_gba ;};return int64 (_gb ._gdd )+int64 (_gba ),nil ;};func _fgeg (_efg int32 )*InternalNode {return &InternalNode {_bfd :_efg }};func (_eccg *OutOfBandNode )Decode (r *_f .Reader )(int64 ,error ){return 0,_c .ErrOOB };
func (_adb *Code )String ()string {var _gfd string ;if _adb ._fcf !=-1{_gfd =_cdb (_adb ._fcf ,_adb ._cgd );}else {_gfd ="\u003f";};return _a .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gfd ,_adb ._cgd ,_adb ._baf ,_adb ._cgdg );
};func (_gde *OutOfBandNode )String ()string {return _a .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_fc .MaxInt64 ));};type Node interface{Decode (_efa *_f .Reader )(int64 ,error );String ()string ;};func (_dca *InternalNode )String ()string {_bca :=&_df .Builder {};
_bca .WriteString ("\u000a");_dca .pad (_bca );_bca .WriteString ("\u0030\u003a\u0020");_bca .WriteString (_dca ._ca .String ()+"\u000a");_dca .pad (_bca );_bca .WriteString ("\u0031\u003a\u0020");_bca .WriteString (_dca ._bba .String ()+"\u000a");return _bca .String ();
};var _ Node =&OutOfBandNode {};func (_dcc *ValueNode )String ()string {return _a .Sprintf ("\u0025\u0064\u002f%\u0064",_dcc ._gc ,_dcc ._gdd );};var _ Node =&ValueNode {};func (_dfc *EncodedTable )parseTable ()error {var (_ae []*Code ;_db ,_fa ,_de int32 ;
_ec uint64 ;_fad error ;);_ggb :=_dfc .StreamReader ();_faa :=_dfc .HtLow ();for _faa < _dfc .HtHigh (){_ec ,_fad =_ggb .ReadBits (byte (_dfc .HtPS ()));if _fad !=nil {return _fad ;};_db =int32 (_ec );_ec ,_fad =_ggb .ReadBits (byte (_dfc .HtRS ()));if _fad !=nil {return _fad ;
};_fa =int32 (_ec );_ae =append (_ae ,NewCode (_db ,_fa ,_de ,false ));_faa +=1<<uint (_fa );};_ec ,_fad =_ggb .ReadBits (byte (_dfc .HtPS ()));if _fad !=nil {return _fad ;};_db =int32 (_ec );_fa =32;_de =_dfc .HtLow ()-1;_ae =append (_ae ,NewCode (_db ,_fa ,_de ,true ));
_ec ,_fad =_ggb .ReadBits (byte (_dfc .HtPS ()));if _fad !=nil {return _fad ;};_db =int32 (_ec );_fa =32;_de =_dfc .HtHigh ();_ae =append (_ae ,NewCode (_db ,_fa ,_de ,false ));if _dfc .HtOOB ()==1{_ec ,_fad =_ggb .ReadBits (byte (_dfc .HtPS ()));if _fad !=nil {return _fad ;
};_db =int32 (_ec );_ae =append (_ae ,NewCode (_db ,-1,-1,false ));};if _fad =_dfc .InitTree (_ae );_fad !=nil {return _fad ;};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_b :=&EncodedTable {_g :&InternalNode {},BasicTabler :table };
if _ffg :=_b .parseTable ();_ffg !=nil {return nil ,_ffg ;};return _b ,nil ;};func _cb (_edf [][]int32 )(*StandardTable ,error ){var _cab []*Code ;for _fca :=0;_fca < len (_edf );_fca ++{_eb :=_edf [_fca ][0];_bfe :=_edf [_fca ][1];_dde :=_edf [_fca ][2];
var _cg bool ;if len (_edf [_fca ])> 3{_cg =true ;};_cab =append (_cab ,NewCode (_eb ,_bfe ,_dde ,_cg ));};_bbc :=&StandardTable {_gddd :_fgeg (0)};if _ddef :=_bbc .InitTree (_cab );_ddef !=nil {return nil ,_ddef ;};return _bbc ,nil ;};func (_ga *FixedSizeTable )Decode (r *_f .Reader )(int64 ,error ){return _ga ._bf .Decode (r )};
func _cdb (_fdf ,_gaf int32 )string {var _bdb int32 ;_dae :=make ([]rune ,_gaf );for _gcg :=int32 (1);_gcg <=_gaf ;_gcg ++{_bdb =_fdf >>uint (_gaf -_gcg )&1;if _bdb !=0{_dae [_gcg -1]='1';}else {_dae [_gcg -1]='0';};};return string (_dae );};func (_bcf *StandardTable )RootNode ()*InternalNode {return _bcf ._gddd };
func (_dd *EncodedTable )InitTree (codeTable []*Code )error {_dba (codeTable );for _ ,_gd :=range codeTable {if _ce :=_dd ._g .append (_gd );_ce !=nil {return _ce ;};};return nil ;};var _ Tabler =&EncodedTable {};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fdc ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bcc :=_fdc [number -1];if _bcc ==nil {var _abgg error ;_bcc ,_abgg =_cb (_cfd [number -1]);if _abgg !=nil {return nil ,_abgg ;};_fdc [number -1]=_bcc ;};return _bcc ,nil ;};var _ Node =&InternalNode {};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cgd :prefixLength ,_baf :rangeLength ,_cgdg :rangeLow ,_fag :isLowerRange ,_fcf :-1};
};func _ba (_ge *Code )*ValueNode {return &ValueNode {_gc :_ge ._baf ,_gdd :_ge ._cgdg ,_bb :_ge ._fag }};func (_cf *FixedSizeTable )InitTree (codeTable []*Code )error {_dba (codeTable );for _ ,_dg :=range codeTable {_ab :=_cf ._bf .append (_dg );if _ab !=nil {return _ab ;
};};return nil ;};type Code struct{_cgd int32 ;_baf int32 ;_cgdg int32 ;_fag bool ;_fcf int32 ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ecc :=&FixedSizeTable {_bf :&InternalNode {}};if _da :=_ecc .InitTree (codeTable );_da !=nil {return nil ,_da ;
};return _ecc ,nil ;};func (_ee *StandardTable )InitTree (codeTable []*Code )error {_dba (codeTable );for _ ,_bfc :=range codeTable {if _fd :=_ee ._gddd .append (_bfc );_fd !=nil {return _fd ;};};return nil ;};var _cfd =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_af *InternalNode )append (_ad *Code )(_aac error ){if _ad ._cgd ==0{return nil ;};_bd :=_ad ._cgd -1-_af ._bfd ;if _bd < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_fge :=(_ad ._fcf >>uint (_bd ))&0x1;if _bd ==0{if _ad ._baf ==-1{if _fge ==1{if _af ._bba !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ad );
};_af ._bba =_abg (_ad );}else {if _af ._ca !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ad );};_af ._ca =_abg (_ad );};}else {if _fge ==1{if _af ._bba !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ad );
};_af ._bba =_ba (_ad );}else {if _af ._ca !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ad );
};_af ._ca =_ba (_ad );};};}else {if _fge ==1{if _af ._bba ==nil {_af ._bba =_fgeg (_af ._bfd +1);};if _aac =_af ._bba .(*InternalNode ).append (_ad );_aac !=nil {return _aac ;};}else {if _af ._ca ==nil {_af ._ca =_fgeg (_af ._bfd +1);};if _aac =_af ._ca .(*InternalNode ).append (_ad );
_aac !=nil {return _aac ;};};};return nil ;};func (_aaf *StandardTable )Decode (r *_f .Reader )(int64 ,error ){return _aaf ._gddd .Decode (r )};func _ddbec (_ac ,_aaa int32 )int32 {if _ac > _aaa {return _ac ;};return _aaa ;};func (_beb *FixedSizeTable )RootNode ()*InternalNode {return _beb ._bf };
type OutOfBandNode struct{};func (_fb *InternalNode )pad (_abe *_df .Builder ){for _bde :=int32 (0);_bde < _fb ._bfd ;_bde ++{_abe .WriteString ("\u0020\u0020\u0020");};};func (_ed *InternalNode )Decode (r *_f .Reader )(int64 ,error ){_aef ,_ddb :=r .ReadBit ();
if _ddb !=nil {return 0,_ddb ;};if _aef ==0{return _ed ._ca .Decode (r );};return _ed ._bba .Decode (r );};var _fdc =make ([]Tabler ,len (_cfd ));type ValueNode struct{_gc int32 ;_gdd int32 ;_bb bool ;};func (_ef *EncodedTable )RootNode ()*InternalNode {return _ef ._g };
func (_gg *EncodedTable )String ()string {return _gg ._g .String ()+"\u000a"};func _dba (_bg []*Code ){var _dad int32 ;for _ ,_dgb :=range _bg {_dad =_ddbec (_dad ,_dgb ._cgd );};_bad :=make ([]int32 ,_dad +1);for _ ,_fac :=range _bg {_bad [_fac ._cgd ]++;
};var _eea int32 ;_ecb :=make ([]int32 ,len (_bad )+1);_bad [0]=0;for _ggbd :=int32 (1);_ggbd <=int32 (len (_bad ));_ggbd ++{_ecb [_ggbd ]=(_ecb [_ggbd -1]+(_bad [_ggbd -1]))<<1;_eea =_ecb [_ggbd ];for _ ,_cc :=range _bg {if _cc ._cgd ==_ggbd {_cc ._fcf =_eea ;
_eea ++;};};};};