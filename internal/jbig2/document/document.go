//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package document ;import (_b "encoding/binary";_a "fmt";_ff "github.com/unidoc/unipdf/v3/common";_fb "github.com/unidoc/unipdf/v3/internal/bitwise";_ee "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/document/segments";_ecc "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/classer";_ec "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_bb "io";_f "math";_eg "runtime/debug";);func (_cgb *Document )isFileHeaderPresent ()(bool ,error ){_cgb .InputStream .Mark ();
for _ ,_aed :=range _eca {_dgb ,_cbd :=_cgb .InputStream .ReadByte ();if _cbd !=nil {return false ,_cbd ;};if _aed !=_dgb {_cgb .InputStream .Reset ();return false ,nil ;};};_cgb .InputStream .Reset ();return true ,nil ;};func (_effd *Globals )GetSegment (segmentNumber int )(*_g .Header ,error ){const _ccdd ="\u0047l\u006fb\u0061\u006c\u0073\u002e\u0047e\u0074\u0053e\u0067\u006d\u0065\u006e\u0074";
if _effd ==nil {return nil ,_ec .Error (_ccdd ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_effd .Segments )==0{return nil ,_ec .Error (_ccdd ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};var _dfa *_g .Header ;for _ ,_dfa =range _effd .Segments {if _dfa .SegmentNumber ==uint32 (segmentNumber ){break ;};};if _dfa ==nil {return nil ,_ec .Error (_ccdd ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};return _dfa ,nil ;};func (_fgd *Page )createPage (_ggb *_g .PageInformationSegment )error {var _bgdb error ;if !_ggb .IsStripe ||_ggb .PageBMHeight !=-1{_bgdb =_fgd .createNormalPage (_ggb );}else {_bgdb =_fgd .createStripedPage (_ggb );};return _bgdb ;
};func (_eeaab *Page )getWidth ()(int ,error ){const _cbc ="\u0067\u0065\u0074\u0057\u0069\u0064\u0074\u0068";if _eeaab .FinalWidth !=0{return _eeaab .FinalWidth ,nil ;};_fagg :=_eeaab .getPageInformationSegment ();if _fagg ==nil {return 0,_ec .Error (_cbc ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_bgc ,_agdf :=_fagg .GetSegmentData ();if _agdf !=nil {return 0,_ec .Wrap (_agdf ,_cbc ,"");};_gbfd ,_cgge :=_bgc .(*_g .PageInformationSegment );if !_cgge {return 0,_ec .Errorf (_cbc ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_bgc );
};_eeaab .FinalWidth =_gbfd .PageBMWidth ;return _eeaab .FinalWidth ,nil ;};func (_fg *Document )GetPage (pageNumber int )(_g .Pager ,error ){const _gab ="\u0044\u006fc\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074\u0050\u0061\u0067\u0065";if pageNumber < 0{_ff .Log .Debug ("\u004a\u0042\u0049\u00472\u0020\u0050\u0061\u0067\u0065\u0020\u002d\u0020\u0047e\u0074\u0050\u0061\u0067\u0065\u003a\u0020\u0025\u0064\u002e\u0020\u0050\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062e\u0020\u006c\u006f\u0077\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0020\u0025\u0073",pageNumber ,_eg .Stack ());
return nil ,_ec .Errorf (_gab ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u002d\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064 \u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064",pageNumber );
};if pageNumber > len (_fg .Pages ){_ff .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_eg .Stack ());return nil ,_ec .Error (_gab ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};_egd ,_cgf :=_fg .Pages [pageNumber ];if !_cgf {_ff .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_eg .Stack ());return nil ,_ec .Errorf (_gab ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};return _egd ,nil ;};func (_gbb *Document )produceClassifiedPage (_dfg *Page ,_ae *_g .Header )(_ada error ){const _dbe ="p\u0072\u006f\u0064\u0075ce\u0043l\u0061\u0073\u0073\u0069\u0066i\u0065\u0064\u0050\u0061\u0067\u0065";var _cg map[int ]int ;_aa :=_gbb ._c ;
_bc :=[]*_g .Header {_ae };if len (_gbb ._bg [_dfg .PageNumber ])> 0{_cg =map[int ]int {};_ege ,_cd :=_gbb .addSymbolDictionary (_dfg .PageNumber ,_gbb .Classer .UndilatedTemplates ,_gbb ._bg [_dfg .PageNumber ],_cg ,false );if _cd !=nil {return _ec .Wrap (_cd ,_dbe ,"");
};_bc =append (_bc ,_ege );_aa +=len (_gbb ._bg [_dfg .PageNumber ]);};_afe :=_gbb ._fa [_dfg .PageNumber ];_ff .Log .Debug ("P\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020c\u006f\u006d\u0070\u0073: \u0025\u0076",_dfg .PageNumber ,_afe );_dfg .addTextRegionSegment (_bc ,_gbb ._d ,_cg ,_gbb ._fa [_dfg .PageNumber ],_gbb .Classer .PtaLL ,_gbb .Classer .UndilatedTemplates ,_gbb .Classer .ClassIDs ,nil ,_dbb (_aa ),len (_gbb ._fa [_dfg .PageNumber ]));
return nil ;};func (_bf *Document )parseFileHeader ()error {const _efg ="\u0070a\u0072s\u0065\u0046\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_ ,_aaae :=_bf .InputStream .Seek (8,_bb .SeekStart );if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u0069\u0064");
};_ ,_aaae =_bf .InputStream .ReadBits (5);if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074\u0073");};_ega ,_aaae :=_bf .InputStream .ReadBit ();if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u0065x\u0074e\u006e\u0064\u0065\u0064\u0020t\u0065\u006dp\u006c\u0061\u0074\u0065\u0073");
};if _ega ==1{_bf .GBUseExtTemplate =true ;};_ega ,_aaae =_bf .InputStream .ReadBit ();if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u0075\u006e\u006b\u006eow\u006e\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _ega !=1{_bf .NumberOfPagesUnknown =false ;
};_ega ,_aaae =_bf .InputStream .ReadBit ();if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074\u0069\u006f\u006e \u0074\u0079\u0070\u0065");};_bf .OrganizationType =_g .OrganizationType (_ega );if !_bf .NumberOfPagesUnknown {_bf .NumberOfPages ,_aaae =_bf .InputStream .ReadUint32 ();
if _aaae !=nil {return _ec .Wrap (_aaae ,_efg ,"\u006eu\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0067\u0065\u0073");};_bf ._fff =13;};return nil ;};func (_adg *Document )GetNumberOfPages ()(uint32 ,error ){if _adg .NumberOfPagesUnknown ||_adg .NumberOfPages ==0{if len (_adg .Pages )==0{if _gaf :=_adg .mapData ();
_gaf !=nil {return 0,_ec .Wrap (_gaf ,"\u0044o\u0063\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074N\u0075m\u0062e\u0072\u004f\u0066\u0050\u0061\u0067\u0065s","");};};return uint32 (len (_adg .Pages )),nil ;};return _adg .NumberOfPages ,nil ;};func (_dc *Document )nextPageNumber ()uint32 {_dc .NumberOfPages ++;
return _dc .NumberOfPages };func (_fe *Document )AddClassifiedPage (bm *_bd .Bitmap ,method _ecc .Method )(_bgd error ){const _ad ="\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0041\u0064d\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064P\u0061\u0067\u0065";
if !_fe .FullHeaders &&_fe .NumberOfPages !=0{return _ec .Error (_ad ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};if _fe .Classer ==nil {if _fe .Classer ,_bgd =_ecc .Init (_ecc .DefaultSettings ());_bgd !=nil {return _ec .Wrap (_bgd ,_ad ,"");};};_adf :=int (_fe .nextPageNumber ());_ecf :=&Page {Segments :[]*_g .Header {},Bitmap :bm ,Document :_fe ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,PageNumber :_adf };
_fe .Pages [_adf ]=_ecf ;switch method {case _ecc .RankHaus :_ecf .EncodingMethod =RankHausEM ;case _ecc .Correlation :_ecf .EncodingMethod =CorrelationEM ;};_ecf .AddPageInformationSegment ();if _bgd =_fe .Classer .AddPage (bm ,_adf ,method );_bgd !=nil {return _ec .Wrap (_bgd ,_ad ,"");
};if _fe .FullHeaders {_ecf .AddEndOfPageSegment ();};return nil ;};func (_daf *Page )AddEndOfPageSegment (){_ceea :=&_g .Header {Type :_g .TEndOfPage ,PageAssociation :_daf .PageNumber };_daf .Segments =append (_daf .Segments ,_ceea );};func (_bbf *Page )countRegions ()int {var _bfba int ;
for _ ,_gaga :=range _bbf .Segments {switch _gaga .Type {case 6,7,22,23,38,39,42,43:_bfba ++;};};return _bfba ;};func (_ged *Page )collectPageStripes ()(_fgb []_g .Segmenter ,_bed error ){const _geab ="\u0063o\u006cl\u0065\u0063\u0074\u0050\u0061g\u0065\u0053t\u0072\u0069\u0070\u0065\u0073";
var _bdb _g .Segmenter ;for _ ,_gag :=range _ged .Segments {switch _gag .Type {case 6,7,22,23,38,39,42,43:_bdb ,_bed =_gag .GetSegmentData ();if _bed !=nil {return nil ,_ec .Wrap (_bed ,_geab ,"");};_fgb =append (_fgb ,_bdb );case 50:_bdb ,_bed =_gag .GetSegmentData ();
if _bed !=nil {return nil ,_bed ;};_gffd ,_gfab :=_bdb .(*_g .EndOfStripe );if !_gfab {return nil ,_ec .Errorf (_geab ,"\u0045\u006e\u0064\u004f\u0066\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u006f\u0066\u0020\u0076\u0061l\u0069\u0064\u0020\u0074\u0079p\u0065\u003a \u0027\u0025\u0054\u0027",_bdb );
};_fgb =append (_fgb ,_gffd );_ged .FinalHeight =_gffd .LineNumber ();};};return _fgb ,nil ;};func (_bfg *Page )composePageBitmap ()error {const _eab ="\u0063\u006f\u006d\u0070\u006f\u0073\u0065\u0050\u0061\u0067\u0065\u0042i\u0074\u006d\u0061\u0070";if _bfg .PageNumber ==0{return nil ;
};_bda :=_bfg .getPageInformationSegment ();if _bda ==nil {return _ec .Error (_eab ,"\u0070\u0061\u0067e \u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069o\u006e \u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_fgcc ,_beac :=_bda .GetSegmentData ();if _beac !=nil {return _beac ;};_bbd ,_cbdd :=_fgcc .(*_g .PageInformationSegment );if !_cbdd {return _ec .Error (_eab ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006da\u0074\u0069\u006f\u006e \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065");
};if _beac =_bfg .createPage (_bbd );_beac !=nil {return _ec .Wrap (_beac ,_eab ,"");};_bfg .clearSegmentData ();return nil ;};func (_gbe *Document )reachedEOF (_eeg int64 )(bool ,error ){const _eec ="\u0072\u0065\u0061\u0063\u0068\u0065\u0064\u0045\u004f\u0046";
_ ,_acd :=_gbe .InputStream .Seek (_eeg ,_bb .SeekStart );if _acd !=nil {_ff .Log .Debug ("\u0072\u0065\u0061c\u0068\u0065\u0064\u0045\u004f\u0046\u0020\u002d\u0020\u0064\u002e\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u002e\u0053\u0065\u0065\u006b\u0020\u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_acd );
return false ,_ec .Wrap (_acd ,_eec ,"\u0069n\u0070\u0075\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020s\u0065\u0065\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};_ ,_acd =_gbe .InputStream .ReadBits (32);if _acd ==_bb .EOF {return true ,nil ;
}else if _acd !=nil {return false ,_ec .Wrap (_acd ,_eec ,"");};return false ,nil ;};const (GenericEM EncodingMethod =iota ;CorrelationEM ;RankHausEM ;);func _aaf (_dbg _fb .StreamReader ,_agd *Globals )(*Document ,error ){_ecfc :=&Document {Pages :make (map[int ]*Page ),InputStream :_dbg ,OrganizationType :_g .OSequential ,NumberOfPagesUnknown :true ,GlobalSegments :_agd ,_fff :9};
if _ecfc .GlobalSegments ==nil {_ecfc .GlobalSegments =&Globals {};};if _ebb :=_ecfc .mapData ();_ebb !=nil {return nil ,_ebb ;};return _ecfc ,nil ;};func (_bab *Page )GetResolutionY ()(int ,error ){return _bab .getResolutionY ()};func (_gfg *Document )GetGlobalSegment (i int )(*_g .Header ,error ){_ac ,_fagf :=_gfg .GlobalSegments .GetSegment (i );
if _fagf !=nil {return nil ,_ec .Wrap (_fagf ,"\u0047\u0065t\u0047\u006c\u006fb\u0061\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074","");};return _ac ,nil ;};type Document struct{Pages map[int ]*Page ;NumberOfPagesUnknown bool ;NumberOfPages uint32 ;
GBUseExtTemplate bool ;InputStream _fb .StreamReader ;GlobalSegments *Globals ;OrganizationType _g .OrganizationType ;Classer *_ecc .Classer ;XRes ,YRes int ;FullHeaders bool ;CurrentSegmentNumber uint32 ;AverageTemplates *_bd .Bitmaps ;BaseIndexes []int ;
Refinement bool ;RefineLevel int ;_fff uint8 ;_ecb *_fb .BufferedWriter ;EncodeGlobals bool ;_c int ;_bg map[int ][]int ;_fa map[int ][]int ;_gd []int ;_d map[int ]int ;};func _dcf (_cbg *Document ,_ebbg int )*Page {return &Page {Document :_cbg ,PageNumber :_ebbg ,Segments :[]*_g .Header {}};
};func DecodeDocument (input _fb .StreamReader ,globals *Globals )(*Document ,error ){return _aaf (input ,globals );};func (_bcgc *Page )getResolutionX ()(int ,error ){const _agbd ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0058";
if _bcgc .ResolutionX !=0{return _bcgc .ResolutionX ,nil ;};_eda :=_bcgc .getPageInformationSegment ();if _eda ==nil {return 0,_ec .Error (_agbd ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_acc ,_ccdb :=_eda .GetSegmentData ();
if _ccdb !=nil {return 0,_ec .Wrap (_ccdb ,_agbd ,"");};_fdaf ,_cec :=_acc .(*_g .PageInformationSegment );if !_cec {return 0,_ec .Errorf (_agbd ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_acc );
};_bcgc .ResolutionX =_fdaf .ResolutionX ;return _bcgc .ResolutionX ,nil ;};func (_gedb *Page )getCombinationOperator (_dgc *_g .PageInformationSegment ,_bcgb _bd .CombinationOperator )_bd .CombinationOperator {if _dgc .CombinationOperatorOverrideAllowed (){return _bcgb ;
};return _dgc .CombinationOperator ();};func (_dgab *Page )fitsPage (_dbffd *_g .PageInformationSegment ,_gee *_bd .Bitmap )bool {return _dgab .countRegions ()==1&&_dbffd .DefaultPixelValue ==0&&_dbffd .PageBMWidth ==_gee .Width &&_dbffd .PageBMHeight ==_gee .Height ;
};type Globals struct{Segments []*_g .Header ;};func (_fdae *Page )GetHeight ()(int ,error ){return _fdae .getHeight ()};func (_fec *Document )encodeSegment (_dfd *_g .Header ,_egc *int )error {const _ebg ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074";
_dfd .SegmentNumber =_fec .nextSegmentNumber ();_dg ,_cgd :=_dfd .Encode (_fec ._ecb );if _cgd !=nil {return _ec .Wrapf (_cgd ,_ebg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_dfd .SegmentNumber );};*_egc +=_dg ;return nil ;
};type Page struct{Segments []*_g .Header ;PageNumber int ;Bitmap *_bd .Bitmap ;FinalHeight int ;FinalWidth int ;ResolutionX int ;ResolutionY int ;IsLossless bool ;Document *Document ;FirstSegmentNumber int ;EncodingMethod EncodingMethod ;BlackIsOne bool ;
};func (_geg *Page )String ()string {return _a .Sprintf ("\u0050\u0061\u0067\u0065\u0020\u0023\u0025\u0064",_geg .PageNumber );};func (_aeb *Page )addTextRegionSegment (_aag []*_g .Header ,_adb ,_gfd map[int ]int ,_fde []int ,_fga *_bd .Points ,_eaf *_bd .Bitmaps ,_adcf *_ee .IntSlice ,_dbff *_bd .Boxes ,_fef ,_ge int ){_gfa :=&_g .TextRegion {NumberOfSymbols :uint32 (_ge )};
_gfa .InitEncode (_adb ,_gfd ,_fde ,_fga ,_eaf ,_adcf ,_dbff ,_aeb .FinalWidth ,_aeb .FinalHeight ,_fef );_gff :=&_g .Header {RTSegments :_aag ,SegmentData :_gfa ,PageAssociation :_aeb .PageNumber ,Type :_g .TImmediateTextRegion };_bca :=_g .TPageInformation ;
if _gfd !=nil {_bca =_g .TSymbolDictionary ;};var _ded int ;for ;_ded < len (_aeb .Segments );_ded ++{if _aeb .Segments [_ded ].Type ==_bca {_ded ++;break ;};};_aeb .Segments =append (_aeb .Segments ,nil );copy (_aeb .Segments [_ded +1:],_aeb .Segments [_ded :]);
_aeb .Segments [_ded ]=_gff ;};func (_dbd *Document )produceClassifiedPages ()(_fc error ){const _gdg ="\u0070\u0072\u006f\u0064uc\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067e\u0073";if _dbd .Classer ==nil {return nil ;
};var (_ed *Page ;_adc bool ;_gb *_g .Header ;);for _df :=1;_df <=int (_dbd .NumberOfPages );_df ++{if _ed ,_adc =_dbd .Pages [_df ];!_adc {return _ec .Errorf (_gdg ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_df );
};if _ed .EncodingMethod ==GenericEM {continue ;};if _gb ==nil {if _gb ,_fc =_dbd .GlobalSegments .GetSymbolDictionary ();_fc !=nil {return _ec .Wrap (_fc ,_gdg ,"");};};if _fc =_dbd .produceClassifiedPage (_ed ,_gb );_fc !=nil {return _ec .Wrapf (_fc ,_gdg ,"\u0070\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_df );
};};return nil ;};func (_dfdb *Page )nextSegmentNumber ()uint32 {return _dfdb .Document .nextSegmentNumber ()};func (_ecg *Page )GetBitmap ()(_gfgf *_bd .Bitmap ,_egca error ){_ff .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041G\u0045\u005d\u005b\u0023%\u0064\u005d\u0020\u0047\u0065\u0074\u0042i\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e",_ecg .PageNumber ));
defer func (){if _egca !=nil {_ff .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074B\u0069t\u006d\u0061\u0070\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ecg .PageNumber ,_egca ));
}else {_ff .Log .Trace (_a .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064]\u0020\u0047\u0065\u0074\u0042\u0069\u0074m\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064",_ecg .PageNumber ));};}();if _ecg .Bitmap !=nil {return _ecg .Bitmap ,nil ;
};_egca =_ecg .composePageBitmap ();if _egca !=nil {return nil ,_egca ;};return _ecg .Bitmap ,nil ;};func (_dde *Page )GetResolutionX ()(int ,error ){return _dde .getResolutionX ()};func (_cfd *Document )mapData ()error {const _egb ="\u006da\u0070\u0044\u0061\u0074\u0061";
var (_cge []*_g .Header ;_fbed int64 ;_dga _g .Type ;);_gdbbd ,_baf :=_cfd .isFileHeaderPresent ();if _baf !=nil {return _ec .Wrap (_baf ,_egb ,"");};if _gdbbd {if _baf =_cfd .parseFileHeader ();_baf !=nil {return _ec .Wrap (_baf ,_egb ,"");};_fbed +=int64 (_cfd ._fff );
_cfd .FullHeaders =true ;};var (_bbe *Page ;_adfa bool ;);for _dga !=51&&!_adfa {_fffb ,_gfgg :=_g .NewHeader (_cfd ,_cfd .InputStream ,_fbed ,_cfd .OrganizationType );if _gfgg !=nil {return _ec .Wrap (_gfgg ,_egb ,"");};_ff .Log .Trace ("\u0044\u0065c\u006f\u0064\u0069\u006eg\u0020\u0073e\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u0075m\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c\u0020\u0054\u0079\u0070e\u003a\u0020\u0025\u0073",_fffb .SegmentNumber ,_fffb .Type );
_dga =_fffb .Type ;if _dga !=_g .TEndOfFile {if _fffb .PageAssociation !=0{_bbe =_cfd .Pages [_fffb .PageAssociation ];if _bbe ==nil {_bbe =_dcf (_cfd ,_fffb .PageAssociation );_cfd .Pages [_fffb .PageAssociation ]=_bbe ;if _cfd .NumberOfPagesUnknown {_cfd .NumberOfPages ++;
};};_bbe .Segments =append (_bbe .Segments ,_fffb );}else {_cfd .GlobalSegments .AddSegment (_fffb );};};_cge =append (_cge ,_fffb );_fbed =_cfd .InputStream .StreamPosition ();if _cfd .OrganizationType ==_g .OSequential {_fbed +=int64 (_fffb .SegmentDataLength );
};_adfa ,_gfgg =_cfd .reachedEOF (_fbed );if _gfgg !=nil {_ff .Log .Debug ("\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0072\u0065\u0061\u0063h\u0065\u0064\u0020\u0045\u004f\u0046\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gfgg );
return _ec .Wrap (_gfgg ,_egb ,"");};};_cfd .determineRandomDataOffsets (_cge ,uint64 (_fbed ));return nil ;};func (_ddcg *Document )nextSegmentNumber ()uint32 {_becg :=_ddcg .CurrentSegmentNumber ;_ddcg .CurrentSegmentNumber ++;return _becg ;};func (_ced *Page )createStripedPage (_aafa *_g .PageInformationSegment )error {const _abcb ="\u0063\u0072\u0065\u0061\u0074\u0065\u0053\u0074\u0072\u0069\u0070\u0065d\u0050\u0061\u0067\u0065";
_aac ,_ggf :=_ced .collectPageStripes ();if _ggf !=nil {return _ec .Wrap (_ggf ,_abcb ,"");};var _efd int ;for _ ,_gef :=range _aac {if _ccc ,_eeca :=_gef .(*_g .EndOfStripe );_eeca {_efd =_ccc .LineNumber ()+1;}else {_egcc :=_gef .(_g .Regioner );_egcd :=_egcc .GetRegionInfo ();
_dfb :=_ced .getCombinationOperator (_aafa ,_egcd .CombinaionOperator );_ebe ,_fffg :=_egcc .GetRegionBitmap ();if _fffg !=nil {return _ec .Wrap (_fffg ,_abcb ,"");};_fffg =_bd .Blit (_ebe ,_ced .Bitmap ,int (_egcd .XLocation ),_efd ,_dfb );if _fffg !=nil {return _ec .Wrap (_fffg ,_abcb ,"");
};};};return nil ;};func (_feg *Page )GetWidth ()(int ,error ){return _feg .getWidth ()};func (_afdc *Page )clearSegmentData (){for _cccg :=range _afdc .Segments {_afdc .Segments [_cccg ].CleanSegmentData ();};};func InitEncodeDocument (fullHeaders bool )*Document {return &Document {FullHeaders :fullHeaders ,_ecb :_fb .BufferedMSB (),Pages :map[int ]*Page {},_bg :map[int ][]int {},_d :map[int ]int {},_fa :map[int ][]int {}};
};func (_cdc *Page )createNormalPage (_gdda *_g .PageInformationSegment )error {const _dff ="\u0063\u0072e\u0061\u0074\u0065N\u006f\u0072\u006d\u0061\u006c\u0050\u0061\u0067\u0065";_cdc .Bitmap =_bd .New (_gdda .PageBMWidth ,_gdda .PageBMHeight );if _gdda .DefaultPixelValue !=0{_cdc .Bitmap .SetDefaultPixel ();
};for _ ,_eccb :=range _cdc .Segments {switch _eccb .Type {case 6,7,22,23,38,39,42,43:_ff .Log .Trace ("\u0047\u0065\u0074\u0074in\u0067\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0064",_eccb .SegmentNumber );_fdg ,_gea :=_eccb .GetSegmentData ();
if _gea !=nil {return _gea ;};_aeda ,_efe :=_fdg .(_g .Regioner );if !_efe {_ff .Log .Debug ("\u0053\u0065g\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069on\u0065\u0072",_fdg );
return _ec .Errorf (_dff ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062i\u0067\u0032\u0020\u0073\u0065\u0067\u006den\u0074\u0020\u0074\u0079p\u0065\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061 R\u0065\u0067i\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_fdg );
};_age ,_gea :=_aeda .GetRegionBitmap ();if _gea !=nil {return _ec .Wrap (_gea ,_dff ,"");};if _cdc .fitsPage (_gdda ,_age ){_cdc .Bitmap =_age ;}else {_cbb :=_aeda .GetRegionInfo ();_eged :=_cdc .getCombinationOperator (_gdda ,_cbb .CombinaionOperator );
_gea =_bd .Blit (_age ,_cdc .Bitmap ,int (_cbb .XLocation ),int (_cbb .YLocation ),_eged );if _gea !=nil {return _ec .Wrap (_gea ,_dff ,"");};};};};return nil ;};func (_cef *Page )getResolutionY ()(int ,error ){const _dfc ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0059";
if _cef .ResolutionY !=0{return _cef .ResolutionY ,nil ;};_eacd :=_cef .getPageInformationSegment ();if _eacd ==nil {return 0,_ec .Error (_dfc ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_afdcc ,_ccde :=_eacd .GetSegmentData ();
if _ccde !=nil {return 0,_ec .Wrap (_ccde ,_dfc ,"");};_dcgc ,_gfe :=_afdcc .(*_g .PageInformationSegment );if !_gfe {return 0,_ec .Errorf (_dfc ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0027%\u0054\u0027",_afdcc );
};_cef .ResolutionY =_dcgc .ResolutionY ;return _cef .ResolutionY ,nil ;};func (_cdg *Document )determineRandomDataOffsets (_da []*_g .Header ,_dad uint64 ){if _cdg .OrganizationType !=_g .ORandom {return ;};for _ ,_gad :=range _da {_gad .SegmentDataStartOffset =_dad ;
_dad +=_gad .SegmentDataLength ;};};func (_bbg *Page )getHeight ()(int ,error ){const _ddb ="\u0067e\u0074\u0048\u0065\u0069\u0067\u0068t";if _bbg .FinalHeight !=0{return _bbg .FinalHeight ,nil ;};_cbf :=_bbg .getPageInformationSegment ();if _cbf ==nil {return 0,_ec .Error (_ddb ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_agec ,_beb :=_cbf .GetSegmentData ();if _beb !=nil {return 0,_ec .Wrap (_beb ,_ddb ,"");};_bbbe ,_ebgf :=_agec .(*_g .PageInformationSegment );if !_ebgf {return 0,_ec .Errorf (_ddb ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_agec );
};if _bbbe .PageBMHeight ==_f .MaxInt32 {_ ,_beb =_bbg .GetBitmap ();if _beb !=nil {return 0,_ec .Wrap (_beb ,_ddb ,"");};}else {_bbg .FinalHeight =_bbbe .PageBMHeight ;};return _bbg .FinalHeight ,nil ;};func (_eff *Document )encodeFileHeader (_cag _fb .BinaryWriter )(_agb int ,_cgg error ){const _dac ="\u0065\u006ec\u006f\u0064\u0065F\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_agb ,_cgg =_cag .Write (_eca );if _cgg !=nil {return _agb ,_ec .Wrap (_cgg ,_dac ,"\u0069\u0064");};if _cgg =_cag .WriteByte (0x01);_cgg !=nil {return _agb ,_ec .Wrap (_cgg ,_dac ,"\u0066\u006c\u0061g\u0073");};_agb ++;_cfb :=make ([]byte ,4);_b .BigEndian .PutUint32 (_cfb ,_eff .NumberOfPages );
_edc ,_cgg :=_cag .Write (_cfb );if _cgg !=nil {return _edc ,_ec .Wrap (_cgg ,_dac ,"p\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agb +=_edc ;return _agb ,nil ;};func (_cee *Globals )GetSegmentByIndex (index int )(*_g .Header ,error ){const _bgde ="\u0047l\u006f\u0062\u0061\u006cs\u002e\u0047\u0065\u0074\u0053e\u0067m\u0065n\u0074\u0042\u0079\u0049\u006e\u0064\u0065x";
if _cee ==nil {return nil ,_ec .Error (_bgde ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_cee .Segments )==0{return nil ,_ec .Error (_bgde ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};if index > len (_cee .Segments )-1{return nil ,_ec .Error (_bgde ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};return _cee .Segments [index ],nil ;};func (_bbae *Page )GetSegment (number int )(*_g .Header ,error ){const _abbd ="\u0050a\u0067e\u002e\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074";
for _ ,_dcgg :=range _bbae .Segments {if _dcgg .SegmentNumber ==uint32 (number ){return _dcgg ,nil ;};};_fca :=make ([]uint32 ,len (_bbae .Segments ));for _ceg ,_gca :=range _bbae .Segments {_fca [_ceg ]=_gca .SegmentNumber ;};return nil ,_ec .Errorf (_abbd ,"\u0073e\u0067\u006d\u0065n\u0074\u0020\u0077i\u0074h \u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u003a\u0020'%\u0064'\u002e\u0020\u004b\u006e\u006f\u0077n\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u003a \u0025\u0076",number ,_bbae .PageNumber ,_fca );
};func (_gdb *Document )completeClassifiedPages ()(_be error ){const _db ="\u0063\u006f\u006dpl\u0065\u0074\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067\u0065\u0073";if _gdb .Classer ==nil {return nil ;};_gdb ._gd =make ([]int ,_gdb .Classer .UndilatedTemplates .Size ());
for _fag :=0;_fag < _gdb .Classer .ClassIDs .Size ();_fag ++{_fbe ,_fd :=_gdb .Classer .ClassIDs .Get (_fag );if _fd !=nil {return _ec .Wrapf (_fd ,_db ,"\u0063\u006c\u0061\u0073s \u0077\u0069\u0074\u0068\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027",_fag );
};_gdb ._gd [_fbe ]++;};var _dd []int ;for _ef :=0;_ef < _gdb .Classer .UndilatedTemplates .Size ();_ef ++{if _gdb .NumberOfPages ==1||_gdb ._gd [_ef ]> 1{_dd =append (_dd ,_ef );};};var (_ba *Page ;_cc bool ;);for _fdf ,_egf :=range *_gdb .Classer .ComponentPageNumbers {if _ba ,_cc =_gdb .Pages [_egf ];
!_cc {return _ec .Errorf (_db ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_fdf );};if _ba .EncodingMethod ==GenericEM {_ff .Log .Error ("\u0047\u0065\u006e\u0065\u0072\u0069c\u0020\u0070\u0061g\u0065\u0020\u0077i\u0074\u0068\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020ma\u0070\u0070\u0065\u0064\u0020\u0061\u0073\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0020\u0070\u0061\u0067\u0065",_fdf );
continue ;};_gdb ._fa [_egf ]=append (_gdb ._fa [_egf ],_fdf );_af ,_bbc :=_gdb .Classer .ClassIDs .Get (_fdf );if _bbc !=nil {return _ec .Wrapf (_bbc ,_db ,"\u006e\u006f\u0020\u0073uc\u0068\u0020\u0063\u006c\u0061\u0073\u0073\u0049\u0044\u003a\u0020\u0025\u0064",_fdf );
};if _gdb ._gd [_af ]==1&&_gdb .NumberOfPages !=1{_eea :=append (_gdb ._bg [_egf ],_af );_gdb ._bg [_egf ]=_eea ;};};if _be =_gdb .Classer .ComputeLLCorners ();_be !=nil {return _ec .Wrap (_be ,_db ,"");};if _ ,_be =_gdb .addSymbolDictionary (0,_gdb .Classer .UndilatedTemplates ,_dd ,_gdb ._d ,false );
_be !=nil {return _ec .Wrap (_be ,_db ,"");};return nil ;};func (_abcc *Page )Encode (w _fb .BinaryWriter )(_bfb int ,_bea error ){const _eac ="P\u0061\u0067\u0065\u002e\u0045\u006e\u0063\u006f\u0064\u0065";var _gdd int ;for _ ,_ccg :=range _abcc .Segments {if _gdd ,_bea =_ccg .Encode (w );
_bea !=nil {return _bfb ,_ec .Wrap (_bea ,_eac ,"");};_bfb +=_gdd ;};return _bfb ,nil ;};var _eca =[]byte {0x97,0x4A,0x42,0x32,0x0D,0x0A,0x1A,0x0A};func (_fda *Page )AddGenericRegion (bm *_bd .Bitmap ,xloc ,yloc ,template int ,tp _g .Type ,duplicateLineRemoval bool )error {const _dbef ="P\u0061\u0067\u0065\u002eAd\u0064G\u0065\u006e\u0065\u0072\u0069c\u0052\u0065\u0067\u0069\u006f\u006e";
_afd :=&_g .GenericRegion {};if _bbbb :=_afd .InitEncode (bm ,xloc ,yloc ,template ,duplicateLineRemoval );_bbbb !=nil {return _ec .Wrap (_bbbb ,_dbef ,"");};_ccdg :=&_g .Header {Type :_g .TImmediateGenericRegion ,PageAssociation :_fda .PageNumber ,SegmentData :_afd };
_fda .Segments =append (_fda .Segments ,_ccdg );return nil ;};func (_dcd *Page )getPageInformationSegment ()*_g .Header {for _ ,_abca :=range _dcd .Segments {if _abca .Type ==_g .TPageInformation {return _abca ;};};_ff .Log .Debug ("\u0050\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0066o\u0072\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0073\u002e",_dcd );
return nil ;};func (_abb *Globals )AddSegment (segment *_g .Header ){_abb .Segments =append (_abb .Segments ,segment )};func (_bce *Document )completeSymbols ()(_gde error ){const _ag ="\u0063o\u006dp\u006c\u0065\u0074\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
if _bce .Classer ==nil {return nil ;};if _bce .Classer .UndilatedTemplates ==nil {return _ec .Error (_ag ,"\u006e\u006f t\u0065\u006d\u0070l\u0061\u0074\u0065\u0073 de\u0066in\u0065\u0064\u0020\u0066\u006f\u0072\u0020th\u0065\u0020\u0063\u006c\u0061\u0073\u0073e\u0072");
};_fbd :=len (_bce .Pages )==1;_edb :=make ([]int ,_bce .Classer .UndilatedTemplates .Size ());var _ddc int ;for _bbb :=0;_bbb < _bce .Classer .ClassIDs .Size ();_bbb ++{_ddc ,_gde =_bce .Classer .ClassIDs .Get (_bbb );if _gde !=nil {return _ec .Wrap (_gde ,_ag ,"\u0063\u006c\u0061\u0073\u0073\u0020\u0049\u0044\u0027\u0073");
};_edb [_ddc ]++;};var _cgc []int ;for _ga :=0;_ga < _bce .Classer .UndilatedTemplates .Size ();_ga ++{if _edb [_ga ]==0{return _ec .Error (_ag ,"\u006eo\u0020\u0073y\u006d\u0062\u006f\u006cs\u0020\u0069\u006es\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006fun\u0064\u0020\u0066o\u0072\u0020g\u0069\u0076\u0065\u006e\u0020\u0063l\u0061\u0073s\u003f\u0020");
};if _edb [_ga ]> 1||_fbd {_cgc =append (_cgc ,_ga );};};_bce ._c =len (_cgc );var _cf ,_gbf int ;for _edf :=0;_edf < _bce .Classer .ComponentPageNumbers .Size ();_edf ++{_cf ,_gde =_bce .Classer .ComponentPageNumbers .Get (_edf );if _gde !=nil {return _ec .Wrapf (_gde ,_ag ,"p\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027 \u006e\u006f\u0074\u0020\u0066\u006f\u0075nd\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0063\u006c\u0061\u0073\u0073\u0065r \u0070\u0061g\u0065\u006e\u0075\u006d\u0062\u0065\u0072\u0073",_edf );
};_gbf ,_gde =_bce .Classer .ClassIDs .Get (_edf );if _gde !=nil {return _ec .Wrapf (_gde ,_ag ,"\u0063\u0061\u006e\u0027\u0074\u0020\u0067e\u0074\u0020\u0073y\u006d\u0062\u006f\u006c \u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027\u0020\u0066\u0072\u006f\u006d\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072",_cf );
};if _edb [_gbf ]==1&&!_fbd {_bce ._bg [_cf ]=append (_bce ._bg [_cf ],_gbf );};};if _gde =_bce .Classer .ComputeLLCorners ();_gde !=nil {return _ec .Wrap (_gde ,_ag ,"");};return nil ;};type EncodingMethod int ;func (_becb *Document )encodeEOFHeader (_egdf _fb .BinaryWriter )(_ceb int ,_fab error ){_bcf :=&_g .Header {SegmentNumber :_becb .nextSegmentNumber (),Type :_g .TEndOfFile };
if _ceb ,_fab =_bcf .Encode (_egdf );_fab !=nil {return 0,_ec .Wrap (_fab ,"\u0065n\u0063o\u0064\u0065\u0045\u004f\u0046\u0048\u0065\u0061\u0064\u0065\u0072","");};return _ceb ,nil ;};func (_gcd *Globals )GetSymbolDictionary ()(*_g .Header ,error ){const _eba ="G\u006c\u006f\u0062\u0061\u006c\u0073.\u0047\u0065\u0074\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079";
if _gcd ==nil {return nil ,_ec .Error (_eba ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_gcd .Segments )==0{return nil ,_ec .Error (_eba ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};for _ ,_becc :=range _gcd .Segments {if _becc .Type ==_g .TSymbolDictionary {return _becc ,nil ;};};return nil ,_ec .Error (_eba ,"\u0067\u006c\u006fba\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020d\u0069c\u0074i\u006fn\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};func _dbb (_gdbb int )int {_ffb :=0;_ddg :=(_gdbb &(_gdbb -1))==0;_gdbb >>=1;for ;_gdbb !=0;_gdbb >>=1{_ffb ++;};if _ddg {return _ffb ;};return _ffb +1;};func (_bbbf *Document )Encode ()(_dbf []byte ,_cfe error ){const _ea ="\u0044o\u0063u\u006d\u0065\u006e\u0074\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
var _eag ,_gdfc int ;if _bbbf .FullHeaders {if _eag ,_cfe =_bbbf .encodeFileHeader (_bbbf ._ecb );_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");};};var (_ccd bool ;_bec *_g .Header ;_ecad *Page ;);if _cfe =_bbbf .completeClassifiedPages ();_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");
};if _cfe =_bbbf .produceClassifiedPages ();_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");};if _bbbf .GlobalSegments !=nil {for _ ,_bec =range _bbbf .GlobalSegments .Segments {if _cfe =_bbbf .encodeSegment (_bec ,&_eag );_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");
};};};for _fcg :=1;_fcg <=int (_bbbf .NumberOfPages );_fcg ++{if _ecad ,_ccd =_bbbf .Pages [_fcg ];!_ccd {return nil ,_ec .Errorf (_ea ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_fcg );};for _ ,_bec =range _ecad .Segments {if _cfe =_bbbf .encodeSegment (_bec ,&_eag );
_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");};};};if _bbbf .FullHeaders {if _gdfc ,_cfe =_bbbf .encodeEOFHeader (_bbbf ._ecb );_cfe !=nil {return nil ,_ec .Wrap (_cfe ,_ea ,"");};_eag +=_gdfc ;};_dbf =_bbbf ._ecb .Data ();if len (_dbf )!=_eag {_ff .Log .Debug ("\u0042\u0079\u0074\u0065\u0073 \u0077\u0072\u0069\u0074\u0074\u0065\u006e \u0028\u006e\u0029\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0065\u006e\u0063\u006fd\u0065\u0064\u003a\u0020\u0027\u0025d\u0027",_eag ,len (_dbf ));
};return _dbf ,nil ;};func (_bdg *Page )lastSegmentNumber ()(_aad uint32 ,_agg error ){const _ceeg ="\u006c\u0061\u0073\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";if len (_bdg .Segments )==0{return _aad ,_ec .Errorf (_ceeg ,"\u006e\u006f\u0020se\u0067\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006fu\u006ed\u0020i\u006e \u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027",_bdg .PageNumber );
};return _bdg .Segments [len (_bdg .Segments )-1].SegmentNumber ,nil ;};func (_eb *Document )addSymbolDictionary (_gf int ,_bcg *_bd .Bitmaps ,_afc []int ,_ebd map[int ]int ,_bge bool )(*_g .Header ,error ){const _bcc ="\u0061\u0064\u0064\u0053ym\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079";
_ab :=&_g .SymbolDictionary {};if _cde :=_ab .InitEncode (_bcg ,_afc ,_ebd ,_bge );_cde !=nil {return nil ,_cde ;};_dbeb :=&_g .Header {Type :_g .TSymbolDictionary ,PageAssociation :_gf ,SegmentData :_ab };if _gf ==0{if _eb .GlobalSegments ==nil {_eb .GlobalSegments =&Globals {};
};_eb .GlobalSegments .AddSegment (_dbeb );return _dbeb ,nil ;};_ffbg ,_gg :=_eb .Pages [_gf ];if !_gg {return nil ,_ec .Errorf (_bcc ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_gf );};var (_ffg int ;
_dec *_g .Header ;);for _ffg ,_dec =range _ffbg .Segments {if _dec .Type ==_g .TPageInformation {break ;};};_ffg ++;_ffbg .Segments =append (_ffbg .Segments ,nil );copy (_ffbg .Segments [_ffg +1:],_ffbg .Segments [_ffg :]);_ffbg .Segments [_ffg ]=_dbeb ;
return _dbeb ,nil ;};func (_cb *Document )AddGenericPage (bm *_bd .Bitmap ,duplicateLineRemoval bool )(_ca error ){const _gc ="\u0044\u006f\u0063um\u0065\u006e\u0074\u002e\u0041\u0064\u0064\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0050\u0061\u0067\u0065";
if !_cb .FullHeaders &&_cb .NumberOfPages !=0{return _ec .Error (_gc ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};_gdf :=&Page {Segments :[]*_g .Header {},Bitmap :bm ,Document :_cb ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,IsLossless :true ,BlackIsOne :bm .Color ==_bd .Chocolate };_gdf .PageNumber =int (_cb .nextPageNumber ());_cb .Pages [_gdf .PageNumber ]=_gdf ;
bm .InverseData ();_gdf .AddPageInformationSegment ();if _ca =_gdf .AddGenericRegion (bm ,0,0,0,_g .TImmediateGenericRegion ,duplicateLineRemoval );_ca !=nil {return _ec .Wrap (_ca ,_gc ,"");};if _cb .FullHeaders {_gdf .AddEndOfPageSegment ();};return nil ;
};func (_bba *Page )AddPageInformationSegment (){_fdb :=&_g .PageInformationSegment {PageBMWidth :_bba .FinalWidth ,PageBMHeight :_bba .FinalHeight ,ResolutionX :_bba .ResolutionX ,ResolutionY :_bba .ResolutionY ,IsLossless :_bba .IsLossless };if _bba .BlackIsOne {_fdb .DefaultPixelValue =uint8 (0x1);
};_bgea :=&_g .Header {PageAssociation :_bba .PageNumber ,SegmentDataLength :uint64 (_fdb .Size ()),SegmentData :_fdb ,Type :_g .TPageInformation };_bba .Segments =append (_bba .Segments ,_bgea );};