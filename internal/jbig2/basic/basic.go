//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Max (x ,y int )int {if x > y {return x ;};return y ;};type IntsMap map[uint64 ][]int ;func (_eg *IntSlice )Add (v int )error {if _eg ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_eg =append (*_eg ,v );return nil ;};type NumSlice []float32 ;func NewIntSlice (i int )*IntSlice {_ec :=IntSlice (make ([]int ,i ));return &_ec };func (_dg *NumSlice )AddInt (v int ){*_dg =append (*_dg ,float32 (v ))};func (_gf *Stack )Pop ()(_af interface{},_ee bool ){_af ,_ee =_gf .peek ();
if !_ee {return nil ,_ee ;};_gf .Data =_gf .Data [:_gf .top ()];return _af ,true ;};func (_bd *Stack )Peek ()(_ece interface{},_adb bool ){return _bd .peek ()};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_ad NumSlice )GetIntSlice ()[]int {_dc :=make ([]int ,len (_ad ));
for _fd ,_cd :=range _ad {_dc [_fd ]=int (_cd );};return _dc ;};func (_cg IntSlice )Get (index int )(int ,error ){if index > len (_cg )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _cg [index ],nil ;};func NewNumSlice (i int )*NumSlice {_be :=NumSlice (make ([]float32 ,i ));return &_be };func (_e IntsMap )Add (key uint64 ,value int ){_e [key ]=append (_e [key ],value )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;
};return -1.0;};func (_ff IntsMap )Get (key uint64 )(int ,bool ){_b ,_eb :=_ff [key ];if !_eb {return 0,false ;};if len (_b )==0{return 0,false ;};return _b [0],true ;};func (_ef *Stack )Len ()int {return len (_ef .Data )};func (_egf *NumSlice )Add (v float32 ){*_egf =append (*_egf ,v )};
func (_d IntSlice )Size ()int {return len (_d )};func (_bb *Stack )top ()int {return len (_bb .Data )-1};func (_fe *IntSlice )Copy ()*IntSlice {_eac :=IntSlice (make ([]int ,len (*_fe )));copy (_eac ,*_fe );return &_eac ;};func (_gg *Stack )Push (v interface{}){_gg .Data =append (_gg .Data ,v )};
func Min (x ,y int )int {if x < y {return x ;};return y ;};type Stack struct{Data []interface{};Aux *Stack ;};type IntSlice []int ;func (_bg IntsMap )Delete (key uint64 ){delete (_bg ,key )};func (_fa *Stack )peek ()(interface{},bool ){_ggf :=_fa .top ();
if _ggf ==-1{return nil ,false ;};return _fa .Data [_ggf ],true ;};func (_ae NumSlice )GetInt (i int )(int ,error ){const _gb ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ae )-1{return 0,_c .Errorf (_gb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_fee :=_ae [i ];return int (_fee +Sign (_fee )*0.5),nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_ea IntsMap )GetSlice (key uint64 )([]int ,bool ){_g ,_gc :=_ea [key ];
if !_gc {return nil ,false ;};return _g ,true ;};func (_a NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_a )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _a [i ],nil ;};