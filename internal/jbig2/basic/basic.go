//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_fd NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_fd )-1{return 0,_b .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fd [i ],nil ;};func (_beb *Stack )Len ()int {return len (_beb .Data )};func (_ge IntSlice )Size ()int {return len (_ge )};func (_f IntSlice )Get (index int )(int ,error ){if index > len (_f )-1{return 0,_b .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _f [index ],nil ;};func (_cb *IntSlice )Copy ()*IntSlice {_bd :=IntSlice (make ([]int ,len (*_cb )));copy (_bd ,*_cb );return &_bd ;};func (_g IntsMap )GetSlice (key uint64 )([]int ,bool ){_gg ,_be :=_g [key ];if !_be {return nil ,false ;};return _gg ,true ;
};func Abs (v int )int {if v > 0{return v ;};return -v ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func NewNumSlice (i int )*NumSlice {_cc :=NumSlice (make ([]float32 ,i ));return &_cc };func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_df NumSlice )GetInt (i int )(int ,error ){const _ccb ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_df )-1{return 0,_b .Errorf (_ccb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_fa :=_df [i ];return int (_fa +Sign (_fa )*0.5),nil ;};type NumSlice []float32 ;func (_bc IntsMap )Get (key uint64 )(int ,bool ){_d ,_a :=_bc [key ];if !_a {return 0,false ;};if len (_d )==0{return 0,false ;};return _d [0],true ;};func (_cef *Stack )top ()int {return len (_cef .Data )-1};
func (_ca IntsMap )Add (key uint64 ,value int ){_ca [key ]=append (_ca [key ],value )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_ggd *Stack )Pop ()(_ed interface{},_ae bool ){_ed ,_ae =_ggd .peek ();if !_ae {return nil ,_ae ;
};_ggd .Data =_ggd .Data [:_ggd .top ()];return _ed ,true ;};func (_fe *Stack )Peek ()(_de interface{},_age bool ){return _fe .peek ()};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_dee *Stack )peek ()(interface{},bool ){_dgb :=_dee .top ();
if _dgb ==-1{return nil ,false ;};return _dee .Data [_dgb ],true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_e NumSlice )GetIntSlice ()[]int {_ce :=make ([]int ,len (_e ));for _ag ,_ced :=range _e {_ce [_ag ]=int (_ced );};return _ce ;
};func (_ba *NumSlice )AddInt (v int ){*_ba =append (*_ba ,float32 (v ))};func (_fb *Stack )Push (v interface{}){_fb .Data =append (_fb .Data ,v )};type IntsMap map[uint64 ][]int ;func (_dg IntsMap )Delete (key uint64 ){delete (_dg ,key )};type IntSlice []int ;
func (_gc *IntSlice )Add (v int )error {if _gc ==nil {return _b .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_gc =append (*_gc ,v );
return nil ;};func (_gcd *NumSlice )Add (v float32 ){*_gcd =append (*_gcd ,v )};func NewIntSlice (i int )*IntSlice {_caa :=IntSlice (make ([]int ,i ));return &_caa };