//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _ca "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_cg IntsMap )Add (key uint64 ,value int ){_cg [key ]=append (_cg [key ],value )};func (_bfc NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_bfc )-1{return 0,_ca .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bfc [i ],nil ;};func (_cb *Stack )top ()int {return len (_cb .Data )-1};func (_f IntsMap )Delete (key uint64 ){delete (_f ,key )};func (_ee *Stack )Pop ()(_bfd interface{},_cec bool ){_bfd ,_cec =_ee .peek ();if !_cec {return nil ,_cec ;};_ee .Data =_ee .Data [:_ee .top ()];
return _bfd ,true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_e IntsMap )GetSlice (key uint64 )([]int ,bool ){_a ,_aa :=_e [key ];if !_aa {return nil ,false ;};return _a ,true ;};func (_ae *Stack )peek ()(interface{},bool ){_ef :=_ae .top ();
if _ef ==-1{return nil ,false ;};return _ae .Data [_ef ],true ;};func (_fg *NumSlice )AddInt (v int ){*_fg =append (*_fg ,float32 (v ))};func (_eg *IntSlice )Copy ()*IntSlice {_d :=IntSlice (make ([]int ,len (*_eg )));copy (_d ,*_eg );return &_d ;};func (_ac IntSlice )Get (index int )(int ,error ){if index > len (_ac )-1{return 0,_ca .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ac [index ],nil ;};func (_ba *Stack )Push (v interface{}){_ba .Data =append (_ba .Data ,v )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_b IntSlice )Size ()int {return len (_b )};
type NumSlice []float32 ;func (_acf *NumSlice )Add (v float32 ){*_acf =append (*_acf ,v )};type IntSlice []int ;func (_ec *Stack )Peek ()(_fb interface{},_aaa bool ){return _ec .peek ()};func NewNumSlice (i int )*NumSlice {_bf :=NumSlice (make ([]float32 ,i ));
return &_bf };func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_g IntsMap )Get (key uint64 )(int ,bool ){_cae ,_cgc :=_g [key ];if !_cgc {return 0,false ;};if len (_cae )==0{return 0,false ;
};return _cae [0],true ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_gg *Stack )Len ()int {return len (_gg .Data )};func (_ce NumSlice )GetInt (i int )(int ,error ){const _ge ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ce )-1{return 0,_ca .Errorf (_ge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_gd :=_ce [i ];return int (_gd +Sign (_gd )*0.5),nil ;};type IntsMap map[uint64 ][]int ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_cc *IntSlice )Add (v int )error {if _cc ==nil {return _ca .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_cc =append (*_cc ,v );return nil ;};func NewIntSlice (i int )*IntSlice {_ff :=IntSlice (make ([]int ,i ));return &_ff };func (_fe NumSlice )GetIntSlice ()[]int {_cgd :=make ([]int ,len (_fe ));for _db ,_ged :=range _fe {_cgd [_db ]=int (_ged );};return _cgd ;
};