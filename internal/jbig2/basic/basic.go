//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_cb NumSlice )GetIntSlice ()[]int {_gag :=make ([]int ,len (_cb ));for _gde ,_bc :=range _cb {_gag [_gde ]=int (_bc );};return _gag ;};func (_ccb *NumSlice )AddInt (v int ){*_ccb =append (*_ccb ,float32 (v ))};type NumSlice []float32 ;func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_daf *Stack )Push (v interface{}){_daf .Data =append (_daf .Data ,v )};func (_dd *Stack )Peek ()(_fae interface{},_eb bool ){return _dd .peek ()};func (_fa IntsMap )Get (key uint64 )(int ,bool ){_d ,_ff :=_fa [key ];if !_ff {return 0,false ;};if len (_d )==0{return 0,false ;};return _d [0],true ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_e IntsMap )GetSlice (key uint64 )([]int ,bool ){_b ,_da :=_e [key ];if !_da {return nil ,false ;};return _b ,true ;};type IntsMap map[uint64 ][]int ;func (_a IntsMap )Delete (key uint64 ){delete (_a ,key )};type Stack struct{Data []interface{};Aux *Stack ;};func (_af *Stack )peek ()(interface{},bool ){_gf :=_af .top ();if _gf ==-1{return nil ,false ;};return _af .Data [_gf ],true ;};func (_gg IntSlice )Size ()int {return len (_gg )};func (_ae NumSlice )GetInt (i int )(int ,error ){const _gd ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ae )-1{return 0,_c .Errorf (_gd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_gdc :=_ae [i ];return int (_gdc +Sign (_gdc )*0.5),nil ;};func NewIntSlice (i int )*IntSlice {_ca :=IntSlice (make ([]int ,i ));return &_ca };func (_gad *NumSlice )Add (v float32 ){*_gad =append (*_gad ,v )};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_bf NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_bf )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bf [i ],nil ;};func (_dac *IntSlice )Add (v int )error {if _dac ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_dac =append (*_dac ,v );return nil ;};func (_ed *Stack )top ()int {return len (_ed .Data )-1};func (_cc IntSlice )Get (index int )(int ,error ){if index > len (_cc )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _cc [index ],nil ;};func (_bd *IntSlice )Copy ()*IntSlice {_fe :=IntSlice (make ([]int ,len (*_bd )));copy (_fe ,*_bd );return &_fe ;};func (_bfe *Stack )Pop ()(_fd interface{},_gac bool ){_fd ,_gac =_bfe .peek ();if !_gac {return nil ,_gac ;};_bfe .Data =_bfe .Data [:_bfe .top ()];return _fd ,true ;};func (_ge *Stack )Len ()int {return len (_ge .Data )};type IntSlice []int ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_f IntsMap )Add (key uint64 ,value int ){_f [key ]=append (_f [key ],value )};func NewNumSlice (i int )*NumSlice {_ga :=NumSlice (make ([]float32 ,i ));return &_ga };