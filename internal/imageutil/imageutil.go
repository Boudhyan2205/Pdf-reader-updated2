//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_b "encoding/binary";_c "errors";_bg "fmt";_fa "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/internal/bitwise";_fb "image";_cg "image/color";_fc "image/draw";_g "math";);func _egb (_fdbg _cg .RGBA )_cg .CMYK {_bebe ,_cgf ,_eeec ,_ccfd :=_cg .RGBToCMYK (_fdbg .R ,_fdbg .G ,_fdbg .B );
return _cg .CMYK {C :_bebe ,M :_cgf ,Y :_eeec ,K :_ccfd };};func (_adcg *NRGBA16 )setNRGBA (_abfa ,_bacc ,_eaed int ,_fagf _cg .NRGBA ){if _abfa *3%2==0{_adcg .Data [_eaed ]=(_fagf .R >>4)<<4|(_fagf .G >>4);_adcg .Data [_eaed +1]=(_fagf .B >>4)<<4|(_adcg .Data [_eaed +1]&0xf);
}else {_adcg .Data [_eaed ]=(_adcg .Data [_eaed ]&0xf0)|(_fagf .R >>4);_adcg .Data [_eaed +1]=(_fagf .G >>4)<<4|(_fagf .B >>4);};if _adcg .Alpha !=nil {_bfg :=_bacc *BytesPerLine (_adcg .Width ,4,1);if _bfg < len (_adcg .Alpha ){if _abfa %2==0{_adcg .Alpha [_bfg ]=(_fagf .A >>uint (4))<<uint (4)|(_adcg .Alpha [_eaed ]&0xf);
}else {_adcg .Alpha [_bfg ]=(_adcg .Alpha [_bfg ]&0xf0)|(_fagf .A >>uint (4));};};};};func _bage (_gfcd *Monochrome ,_gcd ,_aaed ,_gdff ,_fcge int ,_fgcbd RasterOperator ,_fcdc *Monochrome ,_aagg ,_eaeb int )error {if _gfcd ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _fgcbd ==PixDst {return nil ;};switch _fgcbd {case PixClr ,PixSet ,PixNotDst :_eaea (_gfcd ,_gcd ,_aaed ,_gdff ,_fcge ,_fgcbd );return nil ;};if _fcdc ==nil {_fa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _deab :=_bcf (_gfcd ,_gcd ,_aaed ,_gdff ,_fcge ,_fgcbd ,_fcdc ,_aagg ,_eaeb );_deab !=nil {return _deab ;};return nil ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_cg .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_bg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func ImgToGray (i _fb .Image )*_fb .Gray {if _cagd ,_bfdg :=i .(*_fb .Gray );_bfdg {return _cagd ;};_eddfa :=i .Bounds ();_cfcd :=_fb .NewGray (_eddfa );for _acbb :=0;_acbb < _eddfa .Max .X ;_acbb ++{for _fadcd :=0;_fadcd < _eddfa .Max .Y ;_fadcd ++{_deec :=i .At (_acbb ,_fadcd );
_cfcd .Set (_acbb ,_fadcd ,_deec );};};return _cfcd ;};var _ _fb .Image =&NRGBA16 {};func _gdabc (_cfab *_fb .NYCbCrA ,_aabfb NRGBA ,_faec _fb .Rectangle ){for _facd :=0;_facd < _faec .Max .X ;_facd ++{for _fcgg :=0;_fcgg < _faec .Max .Y ;_fcgg ++{_aegc :=_cfab .NYCbCrAAt (_facd ,_fcgg );
_aabfb .SetNRGBA (_facd ,_fcgg ,_dfcg (_aegc ));};};};func (_egafd *Monochrome )clearBit (_geb ,_eaa int ){_egafd .Data [_geb ]&=^(0x80>>uint (_eaa &7))};var (Gray2Model =_cg .ModelFunc (_fbc );Gray4Model =_cg .ModelFunc (_ddb );NRGBA16Model =_cg .ModelFunc (_fcac );
);func (_cee *Gray16 )GrayAt (x ,y int )_cg .Gray {_edf ,_ :=_cee .ColorAt (x ,y );return _cg .Gray {Y :uint8 (_edf .(_cg .Gray16 ).Y >>8)};};func (_ccd *Gray16 )SetGray (x ,y int ,g _cg .Gray ){_bcbb :=(y *_ccd .BytesPerLine /2+x )*2;if _bcbb +1>=len (_ccd .Data ){return ;
};_ccd .Data [_bcbb ]=g .Y ;_ccd .Data [_bcbb +1]=g .Y ;};func _egaf (_gcfcf _cg .NRGBA64 )_cg .RGBA {_egg ,_dcd ,_afae ,_cbfdc :=_gcfcf .RGBA ();return _cg .RGBA {R :uint8 (_egg >>8),G :uint8 (_dcd >>8),B :uint8 (_afae >>8),A :uint8 (_cbfdc >>8)};};func (_egbf *ImageBase )setEightFullBytes (_caba int ,_ddae uint64 )error {if _caba +7> len (_egbf .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_egbf .Data [_caba ]=byte ((_ddae &0xff00000000000000)>>56);_egbf .Data [_caba +1]=byte ((_ddae &0xff000000000000)>>48);_egbf .Data [_caba +2]=byte ((_ddae &0xff0000000000)>>40);_egbf .Data [_caba +3]=byte ((_ddae &0xff00000000)>>32);_egbf .Data [_caba +4]=byte ((_ddae &0xff000000)>>24);
_egbf .Data [_caba +5]=byte ((_ddae &0xff0000)>>16);_egbf .Data [_caba +6]=byte ((_ddae &0xff00)>>8);_egbf .Data [_caba +7]=byte (_ddae &0xff);return nil ;};func _fffb (_ecfbg _fb .Image ,_ggee Image ,_bedc _fb .Rectangle ){if _bagegf ,_dgcg :=_ecfbg .(SMasker );
_dgcg &&_bagegf .HasAlpha (){_ggee .(SMasker ).MakeAlpha ();};switch _agbf :=_ecfbg .(type ){case Gray :_cddeb (_agbf ,_ggee .(RGBA ),_bedc );case NRGBA :_bdce (_agbf ,_ggee .(RGBA ),_bedc );case *_fb .NYCbCrA :_dced (_agbf ,_ggee .(RGBA ),_bedc );case CMYK :_fegb (_agbf ,_ggee .(RGBA ),_bedc );
case RGBA :_afffc (_agbf ,_ggee .(RGBA ),_bedc );case nrgba64 :_fdbf (_agbf ,_ggee .(RGBA ),_bedc );default:_gcc (_ecfbg ,_ggee ,_bedc );};};func _fcac (_cbce _cg .Color )_cg .Color {_cfba :=_cg .NRGBAModel .Convert (_cbce ).(_cg .NRGBA );return _cda (_cfba );
};func (_ebb *Gray2 )Validate ()error {if len (_ebb .Data )!=_ebb .Height *_ebb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_fadg *ImageBase )MakeAlpha (){_fadg .newAlpha ()};func (_adba *CMYK32 )SetCMYK (x ,y int ,c _cg .CMYK ){_beb :=4*(y *_adba .Width +x );
if _beb +3>=len (_adba .Data ){return ;};_adba .Data [_beb ]=c .C ;_adba .Data [_beb +1]=c .M ;_adba .Data [_beb +2]=c .Y ;_adba .Data [_beb +3]=c .K ;};func (_dfe *Monochrome )setBit (_bcd ,_deac int ){_dfe .Data [_bcd +(_deac >>3)]|=0x80>>uint (_deac &7)};
func (_caag *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_caag .copy ()}};func AutoThresholdTriangle (histogram [256]int )uint8 {var _ggddd ,_eecfb ,_afdg ,_fgcaf int ;for _gbef :=0;_gbef < len (histogram );_gbef ++{if histogram [_gbef ]> 0{_ggddd =_gbef ;
break ;};};if _ggddd > 0{_ggddd --;};for _ccaf :=255;_ccaf > 0;_ccaf --{if histogram [_ccaf ]> 0{_fgcaf =_ccaf ;break ;};};if _fgcaf < 255{_fgcaf ++;};for _fffe :=0;_fffe < 256;_fffe ++{if histogram [_fffe ]> _eecfb {_afdg =_fffe ;_eecfb =histogram [_fffe ];
};};var _eaga bool ;if (_afdg -_ggddd )< (_fgcaf -_afdg ){_eaga =true ;var _geab int ;_babd :=255;for _geab < _babd {_fgba :=histogram [_geab ];histogram [_geab ]=histogram [_babd ];histogram [_babd ]=_fgba ;_geab ++;_babd --;};_ggddd =255-_fgcaf ;_afdg =255-_afdg ;
};if _ggddd ==_afdg {return uint8 (_ggddd );};_gaba :=float64 (histogram [_afdg ]);_cgfbe :=float64 (_ggddd -_afdg );_gega :=_g .Sqrt (_gaba *_gaba +_cgfbe *_cgfbe );_gaba /=_gega ;_cgfbe /=_gega ;_gega =_gaba *float64 (_ggddd )+_cgfbe *float64 (histogram [_ggddd ]);
_fadc :=_ggddd ;var _afffe float64 ;for _bdd :=_ggddd +1;_bdd <=_afdg ;_bdd ++{_bacb :=_gaba *float64 (_bdd )+_cgfbe *float64 (histogram [_bdd ])-_gega ;if _bacb > _afffe {_fadc =_bdd ;_afffe =_bacb ;};};_fadc --;if _eaga {var _ecefc int ;_edda :=255;for _ecefc < _edda {_abaf :=histogram [_ecefc ];
histogram [_ecefc ]=histogram [_edda ];histogram [_edda ]=_abaf ;_ecefc ++;_edda --;};return uint8 (255-_fadc );};return uint8 (_fadc );};var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _dage (_gdcc _cg .NRGBA )_cg .CMYK {_cgdf ,_gff ,_def ,_ :=_gdcc .RGBA ();_fgef ,_dfbc ,_bgde ,_cgcd :=_cg .RGBToCMYK (uint8 (_cgdf >>8),uint8 (_gff >>8),uint8 (_def >>8));return _cg .CMYK {C :_fgef ,M :_dfbc ,Y :_bgde ,K :_cgcd };};func (_fgce *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_fgce .copy ()}};
func _cf (_a *Monochrome ,_cgc int ,_cc []uint )(*Monochrome ,error ){_d :=_cgc *_a .Width ;_ga :=_cgc *_a .Height ;_gd :=_cca (_d ,_ga );for _dc ,_cac :=range _cc {var _cce error ;switch _cac {case 2:_cce =_eb (_gd ,_a );case 4:_cce =_bd (_gd ,_a );case 8:_cce =_agg (_gd ,_a );
};if _cce !=nil {return nil ,_cce ;};if _dc !=len (_cc )-1{_a =_gd .copy ();};};return _gd ,nil ;};func _gadg (_gfb ,_aefb *Monochrome ,_dcfb []byte ,_ded int )(_bdcb error ){var (_ffd ,_bbeg ,_dcc ,_ccf ,_dbf ,_ccbb ,_dfg ,_aad int ;_ggc ,_eeg ,_gc ,_agc uint32 ;
_ccg ,_cea byte ;_ada uint16 ;);_bgc :=make ([]byte ,4);_ecg :=make ([]byte ,4);for _dcc =0;_dcc < _gfb .Height -1;_dcc ,_ccf =_dcc +2,_ccf +1{_ffd =_dcc *_gfb .BytesPerLine ;_bbeg =_ccf *_aefb .BytesPerLine ;for _dbf ,_ccbb =0,0;_dbf < _ded ;_dbf ,_ccbb =_dbf +4,_ccbb +1{for _dfg =0;
_dfg < 4;_dfg ++{_aad =_ffd +_dbf +_dfg ;if _aad <=len (_gfb .Data )-1&&_aad < _ffd +_gfb .BytesPerLine {_bgc [_dfg ]=_gfb .Data [_aad ];}else {_bgc [_dfg ]=0x00;};_aad =_ffd +_gfb .BytesPerLine +_dbf +_dfg ;if _aad <=len (_gfb .Data )-1&&_aad < _ffd +(2*_gfb .BytesPerLine ){_ecg [_dfg ]=_gfb .Data [_aad ];
}else {_ecg [_dfg ]=0x00;};};_ggc =_b .BigEndian .Uint32 (_bgc );_eeg =_b .BigEndian .Uint32 (_ecg );_gc =_ggc &_eeg ;_gc |=_gc <<1;_agc =_ggc |_eeg ;_agc &=_agc <<1;_eeg =_gc &_agc ;_eeg &=0xaaaaaaaa;_ggc =_eeg |(_eeg <<7);_ccg =byte (_ggc >>24);_cea =byte ((_ggc >>8)&0xff);
_aad =_bbeg +_ccbb ;if _aad +1==len (_aefb .Data )-1||_aad +1>=_bbeg +_aefb .BytesPerLine {if _bdcb =_aefb .setByte (_aad ,_dcfb [_ccg ]);_bdcb !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aad );};}else {_ada =(uint16 (_dcfb [_ccg ])<<8)|uint16 (_dcfb [_cea ]);
if _bdcb =_aefb .setTwoBytes (_aad ,_ada );_bdcb !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aad );
};_ccbb ++;};};};return nil ;};func _adcc (_gdgg NRGBA ,_geba Gray ,_cgae _fb .Rectangle ){for _cfgc :=0;_cfgc < _cgae .Max .X ;_cfgc ++{for _acaa :=0;_acaa < _cgae .Max .Y ;_acaa ++{_baffc :=_eecb (_gdgg .NRGBAAt (_cfgc ,_acaa ));_geba .SetGray (_cfgc ,_acaa ,_baffc );
};};};func (_efdc *RGBA32 )Validate ()error {if len (_efdc .Data )!=3*_efdc .Width *_efdc .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_cg .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_bg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _fafae (_aaad *_fb .Gray16 ,_ddaad uint8 )*_fb .Gray {_gdgc :=_aaad .Bounds ();_eaeg :=_fb .NewGray (_gdgc );for _bdgf :=0;_bdgf < _gdgc .Dx ();_bdgf ++{for _gcadg :=0;_gcadg < _gdgc .Dy ();_gcadg ++{_ecdc :=_aaad .Gray16At (_bdgf ,_gcadg );_eaeg .SetGray (_bdgf ,_gcadg ,_cg .Gray {Y :_cbdcb (uint8 (_ecdc .Y /256),_ddaad )});
};};return _eaeg ;};func (_gcee *Gray16 )ColorModel ()_cg .Model {return _cg .Gray16Model };func _dcdb (_ecae nrgba64 ,_cdcfc NRGBA ,_cdfb _fb .Rectangle ){for _faabc :=0;_faabc < _cdfb .Max .X ;_faabc ++{for _fagff :=0;_fagff < _cdfb .Max .Y ;_fagff ++{_eefg :=_ecae .NRGBA64At (_faabc ,_fagff );
_cdcfc .SetNRGBA (_faabc ,_fagff ,_cccg (_eefg ));};};};func _cef (_ede _cg .Gray )_cg .RGBA {return _cg .RGBA {R :_ede .Y ,G :_ede .Y ,B :_ede .Y ,A :0xff}};func (_cbef *Monochrome )ColorModel ()_cg .Model {return MonochromeModel (_cbef .ModelThreshold )};
func (_gdeg *Gray4 )ColorModel ()_cg .Model {return Gray4Model };func (_dffa *Gray4 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray4BPC (x ,y ,_dffa .BytesPerLine ,_dffa .Data ,_dffa .Decode );};func _agcb (_fafa _fb .Image )(Image ,error ){if _aegaa ,_bcba :=_fafa .(*Gray16 );
_bcba {return _aegaa .Copy (),nil ;};_eagf :=_fafa .Bounds ();_fdc ,_afd :=NewImage (_eagf .Max .X ,_eagf .Max .Y ,16,1,nil ,nil ,nil );if _afd !=nil {return nil ,_afd ;};_eaf (_fafa ,_fdc ,_eagf );return _fdc ,nil ;};var _ Gray =&Gray2 {};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_dgf :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _dgf ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_fgge :=width *colorComponents *bitsPerComponent ;_dabb :=_dgf *8;_edgb :=8-(_dabb -_fgge );_eaae :=_gg .NewReader (data );_aee :=_dgf -1;_ffe :=make ([]byte ,_aee );_aegbe :=make ([]byte ,height *_dgf );
_gbed :=_gg .NewWriterMSB (_aegbe );var _ecfb uint64 ;var _ffab error ;for _gdgd :=0;_gdgd < height ;_gdgd ++{_ ,_ffab =_eaae .Read (_ffe );if _ffab !=nil {return nil ,_ffab ;};_ ,_ffab =_gbed .Write (_ffe );if _ffab !=nil {return nil ,_ffab ;};_ecfb ,_ffab =_eaae .ReadBits (byte (_edgb ));
if _ffab !=nil {return nil ,_ffab ;};_ ,_ffab =_gbed .WriteBits (_ecfb ,_edgb );if _ffab !=nil {return nil ,_ffab ;};_gbed .FinishByte ();};return _aegbe ,nil ;};func ConverterFunc (converterFunc func (_aagb _fb .Image )(Image ,error ))ColorConverter {return colorConverter {_cbfd :converterFunc };
};func (_fgga *ImageBase )newAlpha (){_gdabb :=BytesPerLine (_fgga .Width ,_fgga .BitsPerComponent ,1);_fgga .Alpha =make ([]byte ,_fgga .Height *_gdabb );};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_bg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_adgg *NRGBA16 )Set (x ,y int ,c _cg .Color ){_cefe :=y *_adgg .BytesPerLine +x *3/2;if _cefe +1>=len (_adgg .Data ){return ;};_eece :=NRGBA16Model .Convert (c ).(_cg .NRGBA );_adgg .setNRGBA (x ,y ,_cefe ,_eece );};var _ NRGBA =&NRGBA16 {};func (_geff *ImageBase )HasAlpha ()bool {if _geff .Alpha ==nil {return false ;
};for _dda :=range _geff .Alpha {if _geff .Alpha [_dda ]!=0xff{return true ;};};return false ;};func (_ceda *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_ceda .copy ()}};func _dfdb (_ccggb _fb .Image )(Image ,error ){if _fcbc ,_gada :=_ccggb .(*NRGBA16 );
_gada {return _fcbc .Copy (),nil ;};_gfaaf :=_ccggb .Bounds ();_feag ,_afg :=NewImage (_gfaaf .Max .X ,_gfaaf .Max .Y ,4,3,nil ,nil ,nil );if _afg !=nil {return nil ,_afg ;};_afaec (_ccggb ,_feag ,_gfaaf );return _feag ,nil ;};func (_dccc *Gray2 )Histogram ()(_cgfc [256]int ){for _feefb :=0;
_feefb < _dccc .Width ;_feefb ++{for _bdfa :=0;_bdfa < _dccc .Height ;_bdfa ++{_cgfc [_dccc .GrayAt (_feefb ,_bdfa ).Y ]++;};};return _cgfc ;};func _dgda (_cdgd _cg .Gray ,_dccf monochromeModel )_cg .Gray {if _cdgd .Y > uint8 (_dccf ){return _cg .Gray {Y :_g .MaxUint8 };
};return _cg .Gray {};};func _eaea (_abb *Monochrome ,_ecga ,_cgad ,_eeef ,_faef int ,_cffe RasterOperator ){if _ecga < 0{_eeef +=_ecga ;_ecga =0;};_dcac :=_ecga +_eeef -_abb .Width ;if _dcac > 0{_eeef -=_dcac ;};if _cgad < 0{_faef +=_cgad ;_cgad =0;};
_egce :=_cgad +_faef -_abb .Height ;if _egce > 0{_faef -=_egce ;};if _eeef <=0||_faef <=0{return ;};if (_ecga &7)==0{_dadb (_abb ,_ecga ,_cgad ,_eeef ,_faef ,_cffe );}else {_fdbc (_abb ,_ecga ,_cgad ,_eeef ,_faef ,_cffe );};};func (_edcb *Gray16 )Set (x ,y int ,c _cg .Color ){_fgaf :=(y *_edcb .BytesPerLine /2+x )*2;
if _fgaf +1>=len (_edcb .Data ){return ;};_fgcbg :=_cg .Gray16Model .Convert (c ).(_cg .Gray16 );_edcb .Data [_fgaf ],_edcb .Data [_fgaf +1]=uint8 (_fgcbg .Y >>8),uint8 (_fgcbg .Y &0xff);};func (_cbbd *RGBA32 )At (x ,y int )_cg .Color {_fdag ,_ :=_cbbd .ColorAt (x ,y );
return _fdag };func (_bagb *Gray8 )ColorModel ()_cg .Model {return _cg .GrayModel };var _ _fb .Image =&Monochrome {};func _adf ()(_fdd [256]uint16 ){for _aca :=0;_aca < 256;_aca ++{if _aca &0x01!=0{_fdd [_aca ]|=0x3;};if _aca &0x02!=0{_fdd [_aca ]|=0xc;
};if _aca &0x04!=0{_fdd [_aca ]|=0x30;};if _aca &0x08!=0{_fdd [_aca ]|=0xc0;};if _aca &0x10!=0{_fdd [_aca ]|=0x300;};if _aca &0x20!=0{_fdd [_aca ]|=0xc00;};if _aca &0x40!=0{_fdd [_aca ]|=0x3000;};if _aca &0x80!=0{_fdd [_aca ]|=0xc000;};};return _fdd ;};
type Gray8 struct{ImageBase };func (_agcf *NRGBA64 )ColorModel ()_cg .Model {return _cg .NRGBA64Model };func (_fgcaa *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_ggefe :=_cca (width ,height );_bgdd :=make ([]int ,height );_efe :=make ([]int ,width );_aefg :=float64 (_fgcaa .Width )/float64 (width );_cfgg :=float64 (_fgcaa .Height )/float64 (height );for _bfed :=0;_bfed < height ;_bfed ++{_bgdd [_bfed ]=int (_g .Min (_cfgg *float64 (_bfed )+0.5,float64 (_fgcaa .Height -1)));
};for _gade :=0;_gade < width ;_gade ++{_efe [_gade ]=int (_g .Min (_aefg *float64 (_gade )+0.5,float64 (_fgcaa .Width -1)));};_ggdd :=-1;_adad :=byte (0);for _ffba :=0;_ffba < height ;_ffba ++{_eced :=_bgdd [_ffba ]*_fgcaa .BytesPerLine ;_ged :=_ffba *_ggefe .BytesPerLine ;
for _afegc :=0;_afegc < width ;_afegc ++{_feea :=_efe [_afegc ];if _feea !=_ggdd {_adad =_fgcaa .getBit (_eced ,_feea );if _adad !=0{_ggefe .setBit (_ged ,_afegc );};_ggdd =_feea ;}else {if _adad !=0{_ggefe .setBit (_ged ,_afegc );};};};};return _ggefe ,nil ;
};func _fggb (_eeee uint )uint {var _aada uint ;for _eeee !=0{_eeee >>=1;_aada ++;};return _aada -1;};var _ _fb .Image =&Gray8 {};func _ff (_ea int )[]uint {var _ebc []uint ;_bgda :=_ea ;_bdc :=_bgda /8;if _bdc !=0{for _bgdb :=0;_bgdb < _bdc ;_bgdb ++{_ebc =append (_ebc ,8);
};_ecf :=_bgda %8;_bgda =0;if _ecf !=0{_bgda =_ecf ;};};_bbe :=_bgda /4;if _bbe !=0{for _faa :=0;_faa < _bbe ;_faa ++{_ebc =append (_ebc ,4);};_dga :=_bgda %4;_bgda =0;if _dga !=0{_bgda =_dga ;};};_df :=_bgda /2;if _df !=0{for _fe :=0;_fe < _df ;_fe ++{_ebc =append (_ebc ,2);
};};return _ebc ;};func _fdgge (_gbb int ,_dgab int )int {if _gbb < _dgab {return _gbb ;};return _dgab ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};type monochromeThresholdConverter struct{Threshold uint8 ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_bge :=y *bytesPerLine +x >>3;
if _bge >=len (data ){return _cg .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dfda :=data [_bge ]>>uint (7-(x &7))&1;if len (decode )==2{_dfda =uint8 (LinearInterpolate (float64 (_dfda ),0.0,1.0,decode [0],decode [1]))&1;};return _cg .Gray {Y :_dfda *255},nil ;};type Histogramer interface{Histogram ()[256]int ;};func _afffc (_cege ,_gbge RGBA ,_bgdeg _fb .Rectangle ){for _cabac :=0;
_cabac < _bgdeg .Max .X ;_cabac ++{for _gcgd :=0;_gcgd < _bgdeg .Max .Y ;_gcgd ++{_gbge .SetRGBA (_cabac ,_gcgd ,_cege .RGBAAt (_cabac ,_gcgd ));};};};func (_gdea *Monochrome )copy ()*Monochrome {_dec :=_cca (_gdea .Width ,_gdea .Height );_dec .ModelThreshold =_gdea .ModelThreshold ;
_dec .Data =make ([]byte ,len (_gdea .Data ));copy (_dec .Data ,_gdea .Data );if len (_gdea .Decode )!=0{_dec .Decode =make ([]float64 ,len (_gdea .Decode ));copy (_dec .Decode ,_gdea .Decode );};if len (_gdea .Alpha )!=0{_dec .Alpha =make ([]byte ,len (_gdea .Alpha ));
copy (_dec .Alpha ,_gdea .Alpha );};return _dec ;};func _cccg (_gde _cg .NRGBA64 )_cg .NRGBA {return _cg .NRGBA {R :uint8 (_gde .R >>8),G :uint8 (_gde .G >>8),B :uint8 (_gde .B >>8),A :uint8 (_gde .A >>8)};};func init (){_cbfa ()};func _aac (_bff NRGBA ,_acab CMYK ,_cbcg _fb .Rectangle ){for _aff :=0;
_aff < _cbcg .Max .X ;_aff ++{for _bcbe :=0;_bcbe < _cbcg .Max .Y ;_bcbe ++{_fbgd :=_bff .NRGBAAt (_aff ,_bcbe );_acab .SetCMYK (_aff ,_bcbe ,_dage (_fbgd ));};};};var _ Gray =&Monochrome {};func (_eefc *Monochrome )Set (x ,y int ,c _cg .Color ){_gged :=y *_eefc .BytesPerLine +x >>3;
if _gged > len (_eefc .Data )-1{return ;};_aaa :=_eefc .ColorModel ().Convert (c ).(_cg .Gray );_eefc .setGray (x ,_aaa ,_gged );};func (_dfac *RGBA32 )ColorModel ()_cg .Model {return _cg .NRGBAModel };func (_dggb *Gray2 )SetGray (x ,y int ,gray _cg .Gray ){_fafd :=_cagg (gray );
_accc :=y *_dggb .BytesPerLine ;_ecgg :=_accc +(x >>2);if _ecgg >=len (_dggb .Data ){return ;};_fbdd :=_fafd .Y >>6;_dggb .Data [_ecgg ]=(_dggb .Data [_ecgg ]&(^(0xc0>>uint (2*((x )&3)))))|(_fbdd <<uint (6-2*(x &3)));};var _ NRGBA =&NRGBA32 {};func (_cefd *Monochrome )At (x ,y int )_cg .Color {_egf ,_ :=_cefd .ColorAt (x ,y );
return _egf };var _ _fb .Image =&NRGBA32 {};func (_ebfg *Gray8 )Set (x ,y int ,c _cg .Color ){_adagg :=y *_ebfg .BytesPerLine +x ;if _adagg > len (_ebfg .Data )-1{return ;};_aeb :=_cg .GrayModel .Convert (c );_ebfg .Data [_adagg ]=_aeb .(_cg .Gray ).Y ;
};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .RGBA ,error ){_ebba :=y *width +x ;_gagdf :=3*_ebba ;if _gagdf +2>=len (data ){return _cg .RGBA {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_deag :=uint8 (0xff);if alpha !=nil &&len (alpha )> _ebba {_deag =alpha [_ebba ];};_eeda ,_dbgde ,_geaf :=data [_gagdf ],data [_gagdf +1],data [_gagdf +2];if len (decode )==6{_eeda =uint8 (uint32 (LinearInterpolate (float64 (_eeda ),0,255,decode [0],decode [1]))&0xff);
_dbgde =uint8 (uint32 (LinearInterpolate (float64 (_dbgde ),0,255,decode [2],decode [3]))&0xff);_geaf =uint8 (uint32 (LinearInterpolate (float64 (_geaf ),0,255,decode [4],decode [5]))&0xff);};return _cg .RGBA {R :_eeda ,G :_dbgde ,B :_geaf ,A :_deag },nil ;
};func _gdd ()(_edag []byte ){_edag =make ([]byte ,256);for _dacd :=0;_dacd < 256;_dacd ++{_cgd :=byte (_dacd );_edag [_cgd ]=(_cgd &0x01)|((_cgd &0x04)>>1)|((_cgd &0x10)>>2)|((_cgd &0x40)>>3)|((_cgd &0x02)<<3)|((_cgd &0x08)<<2)|((_cgd &0x20)<<1)|(_cgd &0x80);
};return _edag ;};func _ddda (_bageg _fb .Image ,_aafg Image ,_gdcd _fb .Rectangle ){if _aedb ,_fdec :=_bageg .(SMasker );_fdec &&_aedb .HasAlpha (){_aafg .(SMasker ).MakeAlpha ();};_gcc (_bageg ,_aafg ,_gdcd );};func (_adfa *ImageBase )setEightPartlyBytes (_fac ,_cdeg int ,_ccac uint64 )(_ceadb error ){var (_fcag byte ;
_cabf int ;);for _ecfc :=1;_ecfc <=_cdeg ;_ecfc ++{_cabf =64-_ecfc *8;_fcag =byte (_ccac >>uint (_cabf )&0xff);if _ceadb =_adfa .setByte (_fac +_ecfc -1,_fcag );_ceadb !=nil {return _ceadb ;};};_fcce :=_adfa .BytesPerLine *8-_adfa .Width ;if _fcce ==0{return nil ;
};_cabf -=8;_fcag =byte (_ccac >>uint (_cabf )&0xff)<<uint (_fcce );if _ceadb =_adfa .setByte (_fac +_cdeg ,_fcag );_ceadb !=nil {return _ceadb ;};return nil ;};func (_bbg *Monochrome )SetGray (x ,y int ,g _cg .Gray ){_fgaa :=y *_bbg .BytesPerLine +x >>3;
if _fgaa > len (_bbg .Data )-1{return ;};g =_dgda (g ,monochromeModel (_bbg .ModelThreshold ));_bbg .setGray (x ,g ,_fgaa );};type RasterOperator int ;func (_defc *NRGBA32 )ColorModel ()_cg .Model {return _cg .NRGBAModel };func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray16 ,error ){_agd :=(y *bytesPerLine /2+x )*2;
if _agd +1>=len (data ){return _cg .Gray16 {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bbc :=uint16 (data [_agd ])<<8|uint16 (data [_agd +1]);if len (decode )==2{_bbc =uint16 (uint64 (LinearInterpolate (float64 (_bbc ),0,65535,decode [0],decode [1])));};return _cg .Gray16 {Y :_bbc },nil ;};type CMYK32 struct{ImageBase };func (_cgfb *NRGBA32 )setRGBA (_ecbe int ,_bfbc _cg .NRGBA ){_cdea :=3*_ecbe ;
_cgfb .Data [_cdea ]=_bfbc .R ;_cgfb .Data [_cdea +1]=_bfbc .G ;_cgfb .Data [_cdea +2]=_bfbc .B ;if _ecbe < len (_cgfb .Alpha ){_cgfb .Alpha [_ecbe ]=_bfbc .A ;};};func _fegb (_abcc CMYK ,_faae RGBA ,_dedee _fb .Rectangle ){for _abgc :=0;_abgc < _dedee .Max .X ;
_abgc ++{for _gfbfg :=0;_gfbfg < _dedee .Max .Y ;_gfbfg ++{_dabd :=_abcc .CMYKAt (_abgc ,_gfbfg );_faae .SetRGBA (_abgc ,_gfbfg ,_caad (_dabd ));};};};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_fggb (n )+1);};func _aage (_bcgf ,_cfa int ,_ced []byte )*Monochrome {_abf :=_cca (_bcgf ,_cfa );
_abf .Data =_ced ;return _abf ;};func (_cfef *Gray4 )setGray (_ceag int ,_eba int ,_gac _cg .Gray ){_abc :=_eba *_cfef .BytesPerLine ;_eag :=_abc +(_ceag >>1);if _eag >=len (_cfef .Data ){return ;};_eebf :=_gac .Y >>4;_cfef .Data [_eag ]=(_cfef .Data [_eag ]&(^(0xf0>>uint (4*(_ceag &1)))))|(_eebf <<uint (4-4*(_ceag &1)));
};func (_cabg *NRGBA32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA32 (x ,y ,_cabg .Width ,_cabg .Data ,_cabg .Alpha ,_cabg .Decode );};func _afaec (_fcef _fb .Image ,_ggfb Image ,_aadf _fb .Rectangle ){if _gdbf ,_eagb :=_fcef .(SMasker );
_eagb &&_gdbf .HasAlpha (){_ggfb .(SMasker ).MakeAlpha ();};switch _aefc :=_fcef .(type ){case Gray :_agbc (_aefc ,_ggfb .(NRGBA ),_aadf );case NRGBA :_fdbe (_aefc ,_ggfb .(NRGBA ),_aadf );case *_fb .NYCbCrA :_gdabc (_aefc ,_ggfb .(NRGBA ),_aadf );case CMYK :_gefe (_aefc ,_ggfb .(NRGBA ),_aadf );
case RGBA :_eefb (_aefc ,_ggfb .(NRGBA ),_aadf );case nrgba64 :_dcdb (_aefc ,_ggfb .(NRGBA ),_aadf );default:_gcc (_fcef ,_ggfb ,_aadf );};};const (_ecgeb shift =iota ;_bgbg ;);func ImgToBinary (i _fb .Image ,threshold uint8 )*_fb .Gray {switch _fdfd :=i .(type ){case *_fb .Gray :if _ebfgf (_fdfd ){return _fdfd ;
};return _fggf (_fdfd ,threshold );case *_fb .Gray16 :return _fafae (_fdfd ,threshold );default:return _bgcb (_fdfd ,threshold );};};func (_bdab *NRGBA32 )Validate ()error {if len (_bdab .Data )!=3*_bdab .Width *_bdab .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&Gray2 {};var _ Image =&Gray4 {};type Image interface{_fc .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_aebe ,_gcg int )(_cg .Color ,error );Validate ()error ;};func GrayHistogram (g Gray )(_debb [256]int ){switch _aecg :=g .(type ){case Histogramer :return _aecg .Histogram ();
case _fb .Image :_fcf :=_aecg .Bounds ();for _cfgf :=0;_cfgf < _fcf .Max .X ;_cfgf ++{for _dfdg :=0;_dfdg < _fcf .Max .Y ;_dfdg ++{_debb [g .GrayAt (_cfgf ,_dfdg ).Y ]++;};};return _debb ;default:return [256]int {};};};func _db (_cec *Monochrome ,_fbd ,_cecg int )(*Monochrome ,error ){if _cec ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fbd <=0||_cecg <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fbd ==_cecg {if _fbd ==1{return _cec .copy (),nil ;
};if _fbd ==2||_fbd ==4||_fbd ==8{_dcg ,_cdg :=_cdc (_cec ,_fbd );if _cdg !=nil {return nil ,_cdg ;};return _dcg ,nil ;};};_bc :=_fbd *_cec .Width ;_fcd :=_cecg *_cec .Height ;_abge :=_cca (_bc ,_fcd );_fdf :=_abge .BytesPerLine ;var (_afe ,_cbag ,_bcb ,_aba ,_gfc int ;
_ba byte ;_fab error ;);for _cbag =0;_cbag < _cec .Height ;_cbag ++{_afe =_cecg *_cbag *_fdf ;for _bcb =0;_bcb < _cec .Width ;_bcb ++{if _gdc :=_cec .getBitAt (_bcb ,_cbag );_gdc {_gfc =_fbd *_bcb ;for _aba =0;_aba < _fbd ;_aba ++{_abge .setIndexedBit (_afe *8+_gfc +_aba );
};};};for _aba =1;_aba < _cecg ;_aba ++{_bgfg :=_afe +_aba *_fdf ;for _cfe :=0;_cfe < _fdf ;_cfe ++{if _ba ,_fab =_abge .getByte (_afe +_cfe );_fab !=nil {return nil ,_fab ;};if _fab =_abge .setByte (_bgfg +_cfe ,_ba );_fab !=nil {return nil ,_fab ;};};
};};return _abge ,nil ;};func (_dgdf *Gray2 )Set (x ,y int ,c _cg .Color ){if x >=_dgdf .Width ||y >=_dgdf .Height {return ;};_dcgb :=Gray2Model .Convert (c ).(_cg .Gray );_bgfbb :=y *_dgdf .BytesPerLine ;_efea :=_bgfbb +(x >>2);_eae :=_dcgb .Y >>6;_dgdf .Data [_efea ]=(_dgdf .Data [_efea ]&(^(0xc0>>uint (2*((x )&3)))))|(_eae <<uint (6-2*(x &3)));
};func _ggcb (_gead *Monochrome ,_bcgfb ,_fgbd ,_fdbga ,_ebbf int ,_cdbg RasterOperator ,_afcd *Monochrome ,_ebfd ,_bfdd int )error {var (_fbfce byte ;_ccbbf int ;_bgfag int ;_ccecd ,_caaf int ;_fccc ,_gccb int ;);_dgb :=_fdbga >>3;_ccbf :=_fdbga &7;if _ccbf > 0{_fbfce =_cbeb [_ccbf ];
};_ccbbf =_afcd .BytesPerLine *_bfdd +(_ebfd >>3);_bgfag =_gead .BytesPerLine *_fgbd +(_bcgfb >>3);switch _cdbg {case PixSrc :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;
_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=_afcd .Data [_ccecd ];_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ],_fbfce );};};case PixNotSrc :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;
_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=^(_afcd .Data [_ccecd ]);_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^_afcd .Data [_ccecd ],_fbfce );};};case PixSrcOrDst :for _fccc =0;
_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]|=_afcd .Data [_ccecd ];_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ]|_gead .Data [_caaf ],_fbfce );
};};case PixSrcAndDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]&=_afcd .Data [_ccecd ];_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ]&_gead .Data [_caaf ],_fbfce );
};};case PixSrcXorDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]^=_afcd .Data [_ccecd ];_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ]^_gead .Data [_caaf ],_fbfce );
};};case PixNotSrcOrDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]|=^(_afcd .Data [_ccecd ]);_caaf ++;_ccecd ++;};
if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^(_afcd .Data [_ccecd ])|_gead .Data [_caaf ],_fbfce );};};case PixNotSrcAndDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;
for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]&=^(_afcd .Data [_ccecd ]);_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^(_afcd .Data [_ccecd ])&_gead .Data [_caaf ],_fbfce );};};case PixSrcOrNotDst :for _fccc =0;
_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=_afcd .Data [_ccecd ]|^(_gead .Data [_caaf ]);_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ]|^(_gead .Data [_caaf ]),_fbfce );
};};case PixSrcAndNotDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=_afcd .Data [_ccecd ]&^(_gead .Data [_caaf ]);
_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],_afcd .Data [_ccecd ]&^(_gead .Data [_caaf ]),_fbfce );};};case PixNotPixSrcOrDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;
for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=^(_afcd .Data [_ccecd ]|_gead .Data [_caaf ]);_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^(_afcd .Data [_ccecd ]|_gead .Data [_caaf ]),_fbfce );};};case PixNotPixSrcAndDst :for _fccc =0;
_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=^(_afcd .Data [_ccecd ]&_gead .Data [_caaf ]);_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^(_afcd .Data [_ccecd ]&_gead .Data [_caaf ]),_fbfce );
};};case PixNotPixSrcXorDst :for _fccc =0;_fccc < _ebbf ;_fccc ++{_ccecd =_ccbbf +_fccc *_afcd .BytesPerLine ;_caaf =_bgfag +_fccc *_gead .BytesPerLine ;for _gccb =0;_gccb < _dgb ;_gccb ++{_gead .Data [_caaf ]=^(_afcd .Data [_ccecd ]^_gead .Data [_caaf ]);
_caaf ++;_ccecd ++;};if _ccbf > 0{_gead .Data [_caaf ]=_feec (_gead .Data [_caaf ],^(_afcd .Data [_ccecd ]^_gead .Data [_caaf ]),_fbfce );};};default:_fa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cdbg );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};var (_fde =_adf ();_dag =_age ();_ee =_cbab (););func (_dbgf *Gray8 )Validate ()error {if len (_dbgf .Data )!=_dbgf .Height *_dbgf .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _afega (_fdgg _cg .Gray )_cg .CMYK {return _cg .CMYK {K :0xff-_fdgg .Y }};func _cbfa (){for _dbcc :=0;_dbcc < 256;_dbcc ++{_agda [_dbcc ]=uint8 (_dbcc &0x1)+(uint8 (_dbcc >>1)&0x1)+(uint8 (_dbcc >>2)&0x1)+(uint8 (_dbcc >>3)&0x1)+(uint8 (_dbcc >>4)&0x1)+(uint8 (_dbcc >>5)&0x1)+(uint8 (_dbcc >>6)&0x1)+(uint8 (_dbcc >>7)&0x1);
};};func _bcec (_ggec _cg .CMYK )_cg .NRGBA {_geg ,_gba ,_ecff :=_cg .CMYKToRGB (_ggec .C ,_ggec .M ,_ggec .Y ,_ggec .K );return _cg .NRGBA {R :_geg ,G :_gba ,B :_ecff ,A :0xff};};func _cbab ()(_fgc [256]uint64 ){for _aag :=0;_aag < 256;_aag ++{if _aag &0x01!=0{_fgc [_aag ]|=0xff;
};if _aag &0x02!=0{_fgc [_aag ]|=0xff00;};if _aag &0x04!=0{_fgc [_aag ]|=0xff0000;};if _aag &0x08!=0{_fgc [_aag ]|=0xff000000;};if _aag &0x10!=0{_fgc [_aag ]|=0xff00000000;};if _aag &0x20!=0{_fgc [_aag ]|=0xff0000000000;};if _aag &0x40!=0{_fgc [_aag ]|=0xff000000000000;
};if _aag &0x80!=0{_fgc [_aag ]|=0xff00000000000000;};};return _fgc ;};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_fede *Gray4 )Validate ()error {if len (_fede .Data )!=_fede .Height *_fede .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _cdc (_fg *Monochrome ,_e int )(*Monochrome ,error ){if _fg ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _e ==1{return _fg .copy (),nil ;};if !IsPowerOf2 (uint (_e )){return nil ,_bg .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_e );
};_ca :=_ff (_e );return _cf (_fg ,_e ,_ca );};func InDelta (expected ,current ,delta float64 )bool {_fddg :=expected -current ;if _fddg <=-delta ||_fddg >=delta {return false ;};return true ;};func (_gea *Gray8 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_gea .Width ,Y :_gea .Height }};
};func FromGoImage (i _fb .Image )(Image ,error ){switch _bbaf :=i .(type ){case Image :return _bbaf .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_fb .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_fb .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func _fdbc (_egadb *Monochrome ,_cadg ,_ffec int ,_dcfd ,_ffda int ,_bgag RasterOperator ){var (_cbca bool ;_bfab bool ;_gdbe int ;_edfc int ;_efbe int ;
_bbd int ;_dffe bool ;_bgaa byte ;);_cfdg :=8-(_cadg &7);_gfbf :=_caead [_cfdg ];_adab :=_egadb .BytesPerLine *_ffec +(_cadg >>3);if _dcfd < _cfdg {_cbca =true ;_gfbf &=_cbeb [8-_cfdg +_dcfd ];};if !_cbca {_gdbe =(_dcfd -_cfdg )>>3;if _gdbe !=0{_bfab =true ;
_edfc =_adab +1;};};_efbe =(_cadg +_dcfd )&7;if !(_cbca ||_efbe ==0){_dffe =true ;_bgaa =_cbeb [_efbe ];_bbd =_adab +1+_gdbe ;};var _cebb ,_ffcb int ;switch _bgag {case PixClr :for _cebb =0;_cebb < _ffda ;_cebb ++{_egadb .Data [_adab ]=_feec (_egadb .Data [_adab ],0x0,_gfbf );
_adab +=_egadb .BytesPerLine ;};if _bfab {for _cebb =0;_cebb < _ffda ;_cebb ++{for _ffcb =0;_ffcb < _gdbe ;_ffcb ++{_egadb .Data [_edfc +_ffcb ]=0x0;};_edfc +=_egadb .BytesPerLine ;};};if _dffe {for _cebb =0;_cebb < _ffda ;_cebb ++{_egadb .Data [_bbd ]=_feec (_egadb .Data [_bbd ],0x0,_bgaa );
_bbd +=_egadb .BytesPerLine ;};};case PixSet :for _cebb =0;_cebb < _ffda ;_cebb ++{_egadb .Data [_adab ]=_feec (_egadb .Data [_adab ],0xff,_gfbf );_adab +=_egadb .BytesPerLine ;};if _bfab {for _cebb =0;_cebb < _ffda ;_cebb ++{for _ffcb =0;_ffcb < _gdbe ;
_ffcb ++{_egadb .Data [_edfc +_ffcb ]=0xff;};_edfc +=_egadb .BytesPerLine ;};};if _dffe {for _cebb =0;_cebb < _ffda ;_cebb ++{_egadb .Data [_bbd ]=_feec (_egadb .Data [_bbd ],0xff,_bgaa );_bbd +=_egadb .BytesPerLine ;};};case PixNotDst :for _cebb =0;_cebb < _ffda ;
_cebb ++{_egadb .Data [_adab ]=_feec (_egadb .Data [_adab ],^_egadb .Data [_adab ],_gfbf );_adab +=_egadb .BytesPerLine ;};if _bfab {for _cebb =0;_cebb < _ffda ;_cebb ++{for _ffcb =0;_ffcb < _gdbe ;_ffcb ++{_egadb .Data [_edfc +_ffcb ]=^(_egadb .Data [_edfc +_ffcb ]);
};_edfc +=_egadb .BytesPerLine ;};};if _dffe {for _cebb =0;_cebb < _ffda ;_cebb ++{_egadb .Data [_bbd ]=_feec (_egadb .Data [_bbd ],^_egadb .Data [_bbd ],_bgaa );_bbd +=_egadb .BytesPerLine ;};};};};func _fca (_dcf ,_edad *Monochrome ,_gfd []byte ,_cde int )(_aga error ){var (_ffb ,_dbb ,_cae ,_dbc ,_adc ,_ccb ,_dba ,_fga int ;
_efb ,_aec ,_efdd ,_afeg uint32 ;_dgc ,_cbg byte ;_dbg uint16 ;);_afef :=make ([]byte ,4);_edgg :=make ([]byte ,4);for _cae =0;_cae < _dcf .Height -1;_cae ,_dbc =_cae +2,_dbc +1{_ffb =_cae *_dcf .BytesPerLine ;_dbb =_dbc *_edad .BytesPerLine ;for _adc ,_ccb =0,0;
_adc < _cde ;_adc ,_ccb =_adc +4,_ccb +1{for _dba =0;_dba < 4;_dba ++{_fga =_ffb +_adc +_dba ;if _fga <=len (_dcf .Data )-1&&_fga < _ffb +_dcf .BytesPerLine {_afef [_dba ]=_dcf .Data [_fga ];}else {_afef [_dba ]=0x00;};_fga =_ffb +_dcf .BytesPerLine +_adc +_dba ;
if _fga <=len (_dcf .Data )-1&&_fga < _ffb +(2*_dcf .BytesPerLine ){_edgg [_dba ]=_dcf .Data [_fga ];}else {_edgg [_dba ]=0x00;};};_efb =_b .BigEndian .Uint32 (_afef );_aec =_b .BigEndian .Uint32 (_edgg );_efdd =_efb &_aec ;_efdd |=_efdd <<1;_afeg =_efb |_aec ;
_afeg &=_afeg <<1;_aec =_efdd |_afeg ;_aec &=0xaaaaaaaa;_efb =_aec |(_aec <<7);_dgc =byte (_efb >>24);_cbg =byte ((_efb >>8)&0xff);_fga =_dbb +_ccb ;if _fga +1==len (_edad .Data )-1||_fga +1>=_dbb +_edad .BytesPerLine {if _aga =_edad .setByte (_fga ,_gfd [_dgc ]);
_aga !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fga );};}else {_dbg =(uint16 (_gfd [_dgc ])<<8)|uint16 (_gfd [_cbg ]);if _aga =_edad .setTwoBytes (_fga ,_dbg );_aga !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fga );
};_ccb ++;};};};return nil ;};func (_deeg *Monochrome )getBit (_agca ,_agfd int )uint8 {return _deeg .Data [_agca +(_agfd >>3)]>>uint (7-(_agfd &7))&1;};type CMYK interface{CMYKAt (_fee ,_afefe int )_cg .CMYK ;SetCMYK (_dgd ,_fagg int ,_cage _cg .CMYK );
};type shift int ;func (_cgda *Monochrome )setIndexedBit (_caada int ){_cgda .Data [(_caada >>3)]|=0x80>>uint (_caada &7);};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA ,error ){_eace :=y *width +x ;_cdeed :=3*_eace ;
if _cdeed +2>=len (data ){return _cg .NRGBA {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gbae :=uint8 (0xff);if alpha !=nil &&len (alpha )> _eace {_gbae =alpha [_eace ];};_abff ,_dbdb ,_ecfd :=data [_cdeed ],data [_cdeed +1],data [_cdeed +2];if len (decode )==6{_abff =uint8 (uint32 (LinearInterpolate (float64 (_abff ),0,255,decode [0],decode [1]))&0xff);
_dbdb =uint8 (uint32 (LinearInterpolate (float64 (_dbdb ),0,255,decode [2],decode [3]))&0xff);_ecfd =uint8 (uint32 (LinearInterpolate (float64 (_ecfd ),0,255,decode [4],decode [5]))&0xff);};return _cg .NRGBA {R :_abff ,G :_dbdb ,B :_ecfd ,A :_gbae },nil ;
};func (_cccf *NRGBA64 )At (x ,y int )_cg .Color {_dcdg ,_ :=_cccf .ColorAt (x ,y );return _dcdg };func _eaf (_dcdd _fb .Image ,_gdec Image ,_gace _fb .Rectangle ){switch _cead :=_dcdd .(type ){case Gray :_eeeg (_cead ,_gdec .(Gray ),_gace );case NRGBA :_adcc (_cead ,_gdec .(Gray ),_gace );
case CMYK :_gagg (_cead ,_gdec .(Gray ),_gace );case RGBA :_adec (_cead ,_gdec .(Gray ),_gace );default:_gcc (_dcdd ,_gdec .(Image ),_gace );};};func _agbc (_fbeb Gray ,_gagda NRGBA ,_baec _fb .Rectangle ){for _dfag :=0;_dfag < _baec .Max .X ;_dfag ++{for _gegdb :=0;
_gegdb < _baec .Max .Y ;_gegdb ++{_adaf :=_fbeb .GrayAt (_dfag ,_gegdb );_gagda .SetNRGBA (_dfag ,_gegdb ,_baf (_adaf ));};};};func (_dbbf *Gray4 )SetGray (x ,y int ,g _cg .Gray ){if x >=_dbbf .Width ||y >=_dbbf .Height {return ;};g =_ggb (g );_dbbf .setGray (x ,y ,g );
};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdgb :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gdgb .Data =make ([]byte ,height *_gdgb .BytesPerLine );};return _gdgb ;};func (_dbcb *Gray8 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray8BPC (x ,y ,_dbcb .BytesPerLine ,_dbcb .Data ,_dbcb .Decode );};var (MonochromeConverter =ConverterFunc (_cdf );
Gray2Converter =ConverterFunc (_cdeb );Gray4Converter =ConverterFunc (_adag );GrayConverter =ConverterFunc (_dab );Gray16Converter =ConverterFunc (_agcb );NRGBA16Converter =ConverterFunc (_dfdb );NRGBAConverter =ConverterFunc (_gfaf );NRGBA64Converter =ConverterFunc (_faaf );
RGBAConverter =ConverterFunc (_efgb );CMYKConverter =ConverterFunc (_eec ););func _adec (_fgcd RGBA ,_egad Gray ,_fgeb _fb .Rectangle ){for _abd :=0;_abd < _fgeb .Max .X ;_abd ++{for _aabb :=0;_aabb < _fgeb .Max .Y ;_aabb ++{_dbd :=_agfb (_fgcd .RGBAAt (_abd ,_aabb ));
_egad .SetGray (_abd ,_aabb ,_dbd );};};};func (_deg *Monochrome )InverseData ()error {return _deg .RasterOperation (0,0,_deg .Width ,_deg .Height ,PixNotDst ,nil ,0,0);};func (_gbga *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_gbga .copy ()}};func (_bfc *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_bg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _cdc (_bfc ,factor );};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_bgac :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _ebcc Image ;
switch colorComponents {case 1:switch bitsPerComponent {case 1:_ebcc =&Monochrome {ImageBase :_bgac ,ModelThreshold :0x0f};case 2:_ebcc =&Gray2 {ImageBase :_bgac };case 4:_ebcc =&Gray4 {ImageBase :_bgac };case 8:_ebcc =&Gray8 {ImageBase :_bgac };case 16:_ebcc =&Gray16 {ImageBase :_bgac };
};case 3:switch bitsPerComponent {case 4:_ebcc =&NRGBA16 {ImageBase :_bgac };case 8:_ebcc =&NRGBA32 {ImageBase :_bgac };case 16:_ebcc =&NRGBA64 {ImageBase :_bgac };};case 4:_ebcc =&CMYK32 {ImageBase :_bgac };};if _ebcc ==nil {return nil ,ErrInvalidImage ;
};return _ebcc ,nil ;};func _caad (_ceb _cg .CMYK )_cg .RGBA {_baff ,_beg ,_faagf :=_cg .CMYKToRGB (_ceb .C ,_ceb .M ,_ceb .Y ,_ceb .K );return _cg .RGBA {R :_baff ,G :_beg ,B :_faagf ,A :0xff};};func MonochromeModel (threshold uint8 )_cg .Model {return monochromeModel (threshold )};
func _ddb (_gefd _cg .Color )_cg .Color {_gage :=_cg .GrayModel .Convert (_gefd ).(_cg .Gray );return _ggb (_gage );};func (_bbedb *CMYK32 )Validate ()error {if len (_bbedb .Data )!=4*_bbedb .Width *_bbedb .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_geac *Gray8 )SetGray (x ,y int ,g _cg .Gray ){_gbf :=y *_geac .BytesPerLine +x ;if _gbf > len (_geac .Data )-1{return ;};_geac .Data [_gbf ]=g .Y ;};var _ _fb .Image =&Gray4 {};func (_decdb *NRGBA32 )Base ()*ImageBase {return &_decdb .ImageBase };
func (_bee *Gray8 )Base ()*ImageBase {return &_bee .ImageBase };func (_dfba *Gray2 )GrayAt (x ,y int )_cg .Gray {_egae ,_ :=ColorAtGray2BPC (x ,y ,_dfba .BytesPerLine ,_dfba .Data ,_dfba .Decode );return _egae ;};func _feec (_gfef ,_adfae ,_fbe byte )byte {return (_gfef &^(_fbe ))|(_adfae &_fbe )};
func (_eeaf *NRGBA16 )NRGBAAt (x ,y int )_cg .NRGBA {_dbbd ,_ :=ColorAtNRGBA16 (x ,y ,_eeaf .Width ,_eeaf .BytesPerLine ,_eeaf .Data ,_eeaf .Alpha ,_eeaf .Decode );return _dbbd ;};func _cca (_edg ,_bcg int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_edg ,_bcg ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_gfde *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_cbee :=_fggb (uint (factor ));if !IsPowerOf2 (uint (factor )){_cbee ++;};_ebe :=make ([]int ,_cbee );for _bfe :=range _ebe {_ebe [_bfe ]=4;};_cdbb ,_fcea :=_daf (_gfde ,_ebe ...);
if _fcea !=nil {return nil ,_fcea ;};return _cdbb ,nil ;};func _gbad (_gbfc _fb .Image ,_baa int )(_fb .Rectangle ,bool ,[]byte ){_ffbd :=_gbfc .Bounds ();var (_fcee bool ;_dcaf []byte ;);switch _dfbaa :=_gbfc .(type ){case SMasker :_fcee =_dfbaa .HasAlpha ();
case NRGBA ,RGBA ,*_fb .RGBA64 ,nrgba64 ,*_fb .NYCbCrA :_dcaf =make ([]byte ,_ffbd .Max .X *_ffbd .Max .Y *_baa );case *_fb .Paletted :var _gfed bool ;for _ ,_cefee :=range _dfbaa .Palette {_ceg ,_gdcb ,_cgcg ,_efaf :=_cefee .RGBA ();if _ceg ==0&&_gdcb ==0&&_cgcg ==0&&_efaf !=0{_gfed =true ;
break ;};};if _gfed {_dcaf =make ([]byte ,_ffbd .Max .X *_ffbd .Max .Y *_baa );};};return _ffbd ,_fcee ,_dcaf ;};func _fggf (_afea *_fb .Gray ,_ffdgf uint8 )*_fb .Gray {_bggb :=_afea .Bounds ();_gdbg :=_fb .NewGray (_bggb );for _gacb :=0;_gacb < _bggb .Dx ();
_gacb ++{for _ffdgc :=0;_ffdgc < _bggb .Dy ();_ffdgc ++{_cfbc :=_afea .GrayAt (_gacb ,_ffdgc );_gdbg .SetGray (_gacb ,_ffdgc ,_cg .Gray {Y :_cbdcb (_cfbc .Y ,_ffdgf )});};};return _gdbg ;};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA ,error ){_gcbb :=y *bytesPerLine +x *3/2;
if _gcbb +1>=len (data ){return _cg .NRGBA {},_cgbe (x ,y );};const (_dcaca =0xf;_gabd =uint8 (0xff););_acdf :=_gabd ;if alpha !=nil {_egafdc :=y *BytesPerLine (width ,4,1);if _egafdc < len (alpha ){if x %2==0{_acdf =(alpha [_egafdc ]>>uint (4))&_dcaca ;
}else {_acdf =alpha [_egafdc ]&_dcaca ;};_acdf |=_acdf <<4;};};var _edbb ,_fagb ,_begf uint8 ;if x *3%2==0{_edbb =(data [_gcbb ]>>uint (4))&_dcaca ;_fagb =data [_gcbb ]&_dcaca ;_begf =(data [_gcbb +1]>>uint (4))&_dcaca ;}else {_edbb =data [_gcbb ]&_dcaca ;
_fagb =(data [_gcbb +1]>>uint (4))&_dcaca ;_begf =data [_gcbb +1]&_dcaca ;};if len (decode )==6{_edbb =uint8 (uint32 (LinearInterpolate (float64 (_edbb ),0,15,decode [0],decode [1]))&0xf);_fagb =uint8 (uint32 (LinearInterpolate (float64 (_fagb ),0,15,decode [2],decode [3]))&0xf);
_begf =uint8 (uint32 (LinearInterpolate (float64 (_begf ),0,15,decode [4],decode [5]))&0xf);};return _cg .NRGBA {R :(_edbb <<4)|(_edbb &0xf),G :(_fagb <<4)|(_fagb &0xf),B :(_begf <<4)|(_begf &0xf),A :_acdf },nil ;};func (_fcebd *Gray4 )GrayAt (x ,y int )_cg .Gray {_eaef ,_ :=ColorAtGray4BPC (x ,y ,_fcebd .BytesPerLine ,_fcebd .Data ,_fcebd .Decode );
return _eaef ;};func (_bbad *Monochrome )setGray (_bggd int ,_adbf _cg .Gray ,_agb int ){if _adbf .Y ==0{_bbad .clearBit (_agb ,_bggd );}else {_bbad .setGrayBit (_agb ,_bggd );};};func _acb (_gcfe _cg .CMYK )_cg .Gray {_bcbeb ,_fce ,_gagd :=_cg .CMYKToRGB (_gcfe .C ,_gcfe .M ,_gcfe .Y ,_gcfe .K );
_cceb :=(19595*uint32 (_bcbeb )+38470*uint32 (_fce )+7471*uint32 (_gagd )+1<<7)>>16;return _cg .Gray {Y :uint8 (_cceb )};};func (_bbegc *CMYK32 )ColorModel ()_cg .Model {return _cg .CMYKModel };type Gray4 struct{ImageBase };func (_fdaa *NRGBA64 )Validate ()error {if len (_fdaa .Data )!=3*2*_fdaa .Width *_fdaa .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _dadb (_deaf *Monochrome ,_bdfaa ,_agdd int ,_cagf ,_gdef int ,_edfe RasterOperator ){var (_cbgg int ;_gfac byte ;_cbaa ,_cddeg int ;_aebd int ;);_bbfb :=_cagf >>3;_ffgg :=_cagf &7;if _ffgg > 0{_gfac =_cbeb [_ffgg ];};_cbgg =_deaf .BytesPerLine *_agdd +(_bdfaa >>3);
switch _edfe {case PixClr :for _cbaa =0;_cbaa < _gdef ;_cbaa ++{_aebd =_cbgg +_cbaa *_deaf .BytesPerLine ;for _cddeg =0;_cddeg < _bbfb ;_cddeg ++{_deaf .Data [_aebd ]=0x0;_aebd ++;};if _ffgg > 0{_deaf .Data [_aebd ]=_feec (_deaf .Data [_aebd ],0x0,_gfac );
};};case PixSet :for _cbaa =0;_cbaa < _gdef ;_cbaa ++{_aebd =_cbgg +_cbaa *_deaf .BytesPerLine ;for _cddeg =0;_cddeg < _bbfb ;_cddeg ++{_deaf .Data [_aebd ]=0xff;_aebd ++;};if _ffgg > 0{_deaf .Data [_aebd ]=_feec (_deaf .Data [_aebd ],0xff,_gfac );};};
case PixNotDst :for _cbaa =0;_cbaa < _gdef ;_cbaa ++{_aebd =_cbgg +_cbaa *_deaf .BytesPerLine ;for _cddeg =0;_cddeg < _bbfb ;_cddeg ++{_deaf .Data [_aebd ]=^_deaf .Data [_aebd ];_aebd ++;};if _ffgg > 0{_deaf .Data [_aebd ]=_feec (_deaf .Data [_aebd ],^_deaf .Data [_aebd ],_gfac );
};};};};func (_ffcc *Gray2 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray2BPC (x ,y ,_ffcc .BytesPerLine ,_ffcc .Data ,_ffcc .Decode );};func _fdbe (_dgdb ,_ddee NRGBA ,_gcdd _fb .Rectangle ){for _ggbb :=0;_ggbb < _gcdd .Max .X ;_ggbb ++{for _bab :=0;
_bab < _gcdd .Max .Y ;_bab ++{_ddee .SetNRGBA (_ggbb ,_bab ,_dgdb .NRGBAAt (_ggbb ,_bab ));};};};func (_ggfcb monochromeModel )Convert (c _cg .Color )_cg .Color {_bgcgb :=_cg .GrayModel .Convert (c ).(_cg .Gray );return _dgda (_bgcgb ,_ggfcb );};func (_cfbe *Gray16 )Validate ()error {if len (_cfbe .Data )!=_cfbe .Height *_cfbe .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _fdbf (_feed nrgba64 ,_fcgee RGBA ,_bcfb _fb .Rectangle ){for _debd :=0;_debd < _bcfb .Max .X ;_debd ++{for _aabae :=0;_aabae < _bcfb .Max .Y ;_aabae ++{_cece :=_feed .NRGBA64At (_debd ,_aabae );_fcgee .SetRGBA (_debd ,_aabae ,_egaf (_cece ));
};};};func (_dfgbe *RGBA32 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_dfgbe .Width ,Y :_dfgbe .Height }};};func _daf (_ge *Monochrome ,_bdg ...int )(_egc *Monochrome ,_caf error ){if _ge ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_bdg )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_ed :=_gdd ();_egc =_ge ;for _ ,_eeb :=range _bdg {if _eeb <=0{break ;};_egc ,_caf =_eef (_egc ,_eeb ,_ed );if _caf !=nil {return nil ,_caf ;};};return _egc ,nil ;};var _ Image =&RGBA32 {};func (_caeaa *ImageBase )copy ()ImageBase {_eccb :=*_caeaa ;_eccb .Data =make ([]byte ,len (_caeaa .Data ));
copy (_eccb .Data ,_caeaa .Data );return _eccb ;};func _eecb (_ggce _cg .NRGBA )_cg .Gray {_acd ,_dbed ,_afeb ,_ :=_ggce .RGBA ();_ceae :=(19595*_acd +38470*_dbed +7471*_afeb +1<<15)>>24;return _cg .Gray {Y :uint8 (_ceae )};};func (_dgeg *Monochrome )GrayAt (x ,y int )_cg .Gray {_bef ,_ :=ColorAtGray1BPC (x ,y ,_dgeg .BytesPerLine ,_dgeg .Data ,_dgeg .Decode );
return _bef ;};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func _eb (_cba ,_dg *Monochrome )(_dge error ){_fgd :=_dg .BytesPerLine ;_gdb :=_cba .BytesPerLine ;var (_fge byte ;_de uint16 ;_cfd ,_bf ,_deb ,_faf ,_ag int ;);for _deb =0;_deb < _dg .Height ;
_deb ++{_cfd =_deb *_fgd ;_bf =2*_deb *_gdb ;for _faf =0;_faf < _fgd ;_faf ++{_fge =_dg .Data [_cfd +_faf ];_de =_fde [_fge ];_ag =_bf +_faf *2;if _cba .BytesPerLine !=_dg .BytesPerLine *2&&(_faf +1)*2> _cba .BytesPerLine {_dge =_cba .setByte (_ag ,byte (_de >>8));
}else {_dge =_cba .setTwoBytes (_ag ,_de );};if _dge !=nil {return _dge ;};};for _faf =0;_faf < _gdb ;_faf ++{_ag =_bf +_gdb +_faf ;_fge =_cba .Data [_bf +_faf ];if _dge =_cba .setByte (_ag ,_fge );_dge !=nil {return _dge ;};};};return nil ;};func (_aeda *ImageBase )setEightBytes (_baeb int ,_acfg uint64 )error {_gcad :=_aeda .BytesPerLine -(_baeb %_aeda .BytesPerLine );
if _aeda .BytesPerLine !=_aeda .Width >>3{_gcad --;};if _gcad >=8{return _aeda .setEightFullBytes (_baeb ,_acfg );};return _aeda .setEightPartlyBytes (_baeb ,_gcad ,_acfg );};func (_gcf *CMYK32 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_gcf .Width ,Y :_gcf .Height }};
};func (_afcf *RGBA32 )Base ()*ImageBase {return &_afcf .ImageBase };func (_eegc *NRGBA32 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_eegc .Width ,Y :_eegc .Height }};};func _gfaf (_fafab _fb .Image )(Image ,error ){if _cbdb ,_dega :=_fafab .(*NRGBA32 );
_dega {return _cbdb .Copy (),nil ;};_adbfd ,_cdac ,_caff :=_gbad (_fafab ,1);_ege ,_adea :=NewImage (_adbfd .Max .X ,_adbfd .Max .Y ,8,3,nil ,_caff ,nil );if _adea !=nil {return nil ,_adea ;};_afaec (_fafab ,_ege ,_adbfd );if len (_caff )!=0&&!_cdac {if _fbdc :=_cbcga (_caff ,_ege );
_fbdc !=nil {return nil ,_fbdc ;};};return _ege ,nil ;};func (_gabc *Monochrome )Validate ()error {if len (_gabc .Data )!=_gabc .Height *_gabc .BytesPerLine {return ErrInvalidImage ;};return nil ;};type Gray2 struct{ImageBase };func (_cafe *Monochrome )ResolveDecode ()error {if len (_cafe .Decode )!=2{return nil ;
};if _cafe .Decode [0]==1&&_cafe .Decode [1]==0{if _ffaa :=_cafe .InverseData ();_ffaa !=nil {return _ffaa ;};_cafe .Decode =nil ;};return nil ;};func (_add *ImageBase )setTwoBytes (_aegb int ,_cab uint16 )error {if _aegb +1> len (_add .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_add .Data [_aegb ]=byte ((_cab &0xff00)>>8);_add .Data [_aegb +1]=byte (_cab &0xff);return nil ;};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA64 ,error ){_cfde :=(y *width +x )*2;_baed :=_cfde *3;if _baed +5>=len (data ){return _cg .NRGBA64 {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _gcfdg =0xffff;_cfc :=uint16 (_gcfdg );if alpha !=nil &&len (alpha )> _cfde +1{_cfc =uint16 (alpha [_cfde ])<<8|uint16 (alpha [_cfde +1]);};_cfdd :=uint16 (data [_baed ])<<8|uint16 (data [_baed +1]);_abcb :=uint16 (data [_baed +2])<<8|uint16 (data [_baed +3]);
_bbbb :=uint16 (data [_baed +4])<<8|uint16 (data [_baed +5]);if len (decode )==6{_cfdd =uint16 (uint64 (LinearInterpolate (float64 (_cfdd ),0,65535,decode [0],decode [1]))&_gcfdg );_abcb =uint16 (uint64 (LinearInterpolate (float64 (_abcb ),0,65535,decode [2],decode [3]))&_gcfdg );
_bbbb =uint16 (uint64 (LinearInterpolate (float64 (_bbbb ),0,65535,decode [4],decode [5]))&_gcfdg );};return _cg .NRGBA64 {R :_cfdd ,G :_abcb ,B :_bbbb ,A :_cfc },nil ;};type colorConverter struct{_cbfd func (_eeba _fb .Image )(Image ,error );};func _eeeg (_eca ,_accg Gray ,_aaac _fb .Rectangle ){for _cgag :=0;
_cgag < _aaac .Max .X ;_cgag ++{for _gae :=0;_gae < _aaac .Max .Y ;_gae ++{_accg .SetGray (_cgag ,_gae ,_eca .GrayAt (_cgag ,_gae ));};};};var _ Image =&Gray8 {};func (_fbb *Monochrome )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_fbb .Width ,Y :_fbb .Height }};
};func _dbe (_fdg ,_gfa *Monochrome ,_gbc []byte ,_aaf int )(_ebg error ){var (_ef ,_fgca ,_fed ,_efd ,_gad ,_fbf ,_aagef ,_ddf int ;_cbf ,_fae uint32 ;_cdd ,_aae byte ;_gec uint16 ;);_gdf :=make ([]byte ,4);_aef :=make ([]byte ,4);for _fed =0;_fed < _fdg .Height -1;
_fed ,_efd =_fed +2,_efd +1{_ef =_fed *_fdg .BytesPerLine ;_fgca =_efd *_gfa .BytesPerLine ;for _gad ,_fbf =0,0;_gad < _aaf ;_gad ,_fbf =_gad +4,_fbf +1{for _aagef =0;_aagef < 4;_aagef ++{_ddf =_ef +_gad +_aagef ;if _ddf <=len (_fdg .Data )-1&&_ddf < _ef +_fdg .BytesPerLine {_gdf [_aagef ]=_fdg .Data [_ddf ];
}else {_gdf [_aagef ]=0x00;};_ddf =_ef +_fdg .BytesPerLine +_gad +_aagef ;if _ddf <=len (_fdg .Data )-1&&_ddf < _ef +(2*_fdg .BytesPerLine ){_aef [_aagef ]=_fdg .Data [_ddf ];}else {_aef [_aagef ]=0x00;};};_cbf =_b .BigEndian .Uint32 (_gdf );_fae =_b .BigEndian .Uint32 (_aef );
_fae |=_cbf ;_fae |=_fae <<1;_fae &=0xaaaaaaaa;_cbf =_fae |(_fae <<7);_cdd =byte (_cbf >>24);_aae =byte ((_cbf >>8)&0xff);_ddf =_fgca +_fbf ;if _ddf +1==len (_gfa .Data )-1||_ddf +1>=_fgca +_gfa .BytesPerLine {_gfa .Data [_ddf ]=_gbc [_cdd ];}else {_gec =(uint16 (_gbc [_cdd ])<<8)|uint16 (_gbc [_aae ]);
if _ebg =_gfa .setTwoBytes (_ddf ,_gec );_ebg !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ddf );
};_fbf ++;};};};return nil ;};var _ Image =&NRGBA32 {};func (_ecc *ImageBase )GetAlpha ()[]byte {return _ecc .Alpha };func IsGrayImgBlackAndWhite (i *_fb .Gray )bool {return _ebfgf (i )};func (_dffgb *Gray2 )At (x ,y int )_cg .Color {_adg ,_ :=_dffgb .ColorAt (x ,y );
return _adg };func _dab (_bbb _fb .Image )(Image ,error ){if _gdca ,_bcda :=_bbb .(*Gray8 );_bcda {return _gdca .Copy (),nil ;};_dad :=_bbb .Bounds ();_fad ,_gdab :=NewImage (_dad .Max .X ,_dad .Max .Y ,8,1,nil ,nil ,nil );if _gdab !=nil {return nil ,_gdab ;
};_eaf (_bbb ,_fad ,_dad );return _fad ,nil ;};var _ RGBA =&RGBA32 {};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_bg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _eec (_eea _fb .Image )(Image ,error ){if _eeae ,_fcc :=_eea .(*CMYK32 );_fcc {return _eeae .Copy (),nil ;};_bgg :=_eea .Bounds ();_dfc ,_dgcf :=NewImage (_bgg .Max .X ,_bgg .Max .Y ,8,4,nil ,nil ,nil );if _dgcf !=nil {return nil ,_dgcf ;};switch _ecb :=_eea .(type ){case CMYK :_gaf (_ecb ,_dfc .(CMYK ),_bgg );
case Gray :_agef (_ecb ,_dfc .(CMYK ),_bgg );case NRGBA :_aac (_ecb ,_dfc .(CMYK ),_bgg );case RGBA :_edb (_ecb ,_dfc .(CMYK ),_bgg );default:_gcc (_eea ,_dfc ,_bgg );};return _dfc ,nil ;};func (_dggg *NRGBA64 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA64 (x ,y ,_dggg .Width ,_dggg .Data ,_dggg .Alpha ,_dggg .Decode );
};var _ Image =&CMYK32 {};func _faag (_dbaf ,_cag *Monochrome ,_ebge []byte ,_fbfe int )(_dfga error ){var (_bga ,_fbg ,_gge ,_aagf ,_ade ,_cacg ,_gee ,_bbf int ;_bgfb ,_cdde uint32 ;_dce ,_dee byte ;_dff uint16 ;);_gaa :=make ([]byte ,4);_bbed :=make ([]byte ,4);
for _gge =0;_gge < _dbaf .Height -1;_gge ,_aagf =_gge +2,_aagf +1{_bga =_gge *_dbaf .BytesPerLine ;_fbg =_aagf *_cag .BytesPerLine ;for _ade ,_cacg =0,0;_ade < _fbfe ;_ade ,_cacg =_ade +4,_cacg +1{for _gee =0;_gee < 4;_gee ++{_bbf =_bga +_ade +_gee ;if _bbf <=len (_dbaf .Data )-1&&_bbf < _bga +_dbaf .BytesPerLine {_gaa [_gee ]=_dbaf .Data [_bbf ];
}else {_gaa [_gee ]=0x00;};_bbf =_bga +_dbaf .BytesPerLine +_ade +_gee ;if _bbf <=len (_dbaf .Data )-1&&_bbf < _bga +(2*_dbaf .BytesPerLine ){_bbed [_gee ]=_dbaf .Data [_bbf ];}else {_bbed [_gee ]=0x00;};};_bgfb =_b .BigEndian .Uint32 (_gaa );_cdde =_b .BigEndian .Uint32 (_bbed );
_cdde &=_bgfb ;_cdde &=_cdde <<1;_cdde &=0xaaaaaaaa;_bgfb =_cdde |(_cdde <<7);_dce =byte (_bgfb >>24);_dee =byte ((_bgfb >>8)&0xff);_bbf =_fbg +_cacg ;if _bbf +1==len (_cag .Data )-1||_bbf +1>=_fbg +_cag .BytesPerLine {_cag .Data [_bbf ]=_ebge [_dce ];
if _dfga =_cag .setByte (_bbf ,_ebge [_dce ]);_dfga !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bbf );};}else {_dff =(uint16 (_ebge [_dce ])<<8)|uint16 (_ebge [_dee ]);if _dfga =_cag .setTwoBytes (_bbf ,_dff );_dfga !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bbf );
};_cacg ++;};};};return nil ;};type monochromeModel uint8 ;func (_bbaa *Gray4 )Base ()*ImageBase {return &_bbaa .ImageBase };func (_fffd *NRGBA32 )SetNRGBA (x ,y int ,c _cg .NRGBA ){_bgabb :=y *_fffd .Width +x ;_cccd :=3*_bgabb ;if _cccd +2>=len (_fffd .Data ){return ;
};_fffd .setRGBA (_bgabb ,c );};func _faaf (_ebebg _fb .Image )(Image ,error ){if _aefbaf ,_cegf :=_ebebg .(*NRGBA64 );_cegf {return _aefbaf .Copy (),nil ;};_fbafb ,_dgabf ,_fcbb :=_gbad (_ebebg ,2);_fefb ,_fgbg :=NewImage (_fbafb .Max .X ,_fbafb .Max .Y ,16,3,nil ,_fcbb ,nil );
if _fgbg !=nil {return nil ,_fgbg ;};_ddda (_ebebg ,_fefb ,_fbafb );if len (_fcbb )!=0&&!_dgabf {if _dgfd :=_cbcga (_fcbb ,_fefb );_dgfd !=nil {return nil ,_dgfd ;};};return _fefb ,nil ;};var _ Image =&NRGBA64 {};func (_eedg *Gray16 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray16BPC (x ,y ,_eedg .BytesPerLine ,_eedg .Data ,_eedg .Decode );
};func (_gege *ImageBase )getByte (_gffc int )(byte ,error ){if _gffc > len (_gege .Data )-1||_gffc < 0{return 0,_bg .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_gffc );
};return _gege .Data [_gffc ],nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);var _agda [256]uint8 ;func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _g .Abs (xmax -xmin )< 0.000001{return ymin ;
};_acdg :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _acdg ;};func (_feeab *NRGBA64 )NRGBA64At (x ,y int )_cg .NRGBA64 {_fecd ,_ :=ColorAtNRGBA64 (x ,y ,_feeab .Width ,_feeab .Data ,_feeab .Alpha ,_feeab .Decode );return _fecd ;};func _eef (_gbg *Monochrome ,_acg int ,_gggf []byte )(_ggga *Monochrome ,_feg error ){const _fega ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _gbg ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _acg < 1||_acg > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _gbg .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_ggga =_cca (_gbg .Width /2,_gbg .Height /2);
if _gggf ==nil {_gggf =_gdd ();};_eda :=_fdgge (_gbg .BytesPerLine ,2*_ggga .BytesPerLine );switch _acg {case 1:_feg =_dbe (_gbg ,_ggga ,_gggf ,_eda );case 2:_feg =_fca (_gbg ,_ggga ,_gggf ,_eda );case 3:_feg =_gadg (_gbg ,_ggga ,_gggf ,_eda );case 4:_feg =_faag (_gbg ,_ggga ,_gggf ,_eda );
};if _feg !=nil {return nil ,_feg ;};return _ggga ,nil ;};func (_eggb *NRGBA64 )setNRGBA64 (_dfca int ,_dffb _cg .NRGBA64 ,_edfd int ){_eggb .Data [_dfca ]=uint8 (_dffb .R >>8);_eggb .Data [_dfca +1]=uint8 (_dffb .R &0xff);_eggb .Data [_dfca +2]=uint8 (_dffb .G >>8);
_eggb .Data [_dfca +3]=uint8 (_dffb .G &0xff);_eggb .Data [_dfca +4]=uint8 (_dffb .B >>8);_eggb .Data [_dfca +5]=uint8 (_dffb .B &0xff);if _edfd +1< len (_eggb .Alpha ){_eggb .Alpha [_edfd ]=uint8 (_dffb .A >>8);_eggb .Alpha [_edfd +1]=uint8 (_dffb .A &0xff);
};};func _dfd (_feef _cg .NRGBA )_cg .Gray {var _gfge _cg .NRGBA ;if _feef ==_gfge {return _cg .Gray {Y :0xff};};_dgce ,_dgeb ,_fcg ,_ :=_feef .RGBA ();_bae :=(19595*_dgce +38470*_dgeb +7471*_fcg +1<<15)>>24;return _cg .Gray {Y :uint8 (_bae )};};func (_cggb *monochromeThresholdConverter )Convert (img _fb .Image )(Image ,error ){if _cgb ,_afcg :=img .(*Monochrome );
_afcg {return _cgb .Copy (),nil ;};_dacde :=img .Bounds ();_bag ,_dffg :=NewImage (_dacde .Max .X ,_dacde .Max .Y ,1,1,nil ,nil ,nil );if _dffg !=nil {return nil ,_dffg ;};_bag .(*Monochrome ).ModelThreshold =_cggb .Threshold ;for _fea :=0;_fea < _dacde .Max .X ;
_fea ++{for _dfbd :=0;_dfbd < _dacde .Max .Y ;_dfbd ++{_bed :=img .At (_fea ,_dfbd );_bag .Set (_fea ,_dfbd ,_bed );};};return _bag ,nil ;};func _cdeb (_bcdd _fb .Image )(Image ,error ){if _befb ,_ageb :=_bcdd .(*Gray2 );_ageb {return _befb .Copy (),nil ;
};_efeg :=_bcdd .Bounds ();_eed ,_dfbb :=NewImage (_efeg .Max .X ,_efeg .Max .Y ,2,1,nil ,nil ,nil );if _dfbb !=nil {return nil ,_dfbb ;};_eaf (_bcdd ,_eed ,_efeg );return _eed ,nil ;};func _baf (_dca _cg .Gray )_cg .NRGBA {return _cg .NRGBA {R :_dca .Y ,G :_dca .Y ,B :_dca .Y ,A :0xff}};
type NRGBA64 struct{ImageBase };func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_cg .CMYK ,error ){_ccc :=4*(y *width +x );if _ccc +3>=len (data ){return _cg .CMYK {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_ccc ]&0xff;M :=data [_ccc +1]&0xff;Y :=data [_ccc +2]&0xff;K :=data [_ccc +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _cg .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_gedg *Gray8 )At (x ,y int )_cg .Color {_fceca ,_ :=_gedg .ColorAt (x ,y );
return _fceca };var _ _fb .Image =&Gray16 {};type nrgba64 interface{NRGBA64At (_bccf ,_ebbb int )_cg .NRGBA64 ;SetNRGBA64 (_acdc ,_eaeag int ,_bde _cg .NRGBA64 );};func (_aed *Gray16 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_aed .Width ,Y :_aed .Height }};
};func _ggb (_cbdg _cg .Gray )_cg .Gray {_cbdg .Y >>=4;_cbdg .Y |=_cbdg .Y <<4;return _cbdg };var (_cbeb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_caead =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _agg (_gf ,_ec *Monochrome )(_bb error ){_dac :=_ec .BytesPerLine ;
_abg :=_gf .BytesPerLine ;var _ddc ,_bba ,_caa ,_ac ,_bgd int ;for _caa =0;_caa < _ec .Height ;_caa ++{_ddc =_caa *_dac ;_bba =8*_caa *_abg ;for _ac =0;_ac < _dac ;_ac ++{if _bb =_gf .setEightBytes (_bba +_ac *8,_ee [_ec .Data [_ddc +_ac ]]);_bb !=nil {return _bb ;
};};for _bgd =1;_bgd < 8;_bgd ++{for _ac =0;_ac < _abg ;_ac ++{if _bb =_gf .setByte (_bba +_bgd *_abg +_ac ,_gf .Data [_bba +_ac ]);_bb !=nil {return _bb ;};};};};return nil ;};type Gray interface{GrayAt (_gbd ,_gbgf int )_cg .Gray ;SetGray (_edd ,_adef int ,_aea _cg .Gray );
};func (_egaff *RGBA32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtRGBA32 (x ,y ,_egaff .Width ,_egaff .Data ,_egaff .Alpha ,_egaff .Decode );};func (_gcfd *ImageBase )Pix ()[]byte {return _gcfd .Data };func (_cdga *Gray16 )Base ()*ImageBase {return &_cdga .ImageBase };
func _aaeb (_fda _cg .RGBA )_cg .NRGBA {switch _fda .A {case 0xff:return _cg .NRGBA {R :_fda .R ,G :_fda .G ,B :_fda .B ,A :0xff};case 0x00:return _cg .NRGBA {};default:_egca ,_dgdc ,_bgfa ,_fdfc :=_fda .RGBA ();_egca =(_egca *0xffff)/_fdfc ;_dgdc =(_dgdc *0xffff)/_fdfc ;
_bgfa =(_bgfa *0xffff)/_fdfc ;return _cg .NRGBA {R :uint8 (_egca >>8),G :uint8 (_dgdc >>8),B :uint8 (_bgfa >>8),A :uint8 (_fdfc >>8)};};};func _dfcg (_bgff _cg .NYCbCrA )_cg .NRGBA {_efc :=int32 (_bgff .Y )*0x10101;_eee :=int32 (_bgff .Cb )-128;_dgec :=int32 (_bgff .Cr )-128;
_ace :=_efc +91881*_dgec ;if uint32 (_ace )&0xff000000==0{_ace >>=8;}else {_ace =^(_ace >>31)&0xffff;};_cfb :=_efc -22554*_eee -46802*_dgec ;if uint32 (_cfb )&0xff000000==0{_cfb >>=8;}else {_cfb =^(_cfb >>31)&0xffff;};_ffbf :=_efc +116130*_eee ;if uint32 (_ffbf )&0xff000000==0{_ffbf >>=8;
}else {_ffbf =^(_ffbf >>31)&0xffff;};return _cg .NRGBA {R :uint8 (_ace >>8),G :uint8 (_cfb >>8),B :uint8 (_ffbf >>8),A :_bgff .A };};func (_cebg *NRGBA64 )SetNRGBA64 (x ,y int ,c _cg .NRGBA64 ){_ceba :=(y *_cebg .Width +x )*2;_ggbd :=_ceba *3;if _ggbd +5>=len (_cebg .Data ){return ;
};_cebg .setNRGBA64 (_ggbd ,c ,_ceba );};func (_fbfd *Gray8 )Histogram ()(_gafb [256]int ){for _gaddf :=0;_gaddf < len (_fbfd .Data );_gaddf ++{_gafb [_fbfd .Data [_gaddf ]]++;};return _gafb ;};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _bage (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _gagg (_gfaa CMYK ,_ccfc Gray ,_dgae _fb .Rectangle ){for _gcb :=0;_gcb < _dgae .Max .X ;_gcb ++{for _bfcf :=0;_bfcf < _dgae .Max .Y ;_bfcf ++{_bgdg :=_acb (_gfaa .CMYKAt (_gcb ,_bfcf ));_ccfc .SetGray (_gcb ,_bfcf ,_bgdg );};};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_gadd :=y *bytesPerLine +x >>1;
if _gadd >=len (data ){return _cg .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gebb :=data [_gadd ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_gebb =uint8 (uint32 (LinearInterpolate (float64 (_gebb ),0,15,decode [0],decode [1]))&0xf);};return _cg .Gray {Y :_gebb *17&0xff},nil ;};func _cbdcb (_dgdg ,_fbddd uint8 )uint8 {if _dgdg < _fbddd {return 255;
};return 0;};func _bgfff (_ddec uint8 )bool {if _ddec ==0||_ddec ==255{return true ;};return false ;};func _bgcb (_agae _fb .Image ,_gfgg uint8 )*_fb .Gray {_cddfg :=_agae .Bounds ();_agad :=_fb .NewGray (_cddfg );var (_edgga _cg .Color ;_gbgee _cg .Gray ;
);for _baccc :=0;_baccc < _cddfg .Max .X ;_baccc ++{for _adbe :=0;_adbe < _cddfg .Max .Y ;_adbe ++{_edgga =_agae .At (_baccc ,_adbe );_agad .Set (_baccc ,_adbe ,_edgga );_gbgee =_agad .GrayAt (_baccc ,_adbe );_agad .SetGray (_baccc ,_adbe ,_cg .Gray {Y :_cbdcb (_gbgee .Y ,_gfgg )});
};};return _agad ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_deee *NRGBA32 )NRGBAAt (x ,y int )_cg .NRGBA {_afff ,_ :=ColorAtNRGBA32 (x ,y ,_deee .Width ,_deee .Data ,_deee .Alpha ,_deee .Decode );
return _afff ;};func _bcbag (_geeec *Monochrome ,_befd ,_caaba ,_fff ,_facf int ,_gbea RasterOperator ,_cbbc *Monochrome ,_gccd ,_gabgc int )error {var (_dgbd bool ;_gbfe bool ;_edfa byte ;_afdf int ;_abce int ;_gdggc int ;_fdef int ;_gceb bool ;_edaea int ;
_aaaa int ;_ddg int ;_fdggd bool ;_ccfdg byte ;_ddaa int ;_dcdf int ;_dgbg int ;_aefa byte ;_agecg int ;_bea int ;_dfge uint ;_bfba uint ;_aaee byte ;_ebdb shift ;_dddf bool ;_aabf bool ;_aggg ,_fcgc int ;);if _gccd &7!=0{_bea =8-(_gccd &7);};if _befd &7!=0{_abce =8-(_befd &7);
};if _bea ==0&&_abce ==0{_aaee =_caead [0];}else {if _abce > _bea {_dfge =uint (_abce -_bea );}else {_dfge =uint (8-(_bea -_abce ));};_bfba =8-_dfge ;_aaee =_caead [_dfge ];};if (_befd &7)!=0{_dgbd =true ;_afdf =8-(_befd &7);_edfa =_caead [_afdf ];_gdggc =_geeec .BytesPerLine *_caaba +(_befd >>3);
_fdef =_cbbc .BytesPerLine *_gabgc +(_gccd >>3);_agecg =8-(_gccd &7);if _afdf > _agecg {_ebdb =_ecgeb ;if _fff >=_bea {_dddf =true ;};}else {_ebdb =_bgbg ;};};if _fff < _afdf {_gbfe =true ;_edfa &=_cbeb [8-_afdf +_fff ];};if !_gbfe {_edaea =(_fff -_afdf )>>3;
if _edaea !=0{_gceb =true ;_aaaa =_geeec .BytesPerLine *_caaba +((_befd +_abce )>>3);_ddg =_cbbc .BytesPerLine *_gabgc +((_gccd +_abce )>>3);};};_ddaa =(_befd +_fff )&7;if !(_gbfe ||_ddaa ==0){_fdggd =true ;_ccfdg =_cbeb [_ddaa ];_dcdf =_geeec .BytesPerLine *_caaba +((_befd +_abce )>>3)+_edaea ;
_dgbg =_cbbc .BytesPerLine *_gabgc +((_gccd +_abce )>>3)+_edaea ;if _ddaa > int (_bfba ){_aabf =true ;};};switch _gbea {case PixSrc :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa ,_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;
_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=_aefa ;};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;
if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa ,_ccfdg );_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixNotSrc :if _dgbd {for _aggg =0;_aggg < _facf ;
_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^_aefa ,_edfa );_gdggc +=_geeec .BytesPerLine ;
_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=^_aefa ;};_aaaa +=_geeec .BytesPerLine ;
_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^_aefa ,_ccfdg );
_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixSrcOrDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa |_geeec .Data [_gdggc ],_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;
_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]|=_aefa ;};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;
_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa |_geeec .Data [_dcdf ],_ccfdg );_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;
};};case PixSrcAndDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa &_geeec .Data [_gdggc ],_edfa );
_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]&=_aefa ;
};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa &_geeec .Data [_dcdf ],_ccfdg );
_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixSrcXorDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa ^_geeec .Data [_gdggc ],_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;
_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]^=_aefa ;};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;
_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa ^_geeec .Data [_dcdf ],_ccfdg );_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;
};};case PixNotSrcOrDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^_aefa |_geeec .Data [_gdggc ],_edfa );
_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]|=^_aefa ;
};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^_aefa |_geeec .Data [_dcdf ],_ccfdg );
_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixNotSrcAndDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^_aefa &_geeec .Data [_gdggc ],_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;
_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]&=^_aefa ;};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;
_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^_aefa &_geeec .Data [_dcdf ],_ccfdg );_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;
};};case PixSrcOrNotDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa |^_geeec .Data [_gdggc ],_edfa );
_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=_aefa |^_geeec .Data [_aaaa +_fcgc ];
};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa |^_geeec .Data [_dcdf ],_ccfdg );
_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixSrcAndNotDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],_aefa &^_geeec .Data [_gdggc ],_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;
_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=_aefa &^_geeec .Data [_aaaa +_fcgc ];};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;
_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],_aefa &^_geeec .Data [_dcdf ],_ccfdg );_dcdf +=_geeec .BytesPerLine ;
_dgbg +=_cbbc .BytesPerLine ;};};case PixNotPixSrcOrDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;
};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^(_aefa |_geeec .Data [_gdggc ]),_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );
_geeec .Data [_aaaa +_fcgc ]=^(_aefa |_geeec .Data [_aaaa +_fcgc ]);};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );
};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^(_aefa |_geeec .Data [_dcdf ]),_ccfdg );_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixNotPixSrcAndDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;
if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^(_aefa &_geeec .Data [_gdggc ]),_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;
};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=^(_aefa &_geeec .Data [_aaaa +_fcgc ]);};
_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^(_aefa &_geeec .Data [_dcdf ]),_ccfdg );
_dcdf +=_geeec .BytesPerLine ;_dgbg +=_cbbc .BytesPerLine ;};};case PixNotPixSrcXorDst :if _dgbd {for _aggg =0;_aggg < _facf ;_aggg ++{if _ebdb ==_ecgeb {_aefa =_cbbc .Data [_fdef ]<<_dfge ;if _dddf {_aefa =_feec (_aefa ,_cbbc .Data [_fdef +1]>>_bfba ,_aaee );
};}else {_aefa =_cbbc .Data [_fdef ]>>_bfba ;};_geeec .Data [_gdggc ]=_feec (_geeec .Data [_gdggc ],^(_aefa ^_geeec .Data [_gdggc ]),_edfa );_gdggc +=_geeec .BytesPerLine ;_fdef +=_cbbc .BytesPerLine ;};};if _gceb {for _aggg =0;_aggg < _facf ;_aggg ++{for _fcgc =0;
_fcgc < _edaea ;_fcgc ++{_aefa =_feec (_cbbc .Data [_ddg +_fcgc ]<<_dfge ,_cbbc .Data [_ddg +_fcgc +1]>>_bfba ,_aaee );_geeec .Data [_aaaa +_fcgc ]=^(_aefa ^_geeec .Data [_aaaa +_fcgc ]);};_aaaa +=_geeec .BytesPerLine ;_ddg +=_cbbc .BytesPerLine ;};};if _fdggd {for _aggg =0;
_aggg < _facf ;_aggg ++{_aefa =_cbbc .Data [_dgbg ]<<_dfge ;if _aabf {_aefa =_feec (_aefa ,_cbbc .Data [_dgbg +1]>>_bfba ,_aaee );};_geeec .Data [_dcdf ]=_feec (_geeec .Data [_dcdf ],^(_aefa ^_geeec .Data [_dcdf ]),_ccfdg );_dcdf +=_geeec .BytesPerLine ;
_dgbg +=_cbbc .BytesPerLine ;};};default:_fa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gbea );return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_fec *CMYK32 )Set (x ,y int ,c _cg .Color ){_acc :=4*(y *_fec .Width +x );if _acc +3>=len (_fec .Data ){return ;};_faab :=_cg .CMYKModel .Convert (c ).(_cg .CMYK );_fec .Data [_acc ]=_faab .C ;_fec .Data [_acc +1]=_faab .M ;_fec .Data [_acc +2]=_faab .Y ;
_fec .Data [_acc +3]=_faab .K ;};func (_agba *NRGBA16 )Validate ()error {if len (_agba .Data )!=3*_agba .Width *_agba .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_ggca *ImageBase )setFourBytes (_acffc int ,_eac uint32 )error {if _acffc +3> len (_ggca .Data )-1{return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_acffc );
};_ggca .Data [_acffc ]=byte ((_eac &0xff000000)>>24);_ggca .Data [_acffc +1]=byte ((_eac &0xff0000)>>16);_ggca .Data [_acffc +2]=byte ((_eac &0xff00)>>8);_ggca .Data [_acffc +3]=byte (_eac &0xff);return nil ;};func _eefb (_ccda RGBA ,_fdgb NRGBA ,_dceb _fb .Rectangle ){for _cafg :=0;
_cafg < _dceb .Max .X ;_cafg ++{for _eff :=0;_eff < _dceb .Max .Y ;_eff ++{_aegbd :=_ccda .RGBAAt (_cafg ,_eff );_fdgb .SetNRGBA (_cafg ,_eff ,_aaeb (_aegbd ));};};};func (_eddf *NRGBA64 )Set (x ,y int ,c _cg .Color ){_fddd :=(y *_eddf .Width +x )*2;_bcbc :=_fddd *3;
if _bcbc +5>=len (_eddf .Data ){return ;};_abaa :=_cg .NRGBA64Model .Convert (c ).(_cg .NRGBA64 );_eddf .setNRGBA64 (_bcbc ,_abaa ,_fddd );};func (_gacee *RGBA32 )Set (x ,y int ,c _cg .Color ){_bcfg :=y *_gacee .Width +x ;_bgabc :=3*_bcfg ;if _bgabc +2>=len (_gacee .Data ){return ;
};_bdca :=_cg .RGBAModel .Convert (c ).(_cg .RGBA );_gacee .setRGBA (_bcfg ,_bdca );};type NRGBA interface{NRGBAAt (_edfcc ,_egdbg int )_cg .NRGBA ;SetNRGBA (_ebeb ,_aeff int ,_cdcb _cg .NRGBA );};func (_fgbf *NRGBA64 )Base ()*ImageBase {return &_fgbf .ImageBase };
func _gcc (_cfg _fb .Image ,_caea Image ,_fcba _fb .Rectangle ){for _dbfg :=0;_dbfg < _fcba .Max .X ;_dbfg ++{for _fccf :=0;_fccf < _fcba .Max .Y ;_fccf ++{_acf :=_cfg .At (_dbfg ,_fccf );_caea .Set (_dbfg ,_fccf ,_acf );};};};func _cacb (_feba _cg .NRGBA )_cg .RGBA {_afa ,_cgcc ,_cdec ,_fef :=_feba .RGBA ();
return _cg .RGBA {R :uint8 (_afa >>8),G :uint8 (_cgcc >>8),B :uint8 (_cdec >>8),A :uint8 (_fef >>8)};};func (_aebdg *RGBA32 )setRGBA (_agee int ,_egfg _cg .RGBA ){_ecef :=3*_agee ;_aebdg .Data [_ecef ]=_egfg .R ;_aebdg .Data [_ecef +1]=_egfg .G ;_aebdg .Data [_ecef +2]=_egfg .B ;
if _agee < len (_aebdg .Alpha ){_aebdg .Alpha [_agee ]=_egfg .A ;};};func _feeb (_cgg Gray ,_ffc nrgba64 ,_gbgfd _fb .Rectangle ){for _ggceb :=0;_ggceb < _gbgfd .Max .X ;_ggceb ++{for _dcb :=0;_dcb < _gbgfd .Max .Y ;_dcb ++{_gdfe :=_gag (_ffc .NRGBA64At (_ggceb ,_dcb ));
_cgg .SetGray (_ggceb ,_dcb ,_gdfe );};};};func (_cebd *RGBA32 )SetRGBA (x ,y int ,c _cg .RGBA ){_dgbde :=y *_cebd .Width +x ;_bbae :=3*_dgbde ;if _bbae +2>=len (_cebd .Data ){return ;};_cebd .setRGBA (_dgbde ,c );};func (_aagefb *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_aagefb .ImageBase .copy (),ModelThreshold :_aagefb .ModelThreshold };
};func _adag (_gfeg _fb .Image )(Image ,error ){if _bedd ,_daga :=_gfeg .(*Gray4 );_daga {return _bedd .Copy (),nil ;};_cgaa :=_gfeg .Bounds ();_gdeaf ,_bbgdd :=NewImage (_cgaa .Max .X ,_cgaa .Max .Y ,4,1,nil ,nil ,nil );if _bbgdd !=nil {return nil ,_bbgdd ;
};_eaf (_gfeg ,_gdeaf ,_cgaa );return _gdeaf ,nil ;};func (_fdad *NRGBA16 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_fdad .Width ,Y :_fdad .Height }};};func _cdf (_bgcg _fb .Image )(Image ,error ){if _gegd ,_dfa :=_bgcg .(*Monochrome );
_dfa {return _gegd ,nil ;};_bdad :=_bgcg .Bounds ();var _gafa Gray ;switch _fba :=_bgcg .(type ){case Gray :_gafa =_fba ;case NRGBA :_gafa =&Gray8 {ImageBase :NewImageBase (_bdad .Max .X ,_bdad .Max .Y ,8,1,nil ,nil ,nil )};_febac (_gafa ,_fba ,_bdad );
case nrgba64 :_gafa =&Gray8 {ImageBase :NewImageBase (_bdad .Max .X ,_bdad .Max .Y ,8,1,nil ,nil ,nil )};_feeb (_gafa ,_fba ,_bdad );default:_fecf ,_bdf :=GrayConverter .Convert (_bgcg );if _bdf !=nil {return nil ,_bdf ;};_gafa =_fecf .(Gray );};_bac ,_aaea :=NewImage (_bdad .Max .X ,_bdad .Max .Y ,1,1,nil ,nil ,nil );
if _aaea !=nil {return nil ,_aaea ;};_gdg :=_bac .(*Monochrome );_cbda :=AutoThresholdTriangle (GrayHistogram (_gafa ));for _afc :=0;_afc < _bdad .Max .X ;_afc ++{for _ffa :=0;_ffa < _bdad .Max .Y ;_ffa ++{_acae :=_dgda (_gafa .GrayAt (_afc ,_ffa ),monochromeModel (_cbda ));
_gdg .SetGray (_afc ,_ffa ,_acae );};};return _bac ,nil ;};func (_fcec *Monochrome )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray1BPC (x ,y ,_fcec .BytesPerLine ,_fcec .Data ,_fcec .Decode );};func _bcf (_dfef *Monochrome ,_gfcc ,_gfdd int ,_ecbg ,_fadb int ,_ebdc RasterOperator ,_afed *Monochrome ,_ecgc ,_bcbaa int )error {var _bbbe ,_bdgc ,_fgf ,_eedgg int ;
if _gfcc < 0{_ecgc -=_gfcc ;_ecbg +=_gfcc ;_gfcc =0;};if _ecgc < 0{_gfcc -=_ecgc ;_ecbg +=_ecgc ;_ecgc =0;};_bbbe =_gfcc +_ecbg -_dfef .Width ;if _bbbe > 0{_ecbg -=_bbbe ;};_bdgc =_ecgc +_ecbg -_afed .Width ;if _bdgc > 0{_ecbg -=_bdgc ;};if _gfdd < 0{_bcbaa -=_gfdd ;
_fadb +=_gfdd ;_gfdd =0;};if _bcbaa < 0{_gfdd -=_bcbaa ;_fadb +=_bcbaa ;_bcbaa =0;};_fgf =_gfdd +_fadb -_dfef .Height ;if _fgf > 0{_fadb -=_fgf ;};_eedgg =_bcbaa +_fadb -_afed .Height ;if _eedgg > 0{_fadb -=_eedgg ;};if _ecbg <=0||_fadb <=0{return nil ;
};var _acdd error ;switch {case _gfcc &7==0&&_ecgc &7==0:_acdd =_ggcb (_dfef ,_gfcc ,_gfdd ,_ecbg ,_fadb ,_ebdc ,_afed ,_ecgc ,_bcbaa );case _gfcc &7==_ecgc &7:_acdd =_dcge (_dfef ,_gfcc ,_gfdd ,_ecbg ,_fadb ,_ebdc ,_afed ,_ecgc ,_bcbaa );default:_acdd =_bcbag (_dfef ,_gfcc ,_gfdd ,_ecbg ,_fadb ,_ebdc ,_afed ,_ecgc ,_bcbaa );
};if _acdd !=nil {return _acdd ;};return nil ;};func (_dafg *Gray4 )Set (x ,y int ,c _cg .Color ){if x >=_dafg .Width ||y >=_dafg .Height {return ;};_fbcd :=Gray4Model .Convert (c ).(_cg .Gray );_dafg .setGray (x ,y ,_fbcd );};func (_dde *Monochrome )Base ()*ImageBase {return &_dde .ImageBase };
func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_cd :=BytesPerLine (width ,8,1);if len (data )< _cd *height {return nil ,nil ;};_ce :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_fd ,_cb :=MonochromeConverter .Convert (_ce );
if _cb !=nil {return nil ,_cb ;};return _fd .Base ().Data ,nil ;};func (_cbdc *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_cbdc .copy ()}};func _cgbe (_fagc int ,_fgfa int )error {return _bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_fagc ,_fgfa );
};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func _agef (_dfb Gray ,_bca CMYK ,_bfb _fb .Rectangle ){for _ecbf :=0;_ecbf < _bfb .Max .X ;_ecbf ++{for _cad :=0;
_cad < _bfb .Max .Y ;_cad ++{_gbe :=_dfb .GrayAt (_ecbf ,_cad );_bca .SetCMYK (_ecbf ,_cad ,_afega (_gbe ));};};};var _ _fb .Image =&Gray2 {};func (_ccca *Gray4 )Histogram ()(_egaec [256]int ){for _agec :=0;_agec < _ccca .Width ;_agec ++{for _ccgg :=0;
_ccgg < _ccca .Height ;_ccgg ++{_egaec [_ccca .GrayAt (_agec ,_ccgg ).Y ]++;};};return _egaec ;};func _dced (_fcgf *_fb .NYCbCrA ,_faac RGBA ,_cggc _fb .Rectangle ){for _acdb :=0;_acdb < _cggc .Max .X ;_acdb ++{for _afdfe :=0;_afdfe < _cggc .Max .Y ;_afdfe ++{_dbfa :=_fcgf .NYCbCrAAt (_acdb ,_afdfe );
_faac .SetRGBA (_acdb ,_afdfe ,_fbgf (_dbfa ));};};};func _fbc (_ffg _cg .Color )_cg .Color {_ccga :=_cg .GrayModel .Convert (_ffg ).(_cg .Gray );return _cagg (_ccga );};func (_befe *Monochrome )getBitAt (_bfa ,_dcea int )bool {_faee :=_dcea *_befe .BytesPerLine +(_bfa >>3);
_acff :=_bfa &0x07;_dcba :=uint (7-_acff );if _faee > len (_befe .Data )-1{return false ;};if (_befe .Data [_faee ]>>_dcba )&0x01>=1{return true ;};return false ;};func _gaf (_ggfc ,_gfg CMYK ,_eegg _fb .Rectangle ){for _cbac :=0;_cbac < _eegg .Max .X ;
_cbac ++{for _fccg :=0;_fccg < _eegg .Max .Y ;_fccg ++{_gfg .SetCMYK (_cbac ,_fccg ,_ggfc .CMYKAt (_cbac ,_fccg ));};};};func (_gbcc *CMYK32 )At (x ,y int )_cg .Color {_cbd ,_ :=_gbcc .ColorAt (x ,y );return _cbd };func _cddeb (_feac Gray ,_eedb RGBA ,_bgee _fb .Rectangle ){for _aadd :=0;
_aadd < _bgee .Max .X ;_aadd ++{for _dgee :=0;_dgee < _bgee .Max .Y ;_dgee ++{_dacc :=_feac .GrayAt (_aadd ,_dgee );_eedb .SetRGBA (_aadd ,_dgee ,_cef (_dacc ));};};};type NRGBA32 struct{ImageBase };type NRGBA16 struct{ImageBase };func (_ebd *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_ebd .copy ()}};
var _ Image =&Gray16 {};func _gefe (_edadd CMYK ,_fgabf NRGBA ,_ggedc _fb .Rectangle ){for _cfae :=0;_cfae < _ggedc .Max .X ;_cfae ++{for _fbee :=0;_fbee < _ggedc .Max .Y ;_fbee ++{_cged :=_edadd .CMYKAt (_cfae ,_fbee );_fgabf .SetNRGBA (_cfae ,_fbee ,_bcec (_cged ));
};};};func (_bgab *Monochrome )AddPadding ()(_afaea error ){if _cbb :=((_bgab .Width *_bgab .Height )+7)>>3;len (_bgab .Data )< _cbb {return _bg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_bgab .Data ),_cbb );
};_cgdb :=_bgab .Width %8;if _cgdb ==0{return nil ;};_fgb :=_bgab .Width /8;_ggef :=_gg .NewReader (_bgab .Data );_edc :=make ([]byte ,_bgab .Height *_bgab .BytesPerLine );_gab :=_gg .NewWriterMSB (_edc );_dgcfg :=make ([]byte ,_fgb );var (_abeg int ;_bfde uint64 ;
);for _abeg =0;_abeg < _bgab .Height ;_abeg ++{if _ ,_afaea =_ggef .Read (_dgcfg );_afaea !=nil {return _afaea ;};if _ ,_afaea =_gab .Write (_dgcfg );_afaea !=nil {return _afaea ;};if _bfde ,_afaea =_ggef .ReadBits (byte (_cgdb ));_afaea !=nil {return _afaea ;
};if _afaea =_gab .WriteByte (byte (_bfde )<<uint (8-_cgdb ));_afaea !=nil {return _afaea ;};};_bgab .Data =_gab .Data ();return nil ;};func _febac (_ccec Gray ,_eggg NRGBA ,_gfdf _fb .Rectangle ){for _caca :=0;_caca < _gfdf .Max .X ;_caca ++{for _dagc :=0;
_dagc < _gfdf .Max .Y ;_dagc ++{_cbe :=_dfd (_eggg .NRGBAAt (_caca ,_dagc ));_ccec .SetGray (_caca ,_dagc ,_cbe );};};};func _edb (_dcga RGBA ,_fcb CMYK ,_gef _fb .Rectangle ){for _feb :=0;_feb < _gef .Max .X ;_feb ++{for _ecge :=0;_ecge < _gef .Max .Y ;
_ecge ++{_dea :=_dcga .RGBAAt (_feb ,_ecge );_fcb .SetCMYK (_feb ,_ecge ,_egb (_dea ));};};};func (_gda *Monochrome )IsUnpadded ()bool {return (_gda .Width *_gda .Height )==len (_gda .Data )};func (_dede *NRGBA16 )ColorModel ()_cg .Model {return NRGBA16Model };
func (_cddf *CMYK32 )CMYKAt (x ,y int )_cg .CMYK {_dbgd ,_ :=ColorAtCMYK (x ,y ,_cddf .Width ,_cddf .Data ,_cddf .Decode );return _dbgd ;};func _cbcga (_efge []byte ,_cagc Image )error {_ggeg :=true ;for _bcbagf :=0;_bcbagf < len (_efge );_bcbagf ++{if _efge [_bcbagf ]!=0xff{_ggeg =false ;
break ;};};if _ggeg {switch _fdbce :=_cagc .(type ){case *NRGBA32 :_fdbce .Alpha =nil ;case *NRGBA64 :_fdbce .Alpha =nil ;default:return _bg .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_cagc );
};};return nil ;};func (_cdee *NRGBA32 )At (x ,y int )_cg .Color {_fggbd ,_ :=_cdee .ColorAt (x ,y );return _fggbd };func _efgb (_fcde _fb .Image )(Image ,error ){if _faeg ,_gabda :=_fcde .(*RGBA32 );_gabda {return _faeg .Copy (),nil ;};_cfag ,_cfcg ,_efab :=_gbad (_fcde ,1);
_afegab ,_afebb :=NewImage (_cfag .Max .X ,_cfag .Max .Y ,8,3,nil ,_efab ,nil );if _afebb !=nil {return nil ,_afebb ;};_fffb (_fcde ,_afegab ,_cfag );if len (_efab )!=0&&!_cfcg {if _fdgf :=_cbcga (_efab ,_afegab );_fdgf !=nil {return nil ,_fdgf ;};};return _afegab ,nil ;
};func (_bbge *Monochrome )setGrayBit (_edae ,_bebc int ){_bbge .Data [_edae ]|=0x80>>uint (_bebc &7)};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_gdee :=y *bytesPerLine +x ;if _gdee >=len (data ){return _cg .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_edge :=data [_gdee ];if len (decode )==2{_edge =uint8 (uint32 (LinearInterpolate (float64 (_edge ),0,255,decode [0],decode [1]))&0xff);};return _cg .Gray {Y :_edge },nil ;};var _ Gray =&Gray8 {};func (_gfgb *Gray16 )At (x ,y int )_cg .Color {_daca ,_ :=_gfgb .ColorAt (x ,y );
return _daca };func (_decd *Gray16 )Histogram ()(_dafgf [256]int ){for _cgfe :=0;_cgfe < _decd .Width ;_cgfe ++{for _gafg :=0;_gafg < _decd .Height ;_gafg ++{_dafgf [_decd .GrayAt (_cgfe ,_gafg ).Y ]++;};};return _dafgf ;};func (_dgad *Gray4 )At (x ,y int )_cg .Color {_dagf ,_ :=_dgad .ColorAt (x ,y );
return _dagf };func (_ggf *CMYK32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtCMYK (x ,y ,_ggf .Width ,_ggf .Data ,_ggf .Decode );};func _bdce (_bebcb NRGBA ,_abfd RGBA ,_gaea _fb .Rectangle ){for _bggda :=0;_bggda < _gaea .Max .X ;_bggda ++{for _bgfe :=0;
_bgfe < _gaea .Max .Y ;_bgfe ++{_bfbae :=_bebcb .NRGBAAt (_bggda ,_bgfe );_abfd .SetRGBA (_bggda ,_bgfe ,_cacb (_bfbae ));};};};func _gag (_dfgb _cg .NRGBA64 )_cg .Gray {var _gcfc _cg .NRGBA64 ;if _dfgb ==_gcfc {return _cg .Gray {Y :0xff};};_egde ,_bda ,_efa ,_ :=_dfgb .RGBA ();
_gce :=(19595*_egde +38470*_bda +7471*_efa +1<<15)>>24;return _cg .Gray {Y :uint8 (_gce )};};func _bd (_eg ,_ad *Monochrome )(_ggg error ){_ggd :=_ad .BytesPerLine ;_ab :=_eg .BytesPerLine ;_da :=_ad .BytesPerLine *4-_eg .BytesPerLine ;var (_egd ,_ae byte ;
_fag uint32 ;_bgf ,_bfd ,_aa ,_af ,_be ,_dd ,_adb int ;);for _aa =0;_aa < _ad .Height ;_aa ++{_bgf =_aa *_ggd ;_bfd =4*_aa *_ab ;for _af =0;_af < _ggd ;_af ++{_egd =_ad .Data [_bgf +_af ];_fag =_dag [_egd ];_dd =_bfd +_af *4;if _da !=0&&(_af +1)*4> _eg .BytesPerLine {for _be =_da ;
_be > 0;_be --{_ae =byte ((_fag >>uint (_be *8))&0xff);_adb =_dd +(_da -_be );if _ggg =_eg .setByte (_adb ,_ae );_ggg !=nil {return _ggg ;};};}else if _ggg =_eg .setFourBytes (_dd ,_fag );_ggg !=nil {return _ggg ;};if _ggg =_eg .setFourBytes (_bfd +_af *4,_dag [_ad .Data [_bgf +_af ]]);
_ggg !=nil {return _ggg ;};};for _be =1;_be < 4;_be ++{for _af =0;_af < _ab ;_af ++{if _ggg =_eg .setByte (_bfd +_be *_ab +_af ,_eg .Data [_bfd +_af ]);_ggg !=nil {return _ggg ;};};};};return nil ;};var _ _fb .Image =&NRGBA64 {};type Monochrome struct{ImageBase ;
ModelThreshold uint8 ;};func (_dbgfb *NRGBA16 )SetNRGBA (x ,y int ,c _cg .NRGBA ){_ecfg :=y *_dbgfb .BytesPerLine +x *3/2;if _ecfg +1>=len (_dbgfb .Data ){return ;};c =_cda (c );_dbgfb .setNRGBA (x ,y ,_ecfg ,c );};func _agfb (_fgg _cg .RGBA )_cg .Gray {_ddce :=(19595*uint32 (_fgg .R )+38470*uint32 (_fgg .G )+7471*uint32 (_fgg .B )+1<<7)>>16;
return _cg .Gray {Y :uint8 (_ddce )};};func _cagg (_eeca _cg .Gray )_cg .Gray {_fbaf :=_eeca .Y >>6;_fbaf |=_fbaf <<2;_eeca .Y =_fbaf |_fbaf <<4;return _eeca ;};func (_fffg *NRGBA64 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_fffg .Width ,Y :_fffg .Height }};
};type ColorConverter interface{Convert (_fdb _fb .Image )(Image ,error );};func _dcge (_caab *Monochrome ,_cgbd ,_eecf ,_agdc ,_fbgdf int ,_eebb RasterOperator ,_affd *Monochrome ,_eeea ,_ecee int )error {var (_agcc bool ;_cgabb bool ;_cbea int ;_abac int ;
_gedf int ;_ffge bool ;_ffcce byte ;_cdbe int ;_dae int ;_bad int ;_bbea ,_dgef int ;);_agaa :=8-(_cgbd &7);_fcbd :=_caead [_agaa ];_aefba :=_caab .BytesPerLine *_eecf +(_cgbd >>3);_ddd :=_affd .BytesPerLine *_ecee +(_eeea >>3);if _agdc < _agaa {_agcc =true ;
_fcbd &=_cbeb [8-_agaa +_agdc ];};if !_agcc {_cbea =(_agdc -_agaa )>>3;if _cbea > 0{_cgabb =true ;_abac =_aefba +1;_gedf =_ddd +1;};};_cdbe =(_cgbd +_agdc )&7;if !(_agcc ||_cdbe ==0){_ffge =true ;_ffcce =_cbeb [_cdbe ];_dae =_aefba +1+_cbea ;_bad =_ddd +1+_cbea ;
};switch _eebb {case PixSrc :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ],_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;
_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ],_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotSrc :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^_affd .Data [_ddd ],_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;
};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=^_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^_affd .Data [_bad ],_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixSrcOrDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ]|_caab .Data [_aefba ],_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;
};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]|=_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ]|_caab .Data [_dae ],_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixSrcAndDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ]&_caab .Data [_aefba ],_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;
};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]&=_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ]&_caab .Data [_dae ],_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixSrcXorDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ]^_caab .Data [_aefba ],_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;
};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]^=_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ]^_caab .Data [_dae ],_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotSrcOrDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^(_affd .Data [_ddd ])|_caab .Data [_aefba ],_fcbd );_aefba +=_caab .BytesPerLine ;
_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]|=^(_affd .Data [_gedf +_dgef ]);};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;
_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^(_affd .Data [_bad ])|_caab .Data [_dae ],_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotSrcAndDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^(_affd .Data [_ddd ])&_caab .Data [_aefba ],_fcbd );
_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]&=^_affd .Data [_gedf +_dgef ];};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;
};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^(_affd .Data [_bad ])&_caab .Data [_dae ],_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixSrcOrNotDst :for _bbea =0;_bbea < _fbgdf ;
_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ]|^(_caab .Data [_aefba ]),_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=_affd .Data [_gedf +_dgef ]|^(_caab .Data [_abac +_dgef ]);
};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ]|^(_caab .Data [_dae ]),_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;
};};case PixSrcAndNotDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],_affd .Data [_ddd ]&^(_caab .Data [_aefba ]),_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;
_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=_affd .Data [_gedf +_dgef ]&^(_caab .Data [_abac +_dgef ]);};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;
_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],_affd .Data [_bad ]&^(_caab .Data [_dae ]),_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotPixSrcOrDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^(_affd .Data [_ddd ]|_caab .Data [_aefba ]),_fcbd );
_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=^(_affd .Data [_gedf +_dgef ]|_caab .Data [_abac +_dgef ]);};_abac +=_caab .BytesPerLine ;
_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^(_affd .Data [_bad ]|_caab .Data [_dae ]),_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotPixSrcAndDst :for _bbea =0;
_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^(_affd .Data [_ddd ]&_caab .Data [_aefba ]),_fcbd );_aefba +=_caab .BytesPerLine ;_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;
_dgef ++{_caab .Data [_abac +_dgef ]=^(_affd .Data [_gedf +_dgef ]&_caab .Data [_abac +_dgef ]);};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^(_affd .Data [_bad ]&_caab .Data [_dae ]),_ffcce );
_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};case PixNotPixSrcXorDst :for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_aefba ]=_feec (_caab .Data [_aefba ],^(_affd .Data [_ddd ]^_caab .Data [_aefba ]),_fcbd );_aefba +=_caab .BytesPerLine ;
_ddd +=_affd .BytesPerLine ;};if _cgabb {for _bbea =0;_bbea < _fbgdf ;_bbea ++{for _dgef =0;_dgef < _cbea ;_dgef ++{_caab .Data [_abac +_dgef ]=^(_affd .Data [_gedf +_dgef ]^_caab .Data [_abac +_dgef ]);};_abac +=_caab .BytesPerLine ;_gedf +=_affd .BytesPerLine ;
};};if _ffge {for _bbea =0;_bbea < _fbgdf ;_bbea ++{_caab .Data [_dae ]=_feec (_caab .Data [_dae ],^(_affd .Data [_bad ]^_caab .Data [_dae ]),_ffcce );_dae +=_caab .BytesPerLine ;_bad +=_affd .BytesPerLine ;};};default:_fa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_eebb );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_ecd :=y *bytesPerLine +x >>2;
if _ecd >=len (data ){return _cg .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_faea :=data [_ecd ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_faea =uint8 (uint32 (LinearInterpolate (float64 (_faea ),0,3.0,decode [0],decode [1]))&3);};return _cg .Gray {Y :_faea *85},nil ;};func (_dade *ImageBase )setByte (_cadd int ,_ddfb byte )error {if _cadd > len (_dade .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dade .Data [_cadd ]=_ddfb ;return nil ;};func _cda (_abca _cg .NRGBA )_cg .NRGBA {_abca .R =_abca .R >>4|(_abca .R >>4)<<4;_abca .G =_abca .G >>4|(_abca .G >>4)<<4;_abca .B =_abca .B >>4|(_abca .B >>4)<<4;return _abca ;};func (_bgb *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _bage (_bgb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};var _ Image =&Monochrome {};func _ebfgf (_gbcf *_fb .Gray )bool {for _deaa :=0;_deaa < len (_gbcf .Pix );_deaa ++{if !_bgfff (_gbcf .Pix [_deaa ]){return false ;};};return true ;};func (_fdbgc *NRGBA32 )Set (x ,y int ,c _cg .Color ){_bfae :=y *_fdbgc .Width +x ;
_cbff :=3*_bfae ;if _cbff +2>=len (_fdbgc .Data ){return ;};_ebee :=_cg .NRGBAModel .Convert (c ).(_cg .NRGBA );_fdbgc .setRGBA (_bfae ,_ebee );};type RGBA interface{RGBAAt (_gbac ,_aaba int )_cg .RGBA ;SetRGBA (_dege ,_efg int ,_dbgb _cg .RGBA );};var _ Gray =&Gray4 {};
func (_dgg *CMYK32 )Base ()*ImageBase {return &_dgg .ImageBase };func (_bbgd *Gray2 )Base ()*ImageBase {return &_bbgd .ImageBase };var _ Image =&NRGBA16 {};func (_bbac *Monochrome )Histogram ()(_fbfc [256]int ){for _ ,_bcc :=range _bbac .Data {_fbfc [0xff]+=int (_agda [_bbac .Data [_bcc ]]);
};return _fbfc ;};var _ Gray =&Gray16 {};func (_fcbae *RGBA32 )RGBAAt (x ,y int )_cg .RGBA {_ddcc ,_ :=ColorAtRGBA32 (x ,y ,_fcbae .Width ,_fcbae .Data ,_fcbae .Alpha ,_fcbae .Decode );return _ddcc ;};func (_fgae *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_fgae .copy ()}};
func (_affe *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _fbdg bool ;_ece :=scale ;if scale < 1{_ece =1/scale ;_fbdg =true ;};_egdb :=NextPowerOf2 (uint (_ece ));if InDelta (float64 (_egdb ),_ece ,0.001){if _fbdg {return _affe .ReduceBinary (_ece );
};return _affe .ExpandBinary (int (_egdb ));};_gdac :=int (_g .RoundToEven (float64 (_affe .Width )*scale ));_acgd :=int (_g .RoundToEven (float64 (_affe .Height )*scale ));return _affe .ScaleLow (_gdac ,_acgd );};func (_fgcb *Gray8 )GrayAt (x ,y int )_cg .Gray {_afaa ,_ :=ColorAtGray8BPC (x ,y ,_fgcb .BytesPerLine ,_fgcb .Data ,_fgcb .Decode );
return _afaa ;};func (_ebbg *NRGBA16 )Base ()*ImageBase {return &_ebbg .ImageBase };var _ _fb .Image =&RGBA32 {};func _age ()(_gfe [256]uint32 ){for _gb :=0;_gb < 256;_gb ++{if _gb &0x01!=0{_gfe [_gb ]|=0xf;};if _gb &0x02!=0{_gfe [_gb ]|=0xf0;};if _gb &0x04!=0{_gfe [_gb ]|=0xf00;
};if _gb &0x08!=0{_gfe [_gb ]|=0xf000;};if _gb &0x10!=0{_gfe [_gb ]|=0xf0000;};if _gb &0x20!=0{_gfe [_gb ]|=0xf00000;};if _gb &0x40!=0{_gfe [_gb ]|=0xf000000;};if _gb &0x80!=0{_gfe [_gb ]|=0xf0000000;};};return _gfe ;};type RGBA32 struct{ImageBase };func _fbgf (_cdcf _cg .NYCbCrA )_cg .RGBA {_bfbe ,_cbdd ,_geee ,_acef :=_dfcg (_cdcf ).RGBA ();
return _cg .RGBA {R :uint8 (_bfbe >>8),G :uint8 (_cbdd >>8),B :uint8 (_geee >>8),A :uint8 (_acef >>8)};};func (_cge colorConverter )Convert (src _fb .Image )(Image ,error ){return _cge ._cbfd (src )};func (_cff *Gray2 )ColorModel ()_cg .Model {return Gray2Model };
func (_gefb *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gefb .copy ()}};func (_aega *Gray4 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_aega .Width ,Y :_aega .Height }};};func (_gcfg *NRGBA16 )At (x ,y int )_cg .Color {_bafc ,_ :=_gcfg .ColorAt (x ,y );
return _bafc };func (_bdbe *Gray2 )Bounds ()_fb .Rectangle {return _fb .Rectangle {Max :_fb .Point {X :_bdbe .Width ,Y :_bdbe .Height }};};type Gray16 struct{ImageBase };func (_fbaa *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_fbaa .copy ()}};func (_gebae *NRGBA16 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA16 (x ,y ,_gebae .Width ,_gebae .BytesPerLine ,_gebae .Data ,_gebae .Alpha ,_gebae .Decode );
};