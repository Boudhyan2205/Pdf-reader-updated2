//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package transform ;import (_e "fmt";_g "github.com/unidoc/unipdf/v3/common";_d "math";);func (_ag *Matrix )ScalingFactorY ()float64 {return _d .Hypot (_ag [3],_ag [4])};func (_af Matrix )String ()string {_fa ,_ea ,_bf ,_ge ,_aa ,_ga :=_af [0],_af [1],_af [3],_af [4],_af [6],_af [7];return _e .Sprintf ("\u005b\u00257\u002e\u0034\u0066\u002c%\u0037\u002e4\u0066\u002c\u0025\u0037\u002e\u0034\u0066\u002c%\u0037\u002e\u0034\u0066\u003a\u0025\u0037\u002e\u0034\u0066\u002c\u00257\u002e\u0034\u0066\u005d",_fa ,_ea ,_bf ,_ge ,_aa ,_ga );};func (_gg *Matrix )Scale (x ,y float64 ){_gg .Concat (ScaleMatrix (x ,y ))};func ShearMatrix (x ,y float64 )Matrix {return NewMatrix (1,y ,x ,1,0,0)};func ScaleMatrix (x ,y float64 )Matrix {return NewMatrix (x ,0,0,y ,0,0)};func (_de *Matrix )Transform (x ,y float64 )(float64 ,float64 ){_cc :=x *_de [0]+y *_de [1]+_de [6];_aad :=x *_de [3]+y *_de [4]+_de [7];return _cc ,_aad ;};func (_bc Point )Rotate (theta float64 )Point {_fd :=_d .Hypot (_bc .X ,_bc .Y );_bfg :=_d .Atan2 (_bc .Y ,_bc .X );_bcb ,_def :=_d .Sincos (_bfg +theta /180.0*_d .Pi );return Point {_fd *_def ,_fd *_bcb };};func (_gd *Matrix )Concat (b Matrix ){*_gd =Matrix {b [0]*_gd [0]+b [1]*_gd [3],b [0]*_gd [1]+b [1]*_gd [4],0,b [3]*_gd [0]+b [4]*_gd [3],b [3]*_gd [1]+b [4]*_gd [4],0,b [6]*_gd [0]+b [7]*_gd [3]+_gd [6],b [6]*_gd [1]+b [7]*_gd [4]+_gd [7],1};_gd .clampRange ();};func NewMatrix (a ,b ,c ,d ,tx ,ty float64 )Matrix {_fg :=Matrix {a ,b ,0,c ,d ,0,tx ,ty ,1};_fg .clampRange ();return _fg ;};func (_bgb *Point )Set (x ,y float64 ){_bgb .X ,_bgb .Y =x ,y };const _ba =1.0e-6;func TranslationMatrix (tx ,ty float64 )Matrix {return NewMatrix (1,0,0,1,tx ,ty )};const _db =1e9;func RotationMatrix (angle float64 )Matrix {_a :=_d .Cos (angle );_b :=_d .Sin (angle );return NewMatrix (_a ,_b ,-_b ,_a ,0,0);};type Matrix [9]float64 ;func (_ed Point )Displace (delta Point )Point {return Point {_ed .X +delta .X ,_ed .Y +delta .Y }};func (_cec *Point )transformByMatrix (_fge Matrix ){_cec .X ,_cec .Y =_fge .Transform (_cec .X ,_cec .Y )};func (_fb *Matrix )ScalingFactorX ()float64 {return _d .Hypot (_fb [0],_fb [1])};func (_gag Point )Distance (b Point )float64 {return _d .Hypot (_gag .X -b .X ,_gag .Y -b .Y )};const _cf =1e-6;func (_adb *Point )Transform (a ,b ,c ,d ,tx ,ty float64 ){_ef :=NewMatrix (a ,b ,c ,d ,tx ,ty );_adb .transformByMatrix (_ef );};func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};func (_abc *Matrix )Clone ()Matrix {return NewMatrix (_abc [0],_abc [1],_abc [3],_abc [4],_abc [6],_abc [7]);};func (_dee *Matrix )Angle ()float64 {_fe :=_d .Atan2 (-_dee [1],_dee [0]);if _fe < 0.0{_fe +=2*_d .Pi ;};return _fe /_d .Pi *180.0;};func (_bb Point )Interpolate (b Point ,t float64 )Point {return Point {X :(1-t )*_bb .X +t *b .X ,Y :(1-t )*_bb .Y +t *b .Y };};type Point struct{X float64 ;Y float64 ;};func (_ad *Matrix )Unrealistic ()bool {_cg ,_bd ,_ddd ,_cb :=_d .Abs (_ad [0]),_d .Abs (_ad [1]),_d .Abs (_ad [3]),_d .Abs (_ad [4]);_ac :=_cg > _cf &&_cb > _cf ;_ec :=_bd > _cf &&_ddd > _cf ;return !(_ac ||_ec );};func (_dd *Matrix )Set (a ,b ,c ,d ,tx ,ty float64 ){_dd [0],_dd [1]=a ,b ;_dd [3],_dd [4]=c ,d ;_dd [6],_dd [7]=tx ,ty ;_dd .clampRange ();};func (_c *Matrix )Shear (x ,y float64 ){_c .Concat (ShearMatrix (x ,y ))};func (_cca *Matrix )clampRange (){for _ce ,_eb :=range _cca {if _eb > _db {_g .Log .Debug ("\u0043L\u0041M\u0050\u003a\u0020\u0025\u0067\u0020\u002d\u003e\u0020\u0025\u0067",_eb ,_db );_cca [_ce ]=_db ;}else if _eb < -_db {_g .Log .Debug ("\u0043L\u0041M\u0050\u003a\u0020\u0025\u0067\u0020\u002d\u003e\u0020\u0025\u0067",_eb ,-_db );_cca [_ce ]=-_db ;};};};func (_be Matrix )Mult (b Matrix )Matrix {_be .Concat (b );return _be };func (_df Point )String ()string {return _e .Sprintf ("(\u0025\u002e\u0032\u0066\u002c\u0025\u002e\u0032\u0066\u0029",_df .X ,_df .Y );};func (_eg *Matrix )Translate (x ,y float64 ){_eg .Concat (TranslationMatrix (x ,y ))};func (_ab *Matrix )Translation ()(float64 ,float64 ){return _ab [6],_ab [7]};func (_bg *Matrix )Rotate (angle float64 ){_bg .Concat (RotationMatrix (angle ))};func IdentityMatrix ()Matrix {return NewMatrix (1,0,0,1,0,0)};