//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitwise ;import (_af "encoding/binary";_aa "errors";_ag "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ad "io";);func (_fbd *Reader )Mark (){_fbd ._bge =_fbd ._fac ;_fbd ._cg =_fbd ._bb };func (_edc *Writer )Write (p []byte )(int ,error ){if len (p )> _edc .byteCapacity (){return 0,_ad .EOF ;};for _ ,_efa :=range p {if _egg :=_edc .writeByte (_efa );_egg !=nil {return 0,_egg ;};};return len (p ),nil ;};func (_bcc *SubstreamReader )Reset (){_bcc ._dbf =_bcc ._afd ;_bcc ._aca =_bcc ._bca };func NewWriter (data []byte )*Writer {return &Writer {_gcc :data }};func NewReader (data []byte )*Reader {return &Reader {_dc :data }};var _ _ad .ByteWriter =&BufferedWriter {};func (_gcd *BufferedWriter )tryGrowByReslice (_adf int )bool {if _deb :=len (_gcd ._d );_adf <=cap (_gcd ._d )-_deb {_gcd ._d =_gcd ._d [:_deb +_adf ];return true ;};return false ;};func (_bdg *Writer )byteCapacity ()int {_gffc :=len (_bdg ._gcc )-_bdg ._dgfb ;if _bdg ._efea !=0{_gffc --;};return _gffc ;};func (_ef *BufferedWriter )FinishByte (){if _ef ._de ==0{return ;};_ef ._de =0;_ef ._eb ++;};func (_cb *Reader )Read (p []byte )(_bcf int ,_dbc error ){if _cb ._bb ==0{return _cb .read (p );};for ;_bcf < len (p );_bcf ++{if p [_bcf ],_dbc =_cb .readUnalignedByte ();_dbc !=nil {return 0,_dbc ;};};return _bcf ,nil ;};type StreamReader interface{_ad .Reader ;_ad .ByteReader ;_ad .Seeker ;Align ()byte ;BitPosition ()int ;Mark ();Length ()uint64 ;ReadBit ()(int ,error );ReadBits (_cd byte )(uint64 ,error );ReadBool ()(bool ,error );ReadUint32 ()(uint32 ,error );Reset ();StreamPosition ()int64 ;};func (_fea *BufferedWriter )writeByte (_fd byte ){switch {case _fea ._de ==0:_fea ._d [_fea ._eb ]=_fd ;_fea ._eb ++;case _fea ._ee :_fea ._d [_fea ._eb ]|=_fd >>_fea ._de ;_fea ._eb ++;_fea ._d [_fea ._eb ]=byte (uint16 (_fd )<<(8-_fea ._de )&0xff);default:_fea ._d [_fea ._eb ]|=byte (uint16 (_fd )<<_fea ._de &0xff);_fea ._eb ++;_fea ._d [_fea ._eb ]=_fd >>(8-_fea ._de );};};func (_gfd *BufferedWriter )grow (_bab int ){if _gfd ._d ==nil &&_bab < _f {_gfd ._d =make ([]byte ,_bab ,_f );return ;};_bg :=len (_gfd ._d );if _gfd ._de !=0{_bg ++;};_cc :=cap (_gfd ._d );switch {case _bab <=_cc /2-_bg :_ag .Log .Trace ("\u005b\u0042\u0075\u0066\u0066\u0065r\u0065\u0064\u0057\u0072\u0069t\u0065\u0072\u005d\u0020\u0067\u0072o\u0077\u0020\u002d\u0020\u0072e\u0073\u006c\u0069\u0063\u0065\u0020\u006f\u006e\u006c\u0079\u002e\u0020L\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0043\u0061\u0070\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u006e\u003a\u0020'\u0025\u0064\u0027",len (_gfd ._d ),cap (_gfd ._d ),_bab );_ag .Log .Trace ("\u0020\u006e\u0020\u003c\u003d\u0020\u0063\u0020\u002f\u0020\u0032\u0020\u002d\u006d\u002e \u0043:\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u006d\u003a\u0020\u0027\u0025\u0064\u0027",_cc ,_bg );copy (_gfd ._d ,_gfd ._d [_gfd .fullOffset ():]);case _cc > _g -_cc -_bab :_ag .Log .Error ("\u0042\u0055F\u0046\u0045\u0052 \u0074\u006f\u006f\u0020\u006c\u0061\u0072\u0067\u0065");return ;default:_acf :=make ([]byte ,2*_cc +_bab );copy (_acf ,_gfd ._d );_gfd ._d =_acf ;};_gfd ._d =_gfd ._d [:_bg +_bab ];};func (_ceb *Writer )WriteBits (bits uint64 ,number int )(_ddbf int ,_aef error ){const _gffe ="\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065r\u0042\u0069\u0074\u0073";if number < 0||number > 64{return 0,_b .Errorf (_gffe ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};if number ==0{return 0,nil ;};_fgg :=number /8;if _fgg > 0{_aaea :=number -_fgg *8;for _fee :=_fgg -1;_fee >=0;_fee --{_bgg :=byte ((bits >>uint (_fee *8+_aaea ))&0xff);if _aef =_ceb .WriteByte (_bgg );_aef !=nil {return _ddbf ,_b .Wrapf (_aef ,_gffe ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_fgg -_fee +1);};};number -=_fgg *8;if number ==0{return _fgg ,nil ;};};var _ecd int ;for _egea :=0;_egea < number ;_egea ++{if _ceb ._fgc {_ecd =int ((bits >>uint (number -1-_egea ))&0x1);}else {_ecd =int (bits &0x1);bits >>=1;};if _aef =_ceb .WriteBit (_ecd );_aef !=nil {return _ddbf ,_b .Wrapf (_aef ,_gffe ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_egea );};};return _fgg ,nil ;};func (_fcg *Reader )Reset (){_fcg ._fac =_fcg ._bge ;_fcg ._bb =_fcg ._cg };func (_c *BufferedWriter )Data ()[]byte {return _c ._d };type BitWriter interface{WriteBit (_dfd int )error ;WriteBits (_gga uint64 ,_bcb int )(_deaf int ,_fda error );FinishByte ();SkipBits (_bag int )error ;};func (_fdag *SubstreamReader )Mark (){_fdag ._afd =_fdag ._dbf ;_fdag ._bca =_fdag ._aca };type BufferedWriter struct{_d []byte ;_de uint8 ;_eb int ;_ee bool ;};func (_da *BufferedWriter )Len ()int {return _da .byteCapacity ()};func (_cea *Writer )ResetBit (){_cea ._efea =0};func (_gbe *Reader )readBool ()(_bagg bool ,_dgc error ){if _gbe ._bb ==0{_gbe ._dacd ,_dgc =_gbe .readBufferByte ();if _dgc !=nil {return false ,_dgc ;};_bagg =(_gbe ._dacd &0x80)!=0;_gbe ._dacd ,_gbe ._bb =_gbe ._dacd &0x7f,7;return _bagg ,nil ;};_gbe ._bb --;_bagg =(_gbe ._dacd &(1<<_gbe ._bb ))!=0;_gbe ._dacd &=1<<_gbe ._bb -1;return _bagg ,nil ;};func (_gdd *SubstreamReader )ReadBits (n byte )(_cgb uint64 ,_cce error ){if n < _gdd ._aca {_cbd :=_gdd ._aca -n ;_cgb =uint64 (_gdd ._add >>_cbd );_gdd ._add &=1<<_cbd -1;_gdd ._aca =_cbd ;return _cgb ,nil ;};if n > _gdd ._aca {if _gdd ._aca > 0{_cgb =uint64 (_gdd ._add );n -=_gdd ._aca ;};var _egdg byte ;for n >=8{_egdg ,_cce =_gdd .readBufferByte ();if _cce !=nil {return 0,_cce ;};_cgb =_cgb <<8+uint64 (_egdg );n -=8;};if n > 0{if _gdd ._add ,_cce =_gdd .readBufferByte ();_cce !=nil {return 0,_cce ;};_gaf :=8-n ;_cgb =_cgb <<n +uint64 (_gdd ._add >>_gaf );_gdd ._add &=1<<_gaf -1;_gdd ._aca =_gaf ;}else {_gdd ._aca =0;};return _cgb ,nil ;};_gdd ._aca =0;return uint64 (_gdd ._add ),nil ;};func (_aaff *Reader )ReadUint32 ()(uint32 ,error ){_gbc :=make ([]byte ,4);_ ,_aag :=_aaff .Read (_gbc );if _aag !=nil {return 0,_aag ;};return _af .BigEndian .Uint32 (_gbc ),nil ;};func (_aaa *SubstreamReader )ReadUint32 ()(uint32 ,error ){_ddb :=make ([]byte ,4);_ ,_bgd :=_aaa .Read (_ddb );if _bgd !=nil {return 0,_bgd ;};return _af .BigEndian .Uint32 (_ddb ),nil ;};func (_bdd *Reader )readUnalignedByte ()(_fg byte ,_cdd error ){_dad :=_bdd ._bb ;_fg =_bdd ._dacd <<(8-_dad );_bdd ._dacd ,_cdd =_bdd .readBufferByte ();if _cdd !=nil {return 0,_cdd ;};_fg |=_bdd ._dacd >>_dad ;_bdd ._dacd &=1<<_dad -1;return _fg ,nil ;};func (_ege *SubstreamReader )readUnalignedByte ()(_gbec byte ,_cdf error ){_cbg :=_ege ._aca ;_gbec =_ege ._add <<(8-_cbg );_ege ._add ,_cdf =_ege .readBufferByte ();if _cdf !=nil {return 0,_cdf ;};_gbec |=_ege ._add >>_cbg ;_ege ._add &=1<<_cbg -1;return _gbec ,nil ;};type Reader struct{_dc []byte ;_dacd byte ;_bb byte ;_fac int64 ;_gad int ;_fb int ;_bge int64 ;_cg byte ;};func (_bagb *Reader )ReadBits (n byte )(_fc uint64 ,_bd error ){if n < _bagb ._bb {_cba :=_bagb ._bb -n ;_fc =uint64 (_bagb ._dacd >>_cba );_bagb ._dacd &=1<<_cba -1;_bagb ._bb =_cba ;return _fc ,nil ;};if n > _bagb ._bb {if _bagb ._bb > 0{_fc =uint64 (_bagb ._dacd );n -=_bagb ._bb ;};for n >=8{_cdc ,_aabg :=_bagb .readBufferByte ();if _aabg !=nil {return 0,_aabg ;};_fc =_fc <<8+uint64 (_cdc );n -=8;};if n > 0{if _bagb ._dacd ,_bd =_bagb .readBufferByte ();_bd !=nil {return 0,_bd ;};_debb :=8-n ;_fc =_fc <<n +uint64 (_bagb ._dacd >>_debb );_bagb ._dacd &=1<<_debb -1;_bagb ._bb =_debb ;}else {_bagb ._bb =0;};return _fc ,nil ;};_bagb ._bb =0;return uint64 (_bagb ._dacd ),nil ;};func _bfa (_gag ,_ecab uint64 )uint64 {if _gag < _ecab {return _gag ;};return _ecab ;};type Writer struct{_gcc []byte ;_efea uint8 ;_dgfb int ;_fgc bool ;};func (_gg *BufferedWriter )WriteBits (bits uint64 ,number int )(_ba int ,_ebd error ){const _gf ="\u0042u\u0066\u0066\u0065\u0072e\u0064\u0057\u0072\u0069\u0074e\u0072.\u0057r\u0069\u0074\u0065\u0072\u0042\u0069\u0074s";if number < 0||number > 64{return 0,_b .Errorf (_gf ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};_aae :=number /8;if _aae > 0{_gd :=number -_aae *8;for _ff :=_aae -1;_ff >=0;_ff --{_aab :=byte ((bits >>uint (_ff *8+_gd ))&0xff);if _ebd =_gg .WriteByte (_aab );_ebd !=nil {return _ba ,_b .Wrapf (_ebd ,_gf ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_aae -_ff +1);};};number -=_aae *8;if number ==0{return _aae ,nil ;};};var _gcb int ;for _ec :=0;_ec < number ;_ec ++{if _gg ._ee {_gcb =int ((bits >>uint (number -1-_ec ))&0x1);}else {_gcb =int (bits &0x1);bits >>=1;};if _ebd =_gg .WriteBit (_gcb );_ebd !=nil {return _ba ,_b .Wrapf (_ebd ,_gf ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_ec );};};return _aae ,nil ;};func (_degd *SubstreamReader )fillBuffer ()error {if uint64 (_degd ._gba .StreamPosition ())!=_degd ._dbf +_degd ._bdc {_ ,_ge :=_degd ._gba .Seek (int64 (_degd ._dbf +_degd ._bdc ),_ad .SeekStart );if _ge !=nil {return _ge ;};};_degd ._ggc =uint64 (_degd ._dbf );_bea :=_bfa (uint64 (len (_degd ._gfe )),_degd ._dbe -_degd ._dbf );_agg :=make ([]byte ,_bea );_fae ,_fbeb :=_degd ._gba .Read (_agg );if _fbeb !=nil {return _fbeb ;};for _efc :=uint64 (0);_efc < _bea ;_efc ++{_degd ._gfe [_efc ]=_agg [_efc ];};_degd ._dec =_degd ._ggc +uint64 (_fae );return nil ;};var (_ _ad .Reader =&Reader {};_ _ad .ByteReader =&Reader {};_ _ad .Seeker =&Reader {};_ StreamReader =&Reader {};);func (_ebb *BufferedWriter )writeShiftedBytes (_cae []byte )int {for _ ,_bc :=range _cae {_ebb .writeByte (_bc );};return len (_cae );};func (_caea *SubstreamReader )Read (b []byte )(_gfg int ,_deg error ){if _caea ._dbf >=_caea ._dbe {_ag .Log .Trace ("\u0053\u0074\u0072e\u0061\u006d\u0050\u006fs\u003a\u0020\u0027\u0025\u0064\u0027\u0020>\u003d\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027",_caea ._dbf ,_caea ._dbe );return 0,_ad .EOF ;};for ;_gfg < len (b );_gfg ++{if b [_gfg ],_deg =_caea .readUnalignedByte ();_deg !=nil {if _deg ==_ad .EOF {return _gfg ,nil ;};return 0,_deg ;};};return _gfg ,nil ;};func (_aeb *Writer )UseMSB ()bool {return _aeb ._fgc };func (_eca *SubstreamReader )Seek (offset int64 ,whence int )(int64 ,error ){switch whence {case _ad .SeekStart :_eca ._dbf =uint64 (offset );case _ad .SeekCurrent :_eca ._dbf +=uint64 (offset );case _ad .SeekEnd :_eca ._dbf =_eca ._dbe +uint64 (offset );default:return 0,_aa .New ("\u0072\u0065\u0061d\u0065\u0072\u002e\u0053\u0075\u0062\u0073\u0074\u0072\u0065\u0061\u006d\u0052\u0065\u0061\u0064\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};_eca ._aca =0;return int64 (_eca ._dbf ),nil ;};func (_ed *Reader )Seek (offset int64 ,whence int )(int64 ,error ){_ed ._fb =-1;var _eba int64 ;switch whence {case _ad .SeekStart :_eba =offset ;case _ad .SeekCurrent :_eba =_ed ._fac +offset ;case _ad .SeekEnd :_eba =int64 (len (_ed ._dc ))+offset ;default:return 0,_aa .New ("\u0072\u0065\u0061de\u0072\u002e\u0052\u0065\u0061\u0064\u0065\u0072\u002eS\u0065e\u006b:\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};if _eba < 0{return 0,_aa .New ("\u0072\u0065a\u0064\u0065\u0072\u002eR\u0065\u0061d\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u003a \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u006f\u006e");};_ed ._fac =_eba ;_ed ._bb =0;return _eba ,nil ;};func (_ab *BufferedWriter )ResetBitIndex (){_ab ._de =0};func (_gc *BufferedWriter )Reset (){_gc ._d =_gc ._d [:0];_gc ._eb =0;_gc ._de =0};func (_gfeb *SubstreamReader )ReadBit ()(_ace int ,_gcbd error ){_bgf ,_gcbd :=_gfeb .readBool ();if _gcbd !=nil {return 0,_gcbd ;};if _bgf {_ace =1;};return _ace ,nil ;};func (_be *SubstreamReader )BitPosition ()int {return int (_be ._aca )};func (_ga *BufferedWriter )byteCapacity ()int {_db :=len (_ga ._d )-_ga ._eb ;if _ga ._de !=0{_db --;};return _db ;};func (_dcf *Reader )ConsumeRemainingBits (){if _dcf ._bb !=0{_ ,_aee :=_dcf .ReadBits (_dcf ._bb );if _aee !=nil {_ag .Log .Debug ("\u0043\u006f\u006e\u0073\u0075\u006d\u0065\u0052\u0065\u006da\u0069\u006e\u0069\u0067\u0042\u0069\u0074s\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_aee );};};};func (_ae *BufferedWriter )WriteBit (bit int )error {if bit !=1&&bit !=0{return _b .Errorf ("\u0042\u0075\u0066fe\u0072\u0065\u0064\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0062\u0069\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u006du\u0073\u0074\u0020\u0062e\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u007d\u0020\u0062\u0075\u0074\u0020\u0069\u0073\u003a\u0020\u0025\u0064",bit );};if len (_ae ._d )-1< _ae ._eb {_ae .expandIfNeeded (1);};_dg :=_ae ._de ;if _ae ._ee {_dg =7-_ae ._de ;};_ae ._d [_ae ._eb ]|=byte (uint16 (bit <<_dg )&0xff);_ae ._de ++;if _ae ._de ==8{_ae ._eb ++;_ae ._de =0;};return nil ;};func (_bbe *Reader )Length ()uint64 {return uint64 (len (_bbe ._dc ))};func (_aeec *SubstreamReader )Align ()(_egd byte ){_egd =_aeec ._aca ;_aeec ._aca =0;return _egd };func (_fce *Reader )read (_efd []byte )(int ,error ){if _fce ._fac >=int64 (len (_fce ._dc )){return 0,_ad .EOF ;};_fce ._fb =-1;_bbb :=copy (_efd ,_fce ._dc [_fce ._fac :]);_fce ._fac +=int64 (_bbb );return _bbb ,nil ;};func (_fbe *SubstreamReader )Offset ()uint64 {return _fbe ._bdc };func (_dfb *BufferedWriter )writeFullBytes (_dd []byte )int {_dgb :=copy (_dfb ._d [_dfb .fullOffset ():],_dd );_dfb ._eb +=_dgb ;return _dgb ;};func (_geg *Writer )writeByte (_cedb byte )error {if _geg ._dgfb > len (_geg ._gcc )-1{return _ad .EOF ;};if _geg ._dgfb ==len (_geg ._gcc )-1&&_geg ._efea !=0{return _ad .EOF ;};if _geg ._efea ==0{_geg ._gcc [_geg ._dgfb ]=_cedb ;_geg ._dgfb ++;return nil ;};if _geg ._fgc {_geg ._gcc [_geg ._dgfb ]|=_cedb >>_geg ._efea ;_geg ._dgfb ++;_geg ._gcc [_geg ._dgfb ]=byte (uint16 (_cedb )<<(8-_geg ._efea )&0xff);}else {_geg ._gcc [_geg ._dgfb ]|=byte (uint16 (_cedb )<<_geg ._efea &0xff);_geg ._dgfb ++;_geg ._gcc [_geg ._dgfb ]=_cedb >>(8-_geg ._efea );};return nil ;};func (_gbag *SubstreamReader )ReadBool ()(bool ,error ){return _gbag .readBool ()};func (_dee *BufferedWriter )fullOffset ()int {_ca :=_dee ._eb ;if _dee ._de !=0{_ca ++;};return _ca ;};func (_ccf *Writer )writeBit (_dbef uint8 )error {if len (_ccf ._gcc )-1< _ccf ._dgfb {return _ad .EOF ;};_debe :=_ccf ._efea ;if _ccf ._fgc {_debe =7-_ccf ._efea ;};_ccf ._gcc [_ccf ._dgfb ]|=byte (uint16 (_dbef <<_debe )&0xff);_ccf ._efea ++;if _ccf ._efea ==8{_ccf ._dgfb ++;_ccf ._efea =0;};return nil ;};var _ _ad .Writer =&BufferedWriter {};type SubstreamReader struct{_dbf uint64 ;_gba StreamReader ;_bdc uint64 ;_dbe uint64 ;_gfe []byte ;_ggc uint64 ;_dec uint64 ;_add byte ;_aca byte ;_afd uint64 ;_bca byte ;};func (_ea *SubstreamReader )ReadByte ()(byte ,error ){if _ea ._aca ==0{return _ea .readBufferByte ();};return _ea .readUnalignedByte ();};func (_bff *Writer )SkipBits (skip int )error {const _gdc ="\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073";if skip ==0{return nil ;};_caec :=int (_bff ._efea )+skip ;if _caec >=0&&_caec < 8{_bff ._efea =uint8 (_caec );return nil ;};_caec =int (_bff ._efea )+_bff ._dgfb *8+skip ;if _caec < 0{return _b .Errorf (_gdc ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bfd :=_caec /8;_cbdb :=_caec %8;_ag .Log .Trace ("\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073");_ag .Log .Trace ("\u0042\u0069\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0042\u0079\u0074\u0065\u0049n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0046\u0075\u006c\u006c\u0042\u0069\u0074\u0073\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u004c\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027,\u0020\u0043\u0061p\u003a\u0020\u0027\u0025\u0064\u0027",_bff ._efea ,_bff ._dgfb ,int (_bff ._efea )+(_bff ._dgfb )*8,len (_bff ._gcc ),cap (_bff ._gcc ));_ag .Log .Trace ("S\u006b\u0069\u0070\u003a\u0020\u0027%\u0064\u0027\u002c\u0020\u0064\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062i\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025d\u0027",skip ,_caec ,_cbdb );_bff ._efea =uint8 (_cbdb );if _fdb :=_bfd -_bff ._dgfb ;_fdb > 0&&len (_bff ._gcc )-1< _bfd {_ag .Log .Trace ("\u0042\u0079\u0074e\u0044\u0069\u0066\u0066\u003a\u0020\u0025\u0064",_fdb );return _b .Errorf (_gdc ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bff ._dgfb =_bfd ;_ag .Log .Trace ("\u0042\u0069\u0074I\u006e\u0064\u0065\u0078:\u0020\u0027\u0025\u0064\u0027\u002c\u0020B\u0079\u0074\u0065\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027",_bff ._efea ,_bff ._dgfb );return nil ;};func (_ced *SubstreamReader )readBool ()(_ecc bool ,_abe error ){if _ced ._aca ==0{_ced ._add ,_abe =_ced .readBufferByte ();if _abe !=nil {return false ,_abe ;};_ecc =(_ced ._add &0x80)!=0;_ced ._add ,_ced ._aca =_ced ._add &0x7f,7;return _ecc ,nil ;};_ced ._aca --;_ecc =(_ced ._add &(1<<_ced ._aca ))!=0;_ced ._add &=1<<_ced ._aca -1;return _ecc ,nil ;};func (_aaf *BufferedWriter )SkipBits (skip int )error {if skip ==0{return nil ;};_ac :=int (_aaf ._de )+skip ;if _ac >=0&&_ac < 8{_aaf ._de =uint8 (_ac );return nil ;};_ac =int (_aaf ._de )+_aaf ._eb *8+skip ;if _ac < 0{return _b .Errorf ("\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bf :=_ac /8;_fe :=_ac %8;_aaf ._de =uint8 (_fe );if _dac :=_bf -_aaf ._eb ;_dac > 0&&len (_aaf ._d )-1< _bf {if _aaf ._de !=0{_dac ++;};_aaf .expandIfNeeded (_dac );};_aaf ._eb =_bf ;return nil ;};func (_egef *SubstreamReader )readBufferByte ()(byte ,error ){if _egef ._dbf >=_egef ._dbe {return 0,_ad .EOF ;};if _egef ._dbf >=_egef ._dec ||_egef ._dbf < _egef ._ggc {if _eaf :=_egef .fillBuffer ();_eaf !=nil {return 0,_eaf ;};};_gbg :=_egef ._gfe [_egef ._dbf -_egef ._ggc ];_egef ._dbf ++;return _gbg ,nil ;};var _ BinaryWriter =&Writer {};func (_gge *BufferedWriter )expandIfNeeded (_dgf int ){if !_gge .tryGrowByReslice (_dgf ){_gge .grow (_dgf );};};func (_gffa *Writer )FinishByte (){if _gffa ._efea ==0{return ;};_gffa ._efea =0;_gffa ._dgfb ++;};var _ BinaryWriter =&BufferedWriter {};type BinaryWriter interface{BitWriter ;_ad .Writer ;_ad .ByteWriter ;Data ()[]byte ;};func (_edf *Reader )readBufferByte ()(byte ,error ){if _edf ._fac >=int64 (len (_edf ._dc )){return 0,_ad .EOF ;};_edf ._fb =-1;_bbbc :=_edf ._dc [_edf ._fac ];_edf ._fac ++;_edf ._gad =int (_bbbc );return _bbbc ,nil ;};func (_eeg *Writer )WriteBit (bit int )error {switch bit {case 0,1:return _eeg .writeBit (uint8 (bit ));};return _b .Error ("\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0062\u0069\u0074\u0020v\u0061\u006c\u0075\u0065");};func NewSubstreamReader (r StreamReader ,offset ,length uint64 )(*SubstreamReader ,error ){if r ==nil {return nil ,_aa .New ("\u0072o\u006ft\u0020\u0072\u0065\u0061\u0064e\u0072\u0020i\u0073\u0020\u006e\u0069\u006c");};_ag .Log .Trace ("\u004e\u0065\u0077\u0053\u0075\u0062\u0073\u0074r\u0065\u0061\u006dRe\u0061\u0064\u0065\u0072\u0020\u0061t\u0020\u006f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0064\u0020\u0077\u0069\u0074h\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064",offset ,length );return &SubstreamReader {_gba :r ,_bdc :offset ,_dbe :length ,_gfe :make ([]byte ,length )},nil ;};func BufferedMSB ()*BufferedWriter {return &BufferedWriter {_ee :true }};func (_acd *Reader )ReadByte ()(byte ,error ){if _acd ._bb ==0{return _acd .readBufferByte ();};return _acd .readUnalignedByte ();};func NewWriterMSB (data []byte )*Writer {return &Writer {_gcc :data ,_fgc :true }};func (_eab *Writer )WriteByte (c byte )error {return _eab .writeByte (c )};func (_dcc *Reader )ReadBit ()(_fdc int ,_fba error ){_efe ,_fba :=_dcc .readBool ();if _fba !=nil {return 0,_fba ;};if _efe {_fdc =1;};return _fdc ,nil ;};const (_f =64;_g =int (^uint (0)>>1););func (_faa *Reader )StreamPosition ()int64 {return _faa ._fac };func (_cac *Writer )Data ()[]byte {return _cac ._gcc };func (_cga *SubstreamReader )StreamPosition ()int64 {return int64 (_cga ._dbf )};func (_bed *SubstreamReader )Length ()uint64 {return _bed ._dbe };func (_gcg *Reader )BitPosition ()int {return int (_gcg ._bb )};func (_eff *Reader )ReadBool ()(bool ,error ){return _eff .readBool ()};func (_fbf *Reader )Align ()(_cgd byte ){_cgd =_fbf ._bb ;_fbf ._bb =0;return _cgd };func (_eg *BufferedWriter )Write (d []byte )(int ,error ){_eg .expandIfNeeded (len (d ));if _eg ._de ==0{return _eg .writeFullBytes (d ),nil ;};return _eg .writeShiftedBytes (d ),nil ;};func (_dea *BufferedWriter )WriteByte (bt byte )error {if _dea ._eb > len (_dea ._d )-1||(_dea ._eb ==len (_dea ._d )-1&&_dea ._de !=0){_dea .expandIfNeeded (1);};_dea .writeByte (bt );return nil ;};