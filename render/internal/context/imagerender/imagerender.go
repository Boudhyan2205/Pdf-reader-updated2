//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_ff "errors";_gf "fmt";_gg "github.com/golang/freetype/raster";_a "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/transform";_gd "github.com/unidoc/unipdf/v3/render/internal/context";_fdf "golang.org/x/image/draw";
_ee "golang.org/x/image/font";_bd "golang.org/x/image/math/f64";_bdb "golang.org/x/image/math/fixed";_cf "image";_fd "image/color";_c "image/draw";_b "math";_bb "sort";_g "strings";);const (_fcda repeatOp =iota ;_baca ;_gfeee ;_edef ;);func (_aad *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_aad .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};var (_df =_geed (_fd .White );_aead =_geed (_fd .Black ););func (_gfd *Context )StrokePattern ()_gd .Pattern {return _gfd ._ega };type circle struct{_bff ,_eega ,_gdd float64 };func (_gabg *Context )DrawStringAnchored (s string ,face _ee .Face ,x ,y ,ax ,ay float64 ){_gade ,_gcgag :=_gabg .MeasureString (s ,face );
_gabg .drawString (s ,face ,x -ax *_gade ,y +ay *_gcgag );};func (_ade *Context )DrawRectangle (x ,y ,w ,h float64 ){_ade .NewSubPath ();_ade .MoveTo (x ,y );_ade .LineTo (x +w ,y );_ade .LineTo (x +w ,y +h );_ade .LineTo (x ,y +h );_ade .ClosePath ();
};func (_gad *Context )DrawImageAnchored (im _cf .Image ,x ,y int ,ax ,ay float64 ){_gfag :=im .Bounds ().Size ();x -=int (ax *float64 (_gfag .X ));y -=int (ay *float64 (_gfag .Y ));_cbc :=_fdf .BiLinear ;_cfef :=_gad ._ddd .Clone ().Translate (float64 (x ),float64 (y ));
_bcc :=_bd .Aff3 {_cfef [0],_cfef [3],_cfef [6],_cfef [1],_cfef [4],_cfef [7]};if _gad ._cg ==nil {_cbc .Transform (_gad ._feg ,_bcc ,im ,im .Bounds (),_fdf .Over ,nil );}else {_cbc .Transform (_gad ._feg ,_bcc ,im ,im .Bounds (),_fdf .Over ,&_fdf .Options {DstMask :_gad ._cg ,DstMaskP :_cf .Point {}});
};};type stop struct{_dedd float64 ;_dedg _fd .Color ;};func (_eda *Context )StrokePreserve (){var _dfa _gg .Painter ;if _eda ._cg ==nil {if _fge ,_ffg :=_eda ._ega .(*solidPattern );_ffg {_bgf :=_gg .NewRGBAPainter (_eda ._feg );_bgf .SetColor (_fge ._deg );
_dfa =_bgf ;};};if _dfa ==nil {_dfa =_feee (_eda ._feg ,_eda ._cg ,_eda ._ega );};_eda .stroke (_dfa );};func (_deac *Context )joiner ()_gg .Joiner {switch _deac ._gce {case _gd .LineJoinBevel :return _gg .BevelJoiner ;case _gd .LineJoinRound :return _gg .RoundJoiner ;
};return nil ;};func _feee (_efeb *_cf .RGBA ,_aaab *_cf .Alpha ,_bbg _gd .Pattern )*patternPainter {return &patternPainter {_efeb ,_aaab ,_bbg };};func _cb (_fe ,_db ,_gc ,_egc ,_aa ,_ggd float64 )[]_e .Point {_gdc :=(_b .Hypot (_gc -_fe ,_egc -_db )+_b .Hypot (_aa -_gc ,_ggd -_egc ));
_efc :=int (_gdc +0.5);if _efc < 4{_efc =4;};_ed :=float64 (_efc )-1;_af :=make ([]_e .Point ,_efc );for _ggg :=0;_ggg < _efc ;_ggg ++{_de :=float64 (_ggg )/_ed ;_cbd ,_aab :=_eb (_fe ,_db ,_gc ,_egc ,_aa ,_ggd ,_de );_af [_ggg ]=_e .NewPoint (_cbd ,_aab );
};return _af ;};func (_abf *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_abf .MoveTo (x1 ,y1 );_abf .LineTo (x2 ,y2 )};type radialGradient struct{_bac ,_bcdb ,_cbfd circle ;_cac ,_ace float64 ;_eddd float64 ;_feea stops ;};func (_ecd *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_agg ,_ca ,_cbe ,_aef :=x ,x +r ,x +w -r ,x +w ;
_dcbb ,_ddbcf ,_dbgc ,_dgcg :=y ,y +r ,y +h -r ,y +h ;_ecd .NewSubPath ();_ecd .MoveTo (_ca ,_dcbb );_ecd .LineTo (_cbe ,_dcbb );_ecd .DrawArc (_cbe ,_ddbcf ,r ,_bfgg (270),_bfgg (360));_ecd .LineTo (_aef ,_dbgc );_ecd .DrawArc (_cbe ,_dbgc ,r ,_bfgg (0),_bfgg (90));
_ecd .LineTo (_ca ,_dgcg );_ecd .DrawArc (_ca ,_dbgc ,r ,_bfgg (90),_bfgg (180));_ecd .LineTo (_agg ,_ddbcf );_ecd .DrawArc (_ca ,_ddbcf ,r ,_bfgg (180),_bfgg (270));_ecd .ClosePath ();};func (_gdb *Context )Image ()_cf .Image {return _gdb ._feg };func _dfcd (_afed float64 ,_bdcf stops )_fd .Color {if _afed <=0.0||len (_bdcf )==1{return _bdcf [0]._dedg ;
};_acd :=_bdcf [len (_bdcf )-1];if _afed >=_acd ._dedd {return _acd ._dedg ;};for _bbb ,_acc :=range _bdcf [1:]{if _afed < _acc ._dedd {_afed =(_afed -_bdcf [_bbb ]._dedd )/(_acc ._dedd -_bdcf [_bbb ]._dedd );return _bgd (_bdcf [_bbb ]._dedg ,_acc ._dedg ,_afed );
};};return _acd ._dedg ;};func (_cca *Context )SetRGBA (r ,g ,b ,a float64 ){_cca ._cdd =_fd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_cca .setFillAndStrokeColor (_cca ._cdd );};func (_bfac *Context )InvertMask (){if _bfac ._cg ==nil {_bfac ._cg =_cf .NewAlpha (_bfac ._feg .Bounds ());
}else {for _bega ,_fcc :=range _bfac ._cg .Pix {_bfac ._cg .Pix [_bega ]=255-_fcc ;};};};type repeatOp int ;type linearGradient struct{_eef ,_aaf ,_aeb ,_cceg float64 ;_dfad stops ;};func (_eed *Context )DrawPoint (x ,y ,r float64 ){_eed .Push ();_agd ,_cdb :=_eed .Transform (x ,y );
_eed .Identity ();_eed .DrawCircle (_agd ,_cdb ,r );_eed .Pop ();};func (_fde *linearGradient )AddColorStop (offset float64 ,color _fd .Color ){_fde ._dfad =append (_fde ._dfad ,stop {_dedd :offset ,_dedg :color });_bb .Sort (_fde ._dfad );};func (_fce *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_eec :=_fd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_fce ._ega =_geed (_eec );};func (_ccfe *Context )TextState ()*_gd .TextState {return &_ccfe ._egcf };func (_dfd *Context )Fill (){_dfd .FillPreserve ();_dfd .ClearPath ()};func (_ddf stops )Len ()int {return len (_ddf )};func _gada (_gfbb float64 )_bdb .Int26_6 {return _bdb .Int26_6 (_gfbb *64)};
func (_fceg *patternPainter )Paint (ss []_gg .Span ,done bool ){_ggge :=_fceg ._degg .Bounds ();for _ ,_acaf :=range ss {if _acaf .Y < _ggge .Min .Y {continue ;};if _acaf .Y >=_ggge .Max .Y {return ;};if _acaf .X0 < _ggge .Min .X {_acaf .X0 =_ggge .Min .X ;
};if _acaf .X1 > _ggge .Max .X {_acaf .X1 =_ggge .Max .X ;};if _acaf .X0 >=_acaf .X1 {continue ;};const _cfbe =1<<16-1;_begba :=_acaf .Y -_fceg ._degg .Rect .Min .Y ;_ggfc :=_acaf .X0 -_fceg ._degg .Rect .Min .X ;_ebfa :=(_acaf .Y -_fceg ._degg .Rect .Min .Y )*_fceg ._degg .Stride +(_acaf .X0 -_fceg ._degg .Rect .Min .X )*4;
_bdde :=_ebfa +(_acaf .X1 -_acaf .X0 )*4;for _dedf ,_cgab :=_ebfa ,_ggfc ;_dedf < _bdde ;_dedf ,_cgab =_dedf +4,_cgab +1{_ada :=_acaf .Alpha ;if _fceg ._ebfe !=nil {_ada =_ada *uint32 (_fceg ._ebfe .AlphaAt (_cgab ,_begba ).A )/255;if _ada ==0{continue ;
};};_afea :=_fceg ._cffg .ColorAt (_cgab ,_begba );_bede ,_cbg ,_cfea ,_bge :=_afea .RGBA ();_dggdg :=uint32 (_fceg ._degg .Pix [_dedf +0]);_cbb :=uint32 (_fceg ._degg .Pix [_dedf +1]);_bbd :=uint32 (_fceg ._degg .Pix [_dedf +2]);_ffa :=uint32 (_fceg ._degg .Pix [_dedf +3]);
_accf :=(_cfbe -(_bge *_ada /_cfbe ))*0x101;_fceg ._degg .Pix [_dedf +0]=uint8 ((_dggdg *_accf +_bede *_ada )/_cfbe >>8);_fceg ._degg .Pix [_dedf +1]=uint8 ((_cbb *_accf +_cbg *_ada )/_cfbe >>8);_fceg ._degg .Pix [_dedf +2]=uint8 ((_bbd *_accf +_cfea *_ada )/_cfbe >>8);
_fceg ._degg .Pix [_dedf +3]=uint8 ((_ffa *_accf +_bge *_ada )/_cfbe >>8);};};};func (_cgf *Context )drawRegularPolygon (_bef int ,_age ,_aadc ,_faea ,_bae float64 ){_bca :=2*_b .Pi /float64 (_bef );_bae -=_b .Pi /2;if _bef %2==0{_bae +=_bca /2;};_cgf .NewSubPath ();
for _dggd :=0;_dggd < _bef ;_dggd ++{_cfb :=_bae +_bca *float64 (_dggd );_cgf .LineTo (_age +_faea *_b .Cos (_cfb ),_aadc +_faea *_b .Sin (_cfb ));};_cgf .ClosePath ();};func (_ddb *Context )SetRGBA255 (r ,g ,b ,a int ){_ddb ._cdd =_fd .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_ddb .setFillAndStrokeColor (_ddb ._cdd );};func (_ac stops )Swap (i ,j int ){_ac [i ],_ac [j ]=_ac [j ],_ac [i ]};func _bege (_abc [][]_e .Point ,_agdd []float64 ,_gee float64 )[][]_e .Point {var _gfee [][]_e .Point ;if len (_agdd )==0{return _abc ;};
if len (_agdd )==1{_agdd =append (_agdd ,_agdd [0]);};for _ ,_dffe :=range _abc {if len (_dffe )< 2{continue ;};_bdab :=_dffe [0];_eea :=1;_gdf :=0;_feac :=0.0;if _gee !=0{var _ggf float64 ;for _ ,_aggc :=range _agdd {_ggf +=_aggc ;};_gee =_b .Mod (_gee ,_ggf );
if _gee < 0{_gee +=_ggf ;};for _bad ,_aded :=range _agdd {_gee -=_aded ;if _gee < 0{_gdf =_bad ;_feac =_aded +_gee ;break ;};};};var _dade []_e .Point ;_dade =append (_dade ,_bdab );for _eea < len (_dffe ){_cae :=_agdd [_gdf ];_gceb :=_dffe [_eea ];_fgbb :=_bdab .Distance (_gceb );
_dcff :=_cae -_feac ;if _fgbb > _dcff {_gdg :=_dcff /_fgbb ;_aefdc :=_bdab .Interpolate (_gceb ,_gdg );_dade =append (_dade ,_aefdc );if _gdf %2==0&&len (_dade )> 1{_gfee =append (_gfee ,_dade );};_dade =nil ;_dade =append (_dade ,_aefdc );_feac =0;_bdab =_aefdc ;
_gdf =(_gdf +1)%len (_agdd );}else {_dade =append (_dade ,_gceb );_bdab =_gceb ;_feac +=_fgbb ;_eea ++;};};if _gdf %2==0&&len (_dade )> 1{_gfee =append (_gfee ,_dade );};};return _gfee ;};func (_ead *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_ead .NewSubPath ();
_ead .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_b .Pi );_ead .ClosePath ();};func _ea (_fg ,_ebf ,_cfd ,_ebg ,_fdb ,_ab ,_aea ,_egg ,_fa float64 )(_cfg ,_cc float64 ){_fb :=1-_fa ;_ag :=_fb *_fb *_fb ;_cd :=3*_fb *_fb *_fa ;_dbg :=3*_fb *_fa *_fa ;_eeg :=_fa *_fa *_fa ;
_cfg =_ag *_fg +_cd *_cfd +_dbg *_fdb +_eeg *_aea ;_cc =_ag *_ebf +_cd *_ebg +_dbg *_ab +_eeg *_egg ;return ;};func (_eca *Context )Identity (){_eca ._ddd =_e .IdentityMatrix ()};func (_aag *Context )SetFillRule (fillRule _gd .FillRule ){_aag ._gbc =fillRule };
func (_bfa *Context )SetLineWidth (lineWidth float64 ){_bfa ._fbb =lineWidth };type Context struct{_aee int ;_gbb int ;_fec *_gg .Rasterizer ;_feg *_cf .RGBA ;_cg *_cf .Alpha ;_cdd _fd .Color ;_gcg _gd .Pattern ;_ega _gd .Pattern ;_eff _gg .Path ;_gfa _gg .Path ;
_fad _e .Point ;_ba _e .Point ;_dbb bool ;_gga []float64 ;_dd float64 ;_fbb float64 ;_ege _gd .LineCap ;_gce _gd .LineJoin ;_gbc _gd .FillRule ;_ddd _e .Matrix ;_egcf _gd .TextState ;_dbbc []*Context ;};func (_dbd *Context )SetPixel (x ,y int ){_dbd ._feg .Set (x ,y ,_dbd ._cdd )};
func (_adeg *Context )Pop (){_gge :=*_adeg ;_edd :=_adeg ._dbbc ;_aba :=_edd [len (_edd )-1];*_adeg =*_aba ;_adeg ._eff =_gge ._eff ;_adeg ._gfa =_gge ._gfa ;_adeg ._fad =_gge ._fad ;_adeg ._ba =_gge ._ba ;_adeg ._dbb =_gge ._dbb ;};func (_ccfeb *Context )Scale (x ,y float64 ){_ccfeb ._ddd =_ccfeb ._ddd .Scale (x ,y )};
func (_gcb *Context )SetMask (mask *_cf .Alpha )error {if mask .Bounds ().Size ()!=_gcb ._feg .Bounds ().Size (){return _ff .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_gcb ._cg =mask ;return nil ;};func _geed (_ggbe _fd .Color )_gd .Pattern {return &solidPattern {_deg :_ggbe }};func (_fggc *Context )SetFillRGBA (r ,g ,b ,a float64 ){_efdd :=_fd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_fggc ._cdd =_efdd ;
_fggc ._gcg =_geed (_efdd );};func (_fee *Context )Clear (){_fedf :=_cf .NewUniform (_fee ._cdd );_fdf .Draw (_fee ._feg ,_fee ._feg .Bounds (),_fedf ,_cf .Point {},_fdf .Src );};func (_dda *Context )setFillAndStrokeColor (_ec _fd .Color ){_dda ._cdd =_ec ;
_dda ._gcg =_geed (_ec );_dda ._ega =_geed (_ec );};func (_deab *Context )NewSubPath (){if _deab ._dbb {_deab ._gfa .Add1 (_gaad (_deab ._fad ));};_deab ._dbb =false ;};func (_efe *Context )SetStrokeStyle (pattern _gd .Pattern ){_efe ._ega =pattern };func (_edc *Context )SetLineJoin (lineJoin _gd .LineJoin ){_edc ._gce =lineJoin };
func (_caa *surfacePattern )ColorAt (x ,y int )_fd .Color {_afgd :=_caa ._fded .Bounds ();switch _caa ._gdgc {case _baca :if y >=_afgd .Dy (){return _fd .Transparent ;};case _gfeee :if x >=_afgd .Dx (){return _fd .Transparent ;};case _edef :if x >=_afgd .Dx ()||y >=_afgd .Dy (){return _fd .Transparent ;
};};x =x %_afgd .Dx ()+_afgd .Min .X ;y =y %_afgd .Dy ()+_afgd .Min .Y ;return _caa ._fded .At (x ,y );};func (_bcb *Context )Matrix ()_e .Matrix {return _bcb ._ddd };func (_dg *Context )SetFillStyle (pattern _gd .Pattern ){if _dad ,_fgc :=pattern .(*solidPattern );
_fgc {_dg ._cdd =_dad ._deg ;};_dg ._gcg =pattern ;};func (_aga stops )Less (i ,j int )bool {return _aga [i ]._dedd < _aga [j ]._dedd };func (_edb *Context )Transform (x ,y float64 )(_gfb ,_eaaa float64 ){return _edb ._ddd .Transform (x ,y )};func _bfe (_adec string )(_ebcc ,_adag ,_aadf ,_ffecf int ){_adec =_g .TrimPrefix (_adec ,"\u0023");
_ffecf =255;if len (_adec )==3{_eaf :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_gf .Sscanf (_adec ,_eaf ,&_ebcc ,&_adag ,&_aadf );_ebcc |=_ebcc <<4;_adag |=_adag <<4;_aadf |=_aadf <<4;};if len (_adec )==6{_gdggd :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_gf .Sscanf (_adec ,_gdggd ,&_ebcc ,&_adag ,&_aadf );};if len (_adec )==8{_ccd :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_gf .Sscanf (_adec ,_ccd ,&_ebcc ,&_adag ,&_aadf ,&_ffecf );};return ;};func (_fga *Context )SetHexColor (x string ){_bfd ,_bg ,_gca ,_eac :=_bfe (x );
_fga .SetRGBA255 (_bfd ,_bg ,_gca ,_eac );};func (_eba *Context )SetColor (c _fd .Color ){_eba .setFillAndStrokeColor (c )};func _bdaf (_eedf _gg .Path ,_fdfe []float64 ,_dbgf float64 )_gg .Path {return _daa (_bege (_fdbc (_eedf ),_fdfe ,_dbgf ));};func (_cbf *Context )LineWidth ()float64 {return _cbf ._fbb };
func (_fbf *Context )LineTo (x ,y float64 ){if !_fbf ._dbb {_fbf .MoveTo (x ,y );}else {x ,y =_fbf .Transform (x ,y );_ffe :=_e .NewPoint (x ,y );_cgc :=_gaad (_ffe );_fbf ._eff .Add1 (_cgc );_fbf ._gfa .Add1 (_cgc );_fbf ._ba =_ffe ;};};func (_afb *Context )Stroke (){_afb .StrokePreserve ();
_afb .ClearPath ()};func NewContext (width ,height int )*Context {return NewContextForRGBA (_cf .NewRGBA (_cf .Rect (0,0,width ,height )));};type stops []stop ;func (_dca *Context )AsMask ()*_cf .Alpha {_dcg :=_cf .NewAlpha (_dca ._feg .Bounds ());_fdf .Draw (_dcg ,_dca ._feg .Bounds (),_dca ._feg ,_cf .Point {},_fdf .Src );
return _dcg ;};func (_fcd *Context )Rotate (angle float64 ){_fcd ._ddd =_fcd ._ddd .Rotate (angle )};func (_gfg *Context )SetDashOffset (offset float64 ){_gfg ._dd =offset };func _gadg (_bab ,_faef ,_ggb ,_cefc ,_ecf ,_edba float64 )_gd .Gradient {_feb :=circle {_bab ,_faef ,_ggb };
_dfg :=circle {_cefc ,_ecf ,_edba };_aaa :=circle {_cefc -_bab ,_ecf -_faef ,_edba -_ggb };_dbf :=_ccag (_aaa ._bff ,_aaa ._eega ,-_aaa ._gdd ,_aaa ._bff ,_aaa ._eega ,_aaa ._gdd );var _bgab float64 ;if _dbf !=0{_bgab =1.0/_dbf ;};_efcc :=-_feb ._gdd ;
_adc :=&radialGradient {_bac :_feb ,_bcdb :_dfg ,_cbfd :_aaa ,_cac :_dbf ,_ace :_bgab ,_eddd :_efcc };return _adc ;};func (_dcc *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_dcc .Translate (x ,y );_dcc .Scale (sx ,sy );_dcc .Translate (-x ,-y );};func _bdd (_adf ,_fea ,_bcd ,_gcbd float64 )_gd .Gradient {_gggf :=&linearGradient {_eef :_adf ,_aaf :_fea ,_aeb :_bcd ,_cceg :_gcbd };
return _gggf ;};func (_ccaa *Context )Clip (){_ccaa .ClipPreserve ();_ccaa .ClearPath ()};func _fdbc (_geg _gg .Path )[][]_e .Point {var _gabb [][]_e .Point ;var _cfa []_e .Point ;var _fgab ,_beb float64 ;for _begc :=0;_begc < len (_geg );{switch _geg [_begc ]{case 0:if len (_cfa )> 0{_gabb =append (_gabb ,_cfa );
_cfa =nil ;};_aca :=_dcbc (_geg [_begc +1]);_dgcb :=_dcbc (_geg [_begc +2]);_cfa =append (_cfa ,_e .NewPoint (_aca ,_dgcb ));_fgab ,_beb =_aca ,_dgcb ;_begc +=4;case 1:_eagc :=_dcbc (_geg [_begc +1]);_edddf :=_dcbc (_geg [_begc +2]);_cfa =append (_cfa ,_e .NewPoint (_eagc ,_edddf ));
_fgab ,_beb =_eagc ,_edddf ;_begc +=4;case 2:_gaf :=_dcbc (_geg [_begc +1]);_eccg :=_dcbc (_geg [_begc +2]);_bcbg :=_dcbc (_geg [_begc +3]);_adeb :=_dcbc (_geg [_begc +4]);_cgae :=_cb (_fgab ,_beb ,_gaf ,_eccg ,_bcbg ,_adeb );_cfa =append (_cfa ,_cgae ...);
_fgab ,_beb =_bcbg ,_adeb ;_begc +=6;case 3:_dddd :=_dcbc (_geg [_begc +1]);_gggb :=_dcbc (_geg [_begc +2]);_bcde :=_dcbc (_geg [_begc +3]);_gbeb :=_dcbc (_geg [_begc +4]);_gfe :=_dcbc (_geg [_begc +5]);_bfg :=_dcbc (_geg [_begc +6]);_ddfd :=_fgb (_fgab ,_beb ,_dddd ,_gggb ,_bcde ,_gbeb ,_gfe ,_bfg );
_cfa =append (_cfa ,_ddfd ...);_fgab ,_beb =_gfe ,_bfg ;_begc +=8;default:_a .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_geg );return _gabb ;};};if len (_cfa )> 0{_gabb =append (_gabb ,_cfa );
};return _gabb ;};func (_aeg *Context )FillPreserve (){var _dgd _gg .Painter ;if _aeg ._cg ==nil {if _egcb ,_fedg :=_aeg ._gcg .(*solidPattern );_fedg {_ede :=_gg .NewRGBAPainter (_aeg ._feg );_ede .SetColor (_egcb ._deg );_dgd =_ede ;};};if _dgd ==nil {_dgd =_feee (_aeg ._feg ,_aeg ._cg ,_aeg ._gcg );
};_aeg .fill (_dgd );};func (_fgg *Context )Width ()int {return _fgg ._aee };func (_dgc *Context )ResetClip (){_dgc ._cg =nil };func _daa (_fbfd [][]_e .Point )_gg .Path {var _bcf _gg .Path ;for _ ,_bbcb :=range _fbfd {var _ggad _bdb .Point26_6 ;for _bcad ,_aagb :=range _bbcb {_bcfd :=_gaad (_aagb );
if _bcad ==0{_bcf .Start (_bcfd );}else {_aggf :=_bcfd .X -_ggad .X ;_dgce :=_bcfd .Y -_ggad .Y ;if _aggf < 0{_aggf =-_aggf ;};if _dgce < 0{_dgce =-_dgce ;};if _aggf +_dgce > 8{_bcf .Add1 (_bcfd );};};_ggad =_bcfd ;};};return _bcf ;};func (_afd *Context )MoveTo (x ,y float64 ){if _afd ._dbb {_afd ._gfa .Add1 (_gaad (_afd ._fad ));
};x ,y =_afd .Transform (x ,y );_faa :=_e .NewPoint (x ,y );_fae :=_gaad (_faa );_afd ._eff .Start (_fae );_afd ._gfa .Start (_fae );_afd ._fad =_faa ;_afd ._ba =_faa ;_afd ._dbb =true ;};func _bgd (_eegd ,_gbd _fd .Color ,_afa float64 )_fd .Color {_eee ,_ffec ,_eab ,_ceb :=_eegd .RGBA ();
_bfc ,_afg ,_fef ,_cea :=_gbd .RGBA ();return _fd .RGBA {_acea (_eee ,_bfc ,_afa ),_acea (_ffec ,_afg ,_afa ),_acea (_eab ,_fef ,_afa ),_acea (_ceb ,_cea ,_afa )};};func (_fdc *Context )DrawString (s string ,face _ee .Face ,x ,y float64 ){_fdc .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func _ccag (_cgb ,_fcfd ,_fdde ,_ebagg ,_decd ,_gbf float64 )float64 {return _cgb *_ebagg +_fcfd *_decd +_fdde *_gbf ;};func (_gef *Context )SetLineCap (lineCap _gd .LineCap ){_gef ._ege =lineCap };func (_dead *Context )Shear (x ,y float64 ){_dead ._ddd .Shear (x ,y )};
func _ffbc (_afba _cf .Image )*_cf .RGBA {_gcag :=_afba .Bounds ();_eae :=_cf .NewRGBA (_gcag );_c .Draw (_eae ,_gcag ,_afba ,_gcag .Min ,_c .Src );return _eae ;};func (_dfc *Context )ClearPath (){_dfc ._eff .Clear ();_dfc ._gfa .Clear ();_dfc ._dbb =false };
func (_bfag *Context )FillPattern ()_gd .Pattern {return _bfag ._gcg };func (_ebd *Context )stroke (_dgg _gg .Painter ){_dba :=_ebd ._eff ;if len (_ebd ._gga )> 0{_dba =_bdaf (_dba ,_ebd ._gga ,_ebd ._dd );}else {_dba =_daa (_fdbc (_dba ));};_fcf :=_ebd ._fec ;
_fcf .UseNonZeroWinding =true ;_fcf .Clear ();_debc :=(_ebd ._ddd .ScalingFactorX ()+_ebd ._ddd .ScalingFactorY ())/2;_fcf .AddStroke (_dba ,_gada (_ebd ._fbb *_debc ),_ebd .capper (),_ebd .joiner ());_fcf .Rasterize (_dgg );};func (_eggd *Context )DrawImage (im _cf .Image ,x ,y int ){_eggd .DrawImageAnchored (im ,x ,y ,0,0)};
func (_gbe *Context )SetDash (dashes ...float64 ){_gbe ._gga =dashes };func (_cfe *Context )SetRGB255 (r ,g ,b int ){_cfe .SetRGBA255 (r ,g ,b ,255)};func (_fdd *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_fdd ._dbb {_fdd .MoveTo (x1 ,y1 );
};_dea ,_cgce :=_fdd ._ba .X ,_fdd ._ba .Y ;x1 ,y1 =_fdd .Transform (x1 ,y1 );x2 ,y2 =_fdd .Transform (x2 ,y2 );x3 ,y3 =_fdd .Transform (x3 ,y3 );_ddbc :=_fgb (_dea ,_cgce ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ecg :=_gaad (_fdd ._ba );for _ ,_beg :=range _ddbc [1:]{_fbfa :=_gaad (_beg );
if _fbfa ==_ecg {continue ;};_ecg =_fbfa ;_fdd ._eff .Add1 (_fbfa );_fdd ._gfa .Add1 (_fbfa );_fdd ._ba =_beg ;};};func (_ded *Context )Height ()int {return _ded ._gbb };func (_gbbg *Context )SetMatrix (m _e .Matrix ){_gbbg ._ddd =m };func (_ga *Context )fill (_eaa _gg .Painter ){_dfb :=_ga ._gfa ;
if _ga ._dbb {_dfb =make (_gg .Path ,len (_ga ._gfa ));copy (_dfb ,_ga ._gfa );_dfb .Add1 (_gaad (_ga ._fad ));};_ced :=_ga ._fec ;_ced .UseNonZeroWinding =_ga ._gbc ==_gd .FillRuleWinding ;_ced .Clear ();_ced .AddPath (_dfb );_ced .Rasterize (_eaa );};
func (_dae *solidPattern )ColorAt (x ,y int )_fd .Color {return _dae ._deg };func (_dac *Context )Translate (x ,y float64 ){_dac ._ddd =_dac ._ddd .Translate (x ,y )};func (_gaa *radialGradient )ColorAt (x ,y int )_fd .Color {if len (_gaa ._feea )==0{return _fd .Transparent ;
};_cga ,_cff :=float64 (x )+0.5-_gaa ._bac ._bff ,float64 (y )+0.5-_gaa ._bac ._eega ;_ece :=_ccag (_cga ,_cff ,_gaa ._bac ._gdd ,_gaa ._cbfd ._bff ,_gaa ._cbfd ._eega ,_gaa ._cbfd ._gdd );_bda :=_ccag (_cga ,_cff ,-_gaa ._bac ._gdd ,_cga ,_cff ,_gaa ._bac ._gdd );
if _gaa ._cac ==0{if _ece ==0{return _fd .Transparent ;};_ccfa :=0.5*_bda /_ece ;if _ccfa *_gaa ._cbfd ._gdd >=_gaa ._eddd {return _dfcd (_ccfa ,_gaa ._feea );};return _fd .Transparent ;};_ccge :=_ccag (_ece ,_gaa ._cac ,0,_ece ,-_bda ,0);if _ccge >=0{_bdc :=_b .Sqrt (_ccge );
_eecg :=(_ece +_bdc )*_gaa ._ace ;_dgdg :=(_ece -_bdc )*_gaa ._ace ;if _eecg *_gaa ._cbfd ._gdd >=_gaa ._eddd {return _dfcd (_eecg ,_gaa ._feea );}else if _dgdg *_gaa ._cbfd ._gdd >=_gaa ._eddd {return _dfcd (_dgdg ,_gaa ._feea );};};return _fd .Transparent ;
};func _cdba (_ccff _cf .Image ,_gdgg repeatOp )_gd .Pattern {return &surfacePattern {_fded :_ccff ,_gdgc :_gdgg };};func (_eacc *Context )ClipPreserve (){_cce :=_cf .NewAlpha (_cf .Rect (0,0,_eacc ._aee ,_eacc ._gbb ));_dcb :=_gg .NewAlphaOverPainter (_cce );
_eacc .fill (_dcb );if _eacc ._cg ==nil {_eacc ._cg =_cce ;}else {_efec :=_cf .NewAlpha (_cf .Rect (0,0,_eacc ._aee ,_eacc ._gbb ));_fdf .DrawMask (_efec ,_efec .Bounds (),_cce ,_cf .Point {},_eacc ._cg ,_cf .Point {},_fdf .Over );_eacc ._cg =_efec ;};
};func _bfgg (_gbg float64 )float64 {return _gbg *_b .Pi /180};func _dcbc (_dfbd _bdb .Int26_6 )float64 {const _bdac ,_ccgb =6,1<<6-1;if _dfbd >=0{return float64 (_dfbd >>_bdac )+float64 (_dfbd &_ccgb )/64;};_dfbd =-_dfbd ;if _dfbd >=0{return -(float64 (_dfbd >>_bdac )+float64 (_dfbd &_ccgb )/64);
};return 0;};func (_bdg *Context )Push (){_dcafb :=*_bdg ;_bdg ._dbbc =append (_bdg ._dbbc ,&_dcafb )};func (_cgca *Context )RotateAbout (angle ,x ,y float64 ){_cgca .Translate (x ,y );_cgca .Rotate (angle );_cgca .Translate (-x ,-y );};func _fgb (_ebc ,_fdg ,_ad ,_fda ,_efd ,_dec ,_ccf ,_ce float64 )[]_e .Point {_da :=(_b .Hypot (_ad -_ebc ,_fda -_fdg )+_b .Hypot (_efd -_ad ,_dec -_fda )+_b .Hypot (_ccf -_efd ,_ce -_dec ));
_be :=int (_da +0.5);if _be < 4{_be =4;};_fc :=float64 (_be )-1;_fgf :=make ([]_e .Point ,_be );for _cdc :=0;_cdc < _be ;_cdc ++{_fed :=float64 (_cdc )/_fc ;_deb ,_agf :=_ea (_ebc ,_fdg ,_ad ,_fda ,_efd ,_dec ,_ccf ,_ce ,_fed );_fgf [_cdc ]=_e .NewPoint (_deb ,_agf );
};return _fgf ;};func NewContextForImage (im _cf .Image )*Context {return NewContextForRGBA (_ffbc (im ))};type patternPainter struct{_degg *_cf .RGBA ;_ebfe *_cf .Alpha ;_cffg _gd .Pattern ;};func (_begb *Context )capper ()_gg .Capper {switch _begb ._ege {case _gd .LineCapButt :return _gg .ButtCapper ;
case _gd .LineCapRound :return _gg .RoundCapper ;case _gd .LineCapSquare :return _gg .SquareCapper ;};return nil ;};func (_eag *Context )ShearAbout (sx ,sy ,x ,y float64 ){_eag .Translate (x ,y );_eag .Shear (sx ,sy );_eag .Translate (-x ,-y );};func (_gdbe *Context )ClosePath (){if _gdbe ._dbb {_bed :=_gaad (_gdbe ._fad );
_gdbe ._eff .Add1 (_bed );_gdbe ._gfa .Add1 (_bed );_gdbe ._ba =_gdbe ._fad ;};};func (_bce *radialGradient )AddColorStop (offset float64 ,color _fd .Color ){_bce ._feea =append (_bce ._feea ,stop {_dedd :offset ,_dedg :color });_bb .Sort (_bce ._feea );
};func _gaad (_dfdd _e .Point )_bdb .Point26_6 {return _bdb .Point26_6 {X :_gada (_dfdd .X ),Y :_gada (_dfdd .Y )};};func (_bfacc *Context )MeasureString (s string ,face _ee .Face )(_fdge ,_dcaf float64 ){_faec :=&_ee .Drawer {Face :face };_ged :=_faec .MeasureString (s );
return float64 (_ged >>6),_bfacc ._egcf .Tf .Size ;};func NewContextForRGBA (im *_cf .RGBA )*Context {_bc :=im .Bounds ().Size ().X ;_cef :=im .Bounds ().Size ().Y ;return &Context {_aee :_bc ,_gbb :_cef ,_fec :_gg .NewRasterizer (_bc ,_cef ),_feg :im ,_cdd :_fd .Transparent ,_gcg :_df ,_ega :_aead ,_fbb :1,_gbc :_gd .FillRuleWinding ,_ddd :_e .IdentityMatrix (),_egcf :_gd .NewTextState ()};
};func (_bba *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dgcc =16;for _aeeb :=0;_aeeb < _dgcc ;_aeeb ++{_dff :=float64 (_aeeb +0)/_dgcc ;_bga :=float64 (_aeeb +1)/_dgcc ;_gec :=angle1 +(angle2 -angle1 )*_dff ;_abg :=angle1 +(angle2 -angle1 )*_bga ;
_cddb :=x +rx *_b .Cos (_gec );_bfdc :=y +ry *_b .Sin (_gec );_bfad :=x +rx *_b .Cos ((_gec +_abg )/2);_gfcb :=y +ry *_b .Sin ((_gec +_abg )/2);_aefd :=x +rx *_b .Cos (_abg );_ebag :=y +ry *_b .Sin (_abg );_afe :=2*_bfad -_cddb /2-_aefd /2;_gab :=2*_gfcb -_bfdc /2-_ebag /2;
if _aeeb ==0{if _bba ._dbb {_bba .LineTo (_cddb ,_bfdc );}else {_bba .MoveTo (_cddb ,_bfdc );};};_bba .QuadraticTo (_afe ,_gab ,_aefd ,_ebag );};};func _acea (_cdfa ,_adee uint32 ,_dge float64 )uint8 {return uint8 (int32 (float64 (_cdfa )*(1.0-_dge )+float64 (_adee )*_dge )>>8);
};func (_fegg *linearGradient )ColorAt (x ,y int )_fd .Color {if len (_fegg ._dfad )==0{return _fd .Transparent ;};_cde ,_fcg :=float64 (x ),float64 (y );_bgag ,_eagf ,_bbf ,_cdbc :=_fegg ._eef ,_fegg ._aaf ,_fegg ._aeb ,_fegg ._cceg ;_ccaf ,_aegg :=_bbf -_bgag ,_cdbc -_eagf ;
if _aegg ==0&&_ccaf !=0{return _dfcd ((_cde -_bgag )/_ccaf ,_fegg ._dfad );};if _ccaf ==0&&_aegg !=0{return _dfcd ((_fcg -_eagf )/_aegg ,_fegg ._dfad );};_affc :=_ccaf *(_cde -_bgag )+_aegg *(_fcg -_eagf );if _affc < 0{return _fegg ._dfad [0]._dedg ;};
_fbe :=_b .Hypot (_ccaf ,_aegg );_ceg :=((_cde -_bgag )*-_aegg +(_fcg -_eagf )*_ccaf )/(_fbe *_fbe );_caf ,_addb :=_bgag +_ceg *-_aegg ,_eagf +_ceg *_ccaf ;_eded :=_b .Hypot (_cde -_caf ,_fcg -_addb )/_fbe ;return _dfcd (_eded ,_fegg ._dfad );};func (_ccg *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_ccg ._dbb {_ccg .MoveTo (x1 ,y1 );
};x1 ,y1 =_ccg .Transform (x1 ,y1 );x2 ,y2 =_ccg .Transform (x2 ,y2 );_add :=_e .NewPoint (x1 ,y1 );_aage :=_e .NewPoint (x2 ,y2 );_ecc :=_gaad (_add );_cdf :=_gaad (_aage );_ccg ._eff .Add2 (_ecc ,_cdf );_ccg ._gfa .Add2 (_ecc ,_cdf );_ccg ._ba =_aage ;
};func (_bgc *Context )SetRGB (r ,g ,b float64 ){_bgc .SetRGBA (r ,g ,b ,1)};type surfacePattern struct{_fded _cf .Image ;_gdgc repeatOp ;};func (_agb *Context )drawString (_ddac string ,_edag _ee .Face ,_ccac ,_gcga float64 ){_fac :=&_ee .Drawer {Src :_cf .NewUniform (_agb ._cdd ),Face :_edag ,Dot :_gaad (_e .NewPoint (_ccac ,_gcga ))};
_agbg :=rune (-1);for _ ,_geb :=range _ddac {if _agbg >=0{_fac .Dot .X +=_fac .Face .Kern (_agbg ,_geb );};_cbcf ,_ccb ,_abe ,_aac ,_cceb :=_fac .Face .Glyph (_fac .Dot ,_geb );if !_cceb {continue ;};_cfdg :=_cbcf .Sub (_cbcf .Min );_bbae :=_cf .NewRGBA (_cfdg );
_fdf .DrawMask (_bbae ,_cfdg ,_fac .Src ,_cf .Point {},_ccb ,_abe ,_fdf .Over );var _dcf *_fdf .Options ;if _agb ._cg !=nil {_dcf =&_fdf .Options {DstMask :_agb ._cg ,DstMaskP :_cf .Point {}};};_ffb :=_agb ._ddd .Clone ().Translate (float64 (_cbcf .Min .X ),float64 (_cbcf .Min .Y ));
_aff :=_bd .Aff3 {_ffb [0],_ffb [3],_ffb [6],_ffb [1],_ffb [4],_ffb [7]};_fdf .BiLinear .Transform (_agb ._feg ,_aff ,_bbae ,_cfdg ,_fdf .Over ,_dcf );_fac .Dot .X +=_aac ;_agbg =_geb ;};};func _eb (_ef ,_fff ,_ge ,_d ,_dc ,_gb ,_bbc float64 )(_gfc ,_gba float64 ){_ebe :=1-_bbc ;
_bf :=_ebe *_ebe ;_ae :=2*_ebe *_bbc ;_eg :=_bbc *_bbc ;_gfc =_bf *_ef +_ae *_ge +_eg *_dc ;_gba =_bf *_fff +_ae *_d +_eg *_gb ;return ;};func (_fddc *Context )DrawCircle (x ,y ,r float64 ){_fddc .NewSubPath ();_fddc .DrawEllipticalArc (x ,y ,r ,r ,0,2*_b .Pi );
_fddc .ClosePath ();};type solidPattern struct{_deg _fd .Color };