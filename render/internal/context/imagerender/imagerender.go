//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_gf "errors";_c "fmt";_bc "github.com/unidoc/freetype/raster";_gaf "github.com/unidoc/unipdf/v3/common";_ac "github.com/unidoc/unipdf/v3/internal/transform";_cf "github.com/unidoc/unipdf/v3/render/internal/context";_gfe "golang.org/x/image/draw";
_d "golang.org/x/image/font";_f "golang.org/x/image/math/f64";_cg "golang.org/x/image/math/fixed";_ge "image";_b "image/color";_ba "image/draw";_a "math";_ad "sort";_ga "strings";);func (_bacb *Context )DrawCircle (x ,y ,r float64 ){_bacb .NewSubPath ();
_bacb .DrawEllipticalArc (x ,y ,r ,r ,0,2*_a .Pi );_bacb .ClosePath ();};func (_bdf *Context )SetRGBA255 (r ,g ,b ,a int ){_bdf ._abb =_b .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_bdf .setFillAndStrokeColor (_bdf ._abb );};func (_ceec *Context )MeasureString (s string ,face _d .Face )(_dfg ,_baca float64 ){_daf :=&_d .Drawer {Face :face };
_caa :=_daf .MeasureString (s );return float64 (_caa >>6),_ceec ._abf .Tf .Size ;};type linearGradient struct{_ggc ,_bdd ,_dcfc ,_agae float64 ;_edg stops ;};func (_adae *Context )DrawRectangle (x ,y ,w ,h float64 ){_adae .NewSubPath ();_adae .MoveTo (x ,y );
_adae .LineTo (x +w ,y );_adae .LineTo (x +w ,y +h );_adae .LineTo (x ,y +h );_adae .ClosePath ();};func (_dge *Context )DrawPoint (x ,y ,r float64 ){_dge .Push ();_aac ,_dad :=_dge .Transform (x ,y );_dge .Identity ();_dge .DrawCircle (_aac ,_dad ,r );
_dge .Pop ();};func (_gcb *linearGradient )ColorAt (x ,y int )_b .Color {if len (_gcb ._edg )==0{return _b .Transparent ;};_eg ,_fge :=float64 (x ),float64 (y );_dda ,_fde ,_fcge ,_eeb :=_gcb ._ggc ,_gcb ._bdd ,_gcb ._dcfc ,_gcb ._agae ;_eae ,_edagc :=_fcge -_dda ,_eeb -_fde ;
if _edagc ==0&&_eae !=0{return _dcba ((_eg -_dda )/_eae ,_gcb ._edg );};if _eae ==0&&_edagc !=0{return _dcba ((_fge -_fde )/_edagc ,_gcb ._edg );};_fca :=_eae *(_eg -_dda )+_edagc *(_fge -_fde );if _fca < 0{return _gcb ._edg [0]._ddcg ;};_dff :=_a .Hypot (_eae ,_edagc );
_adf :=((_eg -_dda )*-_edagc +(_fge -_fde )*_eae )/(_dff *_dff );_dabf ,_bddf :=_dda +_adf *-_edagc ,_fde +_adf *_eae ;_eaca :=_a .Hypot (_eg -_dabf ,_fge -_bddf )/_dff ;return _dcba (_eaca ,_gcb ._edg );};func (_aeb *Context )Width ()int {return _aeb ._fbef };
func (_gec *Context )AsMask ()*_ge .Alpha {_cea :=_ge .NewAlpha (_gec ._gee .Bounds ());_gfe .Draw (_cea ,_gec ._gee .Bounds (),_gec ._gee ,_ge .Point {},_gfe .Src );return _cea ;};func (_bdfc *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_bdfc .Translate (x ,y );
_bdfc .Scale (sx ,sy );_bdfc .Translate (-x ,-y );};func (_be *Context )SetFillRule (fillRule _cf .FillRule ){_be ._afe =fillRule };func (_cefb *Context )joiner ()_bc .Joiner {switch _cefb ._bdb {case _cf .LineJoinBevel :return _bc .BevelJoiner ;case _cf .LineJoinRound :return _bc .RoundJoiner ;
};return nil ;};func (_dgf *radialGradient )ColorAt (x ,y int )_b .Color {if len (_dgf ._bb )==0{return _b .Transparent ;};_ccae ,_ccc :=float64 (x )+0.5-_dgf ._gdaf ._cagb ,float64 (y )+0.5-_dgf ._gdaf ._gagd ;_fbd :=_fedf (_ccae ,_ccc ,_dgf ._gdaf ._fcdc ,_dgf ._cadg ._cagb ,_dgf ._cadg ._gagd ,_dgf ._cadg ._fcdc );
_ecfg :=_fedf (_ccae ,_ccc ,-_dgf ._gdaf ._fcdc ,_ccae ,_ccc ,_dgf ._gdaf ._fcdc );if _dgf ._cdb ==0{if _fbd ==0{return _b .Transparent ;};_fdfa :=0.5*_ecfg /_fbd ;if _fdfa *_dgf ._cadg ._fcdc >=_dgf ._cdgc {return _dcba (_fdfa ,_dgf ._bb );};return _b .Transparent ;
};_fbaa :=_fedf (_fbd ,_dgf ._cdb ,0,_fbd ,-_ecfg ,0);if _fbaa >=0{_egab :=_a .Sqrt (_fbaa );_gebd :=(_fbd +_egab )*_dgf ._abbe ;_eec :=(_fbd -_egab )*_dgf ._abbe ;if _gebd *_dgf ._cadg ._fcdc >=_dgf ._cdgc {return _dcba (_gebd ,_dgf ._bb );}else if _eec *_dgf ._cadg ._fcdc >=_dgf ._cdgc {return _dcba (_eec ,_dgf ._bb );
};};return _b .Transparent ;};func (_gfeg *radialGradient )AddColorStop (offset float64 ,color _b .Color ){_gfeg ._bb =append (_gfeg ._bb ,stop {_dbbd :offset ,_ddcg :color });_ad .Sort (_gfeg ._bb );};func (_ccf *Context )FillPreserve (){var _afd _bc .Painter ;
if _ccf ._aab ==nil {if _edb ,_bgd :=_ccf ._bd .(*solidPattern );_bgd {_fdf :=_bc .NewRGBAPainter (_ccf ._gee );_fdf .SetColor (_edb ._ccb );_afd =_fdf ;};};if _afd ==nil {_afd =_efe (_ccf ._gee ,_ccf ._aab ,_ccf ._bd );};_ccf .fill (_afd );};type stops []stop ;
func (_dbca *Context )ClearPath (){_dbca ._ggb .Clear ();_dbca ._dag .Clear ();_dbca ._feb =false };func (_dca *Context )capper ()_bc .Capper {switch _dca ._caf {case _cf .LineCapButt :return _bc .ButtCapper ;case _cf .LineCapRound :return _bc .RoundCapper ;
case _cf .LineCapSquare :return _bc .SquareCapper ;};return nil ;};func (_ggbd *Context )Fill (){_ggbd .FillPreserve ();_ggbd .ClearPath ()};func (_ffc *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_ffc ._feb {_ffc .MoveTo (x1 ,y1 );};x1 ,y1 =_ffc .Transform (x1 ,y1 );
x2 ,y2 =_ffc .Transform (x2 ,y2 );_fg :=_ac .NewPoint (x1 ,y1 );_fea :=_ac .NewPoint (x2 ,y2 );_fef :=_cga (_fg );_ffab :=_cga (_fea );_ffc ._ggb .Add2 (_fef ,_ffab );_ffc ._dag .Add2 (_fef ,_ffab );_ffc ._bgc =_fea ;};func _bf (_ab ,_e ,_cc ,_gd ,_fc ,_ea ,_ed float64 )(_dd ,_cgc float64 ){_de :=1-_ed ;
_fa :=_de *_de ;_ff :=2*_de *_ed ;_fe :=_ed *_ed ;_dd =_fa *_ab +_ff *_cc +_fe *_fc ;_cgc =_fa *_e +_ff *_gd +_fe *_ea ;return ;};func _bcg (_eed _cg .Int26_6 )float64 {const _fdfb ,_cffd =6,1<<6-1;if _eed >=0{return float64 (_eed >>_fdfb )+float64 (_eed &_cffd )/64;
};_eed =-_eed ;if _eed >=0{return -(float64 (_eed >>_fdfb )+float64 (_eed &_cffd )/64);};return 0;};type Context struct{_fbef int ;_fff int ;_fad *_bc .Rasterizer ;_gee *_ge .RGBA ;_aab *_ge .Alpha ;_abb _b .Color ;_bd _cf .Pattern ;_dae _cf .Pattern ;
_ggb _bc .Path ;_dag _bc .Path ;_acc _ac .Point ;_bgc _ac .Point ;_feb bool ;_gdb []float64 ;_cfd float64 ;_gfa float64 ;_caf _cf .LineCap ;_bdb _cf .LineJoin ;_afe _cf .FillRule ;_cae _ac .Matrix ;_abf _cf .TextState ;_cef []*Context ;};func (_cfb stops )Swap (i ,j int ){_cfb [i ],_cfb [j ]=_cfb [j ],_cfb [i ]};
type repeatOp int ;func _fedf (_aaf ,_ebgb ,_ega ,_efa ,_afb ,_bfbb float64 )float64 {return _aaf *_efa +_ebgb *_afb +_ega *_bfbb ;};func (_gafc *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_gea ,_aabb ,_gad ,_ebaf :=x ,x +r ,x +w -r ,x +w ;
_cgba ,_dbg ,_aebge ,_abda :=y ,y +r ,y +h -r ,y +h ;_gafc .NewSubPath ();_gafc .MoveTo (_aabb ,_cgba );_gafc .LineTo (_gad ,_cgba );_gafc .DrawArc (_gad ,_dbg ,r ,_fbed (270),_fbed (360));_gafc .LineTo (_ebaf ,_aebge );_gafc .DrawArc (_gad ,_aebge ,r ,_fbed (0),_fbed (90));
_gafc .LineTo (_aabb ,_abda );_gafc .DrawArc (_aabb ,_aebge ,r ,_fbed (90),_fbed (180));_gafc .LineTo (_gea ,_dbg );_gafc .DrawArc (_aabb ,_dbg ,r ,_fbed (180),_fbed (270));_gafc .ClosePath ();};func (_agfc *Context )SetMask (mask *_ge .Alpha )error {if mask .Bounds ().Size ()!=_agfc ._gee .Bounds ().Size (){return _gf .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_agfc ._aab =mask ;return nil ;};func (_ecf *Context )Clear (){_cdg :=_ge .NewUniform (_ecf ._abb );_gfe .Draw (_ecf ._gee ,_ecf ._gee .Bounds (),_cdg ,_ge .Point {},_gfe .Src );};func (_cgd *Context )SetMatrix (m _ac .Matrix ){_cgd ._cae =m };func (_cgb *Context )MoveTo (x ,y float64 ){if _cgb ._feb {_cgb ._dag .Add1 (_cga (_cgb ._acc ));
};x ,y =_cgb .Transform (x ,y );_bff :=_ac .NewPoint (x ,y );_baa :=_cga (_bff );_cgb ._ggb .Start (_baa );_cgb ._dag .Start (_baa );_cgb ._acc =_bff ;_cgb ._bgc =_bff ;_cgb ._feb =true ;};func (_cdd *Context )SetRGB (r ,g ,b float64 ){_cdd .SetRGBA (r ,g ,b ,1)};
func (_ggcd *patternPainter )Paint (ss []_bc .Span ,done bool ){_edde :=_ggcd ._bca .Bounds ();for _ ,_abfd :=range ss {if _abfd .Y < _edde .Min .Y {continue ;};if _abfd .Y >=_edde .Max .Y {return ;};if _abfd .X0 < _edde .Min .X {_abfd .X0 =_edde .Min .X ;
};if _abfd .X1 > _edde .Max .X {_abfd .X1 =_edde .Max .X ;};if _abfd .X0 >=_abfd .X1 {continue ;};const _bbe =1<<16-1;_gfgf :=_abfd .Y -_ggcd ._bca .Rect .Min .Y ;_faa :=_abfd .X0 -_ggcd ._bca .Rect .Min .X ;_gdbc :=(_abfd .Y -_ggcd ._bca .Rect .Min .Y )*_ggcd ._bca .Stride +(_abfd .X0 -_ggcd ._bca .Rect .Min .X )*4;
_dbf :=_gdbc +(_abfd .X1 -_abfd .X0 )*4;for _eded ,_geg :=_gdbc ,_faa ;_eded < _dbf ;_eded ,_geg =_eded +4,_geg +1{_bcac :=_abfd .Alpha ;if _ggcd ._fadg !=nil {_bcac =_bcac *uint32 (_ggcd ._fadg .AlphaAt (_geg ,_gfgf ).A )/255;if _bcac ==0{continue ;};
};_ccde :=_ggcd ._aed .ColorAt (_geg ,_gfgf );_edee ,_gede ,_fbdc ,_bgbb :=_ccde .RGBA ();_baeg :=uint32 (_ggcd ._bca .Pix [_eded +0]);_bfd :=uint32 (_ggcd ._bca .Pix [_eded +1]);_eeggf :=uint32 (_ggcd ._bca .Pix [_eded +2]);_beee :=uint32 (_ggcd ._bca .Pix [_eded +3]);
_cfbb :=(_bbe -(_bgbb *_bcac /_bbe ))*0x101;_ggcd ._bca .Pix [_eded +0]=uint8 ((_baeg *_cfbb +_edee *_bcac )/_bbe >>8);_ggcd ._bca .Pix [_eded +1]=uint8 ((_bfd *_cfbb +_gede *_bcac )/_bbe >>8);_ggcd ._bca .Pix [_eded +2]=uint8 ((_eeggf *_cfbb +_fbdc *_bcac )/_bbe >>8);
_ggcd ._bca .Pix [_eded +3]=uint8 ((_beee *_cfbb +_bgbb *_bcac )/_bbe >>8);};};};func (_eac *Context )Image ()_ge .Image {return _eac ._gee };func (_cgfb *Context )Identity (){_cgfb ._cae =_ac .IdentityMatrix ()};func _cbg (_bfec _bc .Path )[][]_ac .Point {var _ggbcc [][]_ac .Point ;
var _bbd []_ac .Point ;var _affcg ,_ceb float64 ;for _ceac :=0;_ceac < len (_bfec );{switch _bfec [_ceac ]{case 0:if len (_bbd )> 0{_ggbcc =append (_ggbcc ,_bbd );_bbd =nil ;};_dffe :=_bcg (_bfec [_ceac +1]);_edec :=_bcg (_bfec [_ceac +2]);_bbd =append (_bbd ,_ac .NewPoint (_dffe ,_edec ));
_affcg ,_ceb =_dffe ,_edec ;_ceac +=4;case 1:_cba :=_bcg (_bfec [_ceac +1]);_ecfga :=_bcg (_bfec [_ceac +2]);_bbd =append (_bbd ,_ac .NewPoint (_cba ,_ecfga ));_affcg ,_ceb =_cba ,_ecfga ;_ceac +=4;case 2:_cfgb :=_bcg (_bfec [_ceac +1]);_eeba :=_bcg (_bfec [_ceac +2]);
_bafb :=_bcg (_bfec [_ceac +3]);_egd :=_bcg (_bfec [_ceac +4]);_cbgd :=_gaa (_affcg ,_ceb ,_cfgb ,_eeba ,_bafb ,_egd );_bbd =append (_bbd ,_cbgd ...);_affcg ,_ceb =_bafb ,_egd ;_ceac +=6;case 3:_bag :=_bcg (_bfec [_ceac +1]);_cde :=_bcg (_bfec [_ceac +2]);
_aeaa :=_bcg (_bfec [_ceac +3]);_ebc :=_bcg (_bfec [_ceac +4]);_cgbd :=_bcg (_bfec [_ceac +5]);_ccaef :=_bcg (_bfec [_ceac +6]);_fecb :=_aa (_affcg ,_ceb ,_bag ,_cde ,_aeaa ,_ebc ,_cgbd ,_ccaef );_bbd =append (_bbd ,_fecb ...);_affcg ,_ceb =_cgbd ,_ccaef ;
_ceac +=8;default:_gaf .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_bfec );return _ggbcc ;};};if len (_bbd )> 0{_ggbcc =append (_ggbcc ,_bbd );};return _ggbcc ;};func (_dec *Context )Pop (){_dcbb :=*_dec ;
_aaga :=_dec ._cef ;_bgfb :=_aaga [len (_aaga )-1];*_dec =*_bgfb ;_dec ._ggb =_dcbb ._ggb ;_dec ._dag =_dcbb ._dag ;_dec ._acc =_dcbb ._acc ;_dec ._bgc =_dcbb ._bgc ;_dec ._feb =_dcbb ._feb ;};func (_efb *Context )SetPixel (x ,y int ){_efb ._gee .Set (x ,y ,_efb ._abb )};
func (_beb *Context )Stroke (){_beb .StrokePreserve ();_beb .ClearPath ()};func NewContext (width ,height int )*Context {return NewContextForRGBA (_ge .NewRGBA (_ge .Rect (0,0,width ,height )));};func (_eda *Context )SetStrokeStyle (pattern _cf .Pattern ){_eda ._dae =pattern };
func (_aaba *Context )TextState ()*_cf .TextState {return &_aaba ._abf };func (_accf *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ffg :=_b .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_accf ._abb =_ffg ;_accf ._bd =_dcce (_ffg );
};func (_ffe *Context )DrawString (s string ,face _d .Face ,x ,y float64 ){_ffe .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_bgg *Context )StrokePreserve (){var _cabg _bc .Painter ;if _bgg ._aab ==nil {if _cff ,_gdag :=_bgg ._dae .(*solidPattern );
_gdag {_cag :=_bc .NewRGBAPainter (_bgg ._gee );_cag .SetColor (_cff ._ccb );_cabg =_cag ;};};if _cabg ==nil {_cabg =_efe (_bgg ._gee ,_bgg ._aab ,_bgg ._dae );};_bgg .stroke (_cabg );};func (_fcc *Context )Matrix ()_ac .Matrix {return _fcc ._cae };func _gaa (_gc ,_ca ,_adg ,_ffa ,_cd ,_af float64 )[]_ac .Point {_fd :=(_a .Hypot (_adg -_gc ,_ffa -_ca )+_a .Hypot (_cd -_adg ,_af -_ffa ));
_add :=int (_fd +0.5);if _add < 4{_add =4;};_aca :=float64 (_add )-1;_fac :=make ([]_ac .Point ,_add );for _fb :=0;_fb < _add ;_fb ++{_ag :=float64 (_fb )/_aca ;_dc ,_ae :=_bf (_gc ,_ca ,_adg ,_ffa ,_cd ,_af ,_ag );_fac [_fb ]=_ac .NewPoint (_dc ,_ae );
};return _fac ;};var (_ecd =_dcce (_b .White );_def =_dcce (_b .Black ););func (_bfe *Context )DrawImage (im _ge .Image ,x ,y int ){_bfe .DrawImageAnchored (im ,x ,y ,0,0)};func NewContextForImage (im _ge .Image )*Context {return NewContextForRGBA (_afcb (im ))};
func (_bfea *Context )DrawImageAnchored (im _ge .Image ,x ,y int ,ax ,ay float64 ){_gge :=im .Bounds ().Size ();x -=int (ax *float64 (_gge .X ));y -=int (ay *float64 (_gge .Y ));_fefa :=_gfe .BiLinear ;_fed :=_bfea ._cae .Clone ().Translate (float64 (x ),float64 (y ));
_gadb :=_f .Aff3 {_fed [0],_fed [3],_fed [6],_fed [1],_fed [4],_fed [7]};if _bfea ._aab ==nil {_fefa .Transform (_bfea ._gee ,_gadb ,im ,im .Bounds (),_gfe .Over ,nil );}else {_fefa .Transform (_bfea ._gee ,_gadb ,im ,im .Bounds (),_gfe .Over ,&_gfe .Options {DstMask :_bfea ._aab ,DstMaskP :_ge .Point {}});
};};func (_agc *Context )fill (_cgbc _bc .Painter ){_bdc :=_agc ._dag ;if _agc ._feb {_bdc =make (_bc .Path ,len (_agc ._dag ));copy (_bdc ,_agc ._dag );_bdc .Add1 (_cga (_agc ._acc ));};_fae :=_agc ._fad ;_fae .UseNonZeroWinding =_agc ._afe ==_cf .FillRuleWinding ;
_fae .Clear ();_fae .AddPath (_bdc );_fae .Rasterize (_cgbc );};func (_ebaa *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ebaa .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func _gabg (_ccab _ge .Image ,_cffb repeatOp )_cf .Pattern {return &surfacePattern {_bdcd :_ccab ,_gbfa :_cffb };
};func _dcba (_gdf float64 ,_ccdg stops )_b .Color {if _gdf <=0.0||len (_ccdg )==1{return _ccdg [0]._ddcg ;};_efc :=_ccdg [len (_ccdg )-1];if _gdf >=_efc ._dbbd {return _efc ._ddcg ;};for _ged ,_ebge :=range _ccdg [1:]{if _gdf < _ebge ._dbbd {_gdf =(_gdf -_ccdg [_ged ]._dbbd )/(_ebge ._dbbd -_ccdg [_ged ]._dbbd );
return _geeb (_ccdg [_ged ]._ddcg ,_ebge ._ddcg ,_gdf );};};return _efc ._ddcg ;};func (_ebg *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _eegg =16;for _ggbf :=0;_ggbf < _eegg ;_ggbf ++{_abba :=float64 (_ggbf +0)/_eegg ;_abg :=float64 (_ggbf +1)/_eegg ;
_fba :=angle1 +(angle2 -angle1 )*_abba ;_cfa :=angle1 +(angle2 -angle1 )*_abg ;_bdfe :=x +rx *_a .Cos (_fba );_abed :=y +ry *_a .Sin (_fba );_cdc :=x +rx *_a .Cos ((_fba +_cfa )/2);_geae :=y +ry *_a .Sin ((_fba +_cfa )/2);_df :=x +rx *_a .Cos (_cfa );_gbf :=y +ry *_a .Sin (_cfa );
_fcgb :=2*_cdc -_bdfe /2-_df /2;_gfg :=2*_geae -_abed /2-_gbf /2;if _ggbf ==0{if _ebg ._feb {_ebg .LineTo (_bdfe ,_abed );}else {_ebg .MoveTo (_bdfe ,_abed );};};_ebg .QuadraticTo (_fcgb ,_gfg ,_df ,_gbf );};};type radialGradient struct{_gdaf ,_cedf ,_cadg circle ;
_cdb ,_abbe float64 ;_cdgc float64 ;_bb stops ;};func (_aga *Context )NewSubPath (){if _aga ._feb {_aga ._dag .Add1 (_cga (_aga ._acc ));};_aga ._feb =false ;};func _fbed (_fbde float64 )float64 {return _fbde *_a .Pi /180};func (_cca *Context )ClosePath (){if _cca ._feb {_bge :=_cga (_cca ._acc );
_cca ._ggb .Add1 (_bge );_cca ._dag .Add1 (_bge );_cca ._bgc =_cca ._acc ;};};func (_ada *Context )LineWidth ()float64 {return _ada ._gfa };func _gca (_edd ,_agf ,_ffb ,_bg ,_gb ,_gfb ,_aea ,_ee ,_aff float64 )(_aead ,_fcd float64 ){_bgf :=1-_aff ;_dg :=_bgf *_bgf *_bgf ;
_cge :=3*_bgf *_bgf *_aff ;_db :=3*_bgf *_aff *_aff ;_dbc :=_aff *_aff *_aff ;_aead =_dg *_edd +_cge *_ffb +_db *_gb +_dbc *_aea ;_fcd =_dg *_agf +_cge *_bg +_db *_gfb +_dbc *_ee ;return ;};type solidPattern struct{_ccb _b .Color };func _dcce (_cfcb _b .Color )_cf .Pattern {return &solidPattern {_ccb :_cfcb }};
func (_cefbd stops )Less (i ,j int )bool {return _cefbd [i ]._dbbd < _cefbd [j ]._dbbd };func (_ecag stops )Len ()int {return len (_ecag )};type stop struct{_dbbd float64 ;_ddcg _b .Color ;};func _gcaa (_afab [][]_ac .Point )_bc .Path {var _ccac _bc .Path ;
for _ ,_acga :=range _afab {var _edeg _cg .Point26_6 ;for _bcf ,_fcb :=range _acga {_gdg :=_cga (_fcb );if _bcf ==0{_ccac .Start (_gdg );}else {_bcc :=_gdg .X -_edeg .X ;_adac :=_gdg .Y -_edeg .Y ;if _bcc < 0{_bcc =-_bcc ;};if _adac < 0{_adac =-_adac ;
};if _bcc +_adac > 8{_ccac .Add1 (_gdg );};};_edeg =_gdg ;};};return _ccac ;};func (_cfg *Context )Height ()int {return _cfg ._fff };func (_bfbf *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_bfbf .MoveTo (x1 ,y1 );_bfbf .LineTo (x2 ,y2 )};func (_cfaf *Context )Shear (x ,y float64 ){_cfaf ._cae .Shear (x ,y )};
func (_fbb *Context )Rotate (angle float64 ){_fbb ._cae =_fbb ._cae .Rotate (angle )};func (_eege *Context )drawRegularPolygon (_ffbf int ,_edf ,_dcb ,_fgd ,_aefb float64 ){_cb :=2*_a .Pi /float64 (_ffbf );_aefb -=_a .Pi /2;if _ffbf %2==0{_aefb +=_cb /2;
};_eege .NewSubPath ();for _dcc :=0;_dcc < _ffbf ;_dcc ++{_bdg :=_aefb +_cb *float64 (_dcc );_eege .LineTo (_edf +_fgd *_a .Cos (_bdg ),_dcb +_fgd *_a .Sin (_bdg ));};_eege .ClosePath ();};func _geeb (_edgd ,_fbee _b .Color ,_bgdf float64 )_b .Color {_dfa ,_bfcg ,_gedf ,_adb :=_edgd .RGBA ();
_dee ,_baf ,_dabd ,_bacbg :=_fbee .RGBA ();return _b .RGBA {_gedc (_dfa ,_dee ,_bgdf ),_gedc (_bfcg ,_baf ,_bgdf ),_gedc (_gedf ,_dabd ,_bgdf ),_gedc (_adb ,_bacbg ,_bgdf )};};func (_cbbg *Context )Scale (x ,y float64 ){_cbbg ._cae =_cbbg ._cae .Scale (x ,y )};
func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_cf .Gradient {_fgef :=circle {x0 ,y0 ,r0 };_ffaf :=circle {x1 ,y1 ,r1 };_gfd :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_dcg :=_fedf (_gfd ._cagb ,_gfd ._gagd ,-_gfd ._fcdc ,_gfd ._cagb ,_gfd ._gagd ,_gfd ._fcdc );
var _bfc float64 ;if _dcg !=0{_bfc =1.0/_dcg ;};_decc :=-_fgef ._fcdc ;_cda :=&radialGradient {_gdaf :_fgef ,_cedf :_ffaf ,_cadg :_gfd ,_cdb :_dcg ,_abbe :_bfc ,_cdgc :_decc };return _cda ;};func (_bef *Context )SetColor (c _b .Color ){_bef .setFillAndStrokeColor (c )};
func (_afc *Context )Push (){_caee :=*_afc ;_afc ._cef =append (_afc ._cef ,&_caee )};func _febb (_gfba float64 )_cg .Int26_6 {return _cg .Int26_6 (_gfba *64)};func (_gae *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_gae .NewSubPath ();_gae .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_a .Pi );
_gae .ClosePath ();};func (_bfa *Context )SetFillStyle (pattern _cf .Pattern ){if _cdf ,_ede :=pattern .(*solidPattern );_ede {_bfa ._abb =_cdf ._ccb ;};_bfa ._bd =pattern ;};func (_gagf *Context )ShearAbout (sx ,sy ,x ,y float64 ){_gagf .Translate (x ,y );
_gagf .Shear (sx ,sy );_gagf .Translate (-x ,-y );};func (_bga *Context )drawString (_edag string ,_ceff _d .Face ,_afa ,_bcd float64 ){_cfc :=&_d .Drawer {Src :_ge .NewUniform (_bga ._abb ),Face :_ceff ,Dot :_cga (_ac .NewPoint (_afa ,_bcd ))};_cgca :=rune (-1);
for _ ,_bgfe :=range _edag {if _cgca >=0{_cfc .Dot .X +=_cfc .Face .Kern (_cgca ,_bgfe );};_dfd ,_aegd ,_acce ,_agfb ,_ggf :=_cfc .Face .Glyph (_cfc .Dot ,_bgfe );if !_ggf {continue ;};_bed :=_dfd .Sub (_dfd .Min );_ddba :=_ge .NewRGBA (_bed );_gfe .DrawMask (_ddba ,_bed ,_cfc .Src ,_ge .Point {},_aegd ,_acce ,_gfe .Over );
var _feda *_gfe .Options ;if _bga ._aab !=nil {_feda =&_gfe .Options {DstMask :_bga ._aab ,DstMaskP :_ge .Point {}};};_ebf :=_bga ._cae .Clone ().Translate (float64 (_dfd .Min .X ),float64 (_dfd .Min .Y ));_fce :=_f .Aff3 {_ebf [0],_ebf [3],_ebf [6],_ebf [1],_ebf [4],_ebf [7]};
_gfe .BiLinear .Transform (_bga ._gee ,_fce ,_ddba ,_bed ,_gfe .Over ,_feda );_cfc .Dot .X +=_agfb ;_cgca =_bgfe ;};};func (_gbc *solidPattern )ColorAt (x ,y int )_b .Color {return _gbc ._ccb };func (_ace *Context )ResetClip (){_ace ._aab =nil };func (_ebdc *Context )InvertMask (){if _ebdc ._aab ==nil {_ebdc ._aab =_ge .NewAlpha (_ebdc ._gee .Bounds ());
}else {for _eba ,_abd :=range _ebdc ._aab .Pix {_ebdc ._aab .Pix [_eba ]=255-_abd ;};};};func (_bffc *linearGradient )AddColorStop (offset float64 ,color _b .Color ){_bffc ._edg =append (_bffc ._edg ,stop {_dbbd :offset ,_ddcg :color });_ad .Sort (_bffc ._edg );
};func (_daeb *Context )SetDash (dashes ...float64 ){_daeb ._gdb =dashes };func _gbb (_ffcc string )(_agea ,_bcde ,_dcag ,_fbbc int ){_ffcc =_ga .TrimPrefix (_ffcc ,"\u0023");_fbbc =255;if len (_ffcc )==3{_agd :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_c .Sscanf (_ffcc ,_agd ,&_agea ,&_bcde ,&_dcag );_agea |=_agea <<4;_bcde |=_bcde <<4;_dcag |=_dcag <<4;};if len (_ffcc )==6{_afad :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_c .Sscanf (_ffcc ,_afad ,&_agea ,&_bcde ,&_dcag );
};if len (_ffcc )==8{_dfab :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_c .Sscanf (_ffcc ,_dfab ,&_agea ,&_bcde ,&_dcag ,&_fbbc );};return ;};const (_ecc repeatOp =iota ;_cdaf ;_cfab ;_cdec ;);func (_adad *Context )Translate (x ,y float64 ){_adad ._cae =_adad ._cae .Translate (x ,y )};
func (_ggg *Context )SetRGB255 (r ,g ,b int ){_ggg .SetRGBA255 (r ,g ,b ,255)};type patternPainter struct{_bca *_ge .RGBA ;_fadg *_ge .Alpha ;_aed _cf .Pattern ;};func (_gdbf *Context )Clip (){_gdbf .ClipPreserve ();_gdbf .ClearPath ()};func (_ffag *Context )RotateAbout (angle ,x ,y float64 ){_ffag .Translate (x ,y );
_ffag .Rotate (angle );_ffag .Translate (-x ,-y );};func _aa (_aba ,_da ,_bfg ,_eb ,_geb ,_gg ,_ce ,_fcg float64 )[]_ac .Point {_ddb :=(_a .Hypot (_bfg -_aba ,_eb -_da )+_a .Hypot (_geb -_bfg ,_gg -_eb )+_a .Hypot (_ce -_geb ,_fcg -_gg ));_aeg :=int (_ddb +0.5);
if _aeg < 4{_aeg =4;};_ec :=float64 (_aeg )-1;_ced :=make ([]_ac .Point ,_aeg );for _gafd :=0;_gafd < _aeg ;_gafd ++{_ddc :=float64 (_gafd )/_ec ;_ddg ,_fbe :=_gca (_aba ,_da ,_bfg ,_eb ,_geb ,_gg ,_ce ,_fcg ,_ddc );_ced [_gafd ]=_ac .NewPoint (_ddg ,_fbe );
};return _ced ;};func (_fbf *Context )LineTo (x ,y float64 ){if !_fbf ._feb {_fbf .MoveTo (x ,y );}else {x ,y =_fbf .Transform (x ,y );_fec :=_ac .NewPoint (x ,y );_ded :=_cga (_fec );_fbf ._ggb .Add1 (_ded );_fbf ._dag .Add1 (_ded );_fbf ._bgc =_fec ;
};};func (_abc *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_dab :=_b .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_abc ._dae =_dcce (_dab );};func (_age *Context )SetRGBA (r ,g ,b ,a float64 ){_age ._abb =_b .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_age .setFillAndStrokeColor (_age ._abb );};func (_gab *Context )stroke (_dbcc _bc .Painter ){_gda :=_gab ._ggb ;if len (_gab ._gdb )> 0{_gda =_eggg (_gda ,_gab ._gdb ,_gab ._cfd );}else {_gda =_gcaa (_cbg (_gda ));};_ebd :=_gab ._fad ;_ebd .UseNonZeroWinding =true ;
_ebd .Clear ();_ccd :=(_gab ._cae .ScalingFactorX ()+_gab ._cae .ScalingFactorY ())/2;_ebd .AddStroke (_gda ,_febb (_gab ._gfa *_ccd ),_gab .capper (),_gab .joiner ());_ebd .Rasterize (_dbcc );};type circle struct{_cagb ,_gagd ,_fcdc float64 };func (_affc *Context )SetLineWidth (lineWidth float64 ){_affc ._gfa =lineWidth };
func _efe (_fcab *_ge .RGBA ,_dcceb *_ge .Alpha ,_dafg _cf .Pattern )*patternPainter {return &patternPainter {_fcab ,_dcceb ,_dafg };};func _gedc (_gac ,_bffd uint32 ,_fab float64 )uint8 {return uint8 (int32 (float64 (_gac )*(1.0-_fab )+float64 (_bffd )*_fab )>>8);
};func (_ddbf *surfacePattern )ColorAt (x ,y int )_b .Color {_bba :=_ddbf ._bdcd .Bounds ();switch _ddbf ._gbfa {case _cdaf :if y >=_bba .Dy (){return _b .Transparent ;};case _cfab :if x >=_bba .Dx (){return _b .Transparent ;};case _cdec :if x >=_bba .Dx ()||y >=_bba .Dy (){return _b .Transparent ;
};};x =x %_bba .Dx ()+_bba .Min .X ;y =y %_bba .Dy ()+_bba .Min .Y ;return _ddbf ._bdcd .At (x ,y );};func _eggg (_aegdc _bc .Path ,_dgfe []float64 ,_dcff float64 )_bc .Path {return _gcaa (_ccg (_cbg (_aegdc ),_dgfe ,_dcff ));};func (_dfe *Context )DrawStringAnchored (s string ,face _d .Face ,x ,y ,ax ,ay float64 ){_cee ,_cbb :=_dfe .MeasureString (s ,face );
_dfe .drawString (s ,face ,x -ax *_cee ,y +ay *_cbb );};func _ccg (_dgc [][]_ac .Point ,_egg []float64 ,_efg float64 )[][]_ac .Point {var _gace [][]_ac .Point ;if len (_egg )==0{return _dgc ;};if len (_egg )==1{_egg =append (_egg ,_egg [0]);};for _ ,_gbfb :=range _dgc {if len (_gbfb )< 2{continue ;
};_ebcg :=_gbfb [0];_ggcb :=1;_cdac :=0;_gcfa :=0.0;if _efg !=0{var _gfgg float64 ;for _ ,_eee :=range _egg {_gfgg +=_eee ;};_efg =_a .Mod (_efg ,_gfgg );if _efg < 0{_efg +=_gfgg ;};for _bee ,_edad :=range _egg {_efg -=_edad ;if _efg < 0{_cdac =_bee ;_gcfa =_edad +_efg ;
break ;};};};var _fffa []_ac .Point ;_fffa =append (_fffa ,_ebcg );for _ggcb < len (_gbfb ){_fdec :=_egg [_cdac ];_ebaag :=_gbfb [_ggcb ];_ege :=_ebcg .Distance (_ebaag );_eggf :=_fdec -_gcfa ;if _ege > _eggf {_fgefe :=_eggf /_ege ;_eag :=_ebcg .Interpolate (_ebaag ,_fgefe );
_fffa =append (_fffa ,_eag );if _cdac %2==0&&len (_fffa )> 1{_gace =append (_gace ,_fffa );};_fffa =nil ;_fffa =append (_fffa ,_eag );_gcfa =0;_ebcg =_eag ;_cdac =(_cdac +1)%len (_egg );}else {_fffa =append (_fffa ,_ebaag );_ebcg =_ebaag ;_gcfa +=_ege ;
_ggcb ++;};};if _cdac %2==0&&len (_fffa )> 1{_gace =append (_gace ,_fffa );};};return _gace ;};type surfacePattern struct{_bdcd _ge .Image ;_gbfa repeatOp ;};func (_abe *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_abe ._feb {_abe .MoveTo (x1 ,y1 );
};_eeg ,_ade :=_abe ._bgc .X ,_abe ._bgc .Y ;x1 ,y1 =_abe .Transform (x1 ,y1 );x2 ,y2 =_abe .Transform (x2 ,y2 );x3 ,y3 =_abe .Transform (x3 ,y3 );_cab :=_aa (_eeg ,_ade ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_gag :=_cga (_abe ._bgc );for _ ,_bgb :=range _cab [1:]{_dbbc :=_cga (_bgb );
if _dbbc ==_gag {continue ;};_gag =_dbbc ;_abe ._ggb .Add1 (_dbbc );_abe ._dag .Add1 (_dbbc );_abe ._bgc =_bgb ;};};func (_cgf *Context )SetDashOffset (offset float64 ){_cgf ._cfd =offset };func NewContextForRGBA (im *_ge .RGBA )*Context {_cad :=im .Bounds ().Size ().X ;
_dbb :=im .Bounds ().Size ().Y ;return &Context {_fbef :_cad ,_fff :_dbb ,_fad :_bc .NewRasterizer (_cad ,_dbb ),_gee :im ,_abb :_b .Transparent ,_bd :_ecd ,_dae :_def ,_gfa :1,_afe :_cf .FillRuleWinding ,_cae :_ac .IdentityMatrix (),_abf :_cf .NewTextState ()};
};func (_cfda *Context )FillPattern ()_cf .Pattern {return _cfda ._bd };func (_cadb *Context )Transform (x ,y float64 )(_gcd ,_ggef float64 ){return _cadb ._cae .Transform (x ,y );};func (_gcae *Context )StrokePattern ()_cf .Pattern {return _gcae ._dae };
func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_cf .Gradient {_beg :=&linearGradient {_ggc :x0 ,_bdd :y0 ,_dcfc :x1 ,_agae :y1 };return _beg ;};func (_fbg *Context )SetLineJoin (lineJoin _cf .LineJoin ){_fbg ._bdb =lineJoin };func (_aef *Context )SetHexColor (x string ){_eca ,_gcf ,_gga ,_bae :=_gbb (x );
_aef .SetRGBA255 (_eca ,_gcf ,_gga ,_bae );};func _cga (_cgcc _ac .Point )_cg .Point26_6 {return _cg .Point26_6 {X :_febb (_cgcc .X ),Y :_febb (_cgcc .Y )}};func (_ef *Context )SetLineCap (lineCap _cf .LineCap ){_ef ._caf =lineCap };func (_cgg *Context )setFillAndStrokeColor (_bfb _b .Color ){_cgg ._abb =_bfb ;
_cgg ._bd =_dcce (_bfb );_cgg ._dae =_dcce (_bfb );};func _afcb (_ece _ge .Image )*_ge .RGBA {_gcc :=_ece .Bounds ();_feba :=_ge .NewRGBA (_gcc );_ba .Draw (_feba ,_gcc ,_ece ,_gcc .Min ,_ba .Src );return _feba ;};func (_bac *Context )ClipPreserve (){_faea :=_ge .NewAlpha (_ge .Rect (0,0,_bac ._fbef ,_bac ._fff ));
_aag :=_bc .NewAlphaOverPainter (_faea );_bac .fill (_aag );if _bac ._aab ==nil {_bac ._aab =_faea ;}else {_aebg :=_ge .NewAlpha (_ge .Rect (0,0,_bac ._fbef ,_bac ._fff ));_gfe .DrawMask (_aebg ,_aebg .Bounds (),_faea ,_ge .Point {},_bac ._aab ,_ge .Point {},_gfe .Over );
_bac ._aab =_aebg ;};};