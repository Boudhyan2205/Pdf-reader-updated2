//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_cc "errors";_b "fmt";_ab "github.com/golang/freetype/raster";_e "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/transform";_bg "github.com/unidoc/unipdf/v3/render/internal/context";_db "golang.org/x/image/draw";
_aa "golang.org/x/image/font";_ca "golang.org/x/image/math/f64";_ac "golang.org/x/image/math/fixed";_bd "image";_f "image/color";_bf "image/draw";_a "math";_c "sort";_ag "strings";);func (_beg *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_beg ._acb {_beg .MoveTo (x1 ,y1 );
};x1 ,y1 =_beg .Transform (x1 ,y1 );x2 ,y2 =_beg .Transform (x2 ,y2 );_ad :=_d .NewPoint (x1 ,y1 );_fae :=_d .NewPoint (x2 ,y2 );_feg :=_dcga (_ad );_cgb :=_dcga (_fae );_beg ._cfd .Add2 (_feg ,_cgb );_beg ._ddc .Add2 (_feg ,_cgb );_beg ._abd =_fae ;};
func _aac (_dbb ,_bb ,_caf ,_bfc ,_ce ,_fg ,_bdb float64 )(_fa ,_fc float64 ){_da :=1-_bdb ;_ff :=_da *_da ;_ceb :=2*_da *_bdb ;_cb :=_bdb *_bdb ;_fa =_ff *_dbb +_ceb *_caf +_cb *_ce ;_fc =_ff *_bb +_ceb *_bfc +_cb *_fg ;return ;};func (_bag *Context )ClosePath (){if _bag ._acb {_cecb :=_dcga (_bag ._ede );
_bag ._cfd .Add1 (_cecb );_bag ._ddc .Add1 (_cecb );_bag ._abd =_bag ._ede ;};};func _dae (_ecgc [][]_d .Point )_ab .Path {var _gfdf _ab .Path ;for _ ,_gegf :=range _ecgc {var _bdee _ac .Point26_6 ;for _bebe ,_eadc :=range _gegf {_efd :=_dcga (_eadc );
if _bebe ==0{_gfdf .Start (_efd );}else {_fgc :=_efd .X -_bdee .X ;_ffcc :=_efd .Y -_bdee .Y ;if _fgc < 0{_fgc =-_fgc ;};if _ffcc < 0{_ffcc =-_ffcc ;};if _fgc +_ffcc > 8{_gfdf .Add1 (_efd );};};_bdee =_efd ;};};return _gfdf ;};func (_dde *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_dde .MoveTo (x1 ,y1 );
_dde .LineTo (x2 ,y2 )};func (_ddd *Context )Shear (x ,y float64 ){_ddd ._abdg .Shear (x ,y )};func _edabc (_cda ,_dgc uint32 ,_gacd float64 )uint8 {return uint8 (int32 (float64 (_cda )*(1.0-_gacd )+float64 (_dgc )*_gacd )>>8);};func _dcaa (_cdgd float64 )_ac .Int26_6 {return _ac .Int26_6 (_cdgd *64)};
func (_dgb *Context )SetFillRule (fillRule _bg .FillRule ){_dgb ._bbf =fillRule };func (_bab *Context )SetHexColor (x string ){_ead ,_af ,_gee ,_cdf :=_dece (x );_bab .SetRGBA255 (_ead ,_af ,_gee ,_cdf );};func (_gca *Context )SetPixel (x ,y int ){_gca ._ba .Set (x ,y ,_gca ._fb )};
func (_bgb *Context )StrokePreserve (){var _acg _ab .Painter ;if _bgb ._dcca ==nil {if _aca ,_ddaf :=_bgb ._bbc .(*solidPattern );_ddaf {_agd :=_ab .NewRGBAPainter (_bgb ._ba );_agd .SetColor (_aca ._gfga );_acg =_agd ;};};if _acg ==nil {_acg =_ababe (_bgb ._ba ,_bgb ._dcca ,_bgb ._bbc );
};_bgb .stroke (_acg );};func (_gebe stops )Less (i ,j int )bool {return _gebe [i ]._gfd < _gebe [j ]._gfd };func (_fbc *Context )Translate (x ,y float64 ){_fbc ._abdg =_fbc ._abdg .Translate (x ,y )};func _dece (_dcb string )(_ccec ,_cbfb ,_gdee ,_edb int ){_dcb =_ag .TrimPrefix (_dcb ,"\u0023");
_edb =255;if len (_dcb )==3{_bfdd :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_b .Sscanf (_dcb ,_bfdd ,&_ccec ,&_cbfb ,&_gdee );_ccec |=_ccec <<4;_cbfb |=_cbfb <<4;_gdee |=_gdee <<4;};if len (_dcb )==6{_gdfeg :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_b .Sscanf (_dcb ,_gdfeg ,&_ccec ,&_cbfb ,&_gdee );};if len (_dcb )==8{_ecge :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_dcb ,_ecge ,&_ccec ,&_cbfb ,&_gdee ,&_edb );};return ;};type patternPainter struct{_aed *_bd .RGBA ;
_afce *_bd .Alpha ;_gdfe _bg .Pattern ;};func (_ddb *Context )DrawString (s string ,face _aa .Face ,x ,y float64 ){_ddb .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_fec *Context )Push (){_cecbfb :=*_fec ;_fec ._fbd =append (_fec ._fbd ,&_cecbfb )};
func _adba (_fecf _ab .Path )[][]_d .Point {var _gcb [][]_d .Point ;var _ccb []_d .Point ;var _ebc ,_bea float64 ;for _fef :=0;_fef < len (_fecf );{switch _fecf [_fef ]{case 0:if len (_ccb )> 0{_gcb =append (_gcb ,_ccb );_ccb =nil ;};_beca :=_cfad (_fecf [_fef +1]);
_abab :=_cfad (_fecf [_fef +2]);_ccb =append (_ccb ,_d .NewPoint (_beca ,_abab ));_ebc ,_bea =_beca ,_abab ;_fef +=4;case 1:_cebd :=_cfad (_fecf [_fef +1]);_dgcb :=_cfad (_fecf [_fef +2]);_ccb =append (_ccb ,_d .NewPoint (_cebd ,_dgcb ));_ebc ,_bea =_cebd ,_dgcb ;
_fef +=4;case 2:_faec :=_cfad (_fecf [_fef +1]);_bfdb :=_cfad (_fecf [_fef +2]);_dbg :=_cfad (_fecf [_fef +3]);_fba :=_cfad (_fecf [_fef +4]);_ccfc :=_fe (_ebc ,_bea ,_faec ,_bfdb ,_dbg ,_fba );_ccb =append (_ccb ,_ccfc ...);_ebc ,_bea =_dbg ,_fba ;_fef +=6;
case 3:_ddeg :=_cfad (_fecf [_fef +1]);_gbae :=_cfad (_fecf [_fef +2]);_gefg :=_cfad (_fecf [_fef +3]);_gcg :=_cfad (_fecf [_fef +4]);_efe :=_cfad (_fecf [_fef +5]);_acdg :=_cfad (_fecf [_fef +6]);_dedd :=_bba (_ebc ,_bea ,_ddeg ,_gbae ,_gefg ,_gcg ,_efe ,_acdg );
_ccb =append (_ccb ,_dedd ...);_ebc ,_bea =_efe ,_acdg ;_fef +=8;default:_e .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_fecf );return _gcb ;};};if len (_ccb )> 0{_gcb =append (_gcb ,_ccb );
};return _gcb ;};func _fe (_agb ,_dd ,_ec ,_gg ,_bc ,_cd float64 )[]_d .Point {_bff :=(_a .Hypot (_ec -_agb ,_gg -_dd )+_a .Hypot (_bc -_ec ,_cd -_gg ));_ddg :=int (_bff +0.5);if _ddg < 4{_ddg =4;};_ed :=float64 (_ddg )-1;_gf :=make ([]_d .Point ,_ddg );
for _bga :=0;_bga < _ddg ;_bga ++{_cg :=float64 (_bga )/_ed ;_aad ,_bcd :=_aac (_agb ,_dd ,_ec ,_gg ,_bc ,_cd ,_cg );_gf [_bga ]=_d .NewPoint (_aad ,_bcd );};return _gf ;};func (_ecff *solidPattern )ColorAt (x ,y int )_f .Color {return _ecff ._gfga };func (_dba *Context )SetRGBA255 (r ,g ,b ,a int ){_dba ._fb =_f .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_dba .setFillAndStrokeColor (_dba ._fb );};func (_ccf *Context )Stroke (){_ccf .StrokePreserve ();_ccf .ClearPath ()};func (_geg *Context )MoveTo (x ,y float64 ){if _geg ._acb {_geg ._ddc .Add1 (_dcga (_geg ._ede ));};x ,y =_geg .Transform (x ,y );_fgd :=_d .NewPoint (x ,y );
_bac :=_dcga (_fgd );_geg ._cfd .Start (_bac );_geg ._ddc .Start (_bac );_geg ._ede =_fgd ;_geg ._abd =_fgd ;_geg ._acb =true ;};func (_adb *Context )DrawImageAnchored (im _bd .Image ,x ,y int ,ax ,ay float64 ){_cdge :=im .Bounds ().Size ();x -=int (ax *float64 (_cdge .X ));
y -=int (ay *float64 (_cdge .Y ));_aeef :=_db .BiLinear ;_cgc :=_adb ._abdg .Clone ().Translate (float64 (x ),float64 (y ));_agg :=_ca .Aff3 {_cgc [0],_cgc [3],_cgc [6],_cgc [1],_cgc [4],_cgc [7]};if _adb ._dcca ==nil {_aeef .Transform (_adb ._ba ,_agg ,im ,im .Bounds (),_db .Over ,nil );
}else {_aeef .Transform (_adb ._ba ,_agg ,im ,im .Bounds (),_db .Over ,&_db .Options {DstMask :_adb ._dcca ,DstMaskP :_bd .Point {}});};};var (_edc =_aeeg (_f .White );_gd =_aeeg (_f .Black ););func (_eg *Context )SetColor (c _f .Color ){_eg .setFillAndStrokeColor (c )};
func (_ebf *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_ebf .Translate (x ,y );_ebf .Scale (sx ,sy );_ebf .Translate (-x ,-y );};func (_de *Context )SetRGB (r ,g ,b float64 ){_de .SetRGBA (r ,g ,b ,1)};func (_bfg *Context )SetLineCap (lineCap _bg .LineCap ){_bfg ._ffg =lineCap };
func _fbae (_fece [][]_d .Point ,_bagc []float64 ,_afcf float64 )[][]_d .Point {var _ccef [][]_d .Point ;if len (_bagc )==0{return _fece ;};if len (_bagc )==1{_bagc =append (_bagc ,_bagc [0]);};for _ ,_gcea :=range _fece {if len (_gcea )< 2{continue ;};
_caab :=_gcea [0];_fcbe :=1;_cfdg :=0;_dfa :=0.0;if _afcf !=0{var _gbdb float64 ;for _ ,_gafb :=range _bagc {_gbdb +=_gafb ;};_afcf =_a .Mod (_afcf ,_gbdb );if _afcf < 0{_afcf +=_gbdb ;};for _fggg ,_cecbe :=range _bagc {_afcf -=_cecbe ;if _afcf < 0{_cfdg =_fggg ;
_dfa =_cecbe +_afcf ;break ;};};};var _gggf []_d .Point ;_gggf =append (_gggf ,_caab );for _fcbe < len (_gcea ){_cee :=_bagc [_cfdg ];_agde :=_gcea [_fcbe ];_fdbb :=_caab .Distance (_agde );_gfgf :=_cee -_dfa ;if _fdbb > _gfgf {_bagd :=_gfgf /_fdbb ;_fefe :=_caab .Interpolate (_agde ,_bagd );
_gggf =append (_gggf ,_fefe );if _cfdg %2==0&&len (_gggf )> 1{_ccef =append (_ccef ,_gggf );};_gggf =nil ;_gggf =append (_gggf ,_fefe );_dfa =0;_caab =_fefe ;_cfdg =(_cfdg +1)%len (_bagc );}else {_gggf =append (_gggf ,_agde );_caab =_agde ;_dfa +=_fdbb ;
_fcbe ++;};};if _cfdg %2==0&&len (_gggf )> 1{_ccef =append (_ccef ,_gggf );};};return _ccef ;};func _ggg (_bfcf ,_aadd ,_afc ,_fcg ,_cafc ,_ggcd float64 )_bg .Gradient {_ecbg :=circle {_bfcf ,_aadd ,_afc };_cbag :=circle {_fcg ,_cafc ,_ggcd };_ffda :=circle {_fcg -_bfcf ,_cafc -_aadd ,_ggcd -_afc };
_cgca :=_bcfgb (_ffda ._dfd ,_ffda ._eade ,-_ffda ._ffca ,_ffda ._dfd ,_ffda ._eade ,_ffda ._ffca );var _ece float64 ;if _cgca !=0{_ece =1.0/_cgca ;};_dgfb :=-_ecbg ._ffca ;_cbe :=&radialGradient {_daac :_ecbg ,_dade :_cbag ,_egc :_ffda ,_cbbaa :_cgca ,_abe :_ece ,_cfa :_dgfb };
return _cbe ;};func (_fcc *Context )Width ()int {return _fcc ._dcc };func _cfad (_fbb _ac .Int26_6 )float64 {const _bacc ,_deab =6,1<<6-1;if _fbb >=0{return float64 (_fbb >>_bacc )+float64 (_fbb &_deab )/64;};_fbb =-_fbb ;if _fbb >=0{return -(float64 (_fbb >>_bacc )+float64 (_fbb &_deab )/64);
};return 0;};func (_bgf *Context )StrokePattern ()_bg .Pattern {return _bgf ._bbc };func (_gbd *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_gbd .NewSubPath ();_gbd .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_a .Pi );_gbd .ClosePath ();};func (_add *Context )ResetClip (){_add ._dcca =nil };
func _ee (_bcf ,_ge ,_fgf ,_cf ,_ecb ,_cdc ,_aaa ,_eef ,_ggf float64 )(_fd ,_eb float64 ){_abb :=1-_ggf ;_be :=_abb *_abb *_abb ;_bca :=3*_abb *_abb *_ggf ;_bdbf :=3*_abb *_ggf *_ggf ;_bfd :=_ggf *_ggf *_ggf ;_fd =_be *_bcf +_bca *_fgf +_bdbf *_ecb +_bfd *_aaa ;
_eb =_be *_ge +_bca *_cf +_bdbf *_cdc +_bfd *_eef ;return ;};func (_dad *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_dad ._acb {_dad .MoveTo (x1 ,y1 );};_ccaa ,_ffc :=_dad ._abd .X ,_dad ._abd .Y ;x1 ,y1 =_dad .Transform (x1 ,y1 );x2 ,y2 =_dad .Transform (x2 ,y2 );
x3 ,y3 =_dad .Transform (x3 ,y3 );_daf :=_bba (_ccaa ,_ffc ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ae :=_dcga (_dad ._abd );for _ ,_gfg :=range _daf [1:]{_bdbd :=_dcga (_gfg );if _bdbd ==_ae {continue ;};_ae =_bdbd ;_dad ._cfd .Add1 (_bdbd );_dad ._ddc .Add1 (_bdbd );
_dad ._abd =_gfg ;};};const (_eae repeatOp =iota ;_egca ;_bcff ;_ggdg ;);func (_adg *Context )DrawCircle (x ,y ,r float64 ){_adg .NewSubPath ();_adg .DrawEllipticalArc (x ,y ,r ,r ,0,2*_a .Pi );_adg .ClosePath ();};func _ecgd (_cgee float64 )float64 {return _cgee *_a .Pi /180};
func (_gef *Context )Pop (){_dbf :=*_gef ;_ggcc :=_gef ._fbd ;_eeef :=_ggcc [len (_ggcc )-1];*_gef =*_eeef ;_gef ._cfd =_dbf ._cfd ;_gef ._ddc =_dbf ._ddc ;_gef ._ede =_dbf ._ede ;_gef ._abd =_dbf ._abd ;_gef ._acb =_dbf ._acb ;};func (_ccaf *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_egb :=_f .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ccaf ._bbc =_aeeg (_egb );};func (_gab *Context )Clip (){_gab .ClipPreserve ();_gab .ClearPath ()};func (_ege *surfacePattern )ColorAt (x ,y int )_f .Color {_afb :=_ege ._ebb .Bounds ();switch _ege ._ccaaa {case _egca :if y >=_afb .Dy (){return _f .Transparent ;
};case _bcff :if x >=_afb .Dx (){return _f .Transparent ;};case _ggdg :if x >=_afb .Dx ()||y >=_afb .Dy (){return _f .Transparent ;};};x =x %_afb .Dx ()+_afb .Min .X ;y =y %_afb .Dy ()+_afb .Min .Y ;return _ege ._ebb .At (x ,y );};func (_fgdc *linearGradient )AddColorStop (offset float64 ,color _f .Color ){_fgdc ._afg =append (_fgdc ._afg ,stop {_gfd :offset ,_gged :color });
_c .Sort (_fgdc ._afg );};func (_daa *Context )AsMask ()*_bd .Alpha {_aaaa :=_bd .NewAlpha (_daa ._ba .Bounds ());_db .Draw (_aaaa ,_daa ._ba .Bounds (),_daa ._ba ,_bd .Point {},_db .Src );return _aaaa ;};func (_aaf *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _cba =16;
for _feb :=0;_feb < _cba ;_feb ++{_bdgde :=float64 (_feb +0)/_cba ;_ebeg :=float64 (_feb +1)/_cba ;_aee :=angle1 +(angle2 -angle1 )*_bdgde ;_gge :=angle1 +(angle2 -angle1 )*_ebeg ;_adf :=x +rx *_a .Cos (_aee );_fee :=y +ry *_a .Sin (_aee );_gce :=x +rx *_a .Cos ((_aee +_gge )/2);
_cecbf :=y +ry *_a .Sin ((_aee +_gge )/2);_babc :=x +rx *_a .Cos (_gge );_bcfd :=y +ry *_a .Sin (_gge );_fad :=2*_gce -_adf /2-_babc /2;_fgdd :=2*_cecbf -_fee /2-_bcfd /2;if _feb ==0{if _aaf ._acb {_aaf .LineTo (_adf ,_fee );}else {_aaf .MoveTo (_adf ,_fee );
};};_aaf .QuadraticTo (_fad ,_fgdd ,_babc ,_bcfd );};};type stops []stop ;type radialGradient struct{_daac ,_dade ,_egc circle ;_cbbaa ,_abe float64 ;_cfa float64 ;_fdcb stops ;};func (_dega *radialGradient )ColorAt (x ,y int )_f .Color {if len (_dega ._fdcb )==0{return _f .Transparent ;
};_gdb ,_fegd :=float64 (x )+0.5-_dega ._daac ._dfd ,float64 (y )+0.5-_dega ._daac ._eade ;_abc :=_bcfgb (_gdb ,_fegd ,_dega ._daac ._ffca ,_dega ._egc ._dfd ,_dega ._egc ._eade ,_dega ._egc ._ffca );_fegb :=_bcfgb (_gdb ,_fegd ,-_dega ._daac ._ffca ,_gdb ,_fegd ,_dega ._daac ._ffca );
if _dega ._cbbaa ==0{if _abc ==0{return _f .Transparent ;};_cfb :=0.5*_fegb /_abc ;if _cfb *_dega ._egc ._ffca >=_dega ._cfa {return _cbd (_cfb ,_dega ._fdcb );};return _f .Transparent ;};_addd :=_bcfgb (_abc ,_dega ._cbbaa ,0,_abc ,-_fegb ,0);if _addd >=0{_fgfc :=_a .Sqrt (_addd );
_dec :=(_abc +_fgfc )*_dega ._abe ;_efc :=(_abc -_fgfc )*_dega ._abe ;if _dec *_dega ._egc ._ffca >=_dega ._cfa {return _cbd (_dec ,_dega ._fdcb );}else if _efc *_dega ._egc ._ffca >=_dega ._cfa {return _cbd (_efc ,_dega ._fdcb );};};return _f .Transparent ;
};func (_cece *Context )InvertMask (){if _cece ._dcca ==nil {_cece ._dcca =_bd .NewAlpha (_cece ._ba .Bounds ());}else {for _cadg ,_bcg :=range _cece ._dcca .Pix {_cece ._dcca .Pix [_cadg ]=255-_bcg ;};};};func (_ebe *Context )SetMask (mask *_bd .Alpha )error {if mask .Bounds ().Size ()!=_ebe ._ba .Bounds ().Size (){return _cc .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_ebe ._dcca =mask ;return nil ;};func (_fag *Context )drawRegularPolygon (_ced int ,_afa ,_fdde ,_faga ,_bdc float64 ){_fga :=2*_a .Pi /float64 (_ced );_bdc -=_a .Pi /2;if _ced %2==0{_bdc +=_fga /2;};_fag .NewSubPath ();for _bbfg :=0;_bbfg < _ced ;_bbfg ++{_edec :=_bdc +_fga *float64 (_bbfg );
_fag .LineTo (_afa +_faga *_a .Cos (_edec ),_fdde +_faga *_a .Sin (_edec ));};_fag .ClosePath ();};func (_cgfb *Context )Scale (x ,y float64 ){_cgfb ._abdg =_cgfb ._abdg .Scale (x ,y )};func NewContext (width ,height int )*Context {return NewContextForRGBA (_bd .NewRGBA (_bd .Rect (0,0,width ,height )));
};func (_fbdg *Context )SetRGBA (r ,g ,b ,a float64 ){_fbdg ._fb =_f .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_fbdg .setFillAndStrokeColor (_fbdg ._fb );};func (_bffg *patternPainter )Paint (ss []_ab .Span ,done bool ){_bce :=_bffg ._aed .Bounds ();
for _ ,_cecg :=range ss {if _cecg .Y < _bce .Min .Y {continue ;};if _cecg .Y >=_bce .Max .Y {return ;};if _cecg .X0 < _bce .Min .X {_cecg .X0 =_bce .Min .X ;};if _cecg .X1 > _bce .Max .X {_cecg .X1 =_bce .Max .X ;};if _cecg .X0 >=_cecg .X1 {continue ;};
const _faf =1<<16-1;_fccg :=_cecg .Y -_bffg ._aed .Rect .Min .Y ;_gfaf :=_cecg .X0 -_bffg ._aed .Rect .Min .X ;_dgd :=(_cecg .Y -_bffg ._aed .Rect .Min .Y )*_bffg ._aed .Stride +(_cecg .X0 -_bffg ._aed .Rect .Min .X )*4;_gdc :=_dgd +(_cecg .X1 -_cecg .X0 )*4;
for _aaag ,_addf :=_dgd ,_gfaf ;_aaag < _gdc ;_aaag ,_addf =_aaag +4,_addf +1{_faa :=_cecg .Alpha ;if _bffg ._afce !=nil {_faa =_faa *uint32 (_bffg ._afce .AlphaAt (_addf ,_fccg ).A )/255;if _faa ==0{continue ;};};_bdba :=_bffg ._gdfe .ColorAt (_addf ,_fccg );
_ada ,_abdgd ,_gddb ,_fbcc :=_bdba .RGBA ();_ecgca :=uint32 (_bffg ._aed .Pix [_aaag +0]);_edf :=uint32 (_bffg ._aed .Pix [_aaag +1]);_dfc :=uint32 (_bffg ._aed .Pix [_aaag +2]);_fggd :=uint32 (_bffg ._aed .Pix [_aaag +3]);_accg :=(_faf -(_fbcc *_faa /_faf ))*0x101;
_bffg ._aed .Pix [_aaag +0]=uint8 ((_ecgca *_accg +_ada *_faa )/_faf >>8);_bffg ._aed .Pix [_aaag +1]=uint8 ((_edf *_accg +_abdgd *_faa )/_faf >>8);_bffg ._aed .Pix [_aaag +2]=uint8 ((_dfc *_accg +_gddb *_faa )/_faf >>8);_bffg ._aed .Pix [_aaag +3]=uint8 ((_fggd *_accg +_fbcc *_faa )/_faf >>8);
};};};func (_fdc *Context )NewSubPath (){if _fdc ._acb {_fdc ._ddc .Add1 (_dcga (_fdc ._ede ));};_fdc ._acb =false ;};func (_aba stops )Len ()int {return len (_aba )};func (_dg *Context )Height ()int {return _dg ._ggd };func _cbd (_adfc float64 ,_ggca stops )_f .Color {if _adfc <=0.0||len (_ggca )==1{return _ggca [0]._gged ;
};_ebgg :=_ggca [len (_ggca )-1];if _adfc >=_ebgg ._gfd {return _ebgg ._gged ;};for _cbee ,_ggdf :=range _ggca [1:]{if _adfc < _ggdf ._gfd {_adfc =(_adfc -_ggca [_cbee ]._gfd )/(_ggdf ._gfd -_ggca [_cbee ]._gfd );return _aaaaa (_ggca [_cbee ]._gged ,_ggdf ._gged ,_adfc );
};};return _ebgg ._gged ;};func _bcfgb (_acfc ,_ffd ,_dgad ,_ddgf ,_cef ,_abef float64 )float64 {return _acfc *_ddgf +_ffd *_cef +_dgad *_abef ;};func _aff (_cbf _bd .Image )*_bd .RGBA {_cdgc :=_cbf .Bounds ();_fcgb :=_bd .NewRGBA (_cdgc );_bf .Draw (_fcgb ,_cdgc ,_cbf ,_cdgc .Min ,_bf .Src );
return _fcgb ;};type solidPattern struct{_gfga _f .Color };func NewContextForImage (im _bd .Image )*Context {return NewContextForRGBA (_aff (im ))};func (_ggbc *Context )MeasureString (s string ,face _aa .Face )(_gfe ,_ecg float64 ){_cce :=&_aa .Drawer {Face :face };
_aga :=_cce .MeasureString (s );return float64 (_aga >>6),_ggbc ._dcd .Tf .Size ;};func (_afd *Context )stroke (_eca _ab .Painter ){_dcdc :=_afd ._cfd ;if len (_afd ._acf )> 0{_dcdc =_dab (_dcdc ,_afd ._acf ,_afd ._ddcf );}else {_dcdc =_dae (_adba (_dcdc ));
};_gc :=_afd ._dbe ;_gc .UseNonZeroWinding =true ;_gc .Clear ();_gfb :=(_afd ._abdg .ScalingFactorX ()+_afd ._abdg .ScalingFactorY ())/2;_gc .AddStroke (_dcdc ,_dcaa (_afd ._bdgd *_gfb ),_afd .capper (),_afd .joiner ());_gc .Rasterize (_eca );};type stop struct{_gfd float64 ;
_gged _f .Color ;};func (_dce *Context )SetDashOffset (offset float64 ){_dce ._ddcf =offset };func (_gb *Context )fill (_cbc _ab .Painter ){_dcgb :=_gb ._ddc ;if _gb ._acb {_dcgb =make (_ab .Path ,len (_gb ._ddc ));copy (_dcgb ,_gb ._ddc );_dcgb .Add1 (_dcga (_gb ._ede ));
};_fed :=_gb ._dbe ;_fed .UseNonZeroWinding =_gb ._bbf ==_bg .FillRuleWinding ;_fed .Clear ();_fed .AddPath (_dcgb );_fed .Rasterize (_cbc );};func (_ebg *Context )capper ()_ab .Capper {switch _ebg ._ffg {case _bg .LineCapButt :return _ab .ButtCapper ;
case _bg .LineCapRound :return _ab .RoundCapper ;case _bg .LineCapSquare :return _ab .SquareCapper ;};return nil ;};func (_bcc *Context )Image ()_bd .Image {return _bcc ._ba };func (_ga *Context )ClipPreserve (){_bcfg :=_bd .NewAlpha (_bd .Rect (0,0,_ga ._dcc ,_ga ._ggd ));
_ade :=_ab .NewAlphaOverPainter (_bcfg );_ga .fill (_ade );if _ga ._dcca ==nil {_ga ._dcca =_bcfg ;}else {_fbf :=_bd .NewAlpha (_bd .Rect (0,0,_ga ._dcc ,_ga ._ggd ));_db .DrawMask (_fbf ,_fbf .Bounds (),_bcfg ,_bd .Point {},_ga ._dcca ,_bd .Point {},_db .Over );
_ga ._dcca =_fbf ;};};func _ecfc (_cgg ,_gefc ,_egfc ,_bec float64 )_bg .Gradient {_ebag :=&linearGradient {_begb :_cgg ,_aafe :_gefc ,_cga :_egfc ,_beeg :_bec };return _ebag ;};func (_gbc *Context )FillPreserve (){var _caa _ab .Painter ;if _gbc ._dcca ==nil {if _bgbe ,_ecf :=_gbc ._gde .(*solidPattern );
_ecf {_gdf :=_ab .NewRGBAPainter (_gbc ._ba );_gdf .SetColor (_bgbe ._gfga );_caa =_gdf ;};};if _caa ==nil {_caa =_ababe (_gbc ._ba ,_gbc ._dcca ,_gbc ._gde );};_gbc .fill (_caa );};func (_aae *Context )SetStrokeStyle (pattern _bg .Pattern ){_aae ._bbc =pattern };
func (_age *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_ggbb ,_afdf ,_caaf ,_gaf :=x ,x +r ,x +w -r ,x +w ;_ded ,_gbg ,_fdb ,_df :=y ,y +r ,y +h -r ,y +h ;_age .NewSubPath ();_age .MoveTo (_afdf ,_ded );_age .LineTo (_caaf ,_ded );_age .DrawArc (_caaf ,_gbg ,r ,_ecgd (270),_ecgd (360));
_age .LineTo (_gaf ,_fdb );_age .DrawArc (_caaf ,_fdb ,r ,_ecgd (0),_ecgd (90));_age .LineTo (_afdf ,_df );_age .DrawArc (_afdf ,_fdb ,r ,_ecgd (90),_ecgd (180));_age .LineTo (_ggbb ,_gbg );_age .DrawArc (_afdf ,_gbg ,r ,_ecgd (180),_ecgd (270));_age .ClosePath ();
};func (_fbg *Context )Matrix ()_d .Matrix {return _fbg ._abdg };func _aaaaa (_edcg ,_fegc _f .Color ,_cfae float64 )_f .Color {_aeb ,_dea ,_ageg ,_gedc :=_edcg .RGBA ();_edab ,_eea ,_ddde ,_fcgf :=_fegc .RGBA ();return _f .RGBA {_edabc (_aeb ,_edab ,_cfae ),_edabc (_dea ,_eea ,_cfae ),_edabc (_ageg ,_ddde ,_cfae ),_edabc (_gedc ,_fcgf ,_cfae )};
};type circle struct{_dfd ,_eade ,_ffca float64 };func (_gfa *linearGradient )ColorAt (x ,y int )_f .Color {if len (_gfa ._afg )==0{return _f .Transparent ;};_bge ,_bbg :=float64 (x ),float64 (y );_deg ,_caff ,_eba ,_fccd :=_gfa ._begb ,_gfa ._aafe ,_gfa ._cga ,_gfa ._beeg ;
_ebac ,_gddd :=_eba -_deg ,_fccd -_caff ;if _gddd ==0&&_ebac !=0{return _cbd ((_bge -_deg )/_ebac ,_gfa ._afg );};if _ebac ==0&&_gddd !=0{return _cbd ((_bbg -_caff )/_gddd ,_gfa ._afg );};_fddea :=_ebac *(_bge -_deg )+_gddd *(_bbg -_caff );if _fddea < 0{return _gfa ._afg [0]._gged ;
};_dbd :=_a .Hypot (_ebac ,_gddd );_cdgf :=((_bge -_deg )*-_gddd +(_bbg -_caff )*_ebac )/(_dbd *_dbd );_fddd ,_feca :=_deg +_cdgf *-_gddd ,_caff +_cdgf *_ebac ;_dgba :=_a .Hypot (_bge -_fddd ,_bbg -_feca )/_dbd ;return _cbd (_dgba ,_gfa ._afg );};func NewContextForRGBA (im *_bd .RGBA )*Context {_cag :=im .Bounds ().Size ().X ;
_bdgb :=im .Bounds ().Size ().Y ;return &Context {_dcc :_cag ,_ggd :_bdgb ,_dbe :_ab .NewRasterizer (_cag ,_bdgb ),_ba :im ,_fb :_f .Transparent ,_gde :_edc ,_bbc :_gd ,_bdgd :1,_bbf :_bg .FillRuleWinding ,_abdg :_d .IdentityMatrix (),_dcd :_bg .NewTextState ()};
};func (_fcf *Context )Fill (){_fcf .FillPreserve ();_fcf .ClearPath ()};func (_dcg *Context )SetDash (dashes ...float64 ){_dcg ._acf =dashes };func (_ccac *Context )SetLineWidth (lineWidth float64 ){_ccac ._bdgd =lineWidth };func (_dca *Context )SetMatrix (m _d .Matrix ){_dca ._abdg =m };
func _dab (_cge _ab .Path ,_cbdg []float64 ,_acbf float64 )_ab .Path {return _dae (_fbae (_adba (_cge ),_cbdg ,_acbf ));};func (_dgbd *Context )ClearPath (){_dgbd ._cfd .Clear ();_dgbd ._ddc .Clear ();_dgbd ._acb =false };func (_cgf *Context )drawString (_gaa string ,_gfc _aa .Face ,_gac ,_bdcg float64 ){_bee :=&_aa .Drawer {Src :_bd .NewUniform (_cgf ._fb ),Face :_gfc ,Dot :_dcga (_d .NewPoint (_gac ,_bdcg ))};
_dac :=rune (-1);for _ ,_fcca :=range _gaa {if _dac >=0{_bee .Dot .X +=_bee .Face .Kern (_dac ,_fcca );};_cdd ,_acd ,_ccacd ,_gdd ,_acc :=_bee .Face .Glyph (_bee .Dot ,_fcca );if !_acc {continue ;};_feee :=_cdd .Sub (_cdd .Min );_cgcd :=_bd .NewRGBA (_feee );
_db .DrawMask (_cgcd ,_feee ,_bee .Src ,_bd .Point {},_acd ,_ccacd ,_db .Over );var _ggc *_db .Options ;if _cgf ._dcca !=nil {_ggc =&_db .Options {DstMask :_cgf ._dcca ,DstMaskP :_bd .Point {}};};_gba :=_cgf ._abdg .Clone ().Translate (float64 (_cdd .Min .X ),float64 (_cdd .Min .Y ));
_eda :=_ca .Aff3 {_gba [0],_gba [3],_gba [6],_gba [1],_gba [4],_gba [7]};_db .BiLinear .Transform (_cgf ._ba ,_eda ,_cgcd ,_feee ,_db .Over ,_ggc );_bee .Dot .X +=_gdd ;_dac =_fcca ;};};func (_egf *Context )joiner ()_ab .Joiner {switch _egf ._cbb {case _bg .LineJoinBevel :return _ab .BevelJoiner ;
case _bg .LineJoinRound :return _ab .RoundJoiner ;};return nil ;};func (_beb *Context )Clear (){_gea :=_bd .NewUniform (_beb ._fb );_db .Draw (_beb ._ba ,_beb ._ba .Bounds (),_gea ,_bd .Point {},_db .Src );};func (_eaa *Context )LineWidth ()float64 {return _eaa ._bdgd };
func (_bde *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_bde .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func (_bfdf *Context )setFillAndStrokeColor (_bcae _f .Color ){_bfdf ._fb =_bcae ;_bfdf ._gde =_aeeg (_bcae );_bfdf ._bbc =_aeeg (_bcae );
};func (_deb *Context )DrawRectangle (x ,y ,w ,h float64 ){_deb .NewSubPath ();_deb .MoveTo (x ,y );_deb .LineTo (x +w ,y );_deb .LineTo (x +w ,y +h );_deb .LineTo (x ,y +h );_deb .ClosePath ();};func (_dda *Context )LineTo (x ,y float64 ){if !_dda ._acb {_dda .MoveTo (x ,y );
}else {x ,y =_dda .Transform (x ,y );_dbc :=_d .NewPoint (x ,y );_ggfb :=_dcga (_dbc );_dda ._cfd .Add1 (_ggfb );_dda ._ddc .Add1 (_ggfb );_dda ._abd =_dbc ;};};func (_fbdd *Context )SetLineJoin (lineJoin _bg .LineJoin ){_fbdd ._cbb =lineJoin };func (_dga *Context )DrawPoint (x ,y ,r float64 ){_dga .Push ();
_ggfbb ,_bbd :=_dga .Transform (x ,y );_dga .Identity ();_dga .DrawCircle (_ggfbb ,_bbd ,r );_dga .Pop ();};func (_fgg stops )Swap (i ,j int ){_fgg [i ],_fgg [j ]=_fgg [j ],_fgg [i ]};type repeatOp int ;func (_cdb *Context )ShearAbout (sx ,sy ,x ,y float64 ){_cdb .Translate (x ,y );
_cdb .Shear (sx ,sy );_cdb .Translate (-x ,-y );};func _aeeg (_fca _f .Color )_bg .Pattern {return &solidPattern {_gfga :_fca }};func (_bed *Context )DrawStringAnchored (s string ,face _aa .Face ,x ,y ,ax ,ay float64 ){_ddee ,_geb :=_bed .MeasureString (s ,face );
_bed .drawString (s ,face ,x -ax *_ddee ,y +ay *_geb );};func _bba (_bdg ,_cec ,_ggb ,_cdg ,_ea ,_ddgd ,_dc ,_fdd float64 )[]_d .Point {_ef :=(_a .Hypot (_ggb -_bdg ,_cdg -_cec )+_a .Hypot (_ea -_ggb ,_ddgd -_cdg )+_a .Hypot (_dc -_ea ,_fdd -_ddgd ));_fab :=int (_ef +0.5);
if _fab < 4{_fab =4;};_fce :=float64 (_fab )-1;_ffe :=make ([]_d .Point ,_fab );for _cad :=0;_cad < _fab ;_cad ++{_cca :=float64 (_cad )/_fce ;_cac ,_bbb :=_ee (_bdg ,_cec ,_ggb ,_cdg ,_ea ,_ddgd ,_dc ,_fdd ,_cca );_ffe [_cad ]=_d .NewPoint (_cac ,_bbb );
};return _ffe ;};func (_fcb *Context )FillPattern ()_bg .Pattern {return _fcb ._gde };func (_ged *Context )Identity (){_ged ._abdg =_d .IdentityMatrix ()};func (_bdd *Context )SetFillStyle (pattern _bg .Pattern ){if _cfdf ,_fgfa :=pattern .(*solidPattern );
_fgfa {_bdd ._fb =_cfdf ._gfga ;};_bdd ._gde =pattern ;};func (_gff *Context )SetRGB255 (r ,g ,b int ){_gff .SetRGBA255 (r ,g ,b ,255)};func (_cbba *Context )Rotate (angle float64 ){_cbba ._abdg =_cbba ._abdg .Rotate (angle )};func _dcga (_fada _d .Point )_ac .Point26_6 {return _ac .Point26_6 {X :_dcaa (_fada .X ),Y :_dcaa (_fada .Y )}};
func _bccg (_aggf _bd .Image ,_agga repeatOp )_bg .Pattern {return &surfacePattern {_ebb :_aggf ,_ccaaa :_agga };};type surfacePattern struct{_ebb _bd .Image ;_ccaaa repeatOp ;};func (_bfa *Context )SetFillRGBA (r ,g ,b ,a float64 ){_edcc :=_f .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_bfa ._fb =_edcc ;_bfa ._gde =_aeeg (_edcc );};func _ababe (_bead *_bd .RGBA ,_fabe *_bd .Alpha ,_ecee _bg .Pattern )*patternPainter {return &patternPainter {_bead ,_fabe ,_ecee };};func (_fabg *Context )TextState ()*_bg .TextState {return &_fabg ._dcd };
type linearGradient struct{_begb ,_aafe ,_cga ,_beeg float64 ;_afg stops ;};func (_gbe *Context )RotateAbout (angle ,x ,y float64 ){_gbe .Translate (x ,y );_gbe .Rotate (angle );_gbe .Translate (-x ,-y );};func (_faba *radialGradient )AddColorStop (offset float64 ,color _f .Color ){_faba ._fdcb =append (_faba ._fdcb ,stop {_gfd :offset ,_gged :color });
_c .Sort (_faba ._fdcb );};func (_eee *Context )DrawImage (im _bd .Image ,x ,y int ){_eee .DrawImageAnchored (im ,x ,y ,0,0)};type Context struct{_dcc int ;_ggd int ;_dbe *_ab .Rasterizer ;_ba *_bd .RGBA ;_dcca *_bd .Alpha ;_fb _f .Color ;_gde _bg .Pattern ;
_bbc _bg .Pattern ;_cfd _ab .Path ;_ddc _ab .Path ;_ede _d .Point ;_abd _d .Point ;_acb bool ;_acf []float64 ;_ddcf float64 ;_bdgd float64 ;_ffg _bg .LineCap ;_cbb _bg .LineJoin ;_bbf _bg .FillRule ;_abdg _d .Matrix ;_dcd _bg .TextState ;_fbd []*Context ;
};func (_dgf *Context )Transform (x ,y float64 )(_ffea ,_fcbf float64 ){return _dgf ._abdg .Transform (x ,y );};