//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_bf "errors";_cd "github.com/golang/freetype/truetype";_g "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/internal/textencoding";_bb "github.com/unidoc/unipdf/v3/internal/transform";_f "github.com/unidoc/unipdf/v3/model";
_d "golang.org/x/image/font";_cb "image";_c "image/color";);type Context interface{Push ();Pop ();Matrix ()_bb .Matrix ;SetMatrix (_gg _bb .Matrix );Translate (_a ,_fd float64 );Scale (_ca ,_bfd float64 );Rotate (_cda float64 );MoveTo (_gc ,_bc float64 );
LineTo (_ad ,_cdf float64 );CubicTo (_ae ,_fg ,_eb ,_cdb ,_be ,_dg float64 );QuadraticTo (_bee ,_bea ,_af ,_cag float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_dge float64 );SetLineCap (_afc LineCap );
SetLineJoin (_ec LineJoin );SetDash (_ab ...float64 );SetDashOffset (_ga float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_ag ,_fa ,_cbd ,_fe float64 );SetFillRGBA (_agf ,_fcd ,_cf ,_db float64 );SetFillStyle (_df Pattern );SetFillRule (_fab FillRule );
SetStrokeRGBA (_dgd ,_ed ,_bbf ,_dgc float64 );SetStrokeStyle (_gb Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ff string ,_gf _d .Face ,_ac ,_gag float64 );MeasureString (_ggd string ,_fdf _d .Face )(_gca ,_edb float64 );
DrawRectangle (_gd ,_ebg ,_ea ,_ggc float64 );DrawImage (_de _cb .Image ,_fga ,_aa int );DrawImageAnchored (_def _cb .Image ,_da ,_cbg int ,_gfa ,_bead float64 );Height ()int ;Width ()int ;};func NewTextFont (font *_f .PdfFont ,size float64 )(*TextFont ,error ){_ebd :=font .FontDescriptor ();
if _ebd ==nil {return nil ,_bf .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_bbff ,_aad :=_g .GetStream (_ebd .FontFile2 );if !_aad {return nil ,_bf .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_ddf ,_afg :=_g .DecodeStream (_bbff );if _afg !=nil {return nil ,_afg ;};_fdb ,_afg :=_cd .Parse (_ddf );if _afg !=nil {return nil ,_afg ;};return &TextFont {Font :font ,Size :size ,_aee :_fdb },nil ;};func (_dffc *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_dffc .Tm =_bb .NewMatrix (a ,b ,c ,d ,e ,f );
_dffc .Tlm =_dffc .Tm .Clone ();};func (_adc *TextFont )WithSize (size float64 ,originalFont *_f .PdfFont )*TextFont {return &TextFont {Font :_adc .Font ,Size :size ,_aee :_adc ._aee ,_abd :originalFont };};type Pattern interface{ColorAt (_dd ,_fc int )_c .Color ;
};type LineJoin int ;type LineCap int ;func (_edbf *TextState )Translate (tx ,ty float64 ){_edbf .Tm =_edbf .Tm .Mult (_bb .TranslationMatrix (tx ,ty ));};func (_faf *TextFont )GetCharMetrics (code _e .CharCode )(float64 ,float64 ,bool ){if _aeg ,_bd :=_faf .Font .GetCharMetrics (code );
_bd &&_aeg .Wx !=0{return _aeg .Wx ,_aeg .Wy ,_bd ;};if _faf ._abd ==nil {return 0,0,false ;};_dff ,_dc :=_faf ._abd .GetCharMetrics (code );return _dff .Wx ,_dff .Wy ,_dc &&_dff .Wx !=0;};func (_bfcd *TextState )ProcTf (font *TextFont ){_bfcd .Tf =font };
type Gradient interface{Pattern ;AddColorStop (_bbc float64 ,_ba _c .Color );};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _bb .Matrix ;Tlm _bb .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};
func NewTextState ()TextState {return TextState {Th :100,Tm :_bb .IdentityMatrix (),Tlm :_bb .IdentityMatrix ()};};func (_dbg *TextState )ProcTj (data []byte ,ctx Context ){_eg :=_dbg .Tf .Size ;_bfdg :=_dbg .Th /100.0;_gcg :=_dbg .GlobalScale ;_fae :=_bb .NewMatrix (_eg *_bfdg ,0,0,_eg ,0,_dbg .Ts );
_dcg :=ctx .Matrix ();_aea :=_dcg .Clone ().Mult (_dbg .Tm .Clone ().Mult (_fae )).ScalingFactorY ();_fcdf :=_dbg .Tf .NewFace (_aea );_aeb :=_dbg .Tf .BytesToCharcodes (data );_aac :=_dbg .Tf .CharcodesToUnicode (_aeb );for _bfc ,_bcb :=range _aac {if _bcb =='\x00'{continue ;
};_cad :=_dcg .Clone ().Mult (_dbg .Tm .Clone ().Mult (_fae ));_dabb :=_cad .ScalingFactorY ();_cad =_cad .Scale (1/_dabb ,-1/_dabb );if _dbg .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_cad );ctx .DrawString (string (_bcb ),_fcdf ,0,0);ctx .SetMatrix (_dcg );
};_bce :=0.0;if _bcb ==' '{_bce =_dbg .Tw ;};_ffe ,_ ,_aba :=_dbg .Tf .GetRuneMetrics (_bcb );if !_aba &&_bfc < len (_aeb ){_ffe ,_ ,_aba =_dbg .Tf .GetCharMetrics (_aeb [_bfc ]);};if _aba {_ffe =_ffe *0.001*_eg ;}else {_ffe ,_ =ctx .MeasureString (string (_bcb ),_fcdf );
_ffe =_ffe /_gcg ;};_fdd :=(_ffe +_dbg .Tc +_bce )*_bfdg ;_dbg .Tm =_dbg .Tm .Mult (_bb .TranslationMatrix (_fdd ,0));};};type TextRenderingMode int ;func (_fcc *TextState )ProcQ (data []byte ,ctx Context ){_fcc .ProcTStar ();_fcc .ProcTj (data ,ctx )};
func (_bag *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bag .Tw =aw ;_bag .Tc =ac ;_bag .ProcQ (data ,ctx );};func (_ce *TextFont )NewFace (size float64 )_d .Face {return _cd .NewFace (_ce ._aee ,&_cd .Options {Size :size });};const (TextRenderingModeFill TextRenderingMode =iota ;
TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_acf *TextState )ProcTStar (){_acf .ProcTd (0,-_acf .Tl )};
const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_cg ,_aag :=_f .NewPdfFontFromTTFFile (filePath );if _aag !=nil {return nil ,_aag ;};return NewTextFont (_cg ,size );
};type FillRule int ;func (_eaa *TextState )ProcTD (tx ,ty float64 ){_eaa .Tl =-ty ;_eaa .ProcTd (tx ,ty )};func (_gff *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _fcg ,_dab :=_gff .Font .GetRuneMetrics (r );_dab &&_fcg .Wx !=0{return _fcg .Wx ,_fcg .Wy ,_dab ;
};if _gff ._abd ==nil {return 0,0,false ;};_cc ,_fabd :=_gff ._abd .GetRuneMetrics (r );return _cc .Wx ,_cc .Wy ,_fabd &&_cc .Wx !=0;};func (_cgb *TextState )Reset (){_cgb .Tm =_bb .IdentityMatrix ();_cgb .Tlm =_bb .IdentityMatrix ()};func (_bg *TextState )ProcTd (tx ,ty float64 ){_bg .Tlm .Concat (_bb .TranslationMatrix (tx ,ty ));
_bg .Tm =_bg .Tlm .Clone ();};type TextFont struct{Font *_f .PdfFont ;Size float64 ;_aee *_cd .Font ;_abd *_f .PdfFont ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_ada *TextFont )CharcodesToUnicode (charcodes []_e .CharCode )[]rune {if _ada ._abd !=nil {return _ada ._abd .CharcodesToUnicode (charcodes );
};return _ada .Font .CharcodesToUnicode (charcodes );};func (_gfae *TextFont )BytesToCharcodes (data []byte )[]_e .CharCode {if _gfae ._abd !=nil {return _gfae ._abd .BytesToCharcodes (data );};return _gfae .Font .BytesToCharcodes (data );};