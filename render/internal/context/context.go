//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_dd "github.com/golang/freetype/truetype";_b "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/internal/textencoding";_f "github.com/unidoc/unipdf/v3/internal/transform";_dc "github.com/unidoc/unipdf/v3/model";
_gg "golang.org/x/image/font";_gf "image";_a "image/color";);type TextRenderingMode int ;func (_ecc *TextState )ProcTj (data []byte ,ctx Context ){_gff :=_ecc .Tf .Size ;_ecf :=_ecc .Th /100.0;_age :=_ecc .GlobalScale ;_gdf :=_f .NewMatrix (_gff *_ecf ,0,0,_gff ,0,_ecc .Ts );
_cgf :=ctx .Matrix ();_dgg :=_cgf .Clone ().Mult (_ecc .Tm .Clone ().Mult (_gdf )).ScalingFactorY ();_eaa :=_ecc .Tf .NewFace (_dgg );_ef :=_ecc .Tf .BytesToCharcodes (data );_fae :=_ecc .Tf .CharcodesToUnicode (_ef );for _edfc ,_bbd :=range _fae {if _bbd =='\x00'{continue ;
};_ffd :=_cgf .Clone ().Mult (_ecc .Tm .Clone ().Mult (_gdf ));_gfe :=_ffd .ScalingFactorY ();_ffd =_ffd .Scale (1/_gfe ,-1/_gfe );if _ecc .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_ffd );ctx .DrawString (string (_bbd ),_eaa ,0,0);ctx .SetMatrix (_cgf );
};_cb :=0.0;if _bbd ==' '{_cb =_ecc .Tw ;};_ega ,_ ,_ecef :=_ecc .Tf .GetRuneMetrics (_bbd );if !_ecef &&_edfc < len (_ef ){_ega ,_ ,_ecef =_ecc .Tf .GetCharMetrics (_ef [_edfc ]);};if _ecef {_ega =_ega *0.001*_gff ;}else {_ega ,_ =ctx .MeasureString (string (_bbd ),_eaa );
_ega =_ega /_age ;};_aef :=(_ega +_ecc .Tc +_cb )*_ecf ;_ecc .Tm =_ecc .Tm .Mult (_f .TranslationMatrix (_aef ,0));};};func NewTextFont (font *_dc .PdfFont ,size float64 )(*TextFont ,error ){_dbe :=font .FontDescriptor ();if _dbe ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_fa ,_abga :=_b .GetStream (_dbe .FontFile2 );if !_abga {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_aca ,_dbc :=_b .DecodeStream (_fa );
if _dbc !=nil {return nil ,_dbc ;};_abgf ,_dbc :=_dd .Parse (_aca );if _dbc !=nil {return nil ,_dbc ;};return &TextFont {Font :font ,Size :size ,_bc :_abgf },nil ;};func (_fbgb *TextFont )WithSize (size float64 ,originalFont *_dc .PdfFont )*TextFont {return &TextFont {Font :_fbgb .Font ,Size :size ,_bc :_fbgb ._bc ,_bag :originalFont };
};func (_bcg *TextState )ProcTD (tx ,ty float64 ){_bcg .Tl =-ty ;_bcg .ProcTd (tx ,ty )};type LineCap int ;func (_geg *TextState )ProcTStar (){_geg .ProcTd (0,-_geg .Tl )};func (_cbc *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cbc .Tw =aw ;
_cbc .Tc =ac ;_cbc .ProcQ (data ,ctx );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bgb ,_edf :=_dc .NewPdfFontFromTTFFile (filePath );if _edf !=nil {return nil ,_edf ;};return NewTextFont (_bgb ,size );};func (_gdfa *TextState )Translate (tx ,ty float64 ){_gdfa .Tm =_gdfa .Tm .Mult (_f .TranslationMatrix (tx ,ty ));
};type TextFont struct{Font *_dc .PdfFont ;Size float64 ;_bc *_dd .Font ;_bag *_dc .PdfFont ;};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_fdc *TextState )ProcTd (tx ,ty float64 ){_fdc .Tlm .Concat (_f .TranslationMatrix (tx ,ty ));
_fdc .Tm =_fdc .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _f .Matrix ;Tlm _f .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_aggef *TextState )ProcQ (data []byte ,ctx Context ){_aggef .ProcTStar ();
_aggef .ProcTj (data ,ctx );};func (_cd *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _cge ,_fcb :=_cd .Font .GetRuneMetrics (r );_fcb &&_cge .Wx !=0{return _cge .Wx ,_cge .Wy ,_fcb ;};if _cd ._bag ==nil {return 0,0,false ;};_bbc ,_feb :=_cd ._bag .GetRuneMetrics (r );
return _bbc .Wx ,_bbc .Wy ,_feb &&_bbc .Wx !=0;};func (_fe *TextFont )CharcodesToUnicode (charcodes []_d .CharCode )[]rune {if _fe ._bag !=nil {return _fe ._bag .CharcodesToUnicode (charcodes );};return _fe .Font .CharcodesToUnicode (charcodes );};type FillRule int ;
func (_bef *TextState )Reset (){_bef .Tm =_f .IdentityMatrix ();_bef .Tlm =_f .IdentityMatrix ()};func (_egf *TextState )ProcTf (font *TextFont ){_egf .Tf =font };func (_dgf *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_dgf .Tm =_f .NewMatrix (a ,b ,c ,d ,e ,f );
_dgf .Tlm =_dgf .Tm .Clone ();};type Pattern interface{ColorAt (_ab ,_ddf int )_a .Color ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type LineJoin int ;func NewTextState ()TextState {return TextState {Th :100,Tm :_f .IdentityMatrix (),Tlm :_f .IdentityMatrix ()};
};type Gradient interface{Pattern ;AddColorStop (_bd float64 ,_e _a .Color );};func (_ffg *TextFont )GetCharMetrics (code _d .CharCode )(float64 ,float64 ,bool ){if _ddfd ,_gaf :=_ffg .Font .GetCharMetrics (code );_gaf &&_ddfd .Wx !=0{return _ddfd .Wx ,_ddfd .Wy ,_gaf ;
};if _ffg ._bag ==nil {return 0,0,false ;};_fgg ,_dbec :=_ffg ._bag .GetCharMetrics (code );return _fgg .Wx ,_fgg .Wy ,_dbec &&_fgg .Wx !=0;};func (_cfe *TextFont )NewFace (size float64 )_gg .Face {return _dd .NewFace (_cfe ._bc ,&_dd .Options {Size :size });
};func (_be *TextFont )BytesToCharcodes (data []byte )[]_d .CharCode {if _be ._bag !=nil {return _be ._bag .BytesToCharcodes (data );};return _be .Font .BytesToCharcodes (data );};type Context interface{Push ();Pop ();Matrix ()_f .Matrix ;SetMatrix (_ad _f .Matrix );
Translate (_ba ,_cc float64 );Scale (_gb ,_fb float64 );Rotate (_fd float64 );MoveTo (_df ,_ag float64 );LineTo (_gge ,_gc float64 );CubicTo (_aa ,_dcc ,_ea ,_ca ,_fg ,_cg float64 );QuadraticTo (_ddb ,_ff ,_agg ,_da float64 );NewSubPath ();ClosePath ();
ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ec float64 );SetLineCap (_ed LineCap );SetLineJoin (_gd LineJoin );SetDash (_ge ...float64 );SetDashOffset (_edb float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();
SetRGBA (_fc ,_gbg ,_abd ,_ece float64 );SetFillRGBA (_fbg ,_gbf ,_ffa ,_bg float64 );SetFillStyle (_ae Pattern );SetFillRule (_agge FillRule );SetStrokeRGBA (_ede ,_gcf ,_gcc ,_cf float64 );SetStrokeStyle (_ddd Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;
TextState ()*TextState ;DrawString (_dg string ,_ecb _gg .Face ,_ga ,_db float64 );MeasureString (_de string ,_daf _gg .Face )(_deb ,_bb float64 );DrawRectangle (_fgd ,_gbc ,_abg ,_fda float64 );DrawImage (_bbe _gf .Image ,_eg ,_ac int );DrawImageAnchored (_dcg _gf .Image ,_gdd ,_bbec int ,_bf ,_bac float64 );
Height ()int ;Width ()int ;};