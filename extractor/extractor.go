//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

//
// Package extractor is used for quickly extracting PDF content through a simple interface.
// Currently offers functionality for extracting textual content.
//
package extractor ;import (_af "bytes";_f "errors";_eg "fmt";_ad "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/common/license";_fe "github.com/unidoc/unipdf/v3/contentstream";_dg "github.com/unidoc/unipdf/v3/core";_dd "github.com/unidoc/unipdf/v3/internal/textencoding";_ca "github.com/unidoc/unipdf/v3/internal/transform";_db "github.com/unidoc/unipdf/v3/model";_fg "golang.org/x/text/unicode/norm";_afc "golang.org/x/xerrors";_cd "image/color";_b "io";_c "math";_ac "sort";_d "strings";_e "unicode";);

// String returns a string describing `pt`.
func (_ddfag PageText )String ()string {_fdg :=_eg .Sprintf ("P\u0061\u0067\u0065\u0054ex\u0074:\u0020\u0025\u0064\u0020\u0065l\u0065\u006d\u0065\u006e\u0074\u0073",len (_ddfag ._cabe ));_gegf :=[]string {"\u002d"+_fdg };for _ ,_acg :=range _ddfag ._cabe {_gegf =append (_gegf ,_acg .String ());};_gegf =append (_gegf ,"\u002b"+_fdg );return _d .Join (_gegf ,"\u000a");};func _dfaa (_ccaeb ,_bbfd ,_egbg ,_adga *textPara )*textTable {_agge :=&textTable {_decb :2,_edd :2,_edca :map[uint64 ]*textPara {}};_agge .put (0,0,_ccaeb );_agge .put (1,0,_bbfd );_agge .put (0,1,_egbg );_agge .put (1,1,_adga );return _agge ;};func _dedb (_aade string ,_ffaae int )string {if len (_aade )< _ffaae {return _aade ;};return _aade [:_ffaae ];};func (_dce *wordBag )removeWord (_dcad *textWord ,_ddb int ){_eab :=_efeb (_dce .stratum (_ddb ),_dcad );if len (_eab )==0{delete (_dce ._eceb ,_ddb );}else {_dce ._eceb [_ddb ]=_eab ;};};func _dgaa (_ceaf ,_eegec bounded )float64 {return _aaba (_ceaf )-_aaba (_eegec )};

// RangeOffset returns the TextMarks in `ma` that overlap text[start:end] in the extracted text.
// These are tm: `start` <= tm.Offset + len(tm.Text) && tm.Offset < `end` where
// `start` and `end` are offsets in the extracted text.
// NOTE: TextMarks can contain multiple characters. e.g. "ffi" for the ï¬ƒ ligature so the first and
// last elements of the returned TextMarkArray may only partially overlap text[start:end].
func (_gge *TextMarkArray )RangeOffset (start ,end int )(*TextMarkArray ,error ){if _gge ==nil {return nil ,_f .New ("\u006da\u003d\u003d\u006e\u0069\u006c");};if end < start {return nil ,_eg .Errorf ("\u0065\u006e\u0064\u0020\u003c\u0020\u0073\u0074\u0061\u0072\u0074\u002e\u0020\u0052\u0061n\u0067\u0065\u004f\u0066\u0066\u0073\u0065\u0074\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064\u002e\u0020\u0073\u0074\u0061\u0072t=\u0025\u0064\u0020\u0065\u006e\u0064\u003d\u0025\u0064\u0020",start ,end );};_fagd :=len (_gge ._bbaf );if _fagd ==0{return _gge ,nil ;};if start < _gge ._bbaf [0].Offset {start =_gge ._bbaf [0].Offset ;};if end > _gge ._bbaf [_fagd -1].Offset +1{end =_gge ._bbaf [_fagd -1].Offset +1;};_gec :=_ac .Search (_fagd ,func (_eda int )bool {return _gge ._bbaf [_eda ].Offset +len (_gge ._bbaf [_eda ].Text )-1>=start });if !(0<=_gec &&_gec < _fagd ){_gfbf :=_eg .Errorf ("\u004f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073\u0074\u0061\u0072\u0074\u003d%\u0064\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020\u006c\u0065\u006e\u003d\u0025\u0064\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025\u0076\u000a\u0009 \u006c\u0061\u0073\u0074\u003d%\u0076",start ,_gec ,_fagd ,_gge ._bbaf [0],_gge ._bbaf [_fagd -1]);return nil ,_gfbf ;};_abf :=_ac .Search (_fagd ,func (_cee int )bool {return _gge ._bbaf [_cee ].Offset > end -1});if !(0<=_abf &&_abf < _fagd ){_bfdg :=_eg .Errorf ("\u004f\u0075\u0074\u0020\u006f\u0066\u0020r\u0061\u006e\u0067e\u002e\u0020\u0065n\u0064\u003d%\u0064\u0020\u0069\u0045\u006e\u0064=\u0025d \u006c\u0065\u006e\u003d\u0025\u0064\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025\u0076\u000a\u0009\u0020\u006c\u0061\u0073\u0074\u003d\u0025\u0076",end ,_abf ,_fagd ,_gge ._bbaf [0],_gge ._bbaf [_fagd -1]);return nil ,_bfdg ;};if _abf <=_gec {return nil ,_eg .Errorf ("\u0069\u0045\u006e\u0064\u0020\u003c=\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003a\u0020\u0073\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020\u0065\u006ed\u003d\u0025\u0064\u0020\u0069\u0053\u0074\u0061\u0072\u0074\u003d\u0025\u0064\u0020i\u0045n\u0064\u003d\u0025\u0064",start ,end ,_gec ,_abf );};return &TextMarkArray {_bbaf :_gge ._bbaf [_gec :_abf ]},nil ;};func (_abfb *textLine )pullWord (_gff *wordBag ,_bffd *textWord ,_adff int ){_abfb .appendWord (_bffd );_gff .removeWord (_bffd ,_adff );};

// ApplyArea processes the page text only within the specified area `bbox`.
// Each time ApplyArea is called, it updates the result set in `pt`.
// Can be called multiple times in a row with different bounding boxes.
func (_eafg *PageText )ApplyArea (bbox _db .PdfRectangle ){_bacb :=make ([]*textMark ,0,len (_eafg ._cabe ));for _ ,_eef :=range _eafg ._cabe {if _cfba (_eef .bbox (),bbox ){_bacb =append (_bacb ,_eef );};};var _adb paraList ;_dee :=len (_bacb );for _fcde :=0;_fcde < 360&&_dee > 0;_fcde +=90{_gdc :=make ([]*textMark ,0,len (_bacb )-_dee );for _ ,_gbf :=range _bacb {if _gbf ._abg ==_fcde {_gdc =append (_gdc ,_gbf );};};if len (_gdc )> 0{_ecfg :=_gbggf (_gdc ,_eafg ._gagf );_adb =append (_adb ,_ecfg ...);_dee -=len (_gdc );};};_eec :=new (_af .Buffer );_adb .writeText (_eec );_eafg ._bbdda =_eec .String ();_eafg ._gegc =_adb .toTextMarks ();_eafg ._eaga =_adb .tables ();};func (_fdf *textObject )renderText (_cfef []byte )error {if _fdf ._fdag {_ad .Log .Debug ("\u0072\u0065\u006e\u0064\u0065r\u0054\u0065\u0078\u0074\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u0066\u006f\u006e\u0074\u002e\u0020\u004e\u006f\u0074\u0020\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067\u002e");return nil ;};_aabe :=_fdf .getCurrentFont ();_bgb :=_aabe .BytesToCharcodes (_cfef );_bbdd ,_ddcd ,_dba :=_aabe .CharcodesToStrings (_bgb );if _dba > 0{_ad .Log .Debug ("\u0072\u0065nd\u0065\u0072\u0054e\u0078\u0074\u003a\u0020num\u0043ha\u0072\u0073\u003d\u0025\u0064\u0020\u006eum\u004d\u0069\u0073\u0073\u0065\u0073\u003d%\u0064",_ddcd ,_dba );};_fdf ._dggf ._cgg +=_ddcd ;_fdf ._dggf ._dad +=_dba ;_bgd :=_fdf ._dggf ;_gbdd :=_bgd ._ggba ;_badf :=_bgd ._ae /100.0;_ddcdb ,_efaf :=_aabe .GetRuneMetrics (' ');if !_efaf {_ddcdb ,_efaf =_aabe .GetCharMetrics (32);};if !_efaf {_ddcdb ,_ =_db .DefaultFont ().GetRuneMetrics (' ');};_ffge :=_ddcdb .Wx *_dgbf ;_ad .Log .Trace ("\u0073p\u0061\u0063e\u0057\u0069\u0064t\u0068\u003d\u0025\u002e\u0032\u0066\u0020t\u0065\u0078\u0074\u003d\u0025\u0071 \u0066\u006f\u006e\u0074\u003d\u0025\u0073\u0020\u0066\u006f\u006et\u0053\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066",_ffge ,_bbdd ,_aabe ,_gbdd );_cged :=_ca .NewMatrix (_gbdd *_badf ,0,0,_gbdd ,0,_bgd ._ddc );if _fbda {_ad .Log .Info ("\u0072\u0065\u006e\u0064\u0065\u0072T\u0065\u0078\u0074\u003a\u0020\u0025\u0064\u0020\u0063\u006f\u0064\u0065\u0073=\u0025\u002b\u0076\u0020\u0074\u0065\u0078t\u0073\u003d\u0025\u0071",len (_bgb ),_bgb ,_bbdd );};_ad .Log .Trace ("\u0072\u0065\u006e\u0064\u0065\u0072T\u0065\u0078\u0074\u003a\u0020\u0025\u0064\u0020\u0063\u006f\u0064\u0065\u0073=\u0025\u002b\u0076\u0020\u0072\u0075\u006ee\u0073\u003d\u0025\u0071",len (_bgb ),_bgb ,len (_bbdd ));_facd :=_fdf .getFillColor ();_cefe :=_fdf .getStrokeColor ();for _dgbc ,_bcgg :=range _bbdd {_ffa :=[]rune (_bcgg );if len (_ffa )==1&&_ffa [0]=='\x00'{continue ;};_gdeg :=_bgb [_dgbc ];_cbb :=_fdf ._cea .CTM .Mult (_fdf ._efb ).Mult (_cged );_bab :=0.0;if len (_ffa )==1&&_ffa [0]==32{_bab =_bgd ._gce ;};_gbdg ,_gfgf :=_aabe .GetCharMetrics (_gdeg );if !_gfgf {_ad .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u004e\u006f \u006d\u0065\u0074r\u0069\u0063\u0020\u0066\u006f\u0072\u0020\u0063\u006fde\u003d\u0025\u0064 \u0072\u003d0\u0078\u0025\u0030\u0034\u0078\u003d%\u002b\u0071 \u0025\u0073",_gdeg ,_ffa ,_ffa ,_aabe );return _eg .Errorf ("\u006e\u006f\u0020\u0063\u0068\u0061\u0072\u0020\u006d\u0065\u0074\u0072\u0069\u0063\u0073:\u0020f\u006f\u006e\u0074\u003d\u0025\u0073\u0020\u0063\u006f\u0064\u0065\u003d\u0025\u0064",_aabe .String (),_gdeg );};_agf :=_ca .Point {X :_gbdg .Wx *_dgbf ,Y :_gbdg .Wy *_dgbf };_efad :=_ca .Point {X :(_agf .X *_gbdd +_bab )*_badf };_aeg :=_ca .Point {X :(_agf .X *_gbdd +_bgd ._baeg +_bab )*_badf };if _fbda {_ad .Log .Info ("\u0074\u0066\u0073\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0063\u003d\u0025\u002e\u0032f\u0020t\u0077\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0068\u003d\u0025\u002e\u0032\u0066",_gbdd ,_bgd ._baeg ,_bgd ._gce ,_badf );_ad .Log .Info ("\u0064x\u002c\u0064\u0079\u003d%\u002e\u0033\u0066\u0020\u00740\u003d%\u002e2\u0066\u0020\u0074\u003d\u0025\u002e\u0032f",_agf ,_efad ,_aeg );};_abc :=_aaab (_efad );_def :=_aaab (_aeg );_afb :=_fdf ._cea .CTM .Mult (_fdf ._efb ).Mult (_abc );if _fbda {_ad .Log .Info ("e\u006e\u0064\u003a\u000a\tC\u0054M\u003d\u0025\u0073\u000a\u0009 \u0074\u006d\u003d\u0025\u0073\u000a"+"\u0009\u0020t\u0064\u003d\u0025s\u0020\u0078\u006c\u0061\u0074\u003d\u0025\u0073\u000a"+"\u0009t\u0064\u0030\u003d\u0025\u0073\u000a\u0009\u0020\u2192\u0020\u0025s\u0020\u0078\u006c\u0061\u0074\u003d\u0025\u0073",_fdf ._cea .CTM ,_fdf ._efb ,_def ,_bade (_fdf ._cea .CTM .Mult (_fdf ._efb ).Mult (_def )),_abc ,_afb ,_bade (_afb ));};_bega ,_aeb :=_fdf .newTextMark (_dd .ExpandLigatures (_ffa ),_cbb ,_bade (_afb ),_c .Abs (_ffge *_cbb .ScalingFactorX ()),_aabe ,_fdf ._dggf ._baeg ,_facd ,_cefe );if !_aeb {_ad .Log .Debug ("\u0054\u0065\u0078\u0074\u0020\u006d\u0061\u0072\u006b\u0020\u006f\u0075\u0074\u0073\u0069d\u0065 \u0070\u0061\u0067\u0065\u002e\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};if _aabe ==nil {_ad .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u004e\u006f\u0020\u0066\u006f\u006e\u0074\u002e");}else if _aabe .Encoder ()==nil {_ad .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020N\u006f\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006eg\u002e\u0020\u0066o\u006et\u003d\u0025\u0073",_aabe );}else {if _bfg ,_fcf :=_aabe .Encoder ().CharcodeToRune (_gdeg );_fcf {_bega ._fdgb =string (_bfg );};};_ad .Log .Trace ("i\u003d\u0025\u0064\u0020\u0063\u006fd\u0065\u003d\u0025\u0064\u0020\u006d\u0061\u0072\u006b=\u0025\u0073\u0020t\u0072m\u003d\u0025\u0073",_dgbc ,_gdeg ,_bega ,_cbb );_fdf ._gfc =append (_fdf ._gfc ,&_bega );_fdf ._efb .Concat (_def );};return nil ;};func _gedb (_gefg *wordBag ,_aeac float64 )[]*wordBag {var _cba []*wordBag ;for _ ,_gbgga :=range _gefg .depthIndexes (){_faee :=false ;for !_gefg .empty (_gbgga ){_facgb :=_gefg .firstReadingIndex (_gbgga );_ccbc :=_gefg .firstWord (_facgb );_bbde :=_geea (_ccbc ,_aeac );_gefg .removeWord (_ccbc ,_facgb );if _gcdb {_ad .Log .Info ("w\u006f\u0072\u0064\u0073\u005b\u0030\u005d\u003d\u0025\u0073",_ccbc .String ());};_abecd :=_ffce *_bbde ._aea ;_afafe :=_ecce *_bbde ._aea ;_fegf :=_adaacd *_bbde ._aea ;for _afeg :=true ;_afeg ;_afeg =_faee {_faee =false ;if _gcdb {_ad .Log .Info ("\u0070\u0061\u0072\u0061\u0057\u006f\u0072\u0064\u0073\u0020\u0064\u0065\u0070\u0074\u0068\u0020\u0025\u002e2\u0066\u0020\u002d\u0020\u0025\u002e\u0032f\u0020\u006d\u0061\u0078\u0049\u006e\u0074\u0072\u0061\u0044\u0065p\u0074\u0068\u0047\u0061\u0070\u003d\u0025\u002e\u0032\u0066\u0020",_bbde .minDepth (),_bbde .maxDepth (),_fegf );};if _gefg .scanBand ("\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c",_bbde ,_abec (_gbbc ,0),_bbde .minDepth ()-_fegf ,_bbde .maxDepth ()+_fegf ,_fffad ,false ,false )> 0{_faee =true ;};if _gefg .scanBand ("\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c",_bbde ,_abec (_gbbc ,_afafe ),_bbde .minDepth (),_bbde .maxDepth (),_dcc ,false ,false )> 0{_faee =true ;};if _faee {continue ;};_eceg :=_gefg .scanBand ("",_bbde ,_abec (_ceagc ,_abecd ),_bbde .minDepth (),_bbde .maxDepth (),_facg ,true ,false );if _eceg > 0{_cbdae :=(_bbde .maxDepth ()-_bbde .minDepth ())/_bbde ._aea ;if (_eceg > 1&&float64 (_eceg )> 0.3*_cbdae )||_eceg <=10{if _gefg .scanBand ("\u006f\u0074\u0068e\u0072",_bbde ,_abec (_ceagc ,_abecd ),_bbde .minDepth (),_bbde .maxDepth (),_facg ,false ,true )> 0{_faee =true ;};};};};_cba =append (_cba ,_bbde );};};return _cba ;};

// RenderMode specifies the text rendering mode (Tmode), which determines whether showing text shall cause
// glyph outlines to be  stroked, filled, used as a clipping boundary, or some combination of the three.
// Stroking, filling, and clipping shall have the same effects for a text object as they do for a path object
// (see 8.5.3, "Path-Painting Operators" and 8.5.4, "Clipping Path Operators").
type RenderMode int ;func (_fegfe *textWord )addDiacritic (_afdb string ){_caeb :=_fegfe ._fegd [len (_fegfe ._fegd )-1];_caeb ._acgf =_caeb ._acgf +_afdb ;_caeb ._acgf =_fg .NFKC .String (_caeb ._acgf );};func _bbcf (_befe ,_cbdbc int )uint64 {return uint64 (_befe )*0x1000000+uint64 (_cbdbc )};func (_ddag paraList )xNeighbours ()map[*textPara ][]int {_ffae :=make ([]event ,2*len (_ddag ));for _gceb ,_gadc :=range _ddag {_ffae [2*_gceb ]=event {_gadc .Llx ,true ,_gceb };_ffae [2*_gceb +1]=event {_gadc .Urx ,false ,_gceb };};return _ddag .eventNeighbours (_ffae );};func _beaf (_bafeg _db .PdfRectangle ,_caag []*textLine )*textPara {return &textPara {PdfRectangle :_bafeg ,_dgaaa :_caag };};func (_dbg *stateStack )push (_add *textState ){_cebg :=*_add ;*_dbg =append (*_dbg ,&_cebg )};func (_cafa *textObject )setTextMatrix (_dabg []float64 ){if len (_dabg )!=6{_ad .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u006c\u0065\u006e\u0028\u0066\u0029\u0020\u0021\u003d\u0020\u0036\u0020\u0028\u0025\u0064\u0029",len (_dabg ));return ;};_cfb ,_bafe ,_fae ,_adcf ,_gbg ,_ecff :=_dabg [0],_dabg [1],_dabg [2],_dabg [3],_dabg [4],_dabg [5];_cafa ._efb =_ca .NewMatrix (_cfb ,_bafe ,_fae ,_adcf ,_gbg ,_ecff );_cafa ._dea =_cafa ._efb ;};func (_ddfb *textObject )setTextLeading (_egba float64 ){if _ddfb ==nil ||_ddfb ._dggf ==nil {return ;};_ddfb ._dggf ._ddab =_egba ;};func _dde (_eadf []*wordBag )[]*wordBag {if len (_eadf )<=1{return _eadf ;};if _abddd {_ad .Log .Info ("\u006d\u0065\u0072\u0067\u0065\u0057\u006f\u0072\u0064B\u0061\u0067\u0073\u003a");};_ac .Slice (_eadf ,func (_eagd ,_gdec int )bool {_ffd ,_ecde :=_eadf [_eagd ],_eadf [_gdec ];_ccf :=_ffd .Width ()*_ffd .Height ();_eae :=_ecde .Width ()*_ecde .Height ();if _ccf !=_eae {return _ccf > _eae ;};if _ffd .Height ()!=_ecde .Height (){return _ffd .Height ()> _ecde .Height ();};return _eagd < _gdec ;});var _gdf []*wordBag ;_begaa :=map[int ]struct{}{};for _egge :=0;_egge < len (_eadf );_egge ++{if _ ,_ccec :=_begaa [_egge ];_ccec {continue ;};_bacg :=_eadf [_egge ];for _fcec :=_egge +1;_fcec < len (_eadf );_fcec ++{if _ ,_cefd :=_begaa [_egge ];_cefd {continue ;};_fed :=_eadf [_fcec ];_edcd :=_bacg .PdfRectangle ;_edcd .Llx -=_bacg ._aea ;if _fgeg (_edcd ,_fed .PdfRectangle ){_bacg .absorb (_fed );_begaa [_fcec ]=struct{}{};};};_gdf =append (_gdf ,_bacg );};if len (_eadf )!=len (_gdf )+len (_begaa ){_ad .Log .Error ("\u006d\u0065\u0072\u0067\u0065\u0057o\u0072\u0064\u0042\u0061\u0067\u0073\u003a\u0020\u0025\u0064\u002d\u003e\u0025d\u0020\u0061\u0062\u0073\u006f\u0072\u0062e\u0064\u003d\u0025\u0064",len (_eadf ),len (_gdf ),len (_begaa ));};return _gdf ;};const (_dade =true ;_gcaf =true ;_bacc =true ;_aebf =false ;);

// String returns a description of `b`.
func (_dbeb *wordBag )String ()string {var _cebgc []string ;for _ ,_gfeb :=range _dbeb .depthIndexes (){_adag ,_ :=_dbeb ._eceb [_gfeb ];for _ ,_cgbg :=range _adag {_cebgc =append (_cebgc ,_cgbg ._fbcaa );};};return _eg .Sprintf ("\u0025.\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065=\u0025\u002e\u0032\u0066\u0020\u0025\u0064\u0020\u0025\u0071",_dbeb .PdfRectangle ,_dbeb ._aea ,len (_cebgc ),_cebgc );};func (_baec *wordBag )scanBand (_ddg string ,_egd *wordBag ,_gdde func (_caba *wordBag ,_aed *textWord )bool ,_adcc ,_cbfg ,_acde float64 ,_gfa ,_acdd bool )int {_cggf :=_egd ._aea ;_ggaa :=_aacgb *_cggf ;_fbb :=0;_gbda ,_ceag :=_adcc ,_cbfg ;var _afbf []*textWord ;for _ ,_bfbc :=range _baec .depthBand (_adcc -_ggaa ,_cbfg +_ggaa ){for _ ,_fbgf :=range _baec ._eceb [_bfbc ]{if !(_adcc -_ggaa <=_fbgf ._gggc &&_fbgf ._gggc <=_cbfg +_ggaa ){continue ;};if !_gdde (_egd ,_fbgf ){continue ;};_dfac :=_c .Abs (_fbgf ._dcea -_cggf )/_cggf ;_aaf :=_fbgf ._dcea /_cggf ;_efae :=_c .Min (_dfac ,_aaf );if _acde > 0{if _efae > _acde {continue ;};};if !_gfa {_egd .pullWord (_baec ,_fbgf ,_bfbc );};_afbf =append (_afbf ,_fbgf );_fbb ++;if !_acdd {if _fbgf ._gggc < _adcc {_adcc =_fbgf ._gggc ;};if _fbgf ._gggc > _cbfg {_cbfg =_fbgf ._gggc ;};};if _gfa {break ;};};};if _abddd {if len (_ddg )> 0{_ad .Log .Info ("\u0073\u0063\u0061\u006e\u0042\u0061\u006e\u0064\u003a\u0020\u0025\u0073\u0020\u005b\u0025\u002e\u0032f\u0020\u0025\u002e\u0032\u0066\u005d\u002d\u003e\u005b\u0025.\u0032\u0066\u0020\u0025\u002e\u0032\u0066\u005d\u0020\u0070\u0061\u0072\u0061\u003d\u0025\u002e\u0032\u0066 \u0066\u006f\u006e\u0074\u0073\u0069z\u0065\u003d%\u002e\u0032f\u0020%\u0071",_ddg ,_gbda ,_ceag ,_adcc ,_cbfg ,_egd .PdfRectangle ,_egd ._aea ,_dedb (_egd .text (),20));for _efga ,_deae :=range _afbf {_eg .Printf ("\u0020\u0020\u0025\u0071",_deae ._fbcaa );if _efga >=5{break ;};};if len (_afbf )> 0{_eg .Println ();};};};return _fbb ;};func (_ee *imageExtractContext )extractContentStreamImages (_fgd string ,_bg *_db .PdfPageResources )error {_ag :=_fe .NewContentStreamParser (_fgd );_eb ,_gae :=_ag .Parse ();if _gae !=nil {return _gae ;};if _ee ._bc ==nil {_ee ._bc =map[*_dg .PdfObjectStream ]*cachedImage {};};if _ee ._gac ==nil {_ee ._gac =&ImageExtractOptions {};};_cgf :=_fe .NewContentStreamProcessor (*_eb );_cgf .AddHandler (_fe .HandlerConditionEnumAllOperands ,"",func (_gg *_fe .ContentStreamOperation ,_ef _fe .GraphicsState ,_gf *_db .PdfPageResources )error {return _ee .processOperand (_gg ,_ef ,_gf );});return _cgf .Process (_bg );};func (_gcd *wordBag )highestWord (_ebec int ,_aga ,_bgcd float64 )*textWord {for _ ,_gca :=range _gcd ._eceb [_ebec ]{if _aga <=_gca ._gggc &&_gca ._gggc <=_bgcd {return _gca ;};};return nil ;};

// ExtractPageImages returns the image contents of the page extractor, including data
// and position, size information for each image.
// A set of options to control page image extraction can be passed in. The options
// parameter can be nil for the default options. By default, inline stencil masks
// are not extracted.
func (_cfg *Extractor )ExtractPageImages (options *ImageExtractOptions )(*PageImages ,error ){_fcb :=&imageExtractContext {_gac :options };_dfe :=_fcb .extractContentStreamImages (_cfg ._aa ,_cfg ._da );if _dfe !=nil {return nil ,_dfe ;};return &PageImages {Images :_fcb ._cfa },nil ;};func (_ebcb *textPara )fontsize ()float64 {return _ebcb ._dgaaa [0]._baaf };func (_dccb *textObject )newTextMark (_bfbb string ,_fgc _ca .Matrix ,_fgfd _ca .Point ,_cbda float64 ,_bga *_db .PdfFont ,_ebg float64 ,_fea ,_cbbd _cd .Color )(textMark ,bool ){_ecee :=_fgc .Angle ();_befc :=_gaca (_ecee ,_badd );var _ccdb float64 ;if _befc %180!=90{_ccdb =_fgc .ScalingFactorY ();}else {_ccdb =_fgc .ScalingFactorX ();};_ggf :=_bade (_fgc );_dfgb :=_db .PdfRectangle {Llx :_ggf .X ,Lly :_ggf .Y ,Urx :_fgfd .X ,Ury :_fgfd .Y };switch _befc %360{case 90:_dfgb .Urx -=_ccdb ;case 180:_dfgb .Ury -=_ccdb ;case 270:_dfgb .Urx +=_ccdb ;case 0:_dfgb .Ury +=_ccdb ;default:_befc =0;_dfgb .Ury +=_ccdb ;};if _dfgb .Llx > _dfgb .Urx {_dfgb .Llx ,_dfgb .Urx =_dfgb .Urx ,_dfgb .Llx ;};if _dfgb .Lly > _dfgb .Ury {_dfgb .Lly ,_dfgb .Ury =_dfgb .Ury ,_dfgb .Lly ;};_ffee ,_ccbb :=_bgdcc (_dfgb ,_dccb ._egfe ._adg );if !_ccbb {_ad .Log .Debug ("\u0054\u0065\u0078\u0074\u0020m\u0061\u0072\u006b\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0070a\u0067\u0065\u002e\u0020\u0062\u0062\u006f\u0078\u003d\u0025\u0067\u0020\u006d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u0067\u0020\u0074\u0065\u0078\u0074\u003d\u0025q",_dfgb ,_dccb ._egfe ._adg ,_bfbb );};_dfgb =_ffee ;_fgbfe :=_dfgb ;_ggc :=_dccb ._egfe ._adg ;switch _befc %360{case 90:_ggc .Urx ,_ggc .Ury =_ggc .Ury ,_ggc .Urx ;_fgbfe =_db .PdfRectangle {Llx :_ggc .Urx -_dfgb .Ury ,Urx :_ggc .Urx -_dfgb .Lly ,Lly :_dfgb .Llx ,Ury :_dfgb .Urx };case 180:_fgbfe =_db .PdfRectangle {Llx :_ggc .Urx -_dfgb .Llx ,Urx :_ggc .Urx -_dfgb .Urx ,Lly :_ggc .Ury -_dfgb .Lly ,Ury :_ggc .Ury -_dfgb .Ury };case 270:_ggc .Urx ,_ggc .Ury =_ggc .Ury ,_ggc .Urx ;_fgbfe =_db .PdfRectangle {Llx :_dfgb .Ury ,Urx :_dfgb .Lly ,Lly :_ggc .Ury -_dfgb .Llx ,Ury :_ggc .Ury -_dfgb .Urx };};if _fgbfe .Llx > _fgbfe .Urx {_fgbfe .Llx ,_fgbfe .Urx =_fgbfe .Urx ,_fgbfe .Llx ;};if _fgbfe .Lly > _fgbfe .Ury {_fgbfe .Lly ,_fgbfe .Ury =_fgbfe .Ury ,_fgbfe .Lly ;};_baca :=textMark {_acgf :_bfbb ,PdfRectangle :_fgbfe ,_gcbe :_dfgb ,_fcdee :_bga ,_agdf :_ccdb ,_aeae :_ebg ,_fbdbe :_fgc ,_agc :_fgfd ,_abg :_befc ,_agcg :_fea ,_dbf :_cbbd };if _fbda {_ad .Log .Info ("n\u0065\u0077\u0054\u0065\u0078\u0074M\u0061\u0072\u006b\u003a\u0020\u0073t\u0061\u0072\u0074\u003d\u0025\u002e\u0032f\u0020\u0065\u006e\u0064\u003d\u0025\u002e\u0032\u0066\u0020%\u0073",_ggf ,_fgfd ,_baca .String ());};return _baca ,_ccbb ;};

// TextMarkArray is a collection of TextMarks.
type TextMarkArray struct{_bbaf []TextMark };func (_bacgc *textTable )get (_dbcg ,_eebb int )*textPara {return _bacgc ._edca [_bbcf (_dbcg ,_eebb )]};type textObject struct{_egfe *Extractor ;_dace *_db .PdfPageResources ;_cea _fe .GraphicsState ;_dggf *textState ;_aceg *stateStack ;_efb _ca .Matrix ;_dea _ca .Matrix ;_gfc []*textMark ;_fdag bool ;};func (_ece *textObject )nextLine (){_ece .moveTo (0,-_ece ._dggf ._ddab )};

// Marks returns the TextMark collection for a page. It represents all the text on the page.
func (_bde PageText )Marks ()*TextMarkArray {return &TextMarkArray {_bbaf :_bde ._gegc }};

// ExtractTextWithStats works like ExtractText but returns the number of characters in the output
// (`numChars`) and the number of characters that were not decoded (`numMisses`).
func (_acc *Extractor )ExtractTextWithStats ()(_fb string ,_bf int ,_gad int ,_eee error ){_fbe ,_bf ,_gad ,_eee :=_acc .ExtractPageText ();if _eee !=nil {return "",_bf ,_gad ,_eee ;};return _fbe .Text (),_bf ,_gad ,nil ;};

// ToTextMark returns the public view of `tm`.
func (_ccda *textMark )ToTextMark ()TextMark {return TextMark {Text :_ccda ._acgf ,Original :_ccda ._fdgb ,BBox :_ccda ._gcbe ,Font :_ccda ._fcdee ,FontSize :_ccda ._agdf ,FillColor :_ccda ._agcg ,StrokeColor :_ccda ._dbf };};func (_bcag paraList )yNeighbours ()map[*textPara ][]int {_dafe :=make ([]event ,2*len (_bcag ));for _ccba ,_addad :=range _bcag {_dafe [2*_ccba ]=event {_addad .Lly ,true ,_ccba };_dafe [2*_ccba +1]=event {_addad .Ury ,false ,_ccba };};return _bcag .eventNeighbours (_dafe );};func (_gfgb *stateStack )top ()*textState {if _gfgb .empty (){return nil ;};return (*_gfgb )[_gfgb .size ()-1];};type imageExtractContext struct{_cfa []ImageMark ;_ea int ;_egf int ;_baf int ;_bc map[*_dg .PdfObjectStream ]*cachedImage ;_gac *ImageExtractOptions ;};func (_cafe *wordBag )empty (_abde int )bool {_ ,_eba :=_cafe ._eceb [_abde ];return !_eba };func _aaab (_aee _ca .Point )_ca .Matrix {return _ca .TranslationMatrix (_aee .X ,_aee .Y )};func (_cfbb *textObject )getStrokeColor ()_cd .Color {return _cacc (_cfbb ._cea .ColorspaceStroking ,_cfbb ._cea .ColorStroking );};func (_acef *textObject )getCurrentFont ()*_db .PdfFont {var _dabb *_db .PdfFont ;if !_acef ._aceg .empty (){_dabb =_acef ._aceg .top ()._cgcf ;};if _dabb ==nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u002e\u0020U\u0073\u0069\u006e\u0067\u0020d\u0065\u0066a\u0075\u006c\u0074\u002e");return _db .DefaultFont ();};return _dabb ;};func (_cabaa *textMark )bbox ()_db .PdfRectangle {return _cabaa .PdfRectangle };func (_bfbg *textPara )depth ()float64 {if len (_bfbg ._dgaaa )> 0{return _bfbg ._dgaaa [0]._ggdc ;};return _bfbg ._befd .get (0,0).depth ();};func (_egad *textTable )growTable (){_ggca :=func (_cacd paraList ){_egad ._edd ++;for _gcba :=0;_gcba < _egad ._decb ;_gcba ++{_bcbc :=_cacd [_gcba ];_egad .put (_gcba ,_egad ._edd -1,_bcbc );};};_dgde :=func (_egbb paraList ){_egad ._decb ++;for _bfc :=0;_bfc < _egad ._edd ;_bfc ++{_abfc :=_egbb [_bfc ];_egad .put (_egad ._decb -1,_bfc ,_abfc );};};for {_bdda :=false ;_cagd :=_egad .getDown ();_cdabf :=_egad .getRight ();if _cagd !=nil &&_cdabf !=nil {_febb :=_cagd [len (_cagd )-1];if _febb !=nil &&!_febb ._geab &&_febb ==_cdabf [len (_cdabf )-1]{_ggca (_cagd );_dgde (_cdabf );_egad .put (_egad ._decb -1,_egad ._edd -1,_febb );_bdda =true ;};};if !_bdda &&_cagd !=nil {_ggca (_cagd );_bdda =true ;};if !_bdda &&_cdabf !=nil {_dgde (_cdabf );_bdda =true ;};if !_bdda {break ;};};};type textMark struct{_db .PdfRectangle ;_abg int ;_acgf string ;_fdgb string ;_fcdee *_db .PdfFont ;_agdf float64 ;_aeae float64 ;_fbdbe _ca .Matrix ;_agc _ca .Point ;_gcbe _db .PdfRectangle ;_agcg _cd .Color ;_dbf _cd .Color ;};func (_bdfd *textPara )toCellTextMarks (_bcd *int )[]TextMark {var _cdadf []TextMark ;for _agcd ,_defa :=range _bdfd ._dgaaa {_cdaa :=_defa .toTextMarks (_bcd );_adaag :=_dade &&_defa .endsInHyphen ()&&_agcd !=len (_bdfd ._dgaaa )-1;if _adaag {_cdaa =_cbe (_cdaa ,_bcd );};_cdadf =append (_cdadf ,_cdaa ...);if !(_adaag ||_agcd ==len (_bdfd ._dgaaa )-1){_cdadf =_bgbb (_cdadf ,_bcd ,_fgeb (_defa ._ggdc ,_bdfd ._dgaaa [_agcd +1]._ggdc ));};};return _cdadf ;};type wordBag struct{_db .PdfRectangle ;_aea float64 ;_aae float64 ;_eceb map[int ][]*textWord ;};const (_abddd =false ;_fbda =false ;_gcdb =false ;_bfdd =false ;_ged =_bfdd &&false ;_eada =_ged &&false ;_dddg =false ;);func (_fcfe paraList )sortReadingOrder (){_ad .Log .Trace ("\u0073\u006fr\u0074\u0052\u0065\u0061\u0064i\u006e\u0067\u004f\u0072\u0064e\u0072\u003a\u0020\u0070\u0061\u0072\u0061\u0073\u003d\u0025\u0064\u0020\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0078\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",len (_fcfe ));if len (_fcfe )<=1{return ;};_fcfe .computeEBBoxes ();_ac .Slice (_fcfe ,func (_cafd ,_ecbe int )bool {return _dcbac (_fcfe [_cafd ],_fcfe [_ecbe ])<=0});_abad :=_fcfe .topoOrder ();_fcfe .reorder (_abad );};func (_fbgbd *textTable )put (_eegea ,_ecebe int ,_gfef *textPara ){_fbgbd ._edca [_bbcf (_eegea ,_ecebe )]=_gfef ;};func (_facbe *textPara )writeText (_cagg _b .Writer ){if _facbe ._befd ==nil {_facbe .writeCellText (_cagg );return ;};for _cfbg :=0;_cfbg < _facbe ._befd ._edd ;_cfbg ++{for _eeecf :=0;_eeecf < _facbe ._befd ._decb ;_eeecf ++{_ega :=_facbe ._befd .get (_eeecf ,_cfbg );if _ega ==nil {_cagg .Write ([]byte ("\u0009"));}else {_ega .writeCellText (_cagg );};_cagg .Write ([]byte ("\u0020"));};if _cfbg < _facbe ._befd ._edd -1{_cagg .Write ([]byte ("\u000a"));};};};func _geea (_afgd *textWord ,_bada float64 )*wordBag {_gddc :=_ccac (_afgd ._gggc );_fgfc :=[]*textWord {_afgd };_abd :=wordBag {_eceb :map[int ][]*textWord {_gddc :_fgfc },PdfRectangle :_afgd .PdfRectangle ,_aea :_afgd ._dcea ,_aae :_bada };return &_abd ;};func _ddcdd (_fedc ,_baga _db .PdfRectangle )bool {return _fedc .Lly <=_baga .Ury &&_baga .Lly <=_fedc .Ury ;};func (_cgea *textObject )getFontDirect (_fged string )(*_db .PdfFont ,error ){_caea ,_bbgg :=_cgea .getFontDict (_fged );if _bbgg !=nil {return nil ,_bbgg ;};_adbg ,_bbgg :=_db .NewPdfFontFromPdfObject (_caea );if _bbgg !=nil {_ad .Log .Debug ("\u0067\u0065\u0074\u0046\u006f\u006e\u0074\u0044\u0069\u0072\u0065\u0063\u0074\u003a\u0020\u004e\u0065\u0077Pd\u0066F\u006f\u006e\u0074\u0046\u0072\u006f\u006d\u0050\u0064\u0066\u004f\u0062j\u0065\u0063\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d%\u0023\u0071\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fged ,_bbgg );};return _adbg ,_bbgg ;};type cachedImage struct{_cc *_db .Image ;_cg _db .PdfColorspace ;};type textState struct{_baeg float64 ;_gce float64 ;_ae float64 ;_ddab float64 ;_ggba float64 ;_gafa RenderMode ;_ddc float64 ;_cgcf *_db .PdfFont ;_fcgc _db .PdfRectangle ;_cgg int ;_dad int ;};func (_adf *wordBag )getDepthIdx (_dgcg float64 )int {_bacbb :=_adf .depthIndexes ();_gaeg :=_ccac (_dgcg );if _gaeg < _bacbb [0]{return _bacbb [0];};if _gaeg > _bacbb [len (_bacbb )-1]{return _bacbb [len (_bacbb )-1];};return _gaeg ;};func _fedd (_agab ,_fba _db .PdfRectangle )bool {return _fba .Llx <=_agab .Urx &&_agab .Llx <=_fba .Urx };func _gbggf (_cfda []*textMark ,_adda _db .PdfRectangle )paraList {_ad .Log .Trace ("\u006d\u0061\u006b\u0065\u0054\u0065\u0078\u0074\u0050\u0061\u0067\u0065\u003a \u0025\u0064\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0073\u0020\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065=\u0025\u002e\u0032\u0066",len (_cfda ),_adda );if len (_cfda )==0{return nil ;};_edaa :=_dcee (_cfda ,_adda );if len (_edaa )==0{return nil ;};_daee :=_ddcdc (_edaa ,_adda .Ury );_efgg :=_gedb (_daee ,_adda .Ury );_efgg =_dde (_efgg );_fcee :=make (paraList ,0,len (_efgg ));for _ ,_fbaa :=range _efgg {_cbfa :=_fbaa .arrangeText ();if _cbfa !=nil {_fcee =append (_fcee ,_cbfa );};};if len (_fcee )>=_ffb {_fcee =_fcee .extractTables ();};_fcee .sortReadingOrder ();_fcee .log ("\u0073\u006f\u0072te\u0064\u0020\u0069\u006e\u0020\u0072\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u006f\u0072\u0064\u0065\u0072");return _fcee ;};

// PageImages represents extracted images on a PDF page with spatial information:
// display position and size.
type PageImages struct{Images []ImageMark ;};const (_badd =10;_bdcf =6;_aacgb =0.5;_gddeg =0.11;_baed =0.19;_dcfd =0.04;_adbd =0.04;_adaacd =1.0;_fffad =0.04;_ecce =0.4;_dcc =0.7;_ffce =1.0;_facg =0.1;_ccca =1.4;_cacf =0.46;_fbfe =0.02;_adde =0.2;_ebca =0.5;_aeec =4;_fca =4.0;_ffb =6;);func (_gbgg *wordBag )pullWord (_gdag *wordBag ,_cceg *textWord ,_dfgf int ){_gbgg .PdfRectangle =_aagb (_gbgg .PdfRectangle ,_cceg .PdfRectangle );if _cceg ._dcea > _gbgg ._aea {_gbgg ._aea =_cceg ._dcea ;};_gbgg ._eceb [_dfgf ]=append (_gbgg ._eceb [_dfgf ],_cceg );_gdag .removeWord (_cceg ,_dfgf );};func _bbc (_efbe ,_cffb bounded )float64 {return _efbe .bbox ().Llx -_cffb .bbox ().Llx };func (_egfc *textLine )appendWord (_gef *textWord ){_egfc ._bdf =append (_egfc ._bdf ,_gef );_egfc .PdfRectangle =_aagb (_egfc .PdfRectangle ,_gef .PdfRectangle );if _gef ._dcea > _egfc ._baaf {_egfc ._baaf =_gef ._dcea ;};if _gef ._gggc > _egfc ._ggdc {_egfc ._ggdc =_gef ._gggc ;};};

// ToText returns the page text as a single string.
// Deprecated: This function is deprecated and will be removed in a future major version. Please use
// Text() instead.
func (_aebe PageText )ToText ()string {return _aebe .Text ()};

// String returns a description of `state`.
func (_cceb *textState )String ()string {_bfe :="\u005bN\u004f\u0054\u0020\u0053\u0045\u0054]";if _cceb ._cgcf !=nil {_bfe =_cceb ._cgcf .BaseFont ();};return _eg .Sprintf ("\u0074\u0063\u003d\u0025\u002e\u0032\u0066\u0020\u0074\u0077\u003d\u0025\u002e\u0032\u0066 \u0074f\u0073\u003d\u0025\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u003d\u0025\u0071",_cceb ._baeg ,_cceb ._gce ,_cceb ._ggba ,_bfe );};func (_agee *wordBag )firstReadingIndex (_fbee int )int {_faaf :=_agee .firstWord (_fbee )._dcea ;_abdd :=float64 (_fbee +1)*_bdcf ;_afgc :=_abdd +_fca *_faaf ;_eff :=_fbee ;for _ ,_gbdab :=range _agee .depthBand (_abdd ,_afgc ){if _bbc (_agee .firstWord (_gbdab ),_agee .firstWord (_eff ))< 0{_eff =_gbdab ;};};return _eff ;};func _bede (_bbe ,_acbe bounded )float64 {return _bbe .bbox ().Llx -_acbe .bbox ().Urx };func (_ffbb paraList )topoOrder ()[]int {if _gcdb {_ad .Log .Info ("\u0074\u006f\u0070\u006f\u004f\u0072\u0064\u0065\u0072\u003a");};_fbaad :=len (_ffbb );_ggea :=make ([]bool ,_fbaad );_bebf :=make ([]int ,0,_fbaad );_dabd :=_ffbb .llyOrdering ();var _cdag func (_facc int );_cdag =func (_fgbb int ){_ggea [_fgbb ]=true ;for _affg :=0;_affg < _fbaad ;_affg ++{if !_ggea [_affg ]{if _ffbb .readBefore (_dabd ,_fgbb ,_affg ){_cdag (_affg );};};};_bebf =append (_bebf ,_fgbb );};for _bggd :=0;_bggd < _fbaad ;_bggd ++{if !_ggea [_bggd ]{_cdag (_bggd );};};return _gegad (_bebf );};var (_gaad =map[rune ]string {0x0060:"\u0300",0x02CB:"\u0300",0x0027:"\u0301",0x00B4:"\u0301",0x02B9:"\u0301",0x02CA:"\u0301",0x005E:"\u0302",0x02C6:"\u0302",0x007E:"\u0303",0x02DC:"\u0303",0x00AF:"\u0304",0x02C9:"\u0304",0x02D8:"\u0306",0x02D9:"\u0307",0x00A8:"\u0308",0x00B0:"\u030a",0x02DA:"\u030a",0x02BA:"\u030b",0x02DD:"\u030b",0x02C7:"\u030c",0x02C8:"\u030d",0x0022:"\u030e",0x02BB:"\u0312",0x02BC:"\u0313",0x0486:"\u0313",0x055A:"\u0313",0x02BD:"\u0314",0x0485:"\u0314",0x0559:"\u0314",0x02D4:"\u031d",0x02D5:"\u031e",0x02D6:"\u031f",0x02D7:"\u0320",0x02B2:"\u0321",0x00B8:"\u0327",0x02CC:"\u0329",0x02B7:"\u032b",0x02CD:"\u0331",0x005F:"\u0332",0x204E:"\u0359"};);func (_fda *textObject )moveText (_dcb ,_fga float64 ){_fda .moveTo (_dcb ,_fga )};func _fcgg (_eafgd []*textMark ,_bcfgf _db .PdfRectangle )*textWord {_bfda :=_eafgd [0].PdfRectangle ;_ggbda :=_eafgd [0]._agdf ;for _ ,_dffff :=range _eafgd [1:]{_bfda =_aagb (_bfda ,_dffff .PdfRectangle );if _dffff ._agdf > _ggbda {_ggbda =_dffff ._agdf ;};};return &textWord {PdfRectangle :_bfda ,_fegd :_eafgd ,_gggc :_bcfgf .Ury -_bfda .Lly ,_dcea :_ggbda };};

// ImageExtractOptions contains options for controlling image extraction from
// PDF pages.
type ImageExtractOptions struct{IncludeInlineStencilMasks bool ;};func (_dcac paraList )extractTables ()paraList {if _dddg {_ad .Log .Debug ("\u0065\u0078\u0074r\u0061\u0063\u0074\u0054\u0061\u0062\u006c\u0065\u0073\u003d\u0025\u0064\u0020\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u0078\u003d\u003d\u003d\u003d=\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d",len (_dcac ));};if len (_dcac )< _ffb {return _dcac ;};_cdbg :=_dcac .findTables ();if _dddg {_ad .Log .Info ("c\u006f\u006d\u0062\u0069\u006e\u0065d\u0020\u0074\u0061\u0062\u006c\u0065s\u0020\u0025\u0064\u0020\u003d\u003d\u003d=\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d=\u003d",len (_cdbg ));for _ffde ,_ccbca :=range _cdbg {_ccbca .log (_eg .Sprintf ("c\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u0020\u0025\u0064",_ffde ));};};return _dcac .applyTables (_cdbg );};func (_bdc *textObject )showText (_fbd []byte )error {return _bdc .renderText (_fbd )};func (_bba *textObject )reset (){_bba ._efb =_ca .IdentityMatrix ();_bba ._dea =_ca .IdentityMatrix ();_bba ._gfc =nil ;};func _abbb (_ffab []*textWord ,_dcbg int )[]*textWord {_bafa :=len (_ffab );copy (_ffab [_dcbg :],_ffab [_dcbg +1:]);return _ffab [:_bafa -1];};func (_dgfa *textTable )getDown ()paraList {_bceb :=make (paraList ,_dgfa ._decb );for _fbaf :=0;_fbaf < _dgfa ._decb ;_fbaf ++{_dgdd :=_dgfa .get (_fbaf ,_dgfa ._edd -1)._bbgc ;if _dgdd ==nil ||_dgdd ._geab {return nil ;};_bceb [_fbaf ]=_dgdd ;};for _cggfa :=0;_cggfa < _dgfa ._decb -1;_cggfa ++{if _bceb [_cggfa ]._ggcd !=_bceb [_cggfa +1]{return nil ;};};return _bceb ;};func (_gbb *wordBag )depthBand (_gda ,_gbddd float64 )[]int {if len (_gbb ._eceb )==0{return nil ;};return _gbb .depthRange (_gbb .getDepthIdx (_gda ),_gbb .getDepthIdx (_gbddd ));};func _accb (_bed ,_ccde bounded )float64 {_adaac :=_bbc (_bed ,_ccde );if !_dagc (_adaac ){return _adaac ;};return _dgaa (_bed ,_ccde );};func _defd (_dfff string )bool {for _ ,_ffff :=range _dfff {if !_e .IsSpace (_ffff ){return false ;};};return true ;};func (_eaa *textObject )moveTextSetLeading (_caf ,_age float64 ){_eaa ._dggf ._ddab =-_age ;_eaa .moveTo (_caf ,_age );};func _fagf (_ffec string )(string ,bool ){_edabc :=[]rune (_ffec );if len (_edabc )!=1{return "",false ;};_dfedf ,_dbee :=_gaad [_edabc [0]];return _dfedf ,_dbee ;};func _ceagc (_afcf *wordBag ,_gdcb *textWord ,_bgf float64 )bool {return _afcf .Urx <=_gdcb .Llx &&_gdcb .Llx < _afcf .Urx +_bgf ;};const _dgbf =1.0/1000.0;func (_badc paraList )readBefore (_ggbde []int ,_ccfb ,_fgg int )bool {_aeegc ,_fagc :=_badc [_ccfb ],_badc [_fgg ];if _gdaa (_aeegc ,_fagc )&&_aeegc .Lly > _fagc .Lly {return true ;};if !(_aeegc ._dfaf .Urx < _fagc ._dfaf .Llx ){return false ;};_fbc ,_gcg :=_aeegc .Lly ,_fagc .Lly ;if _fbc > _gcg {_gcg ,_fbc =_fbc ,_gcg ;};_dbge :=_c .Max (_aeegc ._dfaf .Llx ,_fagc ._dfaf .Llx );_dgd :=_c .Min (_aeegc ._dfaf .Urx ,_fagc ._dfaf .Urx );_dcdd :=_badc .llyRange (_ggbde ,_fbc ,_gcg );for _ ,_gbfe :=range _dcdd {if _gbfe ==_ccfb ||_gbfe ==_fgg {continue ;};_bafc :=_badc [_gbfe ];if _bafc ._dfaf .Llx <=_dgd &&_dbge <=_bafc ._dfaf .Urx {return false ;};};return true ;};func (_gea *textObject )getFillColor ()_cd .Color {return _cacc (_gea ._cea .ColorspaceNonStroking ,_gea ._cea .ColorNonStroking );};func _fgeg (_gcfc ,_fgbg _db .PdfRectangle )bool {return _gcfc .Llx <=_fgbg .Llx &&_fgbg .Urx <=_gcfc .Urx &&_gcfc .Lly <=_fgbg .Lly &&_fgbg .Ury <=_gcfc .Ury ;};

// String returns a string describing `ma`.
func (_eeg TextMarkArray )String ()string {_bdba :=len (_eeg ._bbaf );if _bdba ==0{return "\u0045\u004d\u0050T\u0059";};_egc :=_eeg ._bbaf [0];_afac :=_eeg ._bbaf [_bdba -1];return _eg .Sprintf ("\u007b\u0054\u0045\u0058\u0054\u004d\u0041\u0052K\u0041\u0052\u0052AY\u003a\u0020\u0025\u0064\u0020\u0065l\u0065\u006d\u0065\u006e\u0074\u0073\u000a\u0009\u0066\u0069\u0072\u0073\u0074\u003d\u0025s\u000a\u0009\u0020\u006c\u0061\u0073\u0074\u003d%\u0073\u007d",_bdba ,_egc ,_afac );};func (_eaba *textLine )bbox ()_db .PdfRectangle {return _eaba .PdfRectangle };func (_dcfa *textLine )text ()string {var _aeeg []string ;for _ ,_gdgd :=range _dcfa ._bdf {if _gdgd ._fbeg {_aeeg =append (_aeeg ,"\u0020");};_aeeg =append (_aeeg ,_gdgd ._fbcaa );};return _d .Join (_aeeg ,"");};const _fcd =20;

// ExtractPageText returns the text contents of `e` (an Extractor for a page) as a PageText.
// TODO(peterwilliams97): The stats complicate this function signature and aren't very useful.
//                        Replace with a function like Extract() (*PageText, error)
func (_dff *Extractor )ExtractPageText ()(*PageText ,int ,int ,error ){_cec ,_cfgd ,_efd ,_baee :=_dff .extractPageText (_dff ._aa ,_dff ._da ,_ca .IdentityMatrix (),0);if _baee !=nil {return nil ,0,0,_baee ;};_cec .computeViews ();_baee =_bgfa (_cec );if _baee !=nil {return nil ,0,0,_baee ;};return _cec ,_cfgd ,_efd ,nil ;};func (_dbad paraList )applyTables (_bbb []*textTable )paraList {_faed :=map[*textPara ]struct{}{};var _cbdb paraList ;for _ ,_beac :=range _bbb {for _ ,_cfeg :=range _beac ._edca {_faed [_cfeg ]=struct{}{};};_cbdb =append (_cbdb ,_beac .newTablePara ());};for _ ,_affgc :=range _dbad {if _ ,_fceg :=_faed [_affgc ];!_fceg {_cbdb =append (_cbdb ,_affgc );};};return _cbdb ;};func (_gdd *stateStack )empty ()bool {return len (*_gdd )==0};type event struct{_dffe float64 ;_faeb bool ;_dggff int ;};func (_badg *wordBag )stratum (_gfbb int )[]*textWord {_afaf :=_badg ._eceb [_gfbb ];_ddcc :=make ([]*textWord ,len (_afaf ));copy (_ddcc ,_afaf );return _ddcc ;};func (_badgf *textMark )inDiacriticArea (_bgfg *textMark )bool {_dbgd :=_badgf .Llx -_bgfg .Llx ;_agdg :=_badgf .Urx -_bgfg .Urx ;_ccbbd :=_badgf .Lly -_bgfg .Lly ;return _c .Abs (_dbgd +_agdg )< _badgf .Width ()*_ebca &&_c .Abs (_ccbbd )< _badgf .Height ()*_ebca ;};func (_ccgf *textObject )setCharSpacing (_gbd float64 ){if _ccgf ==nil {return ;};_ccgf ._dggf ._baeg =_gbd ;if _fbda {_ad .Log .Info ("\u0073\u0065t\u0043\u0068\u0061\u0072\u0053\u0070\u0061\u0063\u0069\u006e\u0067\u003a\u0020\u0025\u002e\u0032\u0066\u0020\u0073\u0074\u0061\u0074e=\u0025\u0073",_gbd ,_ccgf ._dggf .String ());};};func (_dabf paraList )reorder (_fgfa []int ){_gffa :=make (paraList ,len (_dabf ));for _bgdcg ,_gacd :=range _fgfa {_gffa [_bgdcg ]=_dabf [_gacd ];};copy (_dabf ,_gffa );};func (_fdga paraList )toTextMarks ()[]TextMark {_gfd :=0;var _egfec []TextMark ;for _bcbg ,_fedg :=range _fdga {_ced :=_fedg .toTextMarks (&_gfd );_egfec =append (_egfec ,_ced ...);if _bcbg !=len (_fdga )-1{if _fbbf (_fedg ,_fdga [_bcbg +1]){_egfec =_bgbb (_egfec ,&_gfd ,"\u0020");}else {_egfec =_bgbb (_egfec ,&_gfd ,"\u000a");_egfec =_bgbb (_egfec ,&_gfd ,"\u000a");};};};_egfec =_bgbb (_egfec ,&_gfd ,"\u000a");_egfec =_bgbb (_egfec ,&_gfd ,"\u000a");return _egfec ;};func _gbbc (_cdae *wordBag ,_bef *textWord ,_cabfg float64 )bool {return _bef .Llx < _cdae .Urx +_cabfg &&_cdae .Llx -_cabfg < _bef .Urx ;};func (_bfbgb paraList )eventNeighbours (_aaec []event )map[*textPara ][]int {_ac .Slice (_aaec ,func (_ebeg ,_dcaca int )bool {_aeecg ,_ggee :=_aaec [_ebeg ],_aaec [_dcaca ];_fcecg ,_fgga :=_aeecg ._dffe ,_ggee ._dffe ;if _fcecg !=_fgga {return _fcecg < _fgga ;};if _aeecg ._faeb !=_ggee ._faeb {return _aeecg ._faeb ;};return _ebeg < _dcaca ;});_bcge :=map[int ]map[int ]struct{}{};_agdgd :=map[int ]struct{}{};for _ ,_abb :=range _aaec {if _abb ._faeb {_bcge [_abb ._dggff ]=map[int ]struct{}{};for _dggga :=range _agdgd {if _dggga !=_abb ._dggff {_bcge [_abb ._dggff ][_dggga ]=struct{}{};_bcge [_dggga ][_abb ._dggff ]=struct{}{};};};_agdgd [_abb ._dggff ]=struct{}{};}else {delete (_agdgd ,_abb ._dggff );};};_ecddd :=map[*textPara ][]int {};for _gfaa ,_dbade :=range _bcge {_ebde :=_bfbgb [_gfaa ];_aggc :=make ([]int ,len (_dbade ));_bcgd :=0;for _ddfe :=range _dbade {_aggc [_bcgd ]=_ddfe ;_bcgd ++;};_ecddd [_ebde ]=_aggc ;};return _ecddd ;};func _fbea (_cffd []TextMark ,_edcb *int ,_agag TextMark )[]TextMark {_agag .Offset =*_edcb ;_cffd =append (_cffd ,_agag );*_edcb +=len (_agag .Text );return _cffd ;};func (_gbfb paraList )llyOrdering ()[]int {_badca :=make ([]int ,len (_gbfb ));for _aca :=range _gbfb {_badca [_aca ]=_aca ;};_ac .SliceStable (_badca ,func (_eeea ,_aafa int )bool {_cgab ,_cccg :=_badca [_eeea ],_badca [_aafa ];return _gbfb [_cgab ].Lly < _gbfb [_cccg ].Lly ;});return _badca ;};func _dagc (_fgbga float64 )bool {return _c .Abs (_fgbga )< TOL };const _ceeg =10;var _aacgg =TextMark {Text :"\u005b\u0058\u005d",Original :"\u0020",Meta :true ,FillColor :_cd .White ,StrokeColor :_cd .White };func _fef (_fefd *wordBag ,_bdgd int )*textLine {_efadd :=_fefd .firstWord (_bdgd );_cfdf :=textLine {PdfRectangle :_efadd .PdfRectangle ,_baaf :_efadd ._dcea ,_ggdc :_efadd ._gggc };_cfdf .pullWord (_fefd ,_efadd ,_bdgd );return &_cfdf ;};

// TableCell is a cell in a TextTable.
type TableCell struct{

// Text is the extracted text.
Text string ;

// Marks returns the TextMarks corresponding to the text in Text.
Marks TextMarkArray ;};

// ImageMark represents an image drawn on a page and its position in device coordinates.
// All coordinates are in device coordinates.
type ImageMark struct{Image *_db .Image ;

// Dimensions of the image as displayed in the PDF.
Width float64 ;Height float64 ;

// Position of the image in PDF coordinates (lower left corner).
X float64 ;Y float64 ;

// Angle in degrees, if rotated.
Angle float64 ;};func (_edb paraList )computeEBBoxes (){if _abddd {_ad .Log .Info ("\u0063o\u006dp\u0075\u0074\u0065\u0045\u0042\u0042\u006f\u0078\u0065\u0073\u003a");};for _ ,_fbbfc :=range _edb {_fbbfc ._dfaf =_fbbfc .PdfRectangle ;};_defg :=_edb .yNeighbours ();for _ddbg ,_daea :=range _edb {_eed :=_daea ._dfaf ;_eccg ,_ebcc :=-1.0e9,+1.0e9;for _ ,_bdff :=range _defg [_daea ]{_ggfg :=_edb [_bdff ]._dfaf ;if _ggfg .Urx < _eed .Llx {_eccg =_c .Max (_eccg ,_ggfg .Urx );}else if _eed .Urx < _ggfg .Llx {_ebcc =_c .Min (_ebcc ,_ggfg .Llx );};};for _gacad ,_efdb :=range _edb {_baedd :=_efdb ._dfaf ;if _ddbg ==_gacad ||_baedd .Ury > _eed .Lly {continue ;};if _eccg <=_baedd .Llx &&_baedd .Llx < _eed .Llx {_eed .Llx =_baedd .Llx ;}else if _baedd .Urx <=_ebcc &&_eed .Urx < _baedd .Urx {_eed .Urx =_baedd .Urx ;};};if _abddd {_eg .Printf ("%\u0034\u0064\u003a\u0020%6\u002e2\u0066\u002d\u003e\u0025\u0036.\u0032\u0066\u0020\u0025\u0071\u000a",_ddbg ,_daea ._dfaf ,_eed ,_dedb (_daea .text (),50));};_daea ._dfaf =_eed ;};if _aebf {for _ ,_edfbg :=range _edb {_edfbg .PdfRectangle =_edfbg ._dfaf ;};};};func _fgeb (_ddbe ,_abcb float64 )string {_abdg :=!_dagc (_ddbe -_abcb );if _abdg {return "\u000a";};return "\u0020";};func _efeb (_cgbce []*textWord ,_dbaa *textWord )[]*textWord {for _eadg ,_ffbc :=range _cgbce {if _ffbc ==_dbaa {return _abbb (_cgbce ,_eadg );};};_ad .Log .Error ("\u0072\u0065\u006d\u006f\u0076e\u0057\u006f\u0072\u0064\u003a\u0020\u0077\u006f\u0072\u0064\u0073\u0020\u0064o\u0065\u0073\u006e\u0027\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0077\u006f\u0072\u0064\u003d\u0025\u0073",_dbaa );return nil ;};func (_gd *imageExtractContext )extractFormImages (_acd *_dg .PdfObjectName ,_ceb _fe .GraphicsState ,_ecc *_db .PdfPageResources )error {_bec ,_eac :=_ecc .GetXObjectFormByName (*_acd );if _eac !=nil {return _eac ;};if _bec ==nil {return nil ;};_fac ,_eac :=_bec .GetContentStream ();if _eac !=nil {return _eac ;};_cga :=_bec .Resources ;if _cga ==nil {_cga =_ecc ;};_eac =_gd .extractContentStreamImages (string (_fac ),_cga );if _eac !=nil {return _eac ;};_gd ._baf ++;return nil ;};const TOL =1.0e-6;func (_dcbc *wordBag )minDepth ()float64 {return _dcbc ._aae -(_dcbc .Ury -_dcbc ._aea )};func _dcba (_cfaa _db .PdfRectangle )textState {return textState {_ae :100,_gafa :RenderModeFill ,_fcgc :_cfaa };};

// New returns an Extractor instance for extracting content from the input PDF page.
func New (page *_db .PdfPage )(*Extractor ,error ){_gag ,_cf :=page .GetAllContentStreams ();if _cf !=nil {return nil ,_cf ;};_cbf ,_cf :=page .GetMediaBox ();if _cf !=nil {return nil ,_eg .Errorf ("\u0065\u0078\u0074r\u0061\u0063\u0074\u006fr\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u002e\u0020\u0025\u0076",_cf );};_df :=&Extractor {_aa :_gag ,_da :page .Resources ,_adg :*_cbf ,_ba :map[string ]fontEntry {},_ga :map[string ]textResult {}};return _df ,nil ;};

// String returns a string describing the current state of the textState stack.
func (_ecffa *stateStack )String ()string {_dca :=[]string {_eg .Sprintf ("\u002d\u002d\u002d\u002d f\u006f\u006e\u0074\u0020\u0073\u0074\u0061\u0063\u006b\u003a\u0020\u0025\u0064",len (*_ecffa ))};for _fbed ,_ffe :=range *_ecffa {_decg :="\u003c\u006e\u0069l\u003e";if _ffe !=nil {_decg =_ffe .String ();};_dca =append (_dca ,_eg .Sprintf ("\u0009\u0025\u0032\u0064\u003a\u0020\u0025\u0073",_fbed ,_decg ));};return _d .Join (_dca ,"\u000a");};func (_bbdb *wordBag )sort (){for _ ,_fgea :=range _bbdb ._eceb {_ac .Slice (_fgea ,func (_cdfg ,_deca int )bool {return _bbc (_fgea [_cdfg ],_fgea [_deca ])< 0});};};func (_ed *imageExtractContext )extractXObjectImage (_bae *_dg .PdfObjectName ,_afcd _fe .GraphicsState ,_bgce *_db .PdfPageResources )error {_ce ,_ :=_bgce .GetXObjectByName (*_bae );if _ce ==nil {return nil ;};_bac ,_gb :=_ed ._bc [_ce ];if !_gb {_bd ,_cfe :=_bgce .GetXObjectImageByName (*_bae );if _cfe !=nil {return _cfe ;};if _bd ==nil {return nil ;};_dac ,_cfe :=_bd .ToImage ();if _cfe !=nil {return _cfe ;};_bac =&cachedImage {_cc :_dac ,_cg :_bd .ColorSpace };_ed ._bc [_ce ]=_bac ;};_fd :=_bac ._cc ;_ddd :=_bac ._cg ;_geb ,_dc :=_ddd .ImageToRGB (*_fd );if _dc !=nil {return _dc ;};_ad .Log .Debug ("@\u0044\u006f\u0020\u0043\u0054\u004d\u003a\u0020\u0025\u0073",_afcd .CTM .String ());_gc :=ImageMark {Image :&_geb ,Width :_afcd .CTM .ScalingFactorX (),Height :_afcd .CTM .ScalingFactorY (),Angle :_afcd .CTM .Angle ()};_gc .X ,_gc .Y =_afcd .CTM .Translation ();_ed ._cfa =append (_ed ._cfa ,_gc );_ed ._egf ++;return nil ;};

// String returns a description of `w`.
func (_bdbeg *textWord )String ()string {return _eg .Sprintf ("\u0025\u002e2\u0066\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\"%\u0073\u0022",_bdbeg ._gggc ,_bdbeg .PdfRectangle ,_bdbeg ._dcea ,_bdbeg ._fbcaa );};func (_dbc *textObject )setTextRenderMode (_bea int ){if _dbc ==nil {return ;};_dbc ._dggf ._gafa =RenderMode (_bea );};func (_cccac *textWord )toTextMarks (_eefc *int )[]TextMark {var _ccfa []TextMark ;for _ ,_dced :=range _cccac ._fegd {_ccfa =_fbea (_ccfa ,_eefc ,_dced .ToTextMark ());};return _ccfa ;};func (_cbcg *textObject )setWordSpacing (_ddfa float64 ){if _cbcg ==nil {return ;};_cbcg ._dggf ._gce =_ddfa ;};func (_cabg *textPara )bbox ()_db .PdfRectangle {return _cabg .PdfRectangle };func _gfea (_afba ,_gdfd int )int {if _afba > _gdfd {return _afba ;};return _gdfd ;};var _cab =false ;

// Text returns the extracted page text.
func (_gbe PageText )Text ()string {return _gbe ._bbdda };func (_ec *imageExtractContext )extractInlineImage (_fee *_fe .ContentStreamInlineImage ,_cca _fe .GraphicsState ,_fa *_db .PdfPageResources )error {_ff ,_ccg :=_fee .ToImage (_fa );if _ccg !=nil {return _ccg ;};_cdd ,_ccg :=_fee .GetColorSpace (_fa );if _ccg !=nil {return _ccg ;};if _cdd ==nil {_cdd =_db .NewPdfColorspaceDeviceGray ();};_gfg ,_ccg :=_cdd .ImageToRGB (*_ff );if _ccg !=nil {return _ccg ;};_ab :=ImageMark {Image :&_gfg ,Width :_cca .CTM .ScalingFactorX (),Height :_cca .CTM .ScalingFactorY (),Angle :_cca .CTM .Angle ()};_ab .X ,_ab .Y =_cca .CTM .Translation ();_ec ._cfa =append (_ec ._cfa ,_ab );_ec ._ea ++;return nil ;};func (_fbg *textObject )setFont (_egfg string ,_gaf float64 )error {if _fbg ==nil {return nil ;};_fbg ._dggf ._ggba =_gaf ;_fbdb ,_gee :=_fbg .getFont (_egfg );if _gee !=nil {return _gee ;};_fbg ._dggf ._cgcf =_fbdb ;if _fbg ._aceg .empty (){_fbg ._aceg .push (_fbg ._dggf );}else {_fbg ._aceg .top ()._cgcf =_fbg ._dggf ._cgcf ;};return nil ;};type textResult struct{_ecf PageText ;_ddf int ;_dec int ;};func _dcee (_fgdb []*textMark ,_aaed _db .PdfRectangle )[]*textWord {var _aafdb []*textWord ;var _gada *textWord ;_adcfa :=func (){if _gada !=nil {_aggb :=_gada .computeText ();if !_defd (_aggb ){_gada ._fbcaa =_aggb ;_aafdb =append (_aafdb ,_gada );};_gada =nil ;};};for _ ,_fceed :=range _fgdb {if _bacc &&_gada !=nil &&len (_gada ._fegd )> 0{_aadb :=_gada ._fegd [len (_gada ._fegd )-1];_abbe ,_agfd :=_fagf (_fceed ._acgf );_dgda ,_edfd :=_fagf (_aadb ._acgf );if _agfd &&!_edfd &&_aadb .inDiacriticArea (_fceed ){_gada .addDiacritic (_abbe );continue ;};if _edfd &&!_agfd &&_fceed .inDiacriticArea (_aadb ){_gada ._fegd =_gada ._fegd [:len (_gada ._fegd )-1];_gada .appendMark (_fceed ,_aaed );_gada .addDiacritic (_dgda );continue ;};};_fbcc :=_defd (_fceed ._acgf );if _fbcc {_adcfa ();continue ;};if _gada ==nil &&!_fbcc {_gada =_fcgg ([]*textMark {_fceed },_aaed );continue ;};_eeag :=_gada ._dcea ;_bfad :=_c .Abs (_ecdd (_aaed ,_fceed )-_gada ._gggc )/_eeag ;_fdaga :=_bede (_fceed ,_gada )/_eeag ;if _fdaga >=_gddeg ||!(-_baed <=_fdaga &&_bfad <=_dcfd ){_adcfa ();_gada =_fcgg ([]*textMark {_fceed },_aaed );continue ;};_gada .appendMark (_fceed ,_aaed );};_adcfa ();return _aafdb ;};

// String returns a string describing `tm`.
func (_gege TextMark )String ()string {_cfbc :=_gege .BBox ;var _eegb string ;if _gege .Font !=nil {_eegb =_gege .Font .String ();if len (_eegb )> 50{_eegb =_eegb [:50]+"\u002e\u002e\u002e";};};var _beb string ;if _gege .Meta {_beb ="\u0020\u002a\u004d\u002a";};return _eg .Sprintf ("\u007b\u0054\u0065\u0078t\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0064\u0020%\u0071\u003d\u0025\u0030\u0032\u0078\u0020\u0028\u0025\u0036\u002e\u0032\u0066\u002c\u0020\u0025\u0036\u002e2\u0066\u0029\u0020\u0028\u00256\u002e\u0032\u0066\u002c\u0020\u0025\u0036\u002e\u0032\u0066\u0029\u0020\u0025\u0073\u0025\u0073\u007d",_gege .Offset ,_gege .Text ,[]rune (_gege .Text ),_cfbc .Llx ,_cfbc .Lly ,_cfbc .Urx ,_cfbc .Ury ,_eegb ,_beb );};func (_ebge *textTable )bbox ()_db .PdfRectangle {return _ebge .PdfRectangle };func _ccac (_cdab float64 )int {var _aacc int ;if _cdab >=0{_aacc =int (_cdab /_bdcf );}else {_aacc =int (_cdab /_bdcf )-1;};return _aacc ;};func (_acf *textObject )getFontDict (_eege string )(_cgdf _dg .PdfObject ,_bcf error ){_caff :=_acf ._dace ;if _caff ==nil {_ad .Log .Debug ("g\u0065\u0074\u0046\u006f\u006e\u0074D\u0069\u0063\u0074\u002e\u0020\u004eo\u0020\u0072\u0065\u0073\u006f\u0075\u0072c\u0065\u0073\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025#\u0071",_eege );return nil ,nil ;};_cgdf ,_edg :=_caff .GetFontByName (_dg .PdfObjectName (_eege ));if !_edg {_ad .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0067\u0065t\u0046\u006f\u006et\u0044\u0069\u0063\u0074\u003a\u0020\u0046\u006f\u006et \u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020\u006e\u0061m\u0065\u003d%\u0023\u0071",_eege );return nil ,_f .New ("f\u006f\u006e\u0074\u0020no\u0074 \u0069\u006e\u0020\u0072\u0065s\u006f\u0075\u0072\u0063\u0065\u0073");};return _cgdf ,nil ;};func _fbbf (_egfge ,_dagb *textPara )bool {return _dagc (_egfge .depth ()-_dagb .depth ())};

// String returns a description of `t`.
func (_cgec *textTable )String ()string {return _eg .Sprintf ("\u0025d\u0020\u0078\u0020\u0025\u0064",_cgec ._decb ,_cgec ._edd );};type bounded interface{bbox ()_db .PdfRectangle };func _ddcdc (_adac []*textWord ,_aff float64 )*wordBag {_dggb :=_geea (_adac [0],_aff );for _ ,_acca :=range _adac [1:]{_cddd :=_ccac (_acca ._gggc );_dggb ._eceb [_cddd ]=append (_dggb ._eceb [_cddd ],_acca );};_dggb .sort ();return _dggb ;};func (_adbe *textObject )getFont (_begad string )(*_db .PdfFont ,error ){if _adbe ._egfe ._ba !=nil {_adbe ._egfe ._ge ++;_eecd ,_aef :=_adbe ._egfe ._ba [_begad ];if _aef {_eecd ._gcb =_adbe ._egfe ._ge ;return _eecd ._dga ,nil ;};};_ecb ,_ffaa :=_adbe .getFontDirect (_begad );if _ffaa !=nil {return nil ,_ffaa ;};if _adbe ._egfe ._ba !=nil {_dddf :=fontEntry {_ecb ,_adbe ._egfe ._ge };if len (_adbe ._egfe ._ba )>=_ceeg {var _bacf []string ;for _abe :=range _adbe ._egfe ._ba {_bacf =append (_bacf ,_abe );};_ac .Slice (_bacf ,func (_aacb ,_faa int )bool {return _adbe ._egfe ._ba [_bacf [_aacb ]]._gcb < _adbe ._egfe ._ba [_bacf [_faa ]]._gcb ;});delete (_adbe ._egfe ._ba ,_bacf [0]);};_adbe ._egfe ._ba [_begad ]=_dddf ;};return _ecb ,nil ;};func _cbe (_fde []TextMark ,_aafag *int )[]TextMark {_dafa :=_fde [len (_fde )-1];_geff :=[]rune (_dafa .Text );if len (_geff )==1{_fde =_fde [:len (_fde )-1];_dggfd :=_fde [len (_fde )-1];*_aafag =_dggfd .Offset +len (_dggfd .Text );}else {_gbgge :=_cagf (_dafa .Text );*_aafag +=len (_gbgge )-len (_dafa .Text );_dafa .Text =_gbgge ;};return _fde ;};

// TextTable represents a table.
// Cells are ordered top-to-bottom, left-to-right.
// Cells[y] is the (0-offset) y'th row in the table.
// Cells[y][x] is the (0-offset) x'th column in the table.
type TextTable struct{W ,H int ;Cells [][]TableCell ;};func (_dgaaf *textTable )markCells (){for _efda :=0;_efda < _dgaaf ._edd ;_efda ++{for _bgdg :=0;_bgdg < _dgaaf ._decb ;_bgdg ++{_edcdc :=_dgaaf .get (_bgdg ,_efda );_edcdc ._geab =true ;};};};func (_cae *textObject )checkOp (_cgb *_fe .ContentStreamOperation ,_cbfc int ,_fgbf bool )(_cfge bool ,_bece error ){if _cae ==nil {var _efa []_dg .PdfObject ;if _cbfc > 0{_efa =_cgb .Params ;if len (_efa )> _cbfc {_efa =_efa [:_cbfc ];};};_ad .Log .Debug ("\u0025\u0023q \u006f\u0070\u0065r\u0061\u006e\u0064\u0020out\u0073id\u0065\u0020\u0074\u0065\u0078\u0074\u002e p\u0061\u0072\u0061\u006d\u0073\u003d\u0025+\u0076",_cgb .Operand ,_efa );};if _cbfc >=0{if len (_cgb .Params )!=_cbfc {if _fgbf {_bece =_f .New ("\u0069n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0070\u0061r\u0061m\u0065t\u0065\u0072\u0020\u0063\u006f\u0075\u006et");};_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0023\u0071\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020h\u0061\u0076\u0065\u0020\u0025\u0064\u0020i\u006e\u0070\u0075\u0074\u0020\u0070\u0061\u0072\u0061\u006d\u0073,\u0020\u0067\u006f\u0074\u0020\u0025\u0064\u0020\u0025\u002b\u0076",_cgb .Operand ,_cbfc ,len (_cgb .Params ),_cgb .Params );return false ,_bece ;};};return true ,nil ;};func (_bbfdf *textWord )computeText ()string {_bffaf :=make ([]string ,len (_bbfdf ._fegd ));for _bgdf ,_bcea :=range _bbfdf ._fegd {_bffaf [_bgdf ]=_bcea ._acgf ;};return _d .Join (_bffaf ,"");};

// String returns a description of `tm`.
func (_aebfc *textMark )String ()string {return _eg .Sprintf ("\u0025\u002e\u0032f \u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\u0022\u0025\u0073\u0022",_aebfc .PdfRectangle ,_aebfc ._agdf ,_aebfc ._acgf );};

// String returns a description of `l`.
func (_gbeb *textLine )String ()string {return _eg .Sprintf ("\u0025\u002e2\u0066\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0066\u006f\u006e\u0074\u0073\u0069\u007a\u0065\u003d\u0025\u002e\u0032\u0066\u0020\"%\u0073\u0022",_gbeb ._ggdc ,_gbeb .PdfRectangle ,_gbeb ._baaf ,_gbeb .text ());};func _ecd (_dgf *Extractor ,_dafd *_db .PdfPageResources ,_gdg _fe .GraphicsState ,_ccb *textState ,_gdgf *stateStack )*textObject {return &textObject {_egfe :_dgf ,_dace :_dafd ,_cea :_gdg ,_aceg :_gdgf ,_dggf :_ccb ,_efb :_ca .IdentityMatrix (),_dea :_ca .IdentityMatrix ()};};func (_dbac *wordBag )depthIndexes ()[]int {if len (_dbac ._eceb )==0{return nil ;};_ebcg :=make ([]int ,len (_dbac ._eceb ));_ddgd :=0;for _fdaa :=range _dbac ._eceb {_ebcg [_ddgd ]=_fdaa ;_ddgd ++;};_ac .Ints (_ebcg );return _ebcg ;};func (_dae *wordBag )text ()string {_gdff :=_dae .allWords ();_cdde :=make ([]string ,len (_gdff ));for _feg ,_caa :=range _gdff {_cdde [_feg ]=_caa ._fbcaa ;};return _d .Join (_cdde ,"\u0020");};func (_cfgdd *textWord )absorb (_fcbga *textWord ){_cfgdd .PdfRectangle =_aagb (_cfgdd .PdfRectangle ,_fcbga .PdfRectangle );_cfgdd ._fegd =append (_cfgdd ._fegd ,_fcbga ._fegd ...);};

// PageText represents the layout of text on a device page.
type PageText struct{_cabe []*textMark ;_bbdda string ;_gegc []TextMark ;_eaga []TextTable ;_gagf _db .PdfRectangle ;};type fontEntry struct{_dga *_db .PdfFont ;_gcb int64 ;};func (_gaea *wordBag )arrangeText ()*textPara {_gaea .sort ();if _gcaf {_gaea .removeDuplicates ();};var _ggcc []*textLine ;for _ ,_bbeb :=range _gaea .depthIndexes (){for !_gaea .empty (_bbeb ){_gcge :=_gaea .firstReadingIndex (_bbeb );_deag :=_gaea .firstWord (_gcge );_bagb :=_fef (_gaea ,_gcge );_ccbbf :=_deag ._dcea ;_cgeb :=_deag ._gggc -_aacgb *_ccbbf ;_gbed :=_deag ._gggc +_aacgb *_ccbbf ;_ecgb :=_ccca *_ccbbf ;_bffa :=_cacf *_ccbbf ;_gacaa :for {var _gfgc *textWord ;_fefc :=0;for _ ,_geaba :=range _gaea .depthBand (_cgeb ,_gbed ){_ceegd :=_gaea .highestWord (_geaba ,_cgeb ,_gbed );if _ceegd ==nil {continue ;};_daae :=_bede (_ceegd ,_bagb ._bdf [len (_bagb ._bdf )-1]);if _daae < -_bffa {break _gacaa ;};if _daae > _ecgb {continue ;};if _gfgc !=nil &&_bbc (_ceegd ,_gfgc )>=0{continue ;};_gfgc =_ceegd ;_fefc =_geaba ;};if _gfgc ==nil {break ;};_bagb .pullWord (_gaea ,_gfgc ,_fefc );};_bagb .markWordBoundaries ();_ggcc =append (_ggcc ,_bagb );};};if len (_ggcc )==0{return nil ;};_ac .Slice (_ggcc ,func (_aadg ,_eeb int )bool {return _dcbac (_ggcc [_aadg ],_ggcc [_eeb ])< 0});_cadg :=_beaf (_gaea .PdfRectangle ,_ggcc );if _bfdd {_ad .Log .Info ("\u0061\u0072\u0072an\u0067\u0065\u0054\u0065\u0078\u0074\u0020\u0021\u0021\u0021\u0020\u0070\u0061\u0072\u0061\u003d\u0025\u0073",_cadg .String ());if _ged {for _gbdc ,_adcca :=range _cadg ._dgaaa {_eg .Printf ("\u0025\u0034\u0064\u003a\u0020\u0025\u0073\u000a",_gbdc ,_adcca .String ());if _eada {for _efbb ,_gfec :=range _adcca ._bdf {_eg .Printf ("\u0025\u0038\u0064\u003a\u0020\u0025\u0073\u000a",_efbb ,_gfec .String ());for _cccd ,_dcff :=range _gfec ._fegd {_eg .Printf ("\u00251\u0032\u0064\u003a\u0020\u0025\u0073\n",_cccd ,_dcff .String ());};};};};};};return _cadg ;};func _bbg (_bdg *_fe .ContentStreamOperation )(float64 ,error ){if len (_bdg .Params )!=1{_cdgb :=_f .New ("\u0069n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0070\u0061r\u0061m\u0065t\u0065\u0072\u0020\u0063\u006f\u0075\u006et");_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0023\u0071\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020h\u0061\u0076\u0065\u0020\u0025\u0064\u0020i\u006e\u0070\u0075\u0074\u0020\u0070\u0061\u0072\u0061\u006d\u0073,\u0020\u0067\u006f\u0074\u0020\u0025\u0064\u0020\u0025\u002b\u0076",_bdg .Operand ,1,len (_bdg .Params ),_bdg .Params );return 0.0,_cdgb ;};return _dg .GetNumberAsFloat (_bdg .Params [0]);};func _bgbb (_agb []TextMark ,_adcb *int ,_eacc string )[]TextMark {_cgbf :=_aacgg ;_cgbf .Text =_eacc ;return _fbea (_agb ,_adcb ,_cgbf );};type textPara struct{_db .PdfRectangle ;_dfaf _db .PdfRectangle ;_dgaaa []*textLine ;_befd *textTable ;_geab bool ;_dfef *textPara ;_ggcd *textPara ;_dffg *textPara ;_bbgc *textPara ;};

// Extractor stores and offers functionality for extracting content from PDF pages.
type Extractor struct{_aa string ;_da *_db .PdfPageResources ;_adg _db .PdfRectangle ;_ba map[string ]fontEntry ;_ga map[string ]textResult ;_ge int64 ;_fc int ;};func _bgfa (_bfcc *PageText )error {_eeaa :=_g .GetLicenseKey ();if _eeaa !=nil &&_eeaa .IsLicensed ()||_cab {return nil ;};_eg .Printf ("\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064\u0020c\u006f\u0070\u0079\u0020\u006f\u0066\u0020\u0055\u006e\u0069P\u0044\u0046\u000a");_eg .Println ("-\u0020\u0047\u0065\u0074\u0020\u0061\u0020\u0066\u0072e\u0065\u0020\u0074\u0072\u0069\u0061\u006c l\u0069\u0063\u0065\u006es\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070s:\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _f .New ("\u0075\u006e\u0069\u0070d\u0066\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020c\u006fd\u0065\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0064");};

// Append appends `mark` to the mark array.
func (_baa *TextMarkArray )Append (mark TextMark ){_baa ._bbaf =append (_baa ._bbaf ,mark )};func (_bfag *PageText )computeViews (){var _cgcg paraList ;_bce :=len (_bfag ._cabe );for _cfd :=0;_cfd < 360&&_bce > 0;_cfd +=90{_agd :=make ([]*textMark ,0,len (_bfag ._cabe )-_bce );for _ ,_gdb :=range _bfag ._cabe {if _gdb ._abg ==_cfd {_agd =append (_agd ,_gdb );};};if len (_agd )> 0{_agecd :=_gbggf (_agd ,_bfag ._gagf );_cgcg =append (_cgcg ,_agecd ...);_bce -=len (_agd );};};_afa :=new (_af .Buffer );_cgcg .writeText (_afa );_bfag ._bbdda =_afa .String ();_bfag ._gegc =_cgcg .toTextMarks ();_bfag ._eaga =_cgcg .tables ();};func (_ccad *textTable )getRight ()paraList {_caef :=make (paraList ,_ccad ._edd );for _cgbc :=0;_cgbc < _ccad ._edd ;_cgbc ++{_dffa :=_ccad .get (_ccad ._decb -1,_cgbc )._ggcd ;if _dffa ==nil ||_dffa ._geab {return nil ;};_caef [_cgbc ]=_dffa ;};for _ccaeg :=0;_ccaeg < _ccad ._edd -1;_ccaeg ++{if _caef [_ccaeg ]._bbgc !=_caef [_ccaeg +1]{return nil ;};};return _caef ;};func _abec (_fcgca func (*wordBag ,*textWord ,float64 )bool ,_gfag float64 )func (*wordBag ,*textWord )bool {return func (_abecb *wordBag ,_bdab *textWord )bool {return _fcgca (_abecb ,_bdab ,_gfag )};};func _cbd (_gbea []rune )bool {return len (_gbea )>=_aeec &&_e .Is (_e .Hyphen ,_gbea [len (_gbea )-1])&&!_e .IsSpace (_gbea [len (_gbea )-2]);};

// ExtractText processes and extracts all text data in content streams and returns as a string.
// It takes into account character encodings in the PDF file, which are decoded by
// CharcodeBytesToUnicode.
// Characters that can't be decoded are replaced with MissingCodeRune ('\ufffd' = ï¿½).
func (_dbb *Extractor )ExtractText ()(string ,error ){_feb ,_ ,_ ,_dgb :=_dbb .ExtractTextWithStats ();return _feb ,_dgb ;};func (_bcff *textTable )log (_agfe string ){if !_dddg {return ;};_ad .Log .Info ("~\u007e\u007e\u0020\u0025\u0073\u003a \u0025\u0064\u0020\u0078\u0020\u0025\u0064\u000a\u0020 \u0020\u0020\u0020 \u00256\u002e\u0032\u0066",_agfe ,_bcff ._decb ,_bcff ._edd ,_bcff .PdfRectangle );for _gage :=0;_gage < _bcff ._edd ;_gage ++{for _ggfb :=0;_ggfb < _bcff ._decb ;_ggfb ++{_caffa :=_bcff .get (_ggfb ,_gage );_eg .Printf ("\u00254\u0064 \u0025\u0032\u0064\u003a\u0020%\u0036\u002e2\u0066\u0020\u0025\u0071\u000a",_ggfb ,_gage ,_caffa .PdfRectangle ,_dedb (_caffa .text (),50));};};};func (_cdad *wordBag )absorb (_bbf *wordBag ){for _dbeg ,_ggdb :=range _bbf ._eceb {for _ ,_bgcf :=range _ggdb {_cdad .pullWord (_bbf ,_bgcf ,_dbeg );};};};func (_eega *textLine )toTextMarks (_fad *int )[]TextMark {var _gggd []TextMark ;for _ ,_bfac :=range _eega ._bdf {if _bfac ._fbeg {_gggd =_bgbb (_gggd ,_fad ,"\u0020");};_ede :=_bfac .toTextMarks (_fad );_gggd =append (_gggd ,_ede ...);};return _gggd ;};func (_bbfe *wordBag )maxDepth ()float64 {return _bbfe ._aae -_bbfe .Lly };const (RenderModeStroke RenderMode =1<<iota ;RenderModeFill ;RenderModeClip ;);type textWord struct{_db .PdfRectangle ;_gggc float64 ;_fbcaa string ;_fegd []*textMark ;_dcea float64 ;_fbeg bool ;};func (_bfa *Extractor )extractPageText (_cfc string ,_ebb *_db .PdfPageResources ,_cgc _ca .Matrix ,_cge int )(*PageText ,int ,int ,error ){_ad .Log .Trace ("\u0065x\u0074\u0072\u0061\u0063t\u0050\u0061\u0067\u0065\u0054e\u0078t\u003a \u006c\u0065\u0076\u0065\u006c\u003d\u0025d",_cge );_ebf :=&PageText {_gagf :_bfa ._adg };_eeec :=_dcba (_bfa ._adg );var _gfb stateStack ;_faf :=_ecd (_bfa ,_ebb ,_fe .GraphicsState {},&_eeec ,&_gfb );var _cada bool ;if _cge > _fcd {_fdc :=_f .New ("\u0066\u006f\u0072\u006d s\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077");_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0065\u0078\u0074\u0072\u0061\u0063\u0074\u0050\u0061\u0067\u0065\u0054\u0065\u0078\u0074\u002e\u0020\u0072\u0065\u0063u\u0072\u0073\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u003d\u0025\u0064 \u0065r\u0072\u003d\u0025\u0076",_cge ,_fdc );return _ebf ,_eeec ._cgg ,_eeec ._dad ,_fdc ;};_afg :=_fe .NewContentStreamParser (_cfc );_fce ,_bb :=_afg .Parse ();if _bb !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020e\u0078\u0074\u0072a\u0063\u0074\u0050\u0061g\u0065\u0054\u0065\u0078\u0074\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bb );return _ebf ,_eeec ._cgg ,_eeec ._dad ,_bb ;};_dacb :=_fe .NewContentStreamProcessor (*_fce );_dacb .AddHandler (_fe .HandlerConditionEnumAllOperands ,"",func (_bdb *_fe .ContentStreamOperation ,_dbbg _fe .GraphicsState ,_bda *_db .PdfPageResources )error {_de :=_bdb .Operand ;if _fbda {_ad .Log .Info ("\u0026&\u0026\u0020\u006f\u0070\u003d\u0025s",_bdb );};switch _de {case "\u0071":_gfb .push (&_eeec );case "\u0051":if !_gfb .empty (){_eeec =*_gfb .top ();if len (_gfb )>=2{_gfb .pop ();};};case "\u0042\u0054":if _cada {_ad .Log .Debug ("\u0042\u0054\u0020\u0063\u0061\u006c\u006c\u0065\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0069n\u0020\u0061\u0020\u0074\u0065\u0078\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");_ebf ._cabe =append (_ebf ._cabe ,_faf ._gfc ...);};_cada =true ;_cdf :=_dbbg ;_cdf .CTM =_cgc .Mult (_cdf .CTM );_faf =_ecd (_bfa ,_bda ,_cdf ,&_eeec ,&_gfb );case "\u0045\u0054":if !_cada {_ad .Log .Debug ("\u0045\u0054\u0020ca\u006c\u006c\u0065\u0064\u0020\u006f\u0075\u0074\u0073i\u0064e\u0020o\u0066 \u0061\u0020\u0074\u0065\u0078\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_cada =false ;_ebf ._cabe =append (_ebf ._cabe ,_faf ._gfc ...);_faf .reset ();case "\u0054\u002a":_faf .nextLine ();case "\u0054\u0064":if _ebe ,_ggb :=_faf .checkOp (_bdb ,2,true );!_ebe {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ggb );return _ggb ;};_adc ,_daf ,_cce :=_ebae (_bdb .Params );if _cce !=nil {return _cce ;};_faf .moveText (_adc ,_daf );case "\u0054\u0044":if _fff ,_ccdd :=_faf .checkOp (_bdb ,2,true );!_fff {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ccdd );return _ccdd ;};_bgg ,_dfed ,_cabf :=_ebae (_bdb .Params );if _cabf !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_cabf );return _cabf ;};_faf .moveTextSetLeading (_bgg ,_dfed );case "\u0054\u006a":if _cef ,_dfc :=_faf .checkOp (_bdb ,1,true );!_cef {_ad .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0054\u006a\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d%\u0076",_bdb ,_dfc );return _dfc ;};_dcg ,_cbc :=_dg .GetStringBytes (_bdb .Params [0]);if !_cbc {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020T\u006a\u0020o\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074S\u0074\u0072\u0069\u006e\u0067\u0042\u0079\u0074\u0065\u0073\u0020\u0066a\u0069\u006c\u0065\u0064",_bdb );return _dg .ErrTypeError ;};return _faf .showText (_dcg );case "\u0054\u004a":if _aag ,_bfb :=_faf .checkOp (_bdb ,1,true );!_aag {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u004a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bfb );return _bfb ;};_gcf ,_eaf :=_dg .GetArray (_bdb .Params [0]);if !_eaf {_ad .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0054\u004a\u0020\u006f\u0070\u003d\u0025s\u0020G\u0065t\u0041r\u0072\u0061\u0079\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065\u0064",_bdb );return _bb ;};return _faf .showTextAdjusted (_gcf );case "\u0027":if _efgc ,_aac :=_faf .checkOp (_bdb ,1,true );!_efgc {_ad .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u0027\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aac );return _aac ;};_fgb ,_cff :=_dg .GetStringBytes (_bdb .Params [0]);if !_cff {_ad .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020'\u0020\u006f\u0070\u003d%s \u0047et\u0053\u0074\u0072\u0069\u006e\u0067\u0042yt\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064",_bdb );return _dg .ErrTypeError ;};_faf .nextLine ();return _faf .showText (_fgb );case "\u0022":if _cag ,_cgd :=_faf .checkOp (_bdb ,3,true );!_cag {_ad .Log .Debug ("\u0045R\u0052O\u0052\u003a\u0020\u0022\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_cgd );return _cgd ;};_cdg ,_dbe ,_gadd :=_ebae (_bdb .Params [:2]);if _gadd !=nil {return _gadd ;};_dcf ,_ebd :=_dg .GetStringBytes (_bdb .Params [2]);if !_ebd {_ad .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020\"\u0020\u006f\u0070\u003d%s \u0047et\u0053\u0074\u0072\u0069\u006e\u0067\u0042yt\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064",_bdb );return _dg .ErrTypeError ;};_faf .setCharSpacing (_cdg );_faf .setWordSpacing (_dbe );_faf .nextLine ();return _faf .showText (_dcf );case "\u0054\u004c":_aab ,_gba :=_bbg (_bdb );if _gba !=nil {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u004c\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gba );return _gba ;};_faf .setTextLeading (_aab );case "\u0054\u0063":_ada ,_ffg :=_bbg (_bdb );if _ffg !=nil {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0063\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ffg );return _ffg ;};_faf .setCharSpacing (_ada );case "\u0054\u0066":if _gcc ,_cdc :=_faf .checkOp (_bdb ,2,true );!_gcc {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0066\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_cdc );return _cdc ;};_fag ,_bag :=_dg .GetNameVal (_bdb .Params [0]);if !_bag {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u004ea\u006d\u0065\u0056\u0061\u006c\u0020\u0066a\u0069\u006c\u0065\u0064",_bdb );return _dg .ErrTypeError ;};_afd ,_fcg :=_dg .GetNumberAsFloat (_bdb .Params [1]);if !_bag {_ad .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0054\u0066\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0047\u0065\u0074\u0046\u006c\u006f\u0061\u0074\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065d\u002e\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bdb ,_fcg );return _fcg ;};_fcg =_faf .setFont (_fag ,_afd );_faf ._fdag =_afc .Is (_fcg ,_dg .ErrNotSupported );if _fcg !=nil &&!_faf ._fdag {return _fcg ;};case "\u0054\u006d":if _bee ,_bcc :=_faf .checkOp (_bdb ,6,true );!_bee {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u006d\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bcc );return _bcc ;};_ace ,_dgg :=_dg .GetNumbersAsFloat (_bdb .Params );if _dgg !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dgg );return _dgg ;};_faf .setTextMatrix (_ace );case "\u0054\u0072":if _ccae ,_gde :=_faf .checkOp (_bdb ,1,true );!_ccae {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0072\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gde );return _gde ;};_edc ,_dffb :=_dg .GetIntVal (_bdb .Params [0]);if !_dffb {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0054\u0072\u0020\u006f\u0070\u003d\u0025\u0073 \u0047e\u0074\u0049\u006e\u0074\u0056\u0061\u006c\u0020\u0066\u0061\u0069\u006c\u0065\u0064",_bdb );return _dg .ErrTypeError ;};_faf .setTextRenderMode (_edc );case "\u0054\u0073":if _eeed ,_feeg :=_faf .checkOp (_bdb ,1,true );!_eeed {_ad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a \u0054\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_feeg );return _feeg ;};_egg ,_aacg :=_dg .GetNumberAsFloat (_bdb .Params [0]);if _aacg !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aacg );return _aacg ;};_faf .setTextRise (_egg );case "\u0054\u0077":if _bcbe ,_edf :=_faf .checkOp (_bdb ,1,true );!_bcbe {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_edf );return _edf ;};_eccd ,_dab :=_dg .GetNumberAsFloat (_bdb .Params [0]);if _dab !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dab );return _dab ;};_faf .setWordSpacing (_eccd );case "\u0054\u007a":if _daff ,_eag :=_faf .checkOp (_bdb ,1,true );!_daff {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_eag );return _eag ;};_ggbd ,_beg :=_dg .GetNumberAsFloat (_bdb .Params [0]);if _beg !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_beg );return _beg ;};_faf .setHorizScaling (_ggbd );case "\u0044\u006f":if len (_bdb .Params )==0{_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0058\u004fbj\u0065c\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006f\u0070\u0065\u0072\u0061n\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u006f\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072.\u0020\u0047\u006f\u0074\u0020\u0025\u002b\u0076\u002e",_bdb .Params );return _dg .ErrRangeError ;};_fcbg ,_fafe :=_dg .GetName (_bdb .Params [0]);if !_fafe {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0044\u006f\u0020\u006f\u0070e\u0072a\u0074\u006f\u0072\u0020\u0058\u004f\u0062\u006a\u0065\u0063\u0074\u0020\u006e\u0061\u006d\u0065\u0020\u006fp\u0065\u0072\u0061\u006e\u0064\u003a\u0020\u0025\u002b\u0076\u002e",_bdb .Params [0]);return _dg .ErrTypeError ;};_ ,_fdb :=_bda .GetXObjectByName (*_fcbg );if _fdb !=_db .XObjectTypeForm {break ;};_gga ,_fafe :=_bfa ._ga [_fcbg .String ()];if !_fafe {_cac ,_cage :=_bda .GetXObjectFormByName (*_fcbg );if _cage !=nil {_ad .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cage );return _cage ;};_afe ,_cage :=_cac .GetContentStream ();if _cage !=nil {_ad .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cage );return _cage ;};_aba :=_cac .Resources ;if _aba ==nil {_aba =_bda ;};_dgc ,_geg ,_ead ,_cage :=_bfa .extractPageText (string (_afe ),_aba ,_cgc .Mult (_dbbg .CTM ),_cge +1);if _cage !=nil {_ad .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cage );return _cage ;};_gga =textResult {*_dgc ,_geg ,_ead };_bfa ._ga [_fcbg .String ()]=_gga ;};_ebf ._cabe =append (_ebf ._cabe ,_gga ._ecf ._cabe ...);_eeec ._cgg +=_gga ._ddf ;_eeec ._dad +=_gga ._dec ;case "\u0072\u0067","\u0067","\u006b","\u0063\u0073","\u0073\u0063","\u0073\u0063\u006e":_faf ._cea .ColorspaceNonStroking =_dbbg .ColorspaceNonStroking ;_faf ._cea .ColorNonStroking =_dbbg .ColorNonStroking ;case "\u0052\u0047","\u0047","\u004b","\u0043\u0053","\u0053\u0043","\u0053\u0043\u004e":_faf ._cea .ColorspaceStroking =_dbbg .ColorspaceStroking ;_faf ._cea .ColorStroking =_dbbg .ColorStroking ;};return nil ;});_bb =_dacb .Process (_ebb );if _bb !=nil {_ad .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0050\u0072\u006f\u0063\u0065s\u0073i\u006eg\u003a\u0020\u0065\u0072\u0072\u003d\u0025v",_bb );};return _ebf ,_eeec ._cgg ,_eeec ._dad ,_bb ;};

// Elements returns the TextMarks in `ma`.
func (_eccb *TextMarkArray )Elements ()[]TextMark {return _eccb ._bbaf };func _aagb (_afdg ,_bdaf _db .PdfRectangle )_db .PdfRectangle {return _db .PdfRectangle {Llx :_c .Min (_afdg .Llx ,_bdaf .Llx ),Lly :_c .Min (_afdg .Lly ,_bdaf .Lly ),Urx :_c .Max (_afdg .Urx ,_bdaf .Urx ),Ury :_c .Max (_afdg .Ury ,_bdaf .Ury )};};func (_ecffab *textWord )appendMark (_abcc *textMark ,_dagd _db .PdfRectangle ){_ecffab ._fegd =append (_ecffab ._fegd ,_abcc );_ecffab .PdfRectangle =_aagb (_ecffab .PdfRectangle ,_abcc .PdfRectangle );if _abcc ._agdf > _ecffab ._dcea {_ecffab ._dcea =_abcc ._agdf ;};_ecffab ._gggc =_dagd .Ury -_ecffab .PdfRectangle .Lly ;};func (_bgdc *wordBag )firstWord (_cfad int )*textWord {return _bgdc ._eceb [_cfad ][0]};func (_gace *textObject )setTextRise (_gcff float64 ){if _gace ==nil {return ;};_gace ._dggf ._ddc =_gcff ;};func (_efadg *textLine )endsInHyphen ()bool {_dbab :=_efadg ._bdf [len (_efadg ._bdf )-1];_bdbe :=[]rune (_dbab ._fbcaa );if !_e .Is (_e .Hyphen ,_bdbe [len (_bdbe )-1]){return false ;};if _dbab ._fbeg &&_cbd (_bdbe ){return true ;};return _cbd ([]rune (_efadg .text ()));};func _cacc (_aagbf _db .PdfColorspace ,_dfefg _db .PdfColor )_cd .Color {if _aagbf ==nil ||_dfefg ==nil {return _cd .Black ;};_gggce ,_edcde :=_aagbf .ColorToRGB (_dfefg );if _edcde !=nil {_ad .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006fu\u006c\u0064\u0020no\u0074\u0020\u0063\u006f\u006e\u0076e\u0072\u0074\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0025\u0076\u0020\u0028\u0025\u0076)\u0020\u0074\u006f\u0020\u0052\u0047\u0042\u003a \u0025\u0073",_dfefg ,_aagbf ,_edcde );return _cd .Black ;};_dfegd ,_cedf :=_gggce .(*_db .PdfColorDeviceRGB );if !_cedf {_ad .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u006e\u0076\u0065\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020i\u006e\u0020\u0074\u0068\u0065\u0020\u0052\u0047\u0042\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0076",_gggce );return _cd .Black ;};return _cd .NRGBA {R :uint8 (_dfegd .R ()*255),G :uint8 (_dfegd .G ()*255),B :uint8 (_dfegd .B ()*255),A :uint8 (255)};};func _aaba (_bcfg bounded )float64 {return -_bcfg .bbox ().Lly };func (_gcce paraList )writeText (_dage _b .Writer ){for _feed ,_dbaf :=range _gcce {_dbaf .writeText (_dage );if _feed !=len (_gcce )-1{if _fbbf (_dbaf ,_gcce [_feed +1]){_dage .Write ([]byte ("\u0020"));}else {_dage .Write ([]byte ("\u000a"));_dage .Write ([]byte ("\u000a"));};};};_dage .Write ([]byte ("\u000a"));_dage .Write ([]byte ("\u000a"));};func (_bdfa paraList )findTables ()[]*textTable {_bdfa .addNeighbours ();_ac .Slice (_bdfa ,func (_defae ,_bbggf int )bool {return _accb (_bdfa [_defae ],_bdfa [_bbggf ])< 0});var _ggfa []*textTable ;for _ ,_afcfd :=range _bdfa {if _afcfd ._geab {continue ;};_dddc :=_afcfd .isAtom ();if _dddc ==nil {continue ;};_dddc .growTable ();if _dddc ._decb *_dddc ._edd < _ffb {continue ;};_dddc .markCells ();_dddc .log ("\u0067\u0072\u006fw\u006e");_ggfa =append (_ggfa ,_dddc );};return _ggfa ;};func (_effc *textTable )newTablePara ()*textPara {_bcda :=_effc .computeBbox ();return &textPara {PdfRectangle :_bcda ,_dfaf :_bcda ,_befd :_effc };};func _gdaa (_eaca ,_fcc *textPara )bool {return _fedd (_eaca ._dfaf ,_fcc ._dfaf )};func (_aad *textPara )writeCellText (_bca _b .Writer ){for _geba ,_dbff :=range _aad ._dgaaa {_gdeae :=_dbff .text ();_dccbf :=_dade &&_dbff .endsInHyphen ()&&_geba !=len (_aad ._dgaaa )-1;if _dccbf {_gdeae =_cagf (_gdeae );};_bca .Write ([]byte (_gdeae ));if !(_dccbf ||_geba ==len (_aad ._dgaaa )-1){_bca .Write ([]byte (_fgeb (_dbff ._ggdc ,_aad ._dgaaa [_geba +1]._ggdc )));};};};func (_cege *textPara )text ()string {_aggd :=new (_af .Buffer );_cege .writeText (_aggd );return _aggd .String ();};func (_adab *textObject )showTextAdjusted (_aagc *_dg .PdfObjectArray )error {_ffgg :=false ;for _ ,_ggg :=range _aagc .Elements (){switch _ggg .(type ){case *_dg .PdfObjectFloat ,*_dg .PdfObjectInteger :_adaa ,_fbf :=_dg .GetNumberAsFloat (_ggg );if _fbf !=nil {_ad .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0073\u0068\u006f\u0077\u0054\u0065\u0078t\u0041\u0064\u006a\u0075\u0073\u0074\u0065\u0064\u002e\u0020\u0042\u0061\u0064\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0061\u006c\u0020a\u0072\u0067\u002e\u0020\u006f\u003d\u0025\u0073\u0020\u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_ggg ,_aagc );return _fbf ;};_dbd ,_bfd :=-_adaa *0.001*_adab ._dggf ._ggba ,0.0;if _ffgg {_bfd ,_dbd =_dbd ,_bfd ;};_bbd :=_aaab (_ca .Point {X :_dbd ,Y :_bfd });_adab ._efb .Concat (_bbd );case *_dg .PdfObjectString :_ecg ,_dfa :=_dg .GetStringBytes (_ggg );if !_dfa {_ad .Log .Trace ("s\u0068\u006f\u0077\u0054\u0065\u0078\u0074\u0041\u0064j\u0075\u0073\u0074\u0065\u0064\u003a\u0020Ba\u0064\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u002e\u0020o=\u0025\u0073 \u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_ggg ,_aagc );return _dg .ErrTypeError ;};_adab .renderText (_ecg );default:_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0073\u0068\u006f\u0077\u0054\u0065\u0078\u0074A\u0064\u006a\u0075\u0073\u0074\u0065\u0064\u002e\u0020\u0055\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0028%T\u0029\u0020\u0061\u0072\u0067\u0073\u003d\u0025\u002b\u0076",_ggg ,_aagc );return _dg .ErrTypeError ;};};return nil ;};func (_cgcfg *wordBag )allWords ()[]*textWord {var _aace []*textWord ;for _ ,_gdcg :=range _cgcfg ._eceb {_aace =append (_aace ,_gdcg ...);};return _aace ;};func _ebae (_gaab []_dg .PdfObject )(_gbgd ,_bgfgf float64 ,_egdd error ){if len (_gaab )!=2{return 0,0,_eg .Errorf ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0073\u003a \u0025\u0064",len (_gaab ));};_afdbb ,_egdd :=_dg .GetNumbersAsFloat (_gaab );if _egdd !=nil {return 0,0,_egdd ;};return _afdbb [0],_afdbb [1],nil ;};func (_cdba *textTable )computeBbox ()_db .PdfRectangle {_dddfa :=_cdba .get (0,0).PdfRectangle ;for _eaad :=1;_eaad < _cdba ._decb ;_eaad ++{_dddfa =_aagb (_dddfa ,_cdba .get (_eaad ,0).PdfRectangle );};for _faae :=1;_faae < _cdba ._edd ;_faae ++{for _dbae :=0;_dbae < _cdba ._decb ;_dbae ++{_dddfa =_aagb (_dddfa ,_cdba .get (_dbae ,_faae ).PdfRectangle );};};return _dddfa ;};func (_efe paraList )llyRange (_beegd []int ,_afdd ,_eabe float64 )[]int {_fgbe :=len (_efe );if _eabe < _efe [_beegd [0]].Lly ||_afdd > _efe [_beegd [_fgbe -1]].Lly {return nil ;};_eagdc :=_ac .Search (_fgbe ,func (_aafe int )bool {return _efe [_beegd [_aafe ]].Lly >=_afdd });_ffda :=_ac .Search (_fgbe ,func (_aefb int )bool {return _efe [_beegd [_aefb ]].Lly > _eabe });return _beegd [_eagdc :_ffda ];};

// String returns a description of `p`.
func (_aafd *textPara )String ()string {_cadd :="";if _aafd ._befd !=nil {_cadd =_eg .Sprintf ("\u005b\u0025\u0064\u0078\u0025\u0064\u005d\u0020",_aafd ._befd ._decb ,_aafd ._befd ._edd );};return _eg .Sprintf ("\u0025\u0036\u002e\u0032f \u0025\u0073\u0025\u0064\u0020\u006c\u0069\u006e\u0065\u0073\u0020\u0025\u0071",_aafd .PdfRectangle ,_cadd ,len (_aafd ._dgaaa ),_dedb (_aafd .text (),50));};

// Len returns the number of TextMarks in `ma`.
func (_gfe *TextMarkArray )Len ()int {if _gfe ==nil {return 0;};return len (_gfe ._bbaf );};func _bgdcc (_dcfg ,_bge _db .PdfRectangle )(_db .PdfRectangle ,bool ){if !_cfba (_dcfg ,_bge ){return _db .PdfRectangle {},false ;};return _db .PdfRectangle {Llx :_c .Max (_dcfg .Llx ,_bge .Llx ),Urx :_c .Min (_dcfg .Urx ,_bge .Urx ),Lly :_c .Max (_dcfg .Lly ,_bge .Lly ),Ury :_c .Min (_dcfg .Ury ,_bge .Ury )},true ;};func (_cacfb *textWord )bbox ()_db .PdfRectangle {return _cacfb .PdfRectangle };func _ecdd (_aage _db .PdfRectangle ,_ded bounded )float64 {return _aage .Ury -_ded .bbox ().Lly };func (_eded paraList )tables ()[]TextTable {var _cdb []TextTable ;for _ ,_eacf :=range _eded {if _eacf ._befd !=nil {_cdb =append (_cdb ,_eacf ._befd .toTextTable ());};};return _cdb ;};func (_cbcb *wordBag )depthRange (_abea ,_bff int )[]int {_aaad :=_cbcb .depthIndexes ();var _bdad []int ;for _ ,_fbgfb :=range _aaad {if _abea <=_fbgfb &&_fbgfb <=_bff {_bdad =append (_bdad ,_fbgfb );};};return _bdad ;};func _bade (_gcec _ca .Matrix )_ca .Point {_gggf ,_gaa :=_gcec .Translation ();return _ca .Point {X :_gggf ,Y :_gaa };};func _bffb (_fbcg ,_becf int )int {if _fbcg < _becf {return _fbcg ;};return _becf ;};func _gaca (_ecbf float64 ,_gdea int )int {if _gdea ==0{_gdea =1;};_bdd :=float64 (_gdea );return int (_c .Round (_ecbf /_bdd )*_bdd );};

// Tables returns the tables extracted from the page.
func (_beef PageText )Tables ()[]TextTable {return _beef ._eaga };func (_fffa *stateStack )pop ()*textState {if _fffa .empty (){return nil ;};_egbd :=*(*_fffa )[len (*_fffa )-1];*_fffa =(*_fffa )[:len (*_fffa )-1];return &_egbd ;};func (_ebag *textTable )toTextTable ()TextTable {_bcdd :=make ([][]TableCell ,_ebag ._edd );for _egbgd :=0;_egbgd < _ebag ._edd ;_egbgd ++{_bcdd [_egbgd ]=make ([]TableCell ,_ebag ._decb );for _fdfc :=0;_fdfc < _ebag ._decb ;_fdfc ++{_dffgd :=_ebag .get (_fdfc ,_egbgd );_bcdd [_egbgd ][_fdfc ].Text =_dffgd .text ();_ffgb :=0;_bcdd [_egbgd ][_fdfc ].Marks ._bbaf =_dffgd .toTextMarks (&_ffgb );};};return TextTable {W :_ebag ._decb ,H :_ebag ._edd ,Cells :_bcdd };};

// TextMark represents extracted text on a page with information regarding both textual content,
// formatting (font and size) and positioning.
// It is the smallest unit of text on a PDF page, typically a single character.
//
// getBBox() in test_text.go shows how to compute bounding boxes of substrings of extracted text.
// The following code extracts the text on PDF page `page` into `text` then finds the bounding box
// `bbox` of substring `term` in `text`.
//
//     ex, _ := New(page)
//     // handle errors
//     pageText, _, _, err := ex.ExtractPageText()
//     // handle errors
//     text := pageText.Text()
//     textMarks := pageText.Marks()
//
//     	start := strings.Index(text, term)
//      end := start + len(term)
//      spanMarks, err := textMarks.RangeOffset(start, end)
//      // handle errors
//      bbox, ok := spanMarks.BBox()
//      // handle errors
type TextMark struct{

// Text is the extracted text.
Text string ;

// Original is the text in the PDF. It has not been decoded like `Text`.
Original string ;

// BBox is the bounding box of the text.
BBox _db .PdfRectangle ;

// Font is the font the text was drawn with.
Font *_db .PdfFont ;

// FontSize is the font size the text was drawn with.
FontSize float64 ;

// Offset is the offset of the start of TextMark.Text in the extracted text. If you do this
//   text, textMarks := pageText.Text(), pageText.Marks()
//   marks := textMarks.Elements()
// then marks[i].Offset is the offset of marks[i].Text in text.
Offset int ;

// Meta is set true for spaces and line breaks that we insert in the extracted text. We insert
// spaces (line breaks) when we see characters that are over a threshold horizontal (vertical)
//  distance  apart. See wordJoiner (lineJoiner) in PageText.computeViews().
Meta bool ;

// FillColor is the fill color of the text.
// The color is nil for spaces and line breaks (i.e. the Meta field is true).
FillColor _cd .Color ;

// StrokeColor is the stroke color of the text.
// The color is nil for spaces and line breaks (i.e. the Meta field is true).
StrokeColor _cd .Color ;};func (_egb *imageExtractContext )processOperand (_bcb *_fe .ContentStreamOperation ,_bad _fe .GraphicsState ,_fgf *_db .PdfPageResources )error {if _bcb .Operand =="\u0042\u0049"&&len (_bcb .Params )==1{_ccc ,_be :=_bcb .Params [0].(*_fe .ContentStreamInlineImage );if !_be {return nil ;};if _bgc ,_ebc :=_dg .GetBoolVal (_ccc .ImageMask );_ebc {if _bgc &&!_egb ._gac .IncludeInlineStencilMasks {return nil ;};};return _egb .extractInlineImage (_ccc ,_bad ,_fgf );}else if _bcb .Operand =="\u0044\u006f"&&len (_bcb .Params )==1{_fgdf ,_fgdfe :=_dg .GetName (_bcb .Params [0]);if !_fgdfe {_ad .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0054\u0079\u0070\u0065");return _cb ;};_ ,_cad :=_fgf .GetXObjectByName (*_fgdf );switch _cad {case _db .XObjectTypeImage :return _egb .extractXObjectImage (_fgdf ,_bad ,_fgf );case _db .XObjectTypeForm :return _egb .extractFormImages (_fgdf ,_bad ,_fgf );};};return nil ;};func (_fffe *textObject )moveTo (_ggd ,_agec float64 ){_fffe ._dea .Concat (_ca .NewMatrix (1,0,0,1,_ggd ,_agec ));_fffe ._efb =_fffe ._dea ;};func (_beeg *stateStack )size ()int {return len (*_beeg )};func _gegad (_bfaca []int )[]int {_deb :=make ([]int ,len (_bfaca ));for _fffg ,_egff :=range _bfaca {_deb [len (_bfaca )-1-_fffg ]=_egff ;};return _deb ;};func _cagf (_becd string )string {_fbca :=[]rune (_becd );return string (_fbca [:len (_fbca )-1])};func (_dda *textObject )setHorizScaling (_bcg float64 ){if _dda ==nil {return ;};_dda ._dggf ._ae =_bcg ;};func _dcbac (_ddbc ,_eaff bounded )float64 {_baag :=_dgaa (_ddbc ,_eaff );if !_dagc (_baag ){return _baag ;};return _bbc (_ddbc ,_eaff );};func (_aeaa *textLine )markWordBoundaries (){_feea :=_fbfe *_aeaa ._baaf ;for _dcd ,_eefa :=range _aeaa ._bdf [1:]{if _bede (_eefa ,_aeaa ._bdf [_dcd ])>=_feea {_eefa ._fbeg =true ;};};};type textLine struct{_db .PdfRectangle ;_ggdc float64 ;_bdf []*textWord ;_baaf float64 ;};func (_affc *textPara )isAtom ()*textTable {_daca :=_affc ;_feac :=_affc ._ggcd ;_ffef :=_affc ._bbgc ;if !(_feac !=nil &&!_feac ._geab &&_ffef !=nil &&!_ffef ._geab ){return nil ;};_geag :=_feac ._bbgc ;if !(_geag !=nil &&!_geag ._geab &&_geag ==_ffef ._ggcd ){return nil ;};if _feac ._dfef !=_daca ||_ffef ._dffg !=_daca ||_geag ._dfef !=_ffef ||_geag ._dffg !=_feac {return nil ;};return _dfaa (_daca ,_feac ,_ffef ,_geag );};func (_eedf paraList )addNeighbours (){_adgb :=_eedf .yNeighbours ();for _ ,_afdgf :=range _eedf {var _eafe *textPara ;_gdab :=false ;for _ ,_afga :=range _adgb [_afdgf ]{_ggfc :=_eedf [_afga ];if _ggfc .Urx <=_afdgf .Llx {if _eafe ==nil {_eafe =_ggfc ;}else {if _ggfc .Llx > _eafe .Llx {_eafe =_ggfc ;_gdab =false ;}else if _ggfc .Llx ==_eafe .Llx {_gdab =true ;};};};};if !_gdab {_afdgf ._dfef =_eafe ;};};for _ ,_bdfb :=range _eedf {var _eaab *textPara ;_eccf :=false ;for _ ,_dfad :=range _adgb [_bdfb ]{_dgaf :=_eedf [_dfad ];if _dgaf .Llx >=_bdfb .Urx {if _eaab ==nil {_eaab =_dgaf ;}else {if _dgaf .Llx < _eaab .Llx {_eaab =_dgaf ;_eccf =false ;}else if _dgaf .Llx ==_eaab .Llx {_eccf =true ;};};};};if !_eccf {_bdfb ._ggcd =_eaab ;};};_adgb =_eedf .xNeighbours ();for _ ,_fgcc :=range _eedf {var _gedg *textPara ;_cfdaf :=false ;for _ ,_bgea :=range _adgb [_fgcc ]{_bgff :=_eedf [_bgea ];if _bgff .Lly >=_fgcc .Ury {if _gedg ==nil {_gedg =_bgff ;}else {if _bgff .Ury < _gedg .Ury {_gedg =_bgff ;_cfdaf =false ;}else if _bgff .Ury ==_gedg .Ury {_cfdaf =true ;};};};};if !_cfdaf {_fgcc ._dffg =_gedg ;};};for _ ,_efc :=range _eedf {var _cbfe *textPara ;_gcdbg :=false ;for _ ,_egag :=range _adgb [_efc ]{_ege :=_eedf [_egag ];if _ege .Ury <=_efc .Lly {if _cbfe ==nil {_cbfe =_ege ;}else {if _ege .Ury > _cbfe .Ury {_cbfe =_ege ;_gcdbg =false ;}else if _ege .Ury ==_cbfe .Ury {_gcdbg =true ;};};};};if !_gcdbg {_efc ._bbgc =_cbfe ;};};};type stateStack []*textState ;func (_gffaf *textPara )toTextMarks (_ecgd *int )[]TextMark {if _gffaf ._befd ==nil {return _gffaf .toCellTextMarks (_ecgd );};var _aaga []TextMark ;for _acae :=0;_acae < _gffaf ._befd ._edd ;_acae ++{for _gaff :=0;_gaff < _gffaf ._befd ._decb ;_gaff ++{_bgac :=_gffaf ._befd .get (_gaff ,_acae );if _bgac ==nil {_aaga =_bgbb (_aaga ,_ecgd ,"\u0009");}else {_ccce :=_bgac .toCellTextMarks (_ecgd );_aaga =append (_aaga ,_ccce ...);};_aaga =_bgbb (_aaga ,_ecgd ,"\u0020");};if _acae < _gffaf ._befd ._edd -1{_aaga =_bgbb (_aaga ,_ecgd ,"\u000a");};};return _aaga ;};var (_cb =_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072"););func (_daa *wordBag )removeDuplicates (){for _ ,_defb :=range _daa .depthIndexes (){if len (_daa ._eceb [_defb ])==0{continue ;};_aec :=_daa ._eceb [_defb ][0];_beag :=_adde *_aec ._dcea ;_dfeg :=_aec ._gggc ;for _ ,_defe :=range _daa .depthBand (_dfeg ,_dfeg +_beag ){_daeb :=map[*textWord ]struct{}{};_cdfd :=_daa ._eceb [_defe ];for _ ,_bfde :=range _cdfd {if _bfde !=_aec &&_bfde ._fbcaa ==_aec ._fbcaa &&_c .Abs (_bfde .Llx -_aec .Llx )< _beag &&_c .Abs (_bfde .Urx -_aec .Urx )< _beag &&_c .Abs (_bfde .Lly -_aec .Lly )< _beag &&_c .Abs (_bfde .Ury -_aec .Ury )< _beag {_daeb [_bfde ]=struct{}{};};};if len (_daeb )> 0{_cebgf :=0;for _ ,_fbab :=range _cdfd {if _ ,_beda :=_daeb [_fbab ];!_beda {_cdfd [_cebgf ]=_fbab ;_cebgf ++;};};_daa ._eceb [_defe ]=_cdfd [:len (_cdfd )-len (_daeb )];if len (_daa ._eceb [_defe ])==0{delete (_daa ._eceb ,_defe );};};};};};type paraList []*textPara ;type textTable struct{_db .PdfRectangle ;_decb ,_edd int ;_edca map[uint64 ]*textPara ;};

// BBox returns the smallest axis-aligned rectangle that encloses all the TextMarks in `ma`.
func (_fge *TextMarkArray )BBox ()(_db .PdfRectangle ,bool ){var _eage _db .PdfRectangle ;_eea :=false ;for _ ,_badb :=range _fge ._bbaf {if _badb .Meta ||_defd (_badb .Text ){continue ;};if _eea {_eage =_aagb (_eage ,_badb .BBox );}else {_eage =_badb .BBox ;_eea =true ;};};return _eage ,_eea ;};func _cfba (_fgfg ,_gbc _db .PdfRectangle )bool {return _fedd (_fgfg ,_gbc )&&_ddcdd (_fgfg ,_gbc )};func (_bfbbd paraList )log (_bcdg string ){if !_gcdb {return ;};_ad .Log .Info ("%\u0038\u0073\u003a\u0020\u0025\u0064 \u0070\u0061\u0072\u0061\u0073\u0020=\u003d\u003d\u003d\u003d\u003d\u003d\u002d-\u002d\u002d\u002d\u002d\u002d\u003d\u003d\u003d\u003d\u003d=\u003d",_bcdg ,len (_bfbbd ));for _eafa ,_gegb :=range _bfbbd {if _gegb ==nil {continue ;};_efgf :=_gegb .text ();_gdgc :="\u0020\u0020";if _gegb ._befd !=nil {_gdgc =_eg .Sprintf ("\u005b%\u0064\u0078\u0025\u0064\u005d",_gegb ._befd ._decb ,_gegb ._befd ._edd );};_eg .Printf ("\u0025\u0034\u0064\u003a\u0020\u0025\u0036\u002e\u0032\u0066\u0020\u0025s\u0020\u0025\u0071\u000a",_eafa ,_gegb .PdfRectangle ,_gdgc ,_dedb (_efgf ,50));};};

// NewFromContents creates a new extractor from contents and page resources.
func NewFromContents (contents string ,resources *_db .PdfPageResources )(*Extractor ,error ){_cda :=&Extractor {_aa :contents ,_da :resources ,_ba :map[string ]fontEntry {},_ga :map[string ]textResult {}};return _cda ,nil ;};