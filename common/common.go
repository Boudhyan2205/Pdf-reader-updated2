//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_b "fmt";_c "io";_ed "os";_e "path/filepath";_g "runtime";_f "time";);var ReleasedAt =_f .Date (_adc ,_dab ,_cec ,_ag ,_fca ,0,0,_f .UTC );

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Debug logs debug message.
func (_cb ConsoleLogger )Debug (format string ,args ...interface{}){if _cb .LogLevel >=LogLevelDebug {_eb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_cb .output (_ed .Stdout ,_eb ,format ,args ...);};};func (_fed WriterLogger )logToWriter (_cae _c .Writer ,_ad string ,_df string ,_cd ...interface{}){_bac (_cae ,_ad ,_df ,_cd );};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Trace logs trace message.
func (_fffc WriterLogger )Trace (format string ,args ...interface{}){if _fffc .LogLevel >=LogLevelTrace {_ba :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fffc .logToWriter (_fffc .Output ,_ba ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _c .Writer )*WriterLogger {_aee :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_aee ;};

// Info logs info message.
func (_bd ConsoleLogger )Info (format string ,args ...interface{}){if _bd .LogLevel >=LogLevelInfo {_bfd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bd .output (_ed .Stdout ,_bfd ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };func _bac (_fbec _c .Writer ,_fgg string ,_cag string ,_gf ...interface{}){_ ,_ce ,_add ,_gaa :=_g .Caller (3);if !_gaa {_ce ="\u003f\u003f\u003f";_add =0;}else {_ce =_e .Base (_ce );};_ffb :=_b .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_fgg ,_ce ,_add )+_cag +"\u000a";_b .Fprintf (_fbec ,_ffb ,_gf ...);};const _cec =31;

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_ff string ,_edd ...interface{});Warning (_bf string ,_edg ...interface{});Notice (_a string ,_ab ...interface{});Info (_ae string ,_gb ...interface{});Debug (_cg string ,_fe ...interface{});Trace (_gc string ,_fg ...interface{});IsLogLevel (_ef LogLevel )bool ;};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ca WriterLogger )IsLogLevel (level LogLevel )bool {return _ca .LogLevel >=level };

// Notice logs notice message.
func (_efb ConsoleLogger )Notice (format string ,args ...interface{}){if _efb .LogLevel >=LogLevelNotice {_eff :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_efb .output (_ed .Stdout ,_eff ,format ,args ...);};};const _dg ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Error logs error message.
func (_fd WriterLogger )Error (format string ,args ...interface{}){if _fd .LogLevel >=LogLevelError {_ea :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_fd .logToWriter (_fd .Output ,_ea ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _c .Writer ;};

// Debug logs debug message.
func (_fef WriterLogger )Debug (format string ,args ...interface{}){if _fef .LogLevel >=LogLevelDebug {_cgf :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fef .logToWriter (_fef .Output ,_cgf ,format ,args ...);};};const _adc =2020;const _dab =8;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};const _fca =50;const _ag =18;func UtcTimeFormat (t _f .Time )string {return t .Format (_dg )+"\u0020\u0055\u0054\u0043"};

// Warning logs warning message.
func (_fbe ConsoleLogger )Warning (format string ,args ...interface{}){if _fbe .LogLevel >=LogLevelWarning {_fc :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_fbe .output (_ed .Stdout ,_fc ,format ,args ...);};};var Log Logger =DummyLogger {};

// Error logs error message.
func (_fb ConsoleLogger )Error (format string ,args ...interface{}){if _fb .LogLevel >=LogLevelError {_da :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_fb .output (_ed .Stdout ,_da ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };func (_cga ConsoleLogger )output (_fff _c .Writer ,_aeg string ,_ebg string ,_ec ...interface{}){_bac (_fff ,_aeg ,_ebg ,_ec ...);};

// DummyLogger does nothing.
type DummyLogger struct{};const Version ="\u0033\u002e\u0031\u0030\u002e\u0031";

// Warning logs warning message.
func (_ga WriterLogger )Warning (format string ,args ...interface{}){if _ga .LogLevel >=LogLevelWarning {_ecc :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ga .logToWriter (_ga .Output ,_ecc ,format ,args ...);};};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_bc ConsoleLogger )IsLogLevel (level LogLevel )bool {return _bc .LogLevel >=level };

// Notice logs notice message.
func (_bdg WriterLogger )Notice (format string ,args ...interface{}){if _bdg .LogLevel >=LogLevelNotice {_eg :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bdg .logToWriter (_bdg .Output ,_eg ,format ,args ...);};};

// Info logs info message.
func (_af WriterLogger )Info (format string ,args ...interface{}){if _af .LogLevel >=LogLevelInfo {_afc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_af .logToWriter (_af .Output ,_afc ,format ,args ...);};};

// Trace logs trace message.
func (_ge ConsoleLogger )Trace (format string ,args ...interface{}){if _ge .LogLevel >=LogLevelTrace {_de :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ge .output (_ed .Stdout ,_de ,format ,args ...);};};