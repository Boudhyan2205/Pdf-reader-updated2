//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_gb "io";_ff "os";_b "path/filepath";_d "runtime";_g "time";);

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Warning logs warning message.
func (_ab WriterLogger )Warning (format string ,args ...interface{}){if _ab .LogLevel >=LogLevelWarning {_eff :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ab .logToWriter (_ab .Output ,_eff ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _gb .Writer )*WriterLogger {_becg :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_becg ;};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};func (_ega WriterLogger )logToWriter (_gbf _gb .Writer ,_bb string ,_da string ,_cb ...interface{}){_dg (_gbf ,_bb ,_da ,_cb );};

// Info logs info message.
func (_aa ConsoleLogger )Info (format string ,args ...interface{}){if _aa .LogLevel >=LogLevelInfo {_ba :="\u005bI\u004e\u0046\u004f\u005d\u0020";_aa .output (_ff .Stdout ,_ba ,format ,args ...);};};

// Debug logs debug message.
func (_deg WriterLogger )Debug (format string ,args ...interface{}){if _deg .LogLevel >=LogLevelDebug {_cg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_deg .logToWriter (_deg .Output ,_cg ,format ,args ...);};};const _dc =2024;

// Error logs error message.
func (_aaf WriterLogger )Error (format string ,args ...interface{}){if _aaf .LogLevel >=LogLevelError {_cfd :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_aaf .logToWriter (_aaf .Output ,_cfd ,format ,args ...);};};

// Debug logs debug message.
func (_fff ConsoleLogger )Debug (format string ,args ...interface{}){if _fff .LogLevel >=LogLevelDebug {_af :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fff .output (_ff .Stdout ,_af ,format ,args ...);};};

// Warning logs warning message.
func (_bfd ConsoleLogger )Warning (format string ,args ...interface{}){if _bfd .LogLevel >=LogLevelWarning {_beg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bfd .output (_ff .Stdout ,_beg ,format ,args ...);};};func _dg (_afd _gb .Writer ,_ag string ,_bgg string ,_ggd ...interface{}){_ ,_dge ,_eea ,_aag :=_d .Caller (3);
if !_aag {_dge ="\u003f\u003f\u003f";_eea =0;}else {_dge =_b .Base (_dge );};_faf :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_ag ,_dge ,_eea )+_bgg +"\u000a";_c .Fprintf (_afd ,_faf ,_ggd ...);};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_e string ,_a ...interface{});Warning (_ef string ,_ed ...interface{});Notice (_de string ,_bg ...interface{});Info (_dec string ,_be ...interface{});Debug (_ad string ,_eg ...interface{});Trace (_eda string ,_bd ...interface{});
IsLogLevel (_bf LogLevel )bool ;};

// DummyLogger does nothing.
type DummyLogger struct{};

// Notice logs notice message.
func (_gg ConsoleLogger )Notice (format string ,args ...interface{}){if _gg .LogLevel >=LogLevelNotice {_fb :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_gg .output (_ff .Stdout ,_fb ,format ,args ...);};};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _gb .Writer ;};var ReleasedAt =_g .Date (_dc ,_dcd ,_agf ,_aba ,_fda ,0,0,_g .UTC );

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ae WriterLogger )IsLogLevel (level LogLevel )bool {return _ae .LogLevel >=level };const Version ="\u0033\u002e\u0035\u0037\u002e\u0030";const _fda =30;

// Info logs info message.
func (_aaa WriterLogger )Info (format string ,args ...interface{}){if _aaa .LogLevel >=LogLevelInfo {_egc :="\u005bI\u004e\u0046\u004f\u005d\u0020";_aaa .logToWriter (_aaa .Output ,_egc ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_gf ConsoleLogger )IsLogLevel (level LogLevel )bool {return _gf .LogLevel >=level };

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };const _agf =16;

// Notice logs notice message.
func (_ggc WriterLogger )Notice (format string ,args ...interface{}){if _ggc .LogLevel >=LogLevelNotice {_aee :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ggc .logToWriter (_ggc .Output ,_aee ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};func (_afa ConsoleLogger )output (_bef _gb .Writer ,_adg string ,_bfe string ,_afb ...interface{}){_dg (_bef ,_adg ,_bfe ,_afb ...);};

// LogLevel is the verbosity level for logging.
type LogLevel int ;const _aba =15;

// Trace logs trace message.
func (_gc ConsoleLogger )Trace (format string ,args ...interface{}){if _gc .LogLevel >=LogLevelTrace {_cf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gc .output (_ff .Stdout ,_cf ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Trace logs trace message.
func (_fa WriterLogger )Trace (format string ,args ...interface{}){if _fa .LogLevel >=LogLevelTrace {_ea :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_fa .logToWriter (_fa .Output ,_ea ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _dcd =4;const _fd ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Error logs error message.
func (_bec ConsoleLogger )Error (format string ,args ...interface{}){if _bec .LogLevel >=LogLevelError {_ee :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bec .output (_ff .Stdout ,_ee ,format ,args ...);};};var Log Logger =DummyLogger {};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _g .Time )string {return t .Format (_fd )+"\u0020\u0055\u0054\u0043"};