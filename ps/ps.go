//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_fg "bufio";_a "bytes";_f "errors";_e "fmt";_ac "github.com/unidoc/unipdf/v3/common";_ffc "github.com/unidoc/unipdf/v3/core";_fa "io";_ff "math";);

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_bbbg :=PSParser {};_caba :=_a .NewBuffer (content );_bbbg ._abfd =_fg .NewReader (_caba );return &_bbbg ;};func (_efee *PSOperand )sub (_caca *PSStack )error {_bec ,_afab :=_caca .Pop ();if _afab !=nil {return _afab ;
};_feg ,_afab :=_caca .Pop ();if _afab !=nil {return _afab ;};_gecg ,_bff :=_bec .(*PSReal );_dceg ,_bdcg :=_bec .(*PSInteger );if !_bff &&!_bdcg {return ErrTypeCheck ;};_gafg ,_aaga :=_feg .(*PSReal );_abf ,_gggb :=_feg .(*PSInteger );if !_aaga &&!_gggb {return ErrTypeCheck ;
};if _bdcg &&_gggb {_cce :=_abf .Val -_dceg .Val ;_gfb :=_caca .Push (MakeInteger (_cce ));return _gfb ;};var _bab float64 =0;if _aaga {_bab =_gafg .Val ;}else {_bab =float64 (_abf .Val );};if _bff {_bab -=_gecg .Val ;}else {_bab -=float64 (_dceg .Val );
};_afab =_caca .Push (MakeReal (_bab ));return _afab ;};var ErrTypeCheck =_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_bd *PSReal )DebugString ()string {return _e .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bd .Val );
};func (_gdcc *PSOperand )ceiling (_fga *PSStack )error {_dec ,_gea :=_fga .Pop ();if _gea !=nil {return _gea ;};if _dfbf ,_gdcf :=_dec .(*PSReal );_gdcf {_gea =_fga .Push (MakeReal (_ff .Ceil (_dfbf .Val )));}else if _add ,_dbcb :=_dec .(*PSInteger );
_dbcb {_gea =_fga .Push (MakeInteger (_add .Val ));}else {_gea =ErrTypeCheck ;};return _gea ;};var ErrRangeCheck =_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");const _c =0.000001;func (_fcd *PSOperand )floor (_ba *PSStack )error {_dbfb ,_eba :=_ba .Pop ();
if _eba !=nil {return _eba ;};if _adc ,_aae :=_dbfb .(*PSReal );_aae {_eba =_ba .Push (MakeReal (_ff .Floor (_adc .Val )));}else if _aee ,_acd :=_dbfb .(*PSInteger );_acd {_eba =_ba .Push (MakeInteger (_aee .Val ));}else {return ErrTypeCheck ;};return _eba ;
};func (_beee *PSParser )parseNumber ()(PSObject ,error ){_dfgg ,_cbe :=_ffc .ParseNumber (_beee ._abfd );if _cbe !=nil {return nil ,_cbe ;};switch _fbeb :=_dfgg .(type ){case *_ffc .PdfObjectFloat :return MakeReal (float64 (*_fbeb )),nil ;case *_ffc .PdfObjectInteger :return MakeInteger (int (*_fbeb )),nil ;
};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dfgg );};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_ccgf *PSStack )PopInteger ()(int ,error ){_abab ,_acb :=_ccgf .Pop ();if _acb !=nil {return 0,_acb ;};if _dcab ,_bacb :=_abab .(*PSInteger );_bacb {return _dcab .Val ,nil ;};return 0,ErrTypeCheck ;};

// String returns a string representation of the stack.
func (_cfag *PSStack )String ()string {_cgdd :="\u005b\u0020";for _ ,_gac :=range *_cfag {_cgdd +=_gac .String ();_cgdd +="\u0020";};_cgdd +="\u005d";return _cgdd ;};var ErrUnsupportedOperand =_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");


// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dfdgd :=PSOperand (val );return &_dfdgd };func (_ab *PSInteger )String ()string {return _e .Sprintf ("\u0025\u0064",_ab .Val )};

// Empty empties the stack.
func (_ede *PSStack )Empty (){*_ede =[]PSObject {}};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_gde *PSOperand )or (_bdfd *PSStack )error {_fgfa ,_dbfa :=_bdfd .Pop ();if _dbfa !=nil {return _dbfa ;};_fbg ,_dbfa :=_bdfd .Pop ();if _dbfa !=nil {return _dbfa ;};if _fagf ,_bba :=_fgfa .(*PSBoolean );
_bba {_bdd ,_dfdg :=_fbg .(*PSBoolean );if !_dfdg {return ErrTypeCheck ;};_dbfa =_bdfd .Push (MakeBool (_fagf .Val ||_bdd .Val ));return _dbfa ;};if _age ,_afa :=_fgfa .(*PSInteger );_afa {_bda ,_dcbb :=_fbg .(*PSInteger );if !_dcbb {return ErrTypeCheck ;
};_dbfa =_bdfd .Push (MakeInteger (_age .Val |_bda .Val ));return _dbfa ;};return ErrTypeCheck ;};func (_aea *PSOperand )eq (_fe *PSStack )error {_bcg ,_cab :=_fe .Pop ();if _cab !=nil {return _cab ;};_eae ,_cab :=_fe .Pop ();if _cab !=nil {return _cab ;
};_gbca ,_efdf :=_bcg .(*PSBoolean );_efe ,_cda :=_eae .(*PSBoolean );if _efdf ||_cda {var _dgda error ;if _efdf &&_cda {_dgda =_fe .Push (MakeBool (_gbca .Val ==_efe .Val ));}else {_dgda =_fe .Push (MakeBool (false ));};return _dgda ;};var _cbc float64 ;
var _gca float64 ;if _cdad ,_dfbe :=_bcg .(*PSInteger );_dfbe {_cbc =float64 (_cdad .Val );}else if _dca ,_bcgc :=_bcg .(*PSReal );_bcgc {_cbc =_dca .Val ;}else {return ErrTypeCheck ;};if _cfb ,_aaff :=_eae .(*PSInteger );_aaff {_gca =float64 (_cfb .Val );
}else if _fab ,_geac :=_eae .(*PSReal );_geac {_gca =_fab .Val ;}else {return ErrTypeCheck ;};if _ff .Abs (_gca -_cbc )< _c {_cab =_fe .Push (MakeBool (true ));}else {_cab =_fe .Push (MakeBool (false ));};return _cab ;};var ErrUndefinedResult =_f .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_afcc *PSOperand )mod (_febg *PSStack )error {_cbb ,_fada :=_febg .Pop ();if _fada !=nil {return _fada ;};_dcec ,_fada :=_febg .Pop ();if _fada !=nil {return _fada ;};_aaeg ,_fac :=_cbb .(*PSInteger );if !_fac {return ErrTypeCheck ;};if _aaeg .Val ==0{return ErrUndefinedResult ;
};_ffb ,_fac :=_dcec .(*PSInteger );if !_fac {return ErrTypeCheck ;};_eeb :=_ffb .Val %_aaeg .Val ;_fada =_febg .Push (MakeInteger (_eeb ));return _fada ;};

// Parse parses the postscript and store as a program that can be executed.
func (_abfg *PSParser )Parse ()(*PSProgram ,error ){_abfg .skipSpaces ();_bbbgg ,_gbaa :=_abfg ._abfd .Peek (2);if _gbaa !=nil {return nil ,_gbaa ;};if _bbbgg [0]!='{'{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_eedc ,_gbaa :=_abfg .parseFunction ();if _gbaa !=nil &&_gbaa !=_fa .EOF {return nil ,_gbaa ;};return _eedc ,_gbaa ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_deb *PSOperand )dup (_gbfc *PSStack )error {_bee ,_efbc :=_gbfc .Pop ();if _efbc !=nil {return _efbc ;};_efbc =_gbfc .Push (_bee );if _efbc !=nil {return _efbc ;};_efbc =_gbfc .Push (_bee .Duplicate ());return _efbc ;};


// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _dc []float64 ;for _ ,_eg :=range objects {if _ee ,_gc :=_eg .(*PSInteger );_gc {_dc =append (_dc ,float64 (_ee .Val ));}else if _bb ,_db :=_eg .(*PSReal );_db {_dc =append (_dc ,_bb .Val );
}else {return nil ,ErrTypeCheck ;};};return _dc ,nil ;};func (_bce *PSOperand )div (_gda *PSStack )error {_ccd ,_fgf :=_gda .Pop ();if _fgf !=nil {return _fgf ;};_def ,_fgf :=_gda .Pop ();if _fgf !=nil {return _fgf ;};_eaa ,_bdf :=_ccd .(*PSReal );_ca ,_gec :=_ccd .(*PSInteger );
if !_bdf &&!_gec {return ErrTypeCheck ;};if _bdf &&_eaa .Val ==0{return ErrUndefinedResult ;};if _gec &&_ca .Val ==0{return ErrUndefinedResult ;};_fbfg ,_eea :=_def .(*PSReal );_aec ,_dfda :=_def .(*PSInteger );if !_eea &&!_dfda {return ErrTypeCheck ;};
var _cbd float64 ;if _eea {_cbd =_fbfg .Val ;}else {_cbd =float64 (_aec .Val );};if _bdf {_cbd /=_eaa .Val ;}else {_cbd /=float64 (_ca .Val );};_fgf =_gda .Push (MakeReal (_cbd ));return _fgf ;};func (_bg *PSOperand )cvr (_ece *PSStack )error {_dda ,_fde :=_ece .Pop ();
if _fde !=nil {return _fde ;};if _afg ,_dgde :=_dda .(*PSReal );_dgde {_fde =_ece .Push (MakeReal (_afg .Val ));}else if _aaf ,_cee :=_dda .(*PSInteger );_cee {_fde =_ece .Push (MakeReal (float64 (_aaf .Val )));}else {return ErrTypeCheck ;};return _fde ;
};func (_aafc *PSOperand )sqrt (_egc *PSStack )error {_fbd ,_ddf :=_egc .PopNumberAsFloat64 ();if _ddf !=nil {return _ddf ;};if _fbd < 0{return ErrRangeCheck ;};_fgac :=_ff .Sqrt (_fbd );_ddf =_egc .Push (MakeReal (_fgac ));return _ddf ;};func (_ceda *PSOperand )ifCondition (_dge *PSStack )error {_dea ,_cca :=_dge .Pop ();
if _cca !=nil {return _cca ;};_cga ,_cca :=_dge .Pop ();if _cca !=nil {return _cca ;};_cedf ,_afd :=_dea .(*PSProgram );if !_afd {return ErrTypeCheck ;};_bcb ,_afd :=_cga .(*PSBoolean );if !_afd {return ErrTypeCheck ;};if _bcb .Val {_beb :=_cedf .Exec (_dge );
return _beb ;};return nil ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_dcc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_acc :=range objects {_ce :=_dcc .Stack .Push (_acc );if _ce !=nil {return nil ,_ce ;};};_ge :=_dcc ._d .Exec (_dcc .Stack );if _ge !=nil {_ac .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ge );
return nil ,_ge ;};_ag :=[]PSObject (*_dcc .Stack );_dcc .Stack .Empty ();return _ag ,nil ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_ed *PSBoolean )Duplicate ()PSObject {_aa :=PSBoolean {};_aa .Val =_ed .Val ;return &_aa };func (_ef *PSProgram )DebugString ()string {_dcg :="\u007b\u0020";for _ ,_aga :=range *_ef {_dcg +=_aga .DebugString ();_dcg +="\u0020";
};_dcg +="\u007d";return _dcg ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_baea :=PSBoolean {};_baea .Val =val ;return &_baea };

// PSParser is a basic Postscript parser.
type PSParser struct{_abfd *_fg .Reader };

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_efc *PSOperand )neg (_bdce *PSStack )error {_gdcfb ,_ffeb :=_bdce .Pop ();if _ffeb !=nil {return _ffeb ;};if _fea ,_egg :=_gdcfb .(*PSReal );_egg {_ffeb =_bdce .Push (MakeReal (-_fea .Val ));return _ffeb ;}else if _adde ,_ecb :=_gdcfb .(*PSInteger );
_ecb {_ffeb =_bdce .Push (MakeInteger (-_adde .Val ));return _ffeb ;}else {return ErrTypeCheck ;};};func (_baa *PSOperand )lt (_edf *PSStack )error {_eef ,_eage :=_edf .PopNumberAsFloat64 ();if _eage !=nil {return _eage ;};_deaa ,_eage :=_edf .PopNumberAsFloat64 ();
if _eage !=nil {return _eage ;};if _ff .Abs (_deaa -_eef )< _c {_cbg :=_edf .Push (MakeBool (false ));return _cbg ;}else if _deaa < _eef {_acgf :=_edf .Push (MakeBool (true ));return _acgf ;}else {_cefa :=_edf .Push (MakeBool (false ));return _cefa ;};
};

// Push pushes an object on top of the stack.
func (_fda *PSStack )Push (obj PSObject )error {if len (*_fda )> 100{return ErrStackOverflow ;};*_fda =append (*_fda ,obj );return nil ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_d *PSProgram ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_b :=&PSExecutor {};_b .Stack =NewPSStack ();_b ._d =program ;return _b ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// Exec executes the program, typically leaving output values on the stack.
func (_fd *PSProgram )Exec (stack *PSStack )error {for _ ,_cde :=range *_fd {var _fb error ;switch _ga :=_cde .(type ){case *PSInteger :_efb :=_ga ;_fb =stack .Push (_efb );case *PSReal :_dg :=_ga ;_fb =stack .Push (_dg );case *PSBoolean :_gb :=_ga ;_fb =stack .Push (_gb );
case *PSProgram :_dcd :=_ga ;_fb =stack .Push (_dcd );case *PSOperand :_fdb :=_ga ;_fb =_fdb .Exec (stack );default:return ErrTypeCheck ;};if _fb !=nil {return _fb ;};};return nil ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ebed *PSStack )DebugString ()string {_fage :="\u005b\u0020";for _ ,_fgdd :=range *_ebed {_fage +=_fgdd .DebugString ();_fage +="\u0020";};_fage +="\u005d";return _fage ;};func (_gabf *PSOperand )round (_cegad *PSStack )error {_ccbe ,_faad :=_cegad .Pop ();
if _faad !=nil {return _faad ;};if _faag ,_bdbe :=_ccbe .(*PSReal );_bdbe {_faad =_cegad .Push (MakeReal (_ff .Floor (_faag .Val +0.5)));}else if _gaf ,_fca :=_ccbe .(*PSInteger );_fca {_faad =_cegad .Push (MakeInteger (_gaf .Val ));}else {return ErrTypeCheck ;
};return _faad ;};func (_dbgd *PSParser )parseFunction ()(*PSProgram ,error ){_eaad ,_ :=_dbgd ._abfd .ReadByte ();if _eaad !='{'{return nil ,_f .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_dbdf :=NewPSProgram ();
for {_dbgd .skipSpaces ();_dfgd ,_eecd :=_dbgd ._abfd .Peek (2);if _eecd !=nil {if _eecd ==_fa .EOF {break ;};return nil ,_eecd ;};_ac .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dfgd ));if _dfgd [0]=='}'{_ac .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
_dbgd ._abfd .ReadByte ();break ;}else if _dfgd [0]=='{'{_ac .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_cfc ,_adb :=_dbgd .parseFunction ();if _adb !=nil {return nil ,_adb ;};_dbdf .Append (_cfc );}else if _ffc .IsDecimalDigit (_dfgd [0])||(_dfgd [0]=='-'&&_ffc .IsDecimalDigit (_dfgd [1])){_ac .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_fge ,_gggf :=_dbgd .parseNumber ();if _gggf !=nil {return nil ,_gggf ;};_dbdf .Append (_fge );}else {_ac .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dfgd ,_ =_dbgd ._abfd .Peek (5);_cgee :=string (_dfgd );
_ac .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_cgee );if (len (_cgee )> 4)&&(_cgee [:5]=="\u0066\u0061\u006cs\u0065"){_aaea ,_cbgf :=_dbgd .parseBool ();if _cbgf !=nil {return nil ,_cbgf ;};_dbdf .Append (_aaea );
}else if (len (_cgee )> 3)&&(_cgee [:4]=="\u0074\u0072\u0075\u0065"){_bgc ,_dgdeb :=_dbgd .parseBool ();if _dgdeb !=nil {return nil ,_dgdeb ;};_dbdf .Append (_bgc );}else {_gfdbg ,_cbbc :=_dbgd .parseOperand ();if _cbbc !=nil {return nil ,_cbbc ;};_dbdf .Append (_gfdbg );
};};};return _dbdf ,nil ;};func (_geg *PSOperand )ge (_bbf *PSStack )error {_dcf ,_fag :=_bbf .PopNumberAsFloat64 ();if _fag !=nil {return _fag ;};_gedac ,_fag :=_bbf .PopNumberAsFloat64 ();if _fag !=nil {return _fag ;};if _ff .Abs (_gedac -_dcf )< _c {_gfc :=_bbf .Push (MakeBool (true ));
return _gfc ;}else if _gedac > _dcf {_ebg :=_bbf .Push (MakeBool (true ));return _ebg ;}else {_bde :=_bbf .Push (MakeBool (false ));return _bde ;};};func (_dbf *PSProgram )Duplicate ()PSObject {_efd :=&PSProgram {};for _ ,_dfb :=range *_dbf {_efd .Append (_dfb .Duplicate ());
};return _efd ;};func (_cgga *PSOperand )ne (_gdb *PSStack )error {_dbgc :=_cgga .eq (_gdb );if _dbgc !=nil {return _dbgc ;};_dbgc =_cgga .not (_gdb );return _dbgc ;};func (_dbcg *PSOperand )exch (_eaae *PSStack )error {_cae ,_fcf :=_eaae .Pop ();if _fcf !=nil {return _fcf ;
};_geda ,_fcf :=_eaae .Pop ();if _fcf !=nil {return _fcf ;};_fcf =_eaae .Push (_cae );if _fcf !=nil {return _fcf ;};_fcf =_eaae .Push (_geda );return _fcf ;};

// Pop pops an object from the top of the stack.
func (_bca *PSStack )Pop ()(PSObject ,error ){if len (*_bca )< 1{return nil ,ErrStackUnderflow ;};_gafe :=(*_bca )[len (*_bca )-1];*_bca =(*_bca )[0:len (*_bca )-1];return _gafe ,nil ;};func (_cd *PSInteger )DebugString ()string {return _e .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_cd .Val );
};func (_fee *PSOperand )ifelse (_cgf *PSStack )error {_fceg ,_bfe :=_cgf .Pop ();if _bfe !=nil {return _bfe ;};_cdf ,_bfe :=_cgf .Pop ();if _bfe !=nil {return _bfe ;};_agd ,_bfe :=_cgf .Pop ();if _bfe !=nil {return _bfe ;};_dcce ,_caf :=_fceg .(*PSProgram );
if !_caf {return ErrTypeCheck ;};_fba ,_caf :=_cdf .(*PSProgram );if !_caf {return ErrTypeCheck ;};_ccga ,_caf :=_agd .(*PSBoolean );if !_caf {return ErrTypeCheck ;};if _ccga .Val {_cfa :=_fba .Exec (_cgf );return _cfa ;};_bfe =_dcce .Exec (_cgf );return _bfe ;
};func (_bfd *PSParser )skipSpaces ()(int ,error ){_cfed :=0;for {_febc ,_gcge :=_bfd ._abfd .Peek (1);if _gcge !=nil {return 0,_gcge ;};if _ffc .IsWhiteSpace (_febc [0]){_bfd ._abfd .ReadByte ();_cfed ++;}else {break ;};};return _cfed ,nil ;};func (_fgd *PSOperand )exp (_gfd *PSStack )error {_cdbe ,_ace :=_gfd .PopNumberAsFloat64 ();
if _ace !=nil {return _ace ;};_adg ,_ace :=_gfd .PopNumberAsFloat64 ();if _ace !=nil {return _ace ;};if _ff .Abs (_cdbe )< 1&&_adg < 0{return ErrUndefinedResult ;};_bga :=_ff .Pow (_adg ,_cdbe );_ace =_gfd .Push (MakeReal (_bga ));return _ace ;};func (_cfg *PSOperand )cos (_cdgf *PSStack )error {_eab ,_ccg :=_cdgf .PopNumberAsFloat64 ();
if _ccg !=nil {return _ccg ;};_cega :=_ff .Cos (_eab *_ff .Pi /180.0);_ccg =_cdgf .Push (MakeReal (_cega ));return _ccg ;};func (_ecc *PSOperand )log (_gcde *PSStack )error {_ccac ,_ebfb :=_gcde .PopNumberAsFloat64 ();if _ebfb !=nil {return _ebfb ;};_adgd :=_ff .Log10 (_ccac );
_ebfb =_gcde .Push (MakeReal (_adgd ));return _ebfb ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_cba :=PSReal {};_cba .Val =val ;return &_cba };func (_dfe *PSOperand )idiv (_faa *PSStack )error {_dgb ,_gedad :=_faa .Pop ();if _gedad !=nil {return _gedad ;};_cdbc ,_gedad :=_faa .Pop ();if _gedad !=nil {return _gedad ;
};_efa ,_bf :=_dgb .(*PSInteger );if !_bf {return ErrTypeCheck ;};if _efa .Val ==0{return ErrUndefinedResult ;};_fcfd ,_bf :=_cdbc .(*PSInteger );if !_bf {return ErrTypeCheck ;};_cdae :=_fcfd .Val /_efa .Val ;_gedad =_faa .Push (MakeInteger (_cdae ));return _gedad ;
};func (_gbfe *PSOperand )cvi (_agaa *PSStack )error {_fce ,_gcc :=_agaa .Pop ();if _gcc !=nil {return _gcc ;};if _gcd ,_fbf :=_fce .(*PSReal );_fbf {_aeg :=int (_gcd .Val );_gcc =_agaa .Push (MakeInteger (_aeg ));}else if _cgg ,_dae :=_fce .(*PSInteger );
_dae {_aff :=_cgg .Val ;_gcc =_agaa .Push (MakeInteger (_aff ));}else {return ErrTypeCheck ;};return _gcc ;};func (_gaab *PSOperand )not (_ecf *PSStack )error {_bcbf ,_cbgc :=_ecf .Pop ();if _cbgc !=nil {return _cbgc ;};if _bef ,_cge :=_bcbf .(*PSBoolean );
_cge {_cbgc =_ecf .Push (MakeBool (!_bef .Val ));return _cbgc ;}else if _fbfd ,_ecea :=_bcbf .(*PSInteger );_ecea {_cbgc =_ecf .Push (MakeInteger (^_fbfd .Val ));return _cbgc ;}else {return ErrTypeCheck ;};};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_dccf *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_fegf ,_fdd :=_dccf .Pop ();if _fdd !=nil {return 0,_fdd ;};if _dfdc ,_feab :=_fegf .(*PSReal );_feab {return _dfdc .Val ,nil ;}else if _dgbd ,_ebe :=_fegf .(*PSInteger );_ebe {return float64 (_dgbd .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_ffe *PSOperand )atan (_ec *PSStack )error {_gcg ,_geb :=_ec .PopNumberAsFloat64 ();if _geb !=nil {return _geb ;};_eed ,_geb :=_ec .PopNumberAsFloat64 ();if _geb !=nil {return _geb ;};if _gcg ==0{var _ged error ;
if _eed < 0{_ged =_ec .Push (MakeReal (270));}else {_ged =_ec .Push (MakeReal (90));};return _ged ;};_fbb :=_eed /_gcg ;_eag :=_ff .Atan (_fbb )*180/_ff .Pi ;_geb =_ec .Push (MakeReal (_eag ));return _geb ;};func (_dcegf *PSParser )parseOperand ()(*PSOperand ,error ){var _eaea []byte ;
for {_gegg ,_cad :=_dcegf ._abfd .Peek (1);if _cad !=nil {if _cad ==_fa .EOF {break ;};return nil ,_cad ;};if _ffc .IsDelimiter (_gegg [0]){break ;};if _ffc .IsWhiteSpace (_gegg [0]){break ;};_bae ,_ :=_dcegf ._abfd .ReadByte ();_eaea =append (_eaea ,_bae );
};if len (_eaea )==0{return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_eaea )),nil ;};var ErrStackOverflow =_f .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func _baf (_bfg int )int {if _bfg < 0{return -_bfg ;};return _bfg ;};

// Append appends an object to the PSProgram.
func (_cef *PSProgram )Append (obj PSObject ){*_cef =append (*_cef ,obj )};func (_edg *PSOperand )DebugString ()string {return _e .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_edg );};func (_fgad *PSParser )parseBool ()(*PSBoolean ,error ){_bcgg ,_agc :=_fgad ._abfd .Peek (4);
if _agc !=nil {return MakeBool (false ),_agc ;};if (len (_bcgg )>=4)&&(string (_bcgg [:4])=="\u0074\u0072\u0075\u0065"){_fgad ._abfd .Discard (4);return MakeBool (true ),nil ;};_bcgg ,_agc =_fgad ._abfd .Peek (5);if _agc !=nil {return MakeBool (false ),_agc ;
};if (len (_bcgg )>=5)&&(string (_bcgg [:5])=="\u0066\u0061\u006cs\u0065"){_fgad ._abfd .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_geeb *PSOperand )and (_gfg *PSStack )error {_ggf ,_cdbf :=_gfg .Pop ();if _cdbf !=nil {return _cdbf ;};_dag ,_cdbf :=_gfg .Pop ();if _cdbf !=nil {return _cdbf ;};if _ggd ,_cb :=_ggf .(*PSBoolean );_cb {_dbg ,_cdg :=_dag .(*PSBoolean );if !_cdg {return ErrTypeCheck ;
};_cdbf =_gfg .Push (MakeBool (_ggd .Val &&_dbg .Val ));return _cdbf ;};if _ebf ,_gbc :=_ggf .(*PSInteger );_gbc {_fc ,_ege :=_dag .(*PSInteger );if !_ege {return ErrTypeCheck ;};_cdbf =_gfg .Push (MakeInteger (_ebf .Val &_fc .Val ));return _cdbf ;};return ErrTypeCheck ;
};func (_egd *PSOperand )Duplicate ()PSObject {_dgf :=*_egd ;return &_dgf };

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_egf *PSOperand )gt (_bded *PSStack )error {_ggg ,_bac :=_bded .PopNumberAsFloat64 ();if _bac !=nil {return _bac ;};_efeb ,_bac :=_bded .PopNumberAsFloat64 ();if _bac !=nil {return _bac ;};if _ff .Abs (_efeb -_ggg )< _c {_dde :=_bded .Push (MakeBool (false ));
return _dde ;}else if _efeb > _ggg {_affg :=_bded .Push (MakeBool (true ));return _affg ;}else {_dff :=_bded .Push (MakeBool (false ));return _dff ;};};

// Exec executes the operand `op` in the state specified by `stack`.
func (_bbe *PSOperand )Exec (stack *PSStack )error {_ded :=ErrUnsupportedOperand ;switch *_bbe {case "\u0061\u0062\u0073":_ded =_bbe .abs (stack );case "\u0061\u0064\u0064":_ded =_bbe .add (stack );case "\u0061\u006e\u0064":_ded =_bbe .and (stack );case "\u0061\u0074\u0061\u006e":_ded =_bbe .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_ded =_bbe .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_ded =_bbe .ceiling (stack );case "\u0063\u006f\u0070\u0079":_ded =_bbe .copy (stack );case "\u0063\u006f\u0073":_ded =_bbe .cos (stack );
case "\u0063\u0076\u0069":_ded =_bbe .cvi (stack );case "\u0063\u0076\u0072":_ded =_bbe .cvr (stack );case "\u0064\u0069\u0076":_ded =_bbe .div (stack );case "\u0064\u0075\u0070":_ded =_bbe .dup (stack );case "\u0065\u0071":_ded =_bbe .eq (stack );case "\u0065\u0078\u0063\u0068":_ded =_bbe .exch (stack );
case "\u0065\u0078\u0070":_ded =_bbe .exp (stack );case "\u0066\u006c\u006fo\u0072":_ded =_bbe .floor (stack );case "\u0067\u0065":_ded =_bbe .ge (stack );case "\u0067\u0074":_ded =_bbe .gt (stack );case "\u0069\u0064\u0069\u0076":_ded =_bbe .idiv (stack );
case "\u0069\u0066":_ded =_bbe .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_ded =_bbe .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_ded =_bbe .index (stack );case "\u006c\u0065":_ded =_bbe .le (stack );case "\u006c\u006f\u0067":_ded =_bbe .log (stack );
case "\u006c\u006e":_ded =_bbe .ln (stack );case "\u006c\u0074":_ded =_bbe .lt (stack );case "\u006d\u006f\u0064":_ded =_bbe .mod (stack );case "\u006d\u0075\u006c":_ded =_bbe .mul (stack );case "\u006e\u0065":_ded =_bbe .ne (stack );case "\u006e\u0065\u0067":_ded =_bbe .neg (stack );
case "\u006e\u006f\u0074":_ded =_bbe .not (stack );case "\u006f\u0072":_ded =_bbe .or (stack );case "\u0070\u006f\u0070":_ded =_bbe .pop (stack );case "\u0072\u006f\u0075n\u0064":_ded =_bbe .round (stack );case "\u0072\u006f\u006c\u006c":_ded =_bbe .roll (stack );
case "\u0073\u0069\u006e":_ded =_bbe .sin (stack );case "\u0073\u0071\u0072\u0074":_ded =_bbe .sqrt (stack );case "\u0073\u0075\u0062":_ded =_bbe .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_ded =_bbe .truncate (stack );case "\u0078\u006f\u0072":_ded =_bbe .xor (stack );
};return _ded ;};func (_bbb *PSReal )String ()string {return _e .Sprintf ("\u0025\u002e\u0035\u0066",_bbb .Val )};var ErrStackUnderflow =_f .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gedf :=PSInteger {};_gedf .Val =val ;return &_gedf };func (_agf *PSOperand )index (_aeed *PSStack )error {_abb ,_gdae :=_aeed .Pop ();if _gdae !=nil {return _gdae ;};_aeedg ,_dce :=_abb .(*PSInteger );if !_dce {return ErrTypeCheck ;
};if _aeedg .Val < 0{return ErrRangeCheck ;};if _aeedg .Val > len (*_aeed )-1{return ErrStackUnderflow ;};_ebda :=(*_aeed )[len (*_aeed )-1-_aeedg .Val ];_gdae =_aeed .Push (_ebda .Duplicate ());return _gdae ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_eb *PSReal )Duplicate ()PSObject {_ea :=PSReal {};_ea .Val =_eb .Val ;return &_ea };func (_ccgb *PSOperand )truncate (_bebd *PSStack )error {_ddag ,_ceb :=_bebd .Pop ();if _ceb !=nil {return _ceb ;};if _febe ,_gbcac :=_ddag .(*PSReal );
_gbcac {_gba :=int (_febe .Val );_ceb =_bebd .Push (MakeReal (float64 (_gba )));}else if _geee ,_gbag :=_ddag .(*PSInteger );_gbag {_ceb =_bebd .Push (MakeInteger (_geee .Val ));}else {return ErrTypeCheck ;};return _ceb ;};func (_fdf *PSOperand )pop (_dcdb *PSStack )error {_ ,_dad :=_dcdb .Pop ();
if _dad !=nil {return _dad ;};return nil ;};func (_fbe *PSOperand )abs (_gfe *PSStack )error {_gce ,_cfe :=_gfe .Pop ();if _cfe !=nil {return _cfe ;};if _bbc ,_aca :=_gce .(*PSReal );_aca {_gdc :=_bbc .Val ;if _gdc < 0{_cfe =_gfe .Push (MakeReal (-_gdc ));
}else {_cfe =_gfe .Push (MakeReal (_gdc ));};}else if _acg ,_bc :=_gce .(*PSInteger );_bc {_fff :=_acg .Val ;if _fff < 0{_cfe =_gfe .Push (MakeInteger (-_fff ));}else {_cfe =_gfe .Push (MakeInteger (_fff ));};}else {return ErrTypeCheck ;};return _cfe ;
};func (_eda *PSOperand )bitshift (_ffa *PSStack )error {_dfa ,_abc :=_ffa .PopInteger ();if _abc !=nil {return _abc ;};_ced ,_abc :=_ffa .PopInteger ();if _abc !=nil {return _abc ;};var _cc int ;if _dfa >=0{_cc =_ced <<uint (_dfa );}else {_cc =_ced >>uint (-_dfa );
};_abc =_ffa .Push (MakeInteger (_cc ));return _abc ;};func (_ad *PSOperand )add (_dd *PSStack )error {_gee ,_af :=_dd .Pop ();if _af !=nil {return _af ;};_dgd ,_af :=_dd .Pop ();if _af !=nil {return _af ;};_ega ,_dfd :=_gee .(*PSReal );_dcb ,_fad :=_gee .(*PSInteger );
if !_dfd &&!_fad {return ErrTypeCheck ;};_gbf ,_gbd :=_dgd .(*PSReal );_bdc ,_be :=_dgd .(*PSInteger );if !_gbd &&!_be {return ErrTypeCheck ;};if _fad &&_be {_cdb :=_dcb .Val +_bdc .Val ;_ae :=_dd .Push (MakeInteger (_cdb ));return _ae ;};var _gbb float64 ;
if _dfd {_gbb =_ega .Val ;}else {_gbb =float64 (_dcb .Val );};if _gbd {_gbb +=_gbf .Val ;}else {_gbb +=float64 (_bdc .Val );};_af =_dd .Push (MakeReal (_gbb ));return _af ;};func (_dee *PSOperand )le (_ebgg *PSStack )error {_aeb ,_gbdc :=_ebgg .PopNumberAsFloat64 ();
if _gbdc !=nil {return _gbdc ;};_cac ,_gbdc :=_ebgg .PopNumberAsFloat64 ();if _gbdc !=nil {return _gbdc ;};if _ff .Abs (_cac -_aeb )< _c {_ffg :=_ebgg .Push (MakeBool (true ));return _ffg ;}else if _cac < _aeb {_bdcd :=_ebgg .Push (MakeBool (true ));return _bdcd ;
}else {_cag :=_ebgg .Push (MakeBool (false ));return _cag ;};};func (_gd *PSProgram )String ()string {_da :="\u007b\u0020";for _ ,_cf :=range *_gd {_da +=_cf .String ();_da +="\u0020";};_da +="\u007d";return _da ;};func (_dbc *PSInteger )Duplicate ()PSObject {_df :=PSInteger {};
_df .Val =_dbc .Val ;return &_df };func (_de *PSBoolean )DebugString ()string {return _e .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_de .Val );};func (_ceg *PSOperand )String ()string {return string (*_ceg )};func (_fbfe *PSOperand )mul (_dfg *PSStack )error {_gaa ,_gge :=_dfg .Pop ();
if _gge !=nil {return _gge ;};_dedc ,_gge :=_dfg .Pop ();if _gge !=nil {return _gge ;};_gga ,_gece :=_gaa .(*PSReal );_acee ,_cage :=_gaa .(*PSInteger );if !_gece &&!_cage {return ErrTypeCheck ;};_acad ,_dgge :=_dedc .(*PSReal );_gab ,_bcd :=_dedc .(*PSInteger );
if !_dgge &&!_bcd {return ErrTypeCheck ;};if _cage &&_bcd {_efg :=_acee .Val *_gab .Val ;_abba :=_dfg .Push (MakeInteger (_efg ));return _abba ;};var _fgg float64 ;if _gece {_fgg =_gga .Val ;}else {_fgg =float64 (_acee .Val );};if _dgge {_fgg *=_acad .Val ;
}else {_fgg *=float64 (_gab .Val );};_gge =_dfg .Push (MakeReal (_fgg ));return _gge ;};func (_bdaa *PSOperand )sin (_bdg *PSStack )error {_gbg ,_cgc :=_bdg .PopNumberAsFloat64 ();if _cgc !=nil {return _cgc ;};_aeea :=_ff .Sin (_gbg *_ff .Pi /180.0);_cgc =_bdg .Push (MakeReal (_aeea ));
return _cgc ;};func (_feb *PSOperand )ln (_eec *PSStack )error {_bdb ,_ebff :=_eec .PopNumberAsFloat64 ();if _ebff !=nil {return _ebff ;};_ccba :=_ff .Log (_bdb );_ebff =_eec .Push (MakeReal (_ccba ));return _ebff ;};func (_ddee *PSOperand )roll (_agfb *PSStack )error {_dfdaf ,_dbd :=_agfb .Pop ();
if _dbd !=nil {return _dbd ;};_dgc ,_dbd :=_agfb .Pop ();if _dbd !=nil {return _dbd ;};_defb ,_fcg :=_dfdaf .(*PSInteger );if !_fcg {return ErrTypeCheck ;};_ffd ,_fcg :=_dgc .(*PSInteger );if !_fcg {return ErrTypeCheck ;};if _ffd .Val < 0{return ErrRangeCheck ;
};if _ffd .Val ==0||_ffd .Val ==1{return nil ;};if _ffd .Val > len (*_agfb ){return ErrStackUnderflow ;};for _cbdc :=0;_cbdc < _baf (_defb .Val );_cbdc ++{var _addf []PSObject ;_addf =(*_agfb )[len (*_agfb )-(_ffd .Val ):len (*_agfb )];if _defb .Val > 0{_cgd :=_addf [len (_addf )-1];
_addf =append ([]PSObject {_cgd },_addf [0:len (_addf )-1]...);}else {_fgc :=_addf [len (_addf )-_ffd .Val ];_addf =append (_addf [1:],_fgc );};_aade :=append ((*_agfb )[0:len (*_agfb )-_ffd .Val ],_addf ...);_agfb =&_aade ;};return nil ;};func (_ebd *PSBoolean )String ()string {return _e .Sprintf ("\u0025\u0076",_ebd .Val )};
func (_cebc *PSOperand )xor (_agad *PSStack )error {_ddg ,_fbdc :=_agad .Pop ();if _fbdc !=nil {return _fbdc ;};_gfdb ,_fbdc :=_agad .Pop ();if _fbdc !=nil {return _fbdc ;};if _ffdd ,_geeed :=_ddg .(*PSBoolean );_geeed {_aba ,_geag :=_gfdb .(*PSBoolean );
if !_geag {return ErrTypeCheck ;};_fbdc =_agad .Push (MakeBool (_ffdd .Val !=_aba .Val ));return _fbdc ;};if _gbda ,_dba :=_ddg .(*PSInteger );_dba {_dgdd ,_bacc :=_gfdb .(*PSInteger );if !_bacc {return ErrTypeCheck ;};_fbdc =_agad .Push (MakeInteger (_gbda .Val ^_dgdd .Val ));
return _fbdc ;};return ErrTypeCheck ;};func (_dgg *PSOperand )copy (_afc *PSStack )error {_ccb ,_afe :=_afc .PopInteger ();if _afe !=nil {return _afe ;};if _ccb < 0{return ErrRangeCheck ;};if _ccb > len (*_afc ){return ErrRangeCheck ;};*_afc =append (*_afc ,(*_afc )[len (*_afc )-_ccb :]...);
return nil ;};