//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_b "bufio";_ef "bytes";_e "errors";_f "fmt";_bb "github.com/unidoc/unipdf/v3/common";_bf "github.com/unidoc/unipdf/v3/core";_cf "io";_efd "math";);var ErrRangeCheck =_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_fec *PSOperand )String ()string {return string (*_fec )};func (_abgcg *PSParser )parseOperand ()(*PSOperand ,error ){var _badd []byte ;for {_dbdb ,_gcea :=_abgcg ._eed .Peek (1);if _gcea !=nil {if _gcea ==_cf .EOF {break ;};return nil ,_gcea ;};
if _bf .IsDelimiter (_dbdb [0]){break ;};if _bf .IsWhiteSpace (_dbdb [0]){break ;};_gacb ,_ :=_abgcg ._eed .ReadByte ();_badd =append (_badd ,_gacb );};if len (_badd )==0{return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_badd )),nil ;};func (_af *PSReal )DebugString ()string {return _f .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_af .Val );};

// String returns a string representation of the stack.
func (_ceca *PSStack )String ()string {_ecee :="\u005b\u0020";for _ ,_abgd :=range *_ceca {_ecee +=_abgd .String ();_ecee +="\u0020";};_ecee +="\u005d";return _ecee ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// Exec executes the program, typically leaving output values on the stack.
func (_db *PSProgram )Exec (stack *PSStack )error {for _ ,_aeb :=range *_db {var _eg error ;switch _dbg :=_aeb .(type ){case *PSInteger :_faf :=_dbg ;_eg =stack .Push (_faf );case *PSReal :_dfe :=_dbg ;_eg =stack .Push (_dfe );case *PSBoolean :_aea :=_dbg ;
_eg =stack .Push (_aea );case *PSProgram :_ead :=_dbg ;_eg =stack .Push (_ead );case *PSOperand :_ba :=_dbg ;_eg =_ba .Exec (stack );default:return ErrTypeCheck ;};if _eg !=nil {return _eg ;};};return nil ;};func (_fce *PSOperand )div (_ceb *PSStack )error {_bea ,_edf :=_ceb .Pop ();
if _edf !=nil {return _edf ;};_gaa ,_edf :=_ceb .Pop ();if _edf !=nil {return _edf ;};_gba ,_cgd :=_bea .(*PSReal );_dcd ,_aede :=_bea .(*PSInteger );if !_cgd &&!_aede {return ErrTypeCheck ;};if _cgd &&_gba .Val ==0{return ErrUndefinedResult ;};if _aede &&_dcd .Val ==0{return ErrUndefinedResult ;
};_dbb ,_ffbb :=_gaa .(*PSReal );_gg ,_aafd :=_gaa .(*PSInteger );if !_ffbb &&!_aafd {return ErrTypeCheck ;};var _dce float64 ;if _ffbb {_dce =_dbb .Val ;}else {_dce =float64 (_gg .Val );};if _cgd {_dce /=_gba .Val ;}else {_dce /=float64 (_dcd .Val );};
_edf =_ceb .Push (MakeReal (_dce ));return _edf ;};func (_afg *PSOperand )cvi (_bfd *PSStack )error {_afc ,_cgc :=_bfd .Pop ();if _cgc !=nil {return _cgc ;};if _ebe ,_dcbd :=_afc .(*PSReal );_dcbd {_fag :=int (_ebe .Val );_cgc =_bfd .Push (MakeInteger (_fag ));
}else if _cdf ,_edc :=_afc .(*PSInteger );_edc {_bc :=_cdf .Val ;_cgc =_bfd .Push (MakeInteger (_bc ));}else {return ErrTypeCheck ;};return _cgc ;};func (_edd *PSReal )Duplicate ()PSObject {_fe :=PSReal {};_fe .Val =_edd .Val ;return &_fe };func (_gab *PSOperand )round (_fcf *PSStack )error {_ccd ,_gggg :=_fcf .Pop ();
if _gggg !=nil {return _gggg ;};if _fgaa ,_fgbd :=_ccd .(*PSReal );_fgbd {_gggg =_fcf .Push (MakeReal (_efd .Floor (_fgaa .Val +0.5)));}else if _gagg ,_ebg :=_ccd .(*PSInteger );_ebg {_gggg =_fcf .Push (MakeInteger (_gagg .Val ));}else {return ErrTypeCheck ;
};return _gggg ;};func (_begg *PSOperand )floor (_ccgf *PSStack )error {_eag ,_cbb :=_ccgf .Pop ();if _cbb !=nil {return _cbb ;};if _aab ,_age :=_eag .(*PSReal );_age {_cbb =_ccgf .Push (MakeReal (_efd .Floor (_aab .Val )));}else if _ccf ,_gbcg :=_eag .(*PSInteger );
_gbcg {_cbb =_ccgf .Push (MakeInteger (_ccf .Val ));}else {return ErrTypeCheck ;};return _cbb ;};func (_aae *PSOperand )abs (_aff *PSStack )error {_fba ,_ec :=_aff .Pop ();if _ec !=nil {return _ec ;};if _dc ,_fad :=_fba .(*PSReal );_fad {_ecb :=_dc .Val ;
if _ecb < 0{_ec =_aff .Push (MakeReal (-_ecb ));}else {_ec =_aff .Push (MakeReal (_ecb ));};}else if _aef ,_bag :=_fba .(*PSInteger );_bag {_deb :=_aef .Val ;if _deb < 0{_ec =_aff .Push (MakeInteger (-_deb ));}else {_ec =_aff .Push (MakeInteger (_deb ));
};}else {return ErrTypeCheck ;};return _ec ;};func (_ccda *PSOperand )sin (_aec *PSStack )error {_bcea ,_bff :=_aec .PopNumberAsFloat64 ();if _bff !=nil {return _bff ;};_agfb :=_efd .Sin (_bcea *_efd .Pi /180.0);_bff =_aec .Push (MakeReal (_agfb ));return _bff ;
};const _be =0.000001;var ErrStackUnderflow =_e .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_bfb *PSOperand )xor (_aaa *PSStack )error {_gggd ,_dgab :=_aaa .Pop ();if _dgab !=nil {return _dgab ;};_ecc ,_dgab :=_aaa .Pop ();
if _dgab !=nil {return _dgab ;};if _ggf ,_ffe :=_gggd .(*PSBoolean );_ffe {_dca ,_ded :=_ecc .(*PSBoolean );if !_ded {return ErrTypeCheck ;};_dgab =_aaa .Push (MakeBool (_ggf .Val !=_dca .Val ));return _dgab ;};if _dbcg ,_gfc :=_gggd .(*PSInteger );_gfc {_cdbf ,_cbc :=_ecc .(*PSInteger );
if !_cbc {return ErrTypeCheck ;};_dgab =_aaa .Push (MakeInteger (_dbcg .Val ^_cdbf .Val ));return _dgab ;};return ErrTypeCheck ;};func (_fed *PSOperand )copy (_feca *PSStack )error {_dg ,_ac :=_feca .PopInteger ();if _ac !=nil {return _ac ;};if _dg < 0{return ErrRangeCheck ;
};if _dg > len (*_feca ){return ErrRangeCheck ;};*_feca =append (*_feca ,(*_feca )[len (*_feca )-_dg :]...);return nil ;};func (_agc *PSOperand )bitshift (_fea *PSStack )error {_bec ,_cef :=_fea .PopInteger ();if _cef !=nil {return _cef ;};_dfa ,_cef :=_fea .PopInteger ();
if _cef !=nil {return _cef ;};var _aafe int ;if _bec >=0{_aafe =_dfa <<uint (_bec );}else {_aafe =_dfa >>uint (-_bec );};_cef =_fea .Push (MakeInteger (_aafe ));return _cef ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_ed *PSInteger )String ()string {return _f .Sprintf ("\u0025\u0064",_ed .Val )};func (_fddb *PSOperand )not (_fbc *PSStack )error {_dffb ,_ebc :=_fbc .Pop ();if _ebc !=nil {return _ebc ;};if _gdcc ,_fefe :=_dffb .(*PSBoolean );
_fefe {_ebc =_fbc .Push (MakeBool (!_gdcc .Val ));return _ebc ;}else if _bce ,_ece :=_dffb .(*PSInteger );_ece {_ebc =_fbc .Push (MakeInteger (^_bce .Val ));return _ebc ;}else {return ErrTypeCheck ;};};func (_ag *PSProgram )DebugString ()string {_ea :="\u007b\u0020";
for _ ,_fbd :=range *_ag {_ea +=_fbd .DebugString ();_ea +="\u0020";};_ea +="\u007d";return _ea ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gece :=PSInteger {};_gece .Val =val ;return &_gece };func (_caab *PSOperand )lt (_dea *PSStack )error {_ccc ,_bfc :=_dea .PopNumberAsFloat64 ();if _bfc !=nil {return _bfc ;};_fdbc ,_bfc :=_dea .PopNumberAsFloat64 ();
if _bfc !=nil {return _bfc ;};if _efd .Abs (_fdbc -_ccc )< _be {_gce :=_dea .Push (MakeBool (false ));return _gce ;}else if _fdbc < _ccc {_gag :=_dea .Push (MakeBool (true ));return _gag ;}else {_dfc :=_dea .Push (MakeBool (false ));return _dfc ;};};func (_daa *PSOperand )eq (_acg *PSStack )error {_dgb ,_ccb :=_acg .Pop ();
if _ccb !=nil {return _ccb ;};_ace ,_ccb :=_acg .Pop ();if _ccb !=nil {return _ccb ;};_fgf ,_ffd :=_dgb .(*PSBoolean );_edff ,_efc :=_ace .(*PSBoolean );if _ffd ||_efc {var _beg error ;if _ffd &&_efc {_beg =_acg .Push (MakeBool (_fgf .Val ==_edff .Val ));
}else {_beg =_acg .Push (MakeBool (false ));};return _beg ;};var _adab float64 ;var _bacg float64 ;if _egd ,_fdb :=_dgb .(*PSInteger );_fdb {_adab =float64 (_egd .Val );}else if _beaa ,_daf :=_dgb .(*PSReal );_daf {_adab =_beaa .Val ;}else {return ErrTypeCheck ;
};if _cee ,_efb :=_ace .(*PSInteger );_efb {_bacg =float64 (_cee .Val );}else if _dbbd ,_eeb :=_ace .(*PSReal );_eeb {_bacg =_dbbd .Val ;}else {return ErrTypeCheck ;};if _efd .Abs (_bacg -_adab )< _be {_ccb =_acg .Push (MakeBool (true ));}else {_ccb =_acg .Push (MakeBool (false ));
};return _ccb ;};func (_cag *PSOperand )mod (_ccgg *PSStack )error {_dbba ,_feb :=_ccgg .Pop ();if _feb !=nil {return _feb ;};_babg ,_feb :=_ccgg .Pop ();if _feb !=nil {return _feb ;};_bbe ,_cde :=_dbba .(*PSInteger );if !_cde {return ErrTypeCheck ;};if _bbe .Val ==0{return ErrUndefinedResult ;
};_bad ,_cde :=_babg .(*PSInteger );if !_cde {return ErrTypeCheck ;};_dde :=_bad .Val %_bbe .Val ;_feb =_ccgg .Push (MakeInteger (_dde ));return _feb ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_efba :=PSReal {};_efba .Val =val ;return &_efba };

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bfga :=PSBoolean {};_bfga .Val =val ;return &_bfga };func (_fbf *PSInteger )DebugString ()string {return _f .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_fbf .Val );};func (_fcab *PSOperand )ifCondition (_cgfe *PSStack )error {_aebe ,_cecb :=_cgfe .Pop ();
if _cecb !=nil {return _cecb ;};_egfb ,_cecb :=_cgfe .Pop ();if _cecb !=nil {return _cecb ;};_fef ,_eeg :=_aebe .(*PSProgram );if !_eeg {return ErrTypeCheck ;};_dae ,_eeg :=_egfb .(*PSBoolean );if !_eeg {return ErrTypeCheck ;};if _dae .Val {_eagb :=_fef .Exec (_cgfe );
return _eagb ;};return nil ;};func (_fae *PSOperand )log (_efe *PSStack )error {_bab ,_gdb :=_efe .PopNumberAsFloat64 ();if _gdb !=nil {return _gdb ;};_daac :=_efd .Log10 (_bab );_gdb =_efe .Push (MakeReal (_daac ));return _gdb ;};func (_gfee *PSOperand )roll (_dfag *PSStack )error {_decb ,_fcc :=_dfag .Pop ();
if _fcc !=nil {return _fcc ;};_edg ,_fcc :=_dfag .Pop ();if _fcc !=nil {return _fcc ;};_gbe ,_gge :=_decb .(*PSInteger );if !_gge {return ErrTypeCheck ;};_bfdd ,_gge :=_edg .(*PSInteger );if !_gge {return ErrTypeCheck ;};if _bfdd .Val < 0{return ErrRangeCheck ;
};if _bfdd .Val ==0||_bfdd .Val ==1{return nil ;};if _bfdd .Val > len (*_dfag ){return ErrStackUnderflow ;};for _bgg :=0;_bgg < _beb (_gbe .Val );_bgg ++{var _dgd []PSObject ;_dgd =(*_dfag )[len (*_dfag )-(_bfdd .Val ):len (*_dfag )];if _gbe .Val > 0{_abf :=_dgd [len (_dgd )-1];
_dgd =append ([]PSObject {_abf },_dgd [0:len (_dgd )-1]...);}else {_beca :=_dgd [len (_dgd )-_bfdd .Val ];_dgd =append (_dgd [1:],_beca );};_bfcg :=append ((*_dfag )[0:len (*_dfag )-_bfdd .Val ],_dgd ...);_dfag =&_bfcg ;};return nil ;};func (_efa *PSParser )parseFunction ()(*PSProgram ,error ){_gebb ,_ :=_efa ._eed .ReadByte ();
if _gebb !='{'{return nil ,_e .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_aacc :=NewPSProgram ();for {_efa .skipSpaces ();_efa .skipComments ();_effd ,_dedb :=_efa ._eed .Peek (2);if _dedb !=nil {if _dedb ==_cf .EOF {break ;
};return nil ,_dedb ;};_bb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_effd ));if _effd [0]=='}'{_bb .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_efa ._eed .ReadByte ();
break ;}else if _effd [0]=='{'{_bb .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_cgb ,_afd :=_efa .parseFunction ();if _afd !=nil {return nil ,_afd ;};_aacc .Append (_cgb );}else if _bf .IsDecimalDigit (_effd [0])||(_effd [0]=='-'&&_bf .IsDecimalDigit (_effd [1])){_bb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_fbb ,_ageb :=_efa .parseNumber ();if _ageb !=nil {return nil ,_ageb ;};_aacc .Append (_fbb );}else {_bb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_effd ,_ =_efa ._eed .Peek (5);_dba :=string (_effd );
_bb .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_dba );if (len (_dba )> 4)&&(_dba [:5]=="\u0066\u0061\u006cs\u0065"){_aafaa ,_aca :=_efa .parseBool ();if _aca !=nil {return nil ,_aca ;};_aacc .Append (_aafaa );}else if (len (_dba )> 3)&&(_dba [:4]=="\u0074\u0072\u0075\u0065"){_deg ,_bfde :=_efa .parseBool ();
if _bfde !=nil {return nil ,_bfde ;};_aacc .Append (_deg );}else {_ccbe ,_eaed :=_efa .parseOperand ();if _eaed !=nil {return nil ,_eaed ;};_aacc .Append (_ccbe );};};};return _aacc ,nil ;};func (_agf *PSProgram )Duplicate ()PSObject {_fbdd :=&PSProgram {};
for _ ,_bdc :=range *_agf {_fbdd .Append (_bdc .Duplicate ());};return _fbdd ;};func (_afcc *PSOperand )truncate (_gcb *PSStack )error {_bdf ,_daff :=_gcb .Pop ();if _daff !=nil {return _daff ;};if _cdbb ,_fbfe :=_bdf .(*PSReal );_fbfe {_bdfg :=int (_cdbb .Val );
_daff =_gcb .Push (MakeReal (float64 (_bdfg )));}else if _dcec ,_fda :=_bdf .(*PSInteger );_fda {_daff =_gcb .Push (MakeInteger (_dcec .Val ));}else {return ErrTypeCheck ;};return _daff ;};func (_bgc *PSOperand )pop (_ecd *PSStack )error {_ ,_gaaa :=_ecd .Pop ();
if _gaaa !=nil {return _gaaa ;};return nil ;};func (_cac *PSOperand )ceiling (_fcac *PSStack )error {_caa ,_aac :=_fcac .Pop ();if _aac !=nil {return _aac ;};if _gb ,_dfaf :=_caa .(*PSReal );_dfaf {_aac =_fcac .Push (MakeReal (_efd .Ceil (_gb .Val )));
}else if _gde ,_ccg :=_caa .(*PSInteger );_ccg {_aac =_fcac .Push (MakeInteger (_gde .Val ));}else {_aac =ErrTypeCheck ;};return _aac ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_fg *PSOperand )Exec (stack *PSStack )error {_cb :=ErrUnsupportedOperand ;switch *_fg {case "\u0061\u0062\u0073":_cb =_fg .abs (stack );case "\u0061\u0064\u0064":_cb =_fg .add (stack );case "\u0061\u006e\u0064":_cb =_fg .and (stack );case "\u0061\u0074\u0061\u006e":_cb =_fg .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_cb =_fg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_cb =_fg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_cb =_fg .copy (stack );case "\u0063\u006f\u0073":_cb =_fg .cos (stack );
case "\u0063\u0076\u0069":_cb =_fg .cvi (stack );case "\u0063\u0076\u0072":_cb =_fg .cvr (stack );case "\u0064\u0069\u0076":_cb =_fg .div (stack );case "\u0064\u0075\u0070":_cb =_fg .dup (stack );case "\u0065\u0071":_cb =_fg .eq (stack );case "\u0065\u0078\u0063\u0068":_cb =_fg .exch (stack );
case "\u0065\u0078\u0070":_cb =_fg .exp (stack );case "\u0066\u006c\u006fo\u0072":_cb =_fg .floor (stack );case "\u0067\u0065":_cb =_fg .ge (stack );case "\u0067\u0074":_cb =_fg .gt (stack );case "\u0069\u0064\u0069\u0076":_cb =_fg .idiv (stack );case "\u0069\u0066":_cb =_fg .ifCondition (stack );
case "\u0069\u0066\u0065\u006c\u0073\u0065":_cb =_fg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_cb =_fg .index (stack );case "\u006c\u0065":_cb =_fg .le (stack );case "\u006c\u006f\u0067":_cb =_fg .log (stack );case "\u006c\u006e":_cb =_fg .ln (stack );
case "\u006c\u0074":_cb =_fg .lt (stack );case "\u006d\u006f\u0064":_cb =_fg .mod (stack );case "\u006d\u0075\u006c":_cb =_fg .mul (stack );case "\u006e\u0065":_cb =_fg .ne (stack );case "\u006e\u0065\u0067":_cb =_fg .neg (stack );case "\u006e\u006f\u0074":_cb =_fg .not (stack );
case "\u006f\u0072":_cb =_fg .or (stack );case "\u0070\u006f\u0070":_cb =_fg .pop (stack );case "\u0072\u006f\u0075n\u0064":_cb =_fg .round (stack );case "\u0072\u006f\u006c\u006c":_cb =_fg .roll (stack );case "\u0073\u0069\u006e":_cb =_fg .sin (stack );
case "\u0073\u0071\u0072\u0074":_cb =_fg .sqrt (stack );case "\u0073\u0075\u0062":_cb =_fg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_cb =_fg .truncate (stack );case "\u0078\u006f\u0072":_cb =_fg .xor (stack );};return _cb ;
};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_cdfg *PSOperand )exch (_ffda *PSStack )error {_gec ,_gdc :=_ffda .Pop ();if _gdc !=nil {return _gdc ;};_cfa ,_gdc :=_ffda .Pop ();if _gdc !=nil {return _gdc ;};_gdc =_ffda .Push (_gec );if _gdc !=nil {return _gdc ;
};_gdc =_ffda .Push (_cfa );return _gdc ;};func (_bga *PSOperand )ge (_fafe *PSStack )error {_bbd ,_affc :=_fafe .PopNumberAsFloat64 ();if _affc !=nil {return _affc ;};_ega ,_affc :=_fafe .PopNumberAsFloat64 ();if _affc !=nil {return _affc ;};if _efd .Abs (_ega -_bbd )< _be {_bdggd :=_fafe .Push (MakeBool (true ));
return _bdggd ;}else if _ega > _bbd {_bedg :=_fafe .Push (MakeBool (true ));return _bedg ;}else {_gff :=_fafe .Push (MakeBool (false ));return _gff ;};};func (_afcd *PSOperand )index (_def *PSStack )error {_fga ,_fcd :=_def .Pop ();if _fcd !=nil {return _fcd ;
};_fbac ,_cea :=_fga .(*PSInteger );if !_cea {return ErrTypeCheck ;};if _fbac .Val < 0{return ErrRangeCheck ;};if _fbac .Val > len (*_def )-1{return ErrStackUnderflow ;};_aba :=(*_def )[len (*_def )-1-_fbac .Val ];_fcd =_def .Push (_aba .Duplicate ());
return _fcd ;};func (_gdd *PSOperand )ne (_bdggc *PSStack )error {_efg :=_gdd .eq (_bdggc );if _efg !=nil {return _efg ;};_efg =_gdd .not (_bdggc );return _efg ;};func (_ffg *PSOperand )neg (_dcg *PSStack )error {_geg ,_fcdf :=_dcg .Pop ();if _fcdf !=nil {return _fcdf ;
};if _dbc ,_cfe :=_geg .(*PSReal );_cfe {_fcdf =_dcg .Push (MakeReal (-_dbc .Val ));return _fcdf ;}else if _cbg ,_cbd :=_geg .(*PSInteger );_cbd {_fcdf =_dcg .Push (MakeInteger (-_cbg .Val ));return _fcdf ;}else {return ErrTypeCheck ;};};func (_cdc *PSBoolean )Duplicate ()PSObject {_ad :=PSBoolean {};
_ad .Val =_cdc .Val ;return &_ad };func (_gd *PSBoolean )DebugString ()string {return _f .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_gd .Val );};func (_ce *PSInteger )Duplicate ()PSObject {_cfc :=PSInteger {};_cfc .Val =_ce .Val ;return &_cfc };


// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_d *PSProgram ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ga *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_fa :=range objects {_aed :=_ga .Stack .Push (_fa );if _aed !=nil {return nil ,_aed ;};};_gf :=_ga ._d .Exec (_ga .Stack );if _gf !=nil {_bb .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gf );
return nil ,_gf ;};_cc :=[]PSObject (*_ga .Stack );_ga .Stack .Empty ();return _cc ,nil ;};func (_adg *PSOperand )cvr (_gbc *PSStack )error {_gfd ,_efdb :=_gbc .Pop ();if _efdb !=nil {return _efdb ;};if _edda ,_aefe :=_gfd .(*PSReal );_aefe {_efdb =_gbc .Push (MakeReal (_edda .Val ));
}else if _bdd ,_bfdc :=_gfd .(*PSInteger );_bfdc {_efdb =_gbc .Push (MakeReal (float64 (_bdd .Val )));}else {return ErrTypeCheck ;};return _efdb ;};func (_baa *PSOperand )sqrt (_fbe *PSStack )error {_aafba ,_dgf :=_fbe .PopNumberAsFloat64 ();if _dgf !=nil {return _dgf ;
};if _aafba < 0{return ErrRangeCheck ;};_bdca :=_efd .Sqrt (_aafba );_dgf =_fbe .Push (MakeReal (_bdca ));return _dgf ;};func (_cdbc *PSOperand )sub (_acbe *PSStack )error {_debb ,_gbeg :=_acbe .Pop ();if _gbeg !=nil {return _gbeg ;};_geb ,_gbeg :=_acbe .Pop ();
if _gbeg !=nil {return _gbeg ;};_cfg ,_caga :=_debb .(*PSReal );_ecf ,_gcc :=_debb .(*PSInteger );if !_caga &&!_gcc {return ErrTypeCheck ;};_cedd ,_acgd :=_geb .(*PSReal );_eab ,_cda :=_geb .(*PSInteger );if !_acgd &&!_cda {return ErrTypeCheck ;};if _gcc &&_cda {_fbgg :=_eab .Val -_ecf .Val ;
_cabe :=_acbe .Push (MakeInteger (_fbgg ));return _cabe ;};var _caba float64 =0;if _acgd {_caba =_cedd .Val ;}else {_caba =float64 (_eab .Val );};if _caga {_caba -=_cfg .Val ;}else {_caba -=float64 (_ecf .Val );};_gbeg =_acbe .Push (MakeReal (_caba ));
return _gbeg ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_bdb *PSOperand )dup (_cab *PSStack )error {_gfb ,_fcaa :=_cab .Pop ();if _fcaa !=nil {return _fcaa ;};_fcaa =_cab .Push (_gfb );if _fcaa !=nil {return _fcaa ;};_fcaa =_cab .Push (_gfb .Duplicate ());
return _fcaa ;};func (_ada *PSOperand )add (_fd *PSStack )error {_bfg ,_cg :=_fd .Pop ();if _cg !=nil {return _cg ;};_abg ,_cg :=_fd .Pop ();if _cg !=nil {return _cg ;};_bagd ,_abgc :=_bfg .(*PSReal );_ced ,_fc :=_bfg .(*PSInteger );if !_abgc &&!_fc {return ErrTypeCheck ;
};_fgb ,_ff :=_abg .(*PSReal );_dcb ,_bfe :=_abg .(*PSInteger );if !_ff &&!_bfe {return ErrTypeCheck ;};if _fc &&_bfe {_fgg :=_ced .Val +_dcb .Val ;_ge :=_fd .Push (MakeInteger (_fgg ));return _ge ;};var _fca float64 ;if _abgc {_fca =_bagd .Val ;}else {_fca =float64 (_ced .Val );
};if _ff {_fca +=_fgb .Val ;}else {_fca +=float64 (_dcb .Val );};_cg =_fd .Push (MakeReal (_fca ));return _cg ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_eac :=PSParser {};_bbc :=_ef .NewBuffer (content );_eac ._eed =_b .NewReader (_bbc );return &_eac ;};func (_ecde *PSParser )skipComments ()error {if _ ,_bcd :=_ecde .skipSpaces ();_bcd !=nil {return _bcd ;};
_bddf :=true ;for {_fbad ,_accb :=_ecde ._eed .Peek (1);if _accb !=nil {_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_accb .Error ());return _accb ;};if _bddf &&_fbad [0]!='%'{return nil ;};_bddf =false ;if (_fbad [0]!='\r')&&(_fbad [0]!='\n'){_ecde ._eed .ReadByte ();
}else {break ;};};return _ecde .skipComments ();};func (_aafb *PSOperand )le (_bcg *PSStack )error {_dee ,_fee :=_bcg .PopNumberAsFloat64 ();if _fee !=nil {return _fee ;};_ged ,_fee :=_bcg .PopNumberAsFloat64 ();if _fee !=nil {return _fee ;};if _efd .Abs (_ged -_dee )< _be {_ddc :=_bcg .Push (MakeBool (true ));
return _ddc ;}else if _ged < _dee {_feab :=_bcg .Push (MakeBool (true ));return _feab ;}else {_fab :=_bcg .Push (MakeBool (false ));return _fab ;};};

// Pop pops an object from the top of the stack.
func (_dbad *PSStack )Pop ()(PSObject ,error ){if len (*_dbad )< 1{return nil ,ErrStackUnderflow ;};_bdfe :=(*_dbad )[len (*_dbad )-1];*_dbad =(*_dbad )[0:len (*_dbad )-1];return _bdfe ,nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_eba *PSParser )skipSpaces ()(int ,error ){_ceec :=0;for {_fedc ,_gffb :=_eba ._eed .Peek (1);if _gffb !=nil {return 0,_gffb ;};if _bf .IsWhiteSpace (_fedc [0]){_eba ._eed .ReadByte ();_ceec ++;}else {break ;};};return _ceec ,nil ;
};func (_ccfd *PSOperand )gt (_gfdc *PSStack )error {_dga ,_bca :=_gfdc .PopNumberAsFloat64 ();if _bca !=nil {return _bca ;};_gcg ,_bca :=_gfdc .PopNumberAsFloat64 ();if _bca !=nil {return _bca ;};if _efd .Abs (_gcg -_dga )< _be {_dfb :=_gfdc .Push (MakeBool (false ));
return _dfb ;}else if _gcg > _dga {_acb :=_gfdc .Push (MakeBool (true ));return _acb ;}else {_fge :=_gfdc .Push (MakeBool (false ));return _fge ;};};func (_bg *PSOperand )Duplicate ()PSObject {_dbf :=*_bg ;return &_dbf };

// Append appends an object to the PSProgram.
func (_bde *PSProgram )Append (obj PSObject ){*_bde =append (*_bde ,obj )};func (_gfe *PSProgram )String ()string {_dfd :="\u007b\u0020";for _ ,_da :=range *_gfe {_dfd +=_da .String ();_dfd +="\u0020";};_dfd +="\u007d";return _dfd ;};func (_bac *PSOperand )cos (_acc *PSStack )error {_gc ,_eaf :=_acc .PopNumberAsFloat64 ();
if _eaf !=nil {return _eaf ;};_cgf :=_efd .Cos (_gc *_efd .Pi /180.0);_eaf =_acc .Push (MakeReal (_cgf ));return _eaf ;};var ErrUndefinedResult =_e .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_abe *PSOperand )exp (_bdgg *PSStack )error {_fdd ,_bed :=_bdgg .PopNumberAsFloat64 ();if _bed !=nil {return _bed ;};_bcc ,_bed :=_bdgg .PopNumberAsFloat64 ();if _bed !=nil {return _bed ;};if _efd .Abs (_fdd )< 1&&_bcc < 0{return ErrUndefinedResult ;
};_cfd :=_efd .Pow (_bcc ,_fdd );_bed =_bdgg .Push (MakeReal (_cfd ));return _bed ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_gfge :=PSOperand (val );return &_gfge };

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_bd *PSBoolean )String ()string {return _f .Sprintf ("\u0025\u0076",_bd .Val )};

// PSParser is a basic Postscript parser.
type PSParser struct{_eed *_b .Reader };func (_bdg *PSOperand )and (_fbfg *PSStack )error {_ecg ,_bded :=_fbfg .Pop ();if _bded !=nil {return _bded ;};_dff ,_bded :=_fbfg .Pop ();if _bded !=nil {return _bded ;};if _eff ,_adf :=_ecg .(*PSBoolean );_adf {_dec ,_fcb :=_dff .(*PSBoolean );
if !_fcb {return ErrTypeCheck ;};_bded =_fbfg .Push (MakeBool (_eff .Val &&_dec .Val ));return _bded ;};if _bfa ,_egf :=_ecg .(*PSInteger );_egf {_dab ,_eae :=_dff .(*PSInteger );if !_eae {return ErrTypeCheck ;};_bded =_fbfg .Push (MakeInteger (_bfa .Val &_dab .Val ));
return _bded ;};return ErrTypeCheck ;};func (_cdcd *PSParser )parseBool ()(*PSBoolean ,error ){_begb ,_bdfb :=_cdcd ._eed .Peek (4);if _bdfb !=nil {return MakeBool (false ),_bdfb ;};if (len (_begb )>=4)&&(string (_begb [:4])=="\u0074\u0072\u0075\u0065"){_cdcd ._eed .Discard (4);
return MakeBool (true ),nil ;};_begb ,_bdfb =_cdcd ._eed .Peek (5);if _bdfb !=nil {return MakeBool (false ),_bdfb ;};if (len (_begb )>=5)&&(string (_begb [:5])=="\u0066\u0061\u006cs\u0065"){_cdcd ._eed .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_acd *PSStack )DebugString ()string {_fdf :="\u005b\u0020";for _ ,_ffeb :=range *_acd {_fdf +=_ffeb .DebugString ();_fdf +="\u0020";};_fdf +="\u005d";return _fdf ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_fgfg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_fbee ,_ebcd :=_fgfg .Pop ();if _ebcd !=nil {return 0,_ebcd ;};if _cdfgb ,_dda :=_fbee .(*PSReal );_dda {return _cdfgb .Val ,nil ;}else if _effe ,_aga :=_fbee .(*PSInteger );_aga {return float64 (_effe .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};

// Empty empties the stack.
func (_efgd *PSStack )Empty (){*_efgd =[]PSObject {}};

// Parse parses the postscript and store as a program that can be executed.
func (_cdbd *PSParser )Parse ()(*PSProgram ,error ){_cdbd .skipSpaces ();_bfaa ,_acec :=_cdbd ._eed .Peek (2);if _acec !=nil {return nil ,_acec ;};if _bfaa [0]!='{'{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_aebg ,_acec :=_cdbd .parseFunction ();if _acec !=nil &&_acec !=_cf .EOF {return nil ,_acec ;};return _aebg ,_acec ;};func (_fbde *PSOperand )DebugString ()string {return _f .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_fbde );};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};var ErrTypeCheck =_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");var ErrUnsupportedOperand =_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
func (_baf *PSOperand )atan (_aaf *PSStack )error {_ffb ,_dd :=_aaf .PopNumberAsFloat64 ();if _dd !=nil {return _dd ;};_cec ,_dd :=_aaf .PopNumberAsFloat64 ();if _dd !=nil {return _dd ;};if _ffb ==0{var _bdeb error ;if _cec < 0{_bdeb =_aaf .Push (MakeReal (270));
}else {_bdeb =_aaf .Push (MakeReal (90));};return _bdeb ;};_ca :=_cec /_ffb ;_gee :=_efd .Atan (_ca )*180/_efd .Pi ;_dd =_aaf .Push (MakeReal (_gee ));return _dd ;};func (_bbf *PSReal )String ()string {return _f .Sprintf ("\u0025\u002e\u0035\u0066",_bbf .Val )};
var ErrStackOverflow =_e .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_gcd *PSOperand )idiv (_fece *PSStack )error {_faa ,_accf :=_fece .Pop ();if _accf !=nil {return _accf ;};_bcae ,_accf :=_fece .Pop ();
if _accf !=nil {return _accf ;};_fggc ,_cdb :=_faa .(*PSInteger );if !_cdb {return ErrTypeCheck ;};if _fggc .Val ==0{return ErrUndefinedResult ;};_fff ,_cdb :=_bcae .(*PSInteger );if !_cdb {return ErrTypeCheck ;};_bfac :=_fff .Val /_fggc .Val ;_accf =_fece .Push (MakeInteger (_bfac ));
return _accf ;};func (_eaea *PSOperand )or (_cca *PSStack )error {_aebd ,_fged :=_cca .Pop ();if _fged !=nil {return _fged ;};_cad ,_fged :=_cca .Pop ();if _fged !=nil {return _fged ;};if _dbde ,_affe :=_aebd .(*PSBoolean );_affe {_eef ,_fegd :=_cad .(*PSBoolean );
if !_fegd {return ErrTypeCheck ;};_fged =_cca .Push (MakeBool (_dbde .Val ||_eef .Val ));return _fged ;};if _fbg ,_gfg :=_aebd .(*PSInteger );_gfg {_cadg ,_gca :=_cad .(*PSInteger );if !_gca {return ErrTypeCheck ;};_fged =_cca .Push (MakeInteger (_fbg .Val |_cadg .Val ));
return _fged ;};return ErrTypeCheck ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_daad *PSStack )PopInteger ()(int ,error ){_dbce ,_abgb :=_daad .Pop ();if _abgb !=nil {return 0,_abgb ;};if _agfg ,_bgf :=_dbce .(*PSInteger );_bgf {return _agfg .Val ,nil ;};return 0,ErrTypeCheck ;};

// Push pushes an object on top of the stack.
func (_cbbf *PSStack )Push (obj PSObject )error {if len (*_cbbf )> 100{return ErrStackOverflow ;};*_cbbf =append (*_cbbf ,obj );return nil ;};func (_eefe *PSParser )parseNumber ()(PSObject ,error ){_cfed ,_bbb :=_bf .ParseNumber (_eefe ._eed );if _bbb !=nil {return nil ,_bbb ;
};switch _gdce :=_cfed .(type ){case *_bf .PdfObjectFloat :return MakeReal (float64 (*_gdce )),nil ;case *_bf .PdfObjectInteger :return MakeInteger (int (*_gdce )),nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cfed );
};func (_eee *PSOperand )ln (_ffcd *PSStack )error {_ceee ,_gfbe :=_ffcd .PopNumberAsFloat64 ();if _gfbe !=nil {return _gfbe ;};_fceg :=_efd .Log (_ceee );_gfbe =_ffcd .Push (MakeReal (_fceg ));return _gfbe ;};func (_ege *PSOperand )mul (_egff *PSStack )error {_gac ,_dag :=_egff .Pop ();
if _dag !=nil {return _dag ;};_febc ,_dag :=_egff .Pop ();if _dag !=nil {return _dag ;};_aad ,_gdg :=_gac .(*PSReal );_aafa ,_dge :=_gac .(*PSInteger );if !_gdg &&!_dge {return ErrTypeCheck ;};_ggd ,_bfacd :=_febc .(*PSReal );_aaeb ,_aedd :=_febc .(*PSInteger );
if !_bfacd &&!_aedd {return ErrTypeCheck ;};if _dge &&_aedd {_aeff :=_aafa .Val *_aaeb .Val ;_edb :=_egff .Push (MakeInteger (_aeff ));return _edb ;};var _daaa float64 ;if _gdg {_daaa =_aad .Val ;}else {_daaa =float64 (_aafa .Val );};if _bfacd {_daaa *=_ggd .Val ;
}else {_daaa *=float64 (_aaeb .Val );};_dag =_egff .Push (MakeReal (_daaa ));return _dag ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _df []float64 ;for _ ,_de :=range objects {if _ae ,_ab :=_de .(*PSInteger );_ab {_df =append (_df ,float64 (_ae .Val ));}else if _cd ,_g :=_de .(*PSReal );_g {_df =append (_df ,_cd .Val );
}else {return nil ,ErrTypeCheck ;};};return _df ,nil ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_fb :=&PSExecutor {};_fb .Stack =NewPSStack ();_fb ._d =program ;return _fb ;};func (_ffc *PSOperand )ifelse (_efbc *PSStack )error {_dad ,_gbf :=_efbc .Pop ();if _gbf !=nil {return _gbf ;};_bcag ,_gbf :=_efbc .Pop ();
if _gbf !=nil {return _gbf ;};_dabb ,_gbf :=_efbc .Pop ();if _gbf !=nil {return _gbf ;};_ggg ,_dffc :=_dad .(*PSProgram );if !_dffc {return ErrTypeCheck ;};_dbd ,_dffc :=_bcag .(*PSProgram );if !_dffc {return ErrTypeCheck ;};_egfba ,_dffc :=_dabb .(*PSBoolean );
if !_dffc {return ErrTypeCheck ;};if _egfba .Val {_cabc :=_dbd .Exec (_efbc );return _cabc ;};_gbf =_ggg .Exec (_efbc );return _gbf ;};func _beb (_eaa int )int {if _eaa < 0{return -_eaa ;};return _eaa ;};