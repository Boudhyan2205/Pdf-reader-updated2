//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_da "bufio";_g "bytes";_c "errors";_fa "fmt";_cd "github.com/unidoc/unipdf/v3/common";_dc "github.com/unidoc/unipdf/v3/core";_f "io";_gf "math";);func (_dff *PSOperand )xor (_cdgg *PSStack )error {_bdfg ,_dgb :=_cdgg .Pop ();if _dgb !=nil {return _dgb ;};_dad ,_dgb :=_cdgg .Pop ();if _dgb !=nil {return _dgb ;};if _bgg ,_fbg :=_bdfg .(*PSBoolean );_fbg {_bea ,_ffbc :=_dad .(*PSBoolean );if !_ffbc {return ErrTypeCheck ;};_dgb =_cdgg .Push (MakeBool (_bgg .Val !=_bea .Val ));return _dgb ;};if _cgae ,_egeg :=_bdfg .(*PSInteger );_egeg {_caf ,_dcd :=_dad .(*PSInteger );if !_dcd {return ErrTypeCheck ;};_dgb =_cdgg .Push (MakeInteger (_cgae .Val ^_caf .Val ));return _dgb ;};return ErrTypeCheck ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_ddb :=PSReal {};_ddb .Val =val ;return &_ddb };func (_gb *PSBoolean )String ()string {return _fa .Sprintf ("\u0025\u0076",_gb .Val )};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_cdg *PSProgram ;};

// String returns a string representation of the stack.
func (_eegb *PSStack )String ()string {_ced :="\u005b\u0020";for _ ,_fcg :=range *_eegb {_ced +=_fcg .String ();_ced +="\u0020";};_ced +="\u005d";return _ced ;};func (_gg *PSReal )String ()string {return _fa .Sprintf ("\u0025\u002e\u0035\u0066",_gg .Val )};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_fecc *PSOperand )round (_ccbc *PSStack )error {_ebcd ,_fcd :=_ccbc .Pop ();if _fcd !=nil {return _fcd ;};if _agb ,_bafb :=_ebcd .(*PSReal );_bafb {_fcd =_ccbc .Push (MakeReal (_gf .Floor (_agb .Val +0.5)));}else if _cdbg ,_eba :=_ebcd .(*PSInteger );_eba {_fcd =_ccbc .Push (MakeInteger (_cdbg .Val ));}else {return ErrTypeCheck ;};return _fcd ;};func (_afc *PSProgram )String ()string {_cc :="\u007b\u0020";for _ ,_gdc :=range *_afc {_cc +=_gdc .String ();_cc +="\u0020";};_cc +="\u007d";return _cc ;};func (_af *PSInteger )DebugString ()string {return _fa .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_af .Val );};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_ggd :=PSOperand (val );return &_ggd };func (_dfa *PSOperand )cvr (_cege *PSStack )error {_fbf ,_ca :=_cege .Pop ();if _ca !=nil {return _ca ;};if _aff ,_fcb :=_fbf .(*PSReal );_fcb {_ca =_cege .Push (MakeReal (_aff .Val ));}else if _ffg ,_gec :=_fbf .(*PSInteger );_gec {_ca =_cege .Push (MakeReal (float64 (_ffg .Val )));}else {return ErrTypeCheck ;};return _ca ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_aed *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_bb :=range objects {_bda :=_aed .Stack .Push (_bb );if _bda !=nil {return nil ,_bda ;};};_ac :=_aed ._cdg .Exec (_aed .Stack );if _ac !=nil {_cd .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ac );return nil ,_ac ;};_de :=[]PSObject (*_aed .Stack );_aed .Stack .Empty ();return _de ,nil ;};func (_add *PSOperand )idiv (_gfgb *PSStack )error {_gaff ,_bed :=_gfgb .Pop ();if _bed !=nil {return _bed ;};_ffdf ,_bed :=_gfgb .Pop ();if _bed !=nil {return _bed ;};_bcc ,_ebb :=_gaff .(*PSInteger );if !_ebb {return ErrTypeCheck ;};if _bcc .Val ==0{return ErrUndefinedResult ;};_affe ,_ebb :=_ffdf .(*PSInteger );if !_ebb {return ErrTypeCheck ;};_abg :=_affe .Val /_bcc .Val ;_bed =_gfgb .Push (MakeInteger (_abg ));return _bed ;};func (_bbf *PSOperand )not (_cda *PSStack )error {_gdgfg ,_dbc :=_cda .Pop ();if _dbc !=nil {return _dbc ;};if _cade ,_ceag :=_gdgfg .(*PSBoolean );_ceag {_dbc =_cda .Push (MakeBool (!_cade .Val ));return _dbc ;}else if _dgd ,_bad :=_gdgfg .(*PSInteger );_bad {_dbc =_cda .Push (MakeInteger (^_dgd .Val ));return _dbc ;}else {return ErrTypeCheck ;};};func (_fb *PSOperand )String ()string {return _fa .Sprintf ("\u0025\u0073",*_fb )};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_affeg :=PSBoolean {};_affeg .Val =val ;return &_affeg };func (_aeb *PSProgram )DebugString ()string {_bc :="\u007b\u0020";for _ ,_cdf :=range *_aeb {_bc +=_cdf .DebugString ();_bc +="\u0020";};_bc +="\u007d";return _bc ;};func (_gcd *PSOperand )mod (_gcdg *PSStack )error {_egb ,_dbb :=_gcdg .Pop ();if _dbb !=nil {return _dbb ;};_cgdf ,_dbb :=_gcdg .Pop ();if _dbb !=nil {return _dbb ;};_afab ,_ddg :=_egb .(*PSInteger );if !_ddg {return ErrTypeCheck ;};if _afab .Val ==0{return ErrUndefinedResult ;};_acad ,_ddg :=_cgdf .(*PSInteger );if !_ddg {return ErrTypeCheck ;};_fge :=_acad .Val %_afab .Val ;_dbb =_gcdg .Push (MakeInteger (_fge ));return _dbb ;};func (_cbf *PSOperand )neg (_gagc *PSStack )error {_egg ,_cfe :=_gagc .Pop ();if _cfe !=nil {return _cfe ;};if _egeb ,_cba :=_egg .(*PSReal );_cba {_cfe =_gagc .Push (MakeReal (-_egeb .Val ));return _cfe ;}else if _dfcb ,_cgc :=_egg .(*PSInteger );_cgc {_cfe =_gagc .Push (MakeInteger (-_dfcb .Val ));return _cfe ;}else {return ErrTypeCheck ;};};func (_eb *PSProgram )Duplicate ()PSObject {_gga :=&PSProgram {};for _ ,_ge :=range *_eb {_gga .Append (_ge .Duplicate ());};return _gga ;};func (_bbcb *PSParser )parseFunction ()(*PSProgram ,error ){_bgfg ,_ :=_bbcb ._ffgg .ReadByte ();if _bgfg !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_fege :=NewPSProgram ();for {_bbcb .skipSpaces ();_dafeb ,_ggb :=_bbcb ._ffgg .Peek (2);if _ggb !=nil {if _ggb ==_f .EOF {break ;};return nil ,_ggb ;};_cd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dafeb ));if _dafeb [0]=='}'{_cd .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_bbcb ._ffgg .ReadByte ();break ;}else if _dafeb [0]=='{'{_cd .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_bba ,_agef :=_bbcb .parseFunction ();if _agef !=nil {return nil ,_agef ;};_fege .Append (_bba );}else if _dc .IsDecimalDigit (_dafeb [0])||(_dafeb [0]=='-'&&_dc .IsDecimalDigit (_dafeb [1])){_cd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_aabe ,_dccd :=_bbcb .parseNumber ();if _dccd !=nil {return nil ,_dccd ;};_fege .Append (_aabe );}else {_cd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dafeb ,_ =_bbcb ._ffgg .Peek (5);_fabf :=string (_dafeb );_cd .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_fabf );if (len (_fabf )> 4)&&(_fabf [:5]=="\u0066\u0061\u006cs\u0065"){_adcf ,_adcb :=_bbcb .parseBool ();if _adcb !=nil {return nil ,_adcb ;};_fege .Append (_adcf );}else if (len (_fabf )> 3)&&(_fabf [:4]=="\u0074\u0072\u0075\u0065"){_gfbb ,_eagd :=_bbcb .parseBool ();if _eagd !=nil {return nil ,_eagd ;};_fege .Append (_gfbb );}else {_gfdd ,_dbfd :=_bbcb .parseOperand ();if _dbfd !=nil {return nil ,_dbfd ;};_fege .Append (_gfdd );};};};return _fege ,nil ;};func (_cg *PSOperand )DebugString ()string {return _fa .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_cg );};func (_agc *PSOperand )roll (_bbde *PSStack )error {_fggd ,_ffef :=_bbde .Pop ();if _ffef !=nil {return _ffef ;};_bccb ,_ffef :=_bbde .Pop ();if _ffef !=nil {return _ffef ;};_dce ,_abe :=_fggd .(*PSInteger );if !_abe {return ErrTypeCheck ;};_gaee ,_abe :=_bccb .(*PSInteger );if !_abe {return ErrTypeCheck ;};if _gaee .Val < 0{return ErrRangeCheck ;};if _gaee .Val ==0||_gaee .Val ==1{return nil ;};if _gaee .Val > len (*_bbde ){return ErrStackUnderflow ;};for _cgge :=0;_cgge < _geff (_dce .Val );_cgge ++{var _cbdc []PSObject ;_cbdc =(*_bbde )[len (*_bbde )-(_gaee .Val ):len (*_bbde )];if _dce .Val > 0{_gce :=_cbdc [len (_cbdc )-1];_cbdc =append ([]PSObject {_gce },_cbdc [0:len (_cbdc )-1]...);}else {_beg :=_cbdc [len (_cbdc )-_gaee .Val ];_cbdc =append (_cbdc [1:],_beg );};_fae :=append ((*_bbde )[0:len (*_bbde )-_gaee .Val ],_cbdc ...);_bbde =&_fae ;};return nil ;};func (_fbc *PSOperand )add (_ce *PSStack )error {_dg ,_dcg :=_ce .Pop ();if _dcg !=nil {return _dcg ;};_fba ,_dcg :=_ce .Pop ();if _dcg !=nil {return _dcg ;};_ad ,_bfc :=_dg .(*PSReal );_bee ,_ggff :=_dg .(*PSInteger );if !_bfc &&!_ggff {return ErrTypeCheck ;};_fc ,_dea :=_fba .(*PSReal );_gaf ,_feg :=_fba .(*PSInteger );if !_dea &&!_feg {return ErrTypeCheck ;};if _ggff &&_feg {_acf :=_bee .Val +_gaf .Val ;_df :=_ce .Push (MakeInteger (_acf ));return _df ;};var _ffb float64 =0;if _bfc {_ffb =_ad .Val ;}else {_ffb =float64 (_bee .Val );};if _dea {_ffb +=_fc .Val ;}else {_ffb +=float64 (_gaf .Val );};_dcg =_ce .Push (MakeReal (_ffb ));return _dcg ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cb :=&PSExecutor {};_cb .Stack =NewPSStack ();_cb ._cdg =program ;return _cb ;};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_abf *PSOperand )ln (_ege *PSStack )error {_adc ,_dece :=_ege .PopNumberAsFloat64 ();if _dece !=nil {return _dece ;};_bfa :=_gf .Log (_adc );_dece =_ege .Push (MakeReal (_bfa ));return _dece ;};func (_dabd *PSParser )parseNumber ()(PSObject ,error ){_aaae ,_cdaa :=_dc .ParseNumber (_dabd ._ffgg );if _cdaa !=nil {return nil ,_cdaa ;};switch _acca :=_aaae .(type ){case *_dc .PdfObjectFloat :return MakeReal (float64 (*_acca )),nil ;case *_dc .PdfObjectInteger :return MakeInteger (int (*_acca )),nil ;};return nil ,_fa .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aaae );};func (_bg *PSBoolean )Duplicate ()PSObject {_ecc :=PSBoolean {};_ecc .Val =_bg .Val ;return &_ecc };func (_bbe *PSOperand )and (_eeb *PSStack )error {_gad ,_dec :=_eeb .Pop ();if _dec !=nil {return _dec ;};_ffd ,_dec :=_eeb .Pop ();if _dec !=nil {return _dec ;};if _dcgd ,_ccg :=_gad .(*PSBoolean );_ccg {_gaa ,_eec :=_ffd .(*PSBoolean );if !_eec {return ErrTypeCheck ;};_dec =_eeb .Push (MakeBool (_dcgd .Val &&_gaa .Val ));return _dec ;};if _bef ,_cbc :=_gad .(*PSInteger );_cbc {_aedb ,_ffc :=_ffd .(*PSInteger );if !_ffc {return ErrTypeCheck ;};_dec =_eeb .Push (MakeInteger (_bef .Val &_aedb .Val ));return _dec ;};return ErrTypeCheck ;};func (_ecfc *PSOperand )ifCondition (_fee *PSStack )error {_def ,_dafea :=_fee .Pop ();if _dafea !=nil {return _dafea ;};_cga ,_dafea :=_fee .Pop ();if _dafea !=nil {return _dafea ;};_aebc ,_aece :=_def .(*PSProgram );if !_aece {return ErrTypeCheck ;};_fgga ,_aece :=_cga .(*PSBoolean );if !_aece {return ErrTypeCheck ;};if _fgga .Val {_fgf :=_aebc .Exec (_fee );return _fgf ;};return nil ;};func (_dcgb *PSOperand )exp (_bbcc *PSStack )error {_ccb ,_abab :=_bbcc .PopNumberAsFloat64 ();if _abab !=nil {return _abab ;};_dbdd ,_abab :=_bbcc .PopNumberAsFloat64 ();if _abab !=nil {return _abab ;};if _gf .Abs (_ccb )< 1&&_dbdd < 0{return ErrUndefinedResult ;};_bcb :=_gf .Pow (_dbdd ,_ccb );_abab =_bbcc .Push (MakeReal (_bcb ));return _abab ;};func (_gfb *PSOperand )truncate (_eagc *PSStack )error {_egaee ,_cbb :=_eagc .Pop ();if _cbb !=nil {return _cbb ;};if _bgd ,_gagf :=_egaee .(*PSReal );_gagf {_afdf :=int (_bgd .Val );_cbb =_eagc .Push (MakeReal (float64 (_afdf )));}else if _ceggf ,_defa :=_egaee .(*PSInteger );_defa {_cbb =_eagc .Push (MakeInteger (_ceggf .Val ));}else {return ErrTypeCheck ;};return _cbb ;};func (_egbc *PSOperand )pop (_aaec *PSStack )error {_ ,_aaga :=_aaec .Pop ();if _aaga !=nil {return _aaga ;};return nil ;};func (_gbbe *PSOperand )log (_geg *PSStack )error {_acdc ,_fgge :=_geg .PopNumberAsFloat64 ();if _fgge !=nil {return _fgge ;};_dab :=_gf .Log10 (_acdc );_fgge =_geg .Push (MakeReal (_dab ));return _fgge ;};func (_agf *PSOperand )index (_faf *PSStack )error {_dcggd ,_deaa :=_faf .Pop ();if _deaa !=nil {return _deaa ;};_cdcf ,_ffe :=_dcggd .(*PSInteger );if !_ffe {return ErrTypeCheck ;};if _cdcf .Val < 0{return ErrRangeCheck ;};if _cdcf .Val > len (*_faf )-1{return ErrStackUnderflow ;};_caa :=(*_faf )[len (*_faf )-1-_cdcf .Val ];_deaa =_faf .Push (_caa .Duplicate ());return _deaa ;};func (_fcdd *PSOperand )sqrt (_dcc *PSStack )error {_bde ,_eggd :=_dcc .PopNumberAsFloat64 ();if _eggd !=nil {return _eggd ;};if _bde < 0{return ErrRangeCheck ;};_gced :=_gf .Sqrt (_bde );_eggd =_dcc .Push (MakeReal (_gced ));return _eggd ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_fecf :=PSParser {};_fac :=_g .NewBuffer (content );_fecf ._ffgg =_da .NewReader (_fac );return &_fecf ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_gde *PSBoolean )DebugString ()string {return _fa .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_gde .Val );};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_cef *PSOperand )eq (_bac *PSStack )error {_adg ,_cfd :=_bac .Pop ();if _cfd !=nil {return _cfd ;};_aace ,_cfd :=_bac .Pop ();if _cfd !=nil {return _cfd ;};_dfc ,_gc :=_adg .(*PSBoolean );_egae ,_cgdb :=_aace .(*PSBoolean );if _gc ||_cgdb {var _ece error ;if _gc &&_cgdb {_ece =_bac .Push (MakeBool (_dfc .Val ==_egae .Val ));}else {_ece =_bac .Push (MakeBool (false ));};return _ece ;};var _gbf float64 ;var _aga float64 ;if _fdc ,_ace :=_adg .(*PSInteger );_ace {_gbf =float64 (_fdc .Val );}else if _ffca ,_bfd :=_adg .(*PSReal );_bfd {_gbf =_ffca .Val ;}else {return ErrTypeCheck ;};if _fg ,_fce :=_aace .(*PSInteger );_fce {_aga =float64 (_fg .Val );}else if _gdcd ,_dfb :=_aace .(*PSReal );_dfb {_aga =_gdcd .Val ;}else {return ErrTypeCheck ;};if _gf .Abs (_aga -_gbf )< _ga {_cfd =_bac .Push (MakeBool (true ));}else {_cfd =_bac .Push (MakeBool (false ));};return _cfd ;};func (_gfgc *PSOperand )ge (_fcec *PSStack )error {_cge ,_dac :=_fcec .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};_eeg ,_dac :=_fcec .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};if _gf .Abs (_eeg -_cge )< _ga {_bcab :=_fcec .Push (MakeBool (true ));return _bcab ;}else if _eeg > _cge {_dcgg :=_fcec .Push (MakeBool (true ));return _dcgg ;}else {_ccc :=_fcec .Push (MakeBool (false ));return _ccc ;};};func (_fade *PSParser )skipSpaces ()(int ,error ){_agff :=0;for {_gagfb ,_gge :=_fade ._ffgg .Peek (1);if _gge !=nil {return 0,_gge ;};if _dc .IsWhiteSpace (_gagfb [0]){_fade ._ffgg .ReadByte ();_agff ++;}else {break ;};};return _agff ,nil ;};func (_ddc *PSOperand )div (_gdf *PSStack )error {_ega ,_eacg :=_gdf .Pop ();if _eacg !=nil {return _eacg ;};_ecb ,_eacg :=_gdf .Pop ();if _eacg !=nil {return _eacg ;};_dbd ,_ag :=_ega .(*PSReal );_cgf ,_gda :=_ega .(*PSInteger );if !_ag &&!_gda {return ErrTypeCheck ;};if _ag &&_dbd .Val ==0{return ErrUndefinedResult ;};if _gda &&_cgf .Val ==0{return ErrUndefinedResult ;};_cdfc ,_cbd :=_ecb .(*PSReal );_cgg ,_dafe :=_ecb .(*PSInteger );if !_cbd &&!_dafe {return ErrTypeCheck ;};var _bcg float64 =0;if _cbd {_bcg =_cdfc .Val ;}else {_bcg =float64 (_cgg .Val );};if _ag {_bcg /=_dbd .Val ;}else {_bcg /=float64 (_cgf .Val );};_eacg =_gdf .Push (MakeReal (_bcg ));return _eacg ;};func (_db *PSInteger )Duplicate ()PSObject {_eag :=PSInteger {};_eag .Val =_db .Val ;return &_eag };var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_gd *PSInteger )String ()string {return _fa .Sprintf ("\u0025\u0064",_gd .Val )};func (_ec *PSReal )DebugString ()string {return _fa .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ec .Val );};func (_edb *PSReal )Duplicate ()PSObject {_fe :=PSReal {};_fe .Val =_edb .Val ;return &_fe };func (_ded *PSOperand )sub (_dba *PSStack )error {_aebf ,_dbdf :=_dba .Pop ();if _dbdf !=nil {return _dbdf ;};_feed ,_dbdf :=_dba .Pop ();if _dbdf !=nil {return _dbdf ;};_cgfg ,_eecd :=_aebf .(*PSReal );_afgg ,_dgf :=_aebf .(*PSInteger );if !_eecd &&!_dgf {return ErrTypeCheck ;};_gfea ,_bfg :=_feed .(*PSReal );_ffcf ,_aee :=_feed .(*PSInteger );if !_bfg &&!_aee {return ErrTypeCheck ;};if _dgf &&_aee {_abbd :=_ffcf .Val -_afgg .Val ;_efd :=_dba .Push (MakeInteger (_abbd ));return _efd ;};var _ecg float64 =0;if _bfg {_ecg =_gfea .Val ;}else {_ecg =float64 (_ffcf .Val );};if _eecd {_ecg -=_cgfg .Val ;}else {_ecg -=float64 (_afgg .Val );};_dbdf =_dba .Push (MakeReal (_ecg ));return _dbdf ;};

// Empty empties the stack.
func (_gfc *PSStack )Empty (){*_gfc =[]PSObject {}};func (_ceg *PSOperand )cvi (_eg *PSStack )error {_cegg ,_ffdg :=_eg .Pop ();if _ffdg !=nil {return _ffdg ;};if _ccf ,_fda :=_cegg .(*PSReal );_fda {_cgd :=int (_ccf .Val );_ffdg =_eg .Push (MakeInteger (_cgd ));}else if _eee ,_dcf :=_cegg .(*PSInteger );_dcf {_acfg :=_eee .Val ;_ffdg =_eg .Push (MakeInteger (_acfg ));}else {return ErrTypeCheck ;};return _ffdg ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_aegd *PSStack )PopInteger ()(int ,error ){_cegee ,_dfd :=_aegd .Pop ();if _dfd !=nil {return 0,_dfd ;};if _bbae ,_gbg :=_cegee .(*PSInteger );_gbg {return _bbae .Val ,nil ;};return 0,ErrTypeCheck ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_dbf *PSOperand )dup (_acc *PSStack )error {_fdd ,_ddf :=_acc .Pop ();if _ddf !=nil {return _ddf ;};_ddf =_acc .Push (_fdd );if _ddf !=nil {return _ddf ;};_ddf =_acc .Push (_fdd .Duplicate ());return _ddf ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// Pop pops an object from the top of the stack.
func (_cdaag *PSStack )Pop ()(PSObject ,error ){if len (*_cdaag )< 1{return nil ,ErrStackUnderflow ;};_aad :=(*_cdaag )[len (*_cdaag )-1];*_cdaag =(*_cdaag )[0:len (*_cdaag )-1];return _aad ,nil ;};func (_aec *PSOperand )copy (_cdc *PSStack )error {_gfe ,_fbe :=_cdc .PopInteger ();if _fbe !=nil {return _fbe ;};if _gfe < 0{return ErrRangeCheck ;};if _gfe > len (*_cdc ){return ErrRangeCheck ;};*_cdc =append (*_cdc ,(*_cdc )[len (*_cdc )-_gfe :]...);return nil ;};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_gdb *PSOperand )Duplicate ()PSObject {_ff :=*_gdb ;return &_ff };var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_eab *PSOperand )abs (_ggf *PSStack )error {_acd ,_cgb :=_ggf .Pop ();if _cgb !=nil {return _cgb ;};if _cfgg ,_ab :=_acd .(*PSReal );_ab {_fdg :=_cfgg .Val ;if _fdg < 0{_cgb =_ggf .Push (MakeReal (-_fdg ));}else {_cgb =_ggf .Push (MakeReal (_fdg ));};}else if _acg ,_aebg :=_acd .(*PSInteger );_aebg {_dae :=_acg .Val ;if _dae < 0{_cgb =_ggf .Push (MakeInteger (-_dae ));}else {_cgb =_ggf .Push (MakeInteger (_dae ));};}else {return ErrTypeCheck ;};return _cgb ;};

// Exec executes the program, typically leaving output values on the stack.
func (_gdg *PSProgram )Exec (stack *PSStack )error {for _ ,_geb :=range *_gdg {var _ee error ;switch _fd :=_geb .(type ){case *PSInteger :_gef :=_fd ;_ee =stack .Push (_gef );case *PSReal :_bf :=_fd ;_ee =stack .Push (_bf );case *PSBoolean :_edbd :=_fd ;_ee =stack .Push (_edbd );case *PSProgram :_ecf :=_fd ;_ee =stack .Push (_ecf );case *PSOperand :_afe :=_fd ;_ee =_afe .Exec (stack );default:return ErrTypeCheck ;};if _ee !=nil {return _ee ;};};return nil ;};func (_bce *PSOperand )or (_egf *PSStack )error {_feb ,_fdbb :=_egf .Pop ();if _fdbb !=nil {return _fdbb ;};_bbfe ,_fdbb :=_egf .Pop ();if _fdbb !=nil {return _fdbb ;};if _daec ,_aae :=_feb .(*PSBoolean );_aae {_aea ,_ecca :=_bbfe .(*PSBoolean );if !_ecca {return ErrTypeCheck ;};_fdbb =_egf .Push (MakeBool (_daec .Val ||_aea .Val ));return _fdbb ;};if _gae ,_afcf :=_feb .(*PSInteger );_afcf {_aedc ,_cdb :=_bbfe .(*PSInteger );if !_cdb {return ErrTypeCheck ;};_fdbb =_egf .Push (MakeInteger (_gae .Val |_aedc .Val ));return _fdbb ;};return ErrTypeCheck ;};func (_gee *PSOperand )bitshift (_eac *PSStack )error {_daf ,_gac :=_eac .PopInteger ();if _gac !=nil {return _gac ;};_edgb ,_gac :=_eac .PopInteger ();if _gac !=nil {return _gac ;};var _afa int ;if _daf >=0{_afa =_edgb <<uint (_daf );}else {_afa =_edgb >>uint (-_daf );};_gac =_eac .Push (MakeInteger (_afa ));return _gac ;};func (_bbfg *PSOperand )sin (_bdb *PSStack )error {_bcgf ,_abb :=_bdb .PopNumberAsFloat64 ();if _abb !=nil {return _abb ;};_afg :=_gf .Sin (_bcgf *_gf .Pi /180.0);_abb =_bdb .Push (MakeReal (_afg ));return _abb ;};func _geff (_aada int )int {if _aada < 0{return -_aada ;};return _aada ;};func (_cgbd *PSOperand )ceiling (_aag *PSStack )error {_bbbf ,_deg :=_aag .Pop ();if _deg !=nil {return _deg ;};if _fdb ,_gdec :=_bbbf .(*PSReal );_gdec {_deg =_aag .Push (MakeReal (_gf .Ceil (_fdb .Val )));}else if _bca ,_dafb :=_bbbf .(*PSInteger );_dafb {_deg =_aag .Push (MakeInteger (_bca .Val ));}else {_deg =ErrTypeCheck ;};return _deg ;};func (_cea *PSOperand )le (_dcb *PSStack )error {_cfb ,_addg :=_dcb .PopNumberAsFloat64 ();if _addg !=nil {return _addg ;};_eadc ,_addg :=_dcb .PopNumberAsFloat64 ();if _addg !=nil {return _addg ;};if _gf .Abs (_eadc -_cfb )< _ga {_aca :=_dcb .Push (MakeBool (true ));return _aca ;}else if _eadc < _cfb {_ade :=_dcb .Push (MakeBool (true ));return _ade ;}else {_aef :=_dcb .Push (MakeBool (false ));return _aef ;};};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_deb :=PSInteger {};_deb .Val =val ;return &_deb };

// PSParser is a basic Postscript parser.
type PSParser struct{_ffgg *_da .Reader };func (_bfag *PSParser )parseBool ()(*PSBoolean ,error ){_ceb ,_cfc :=_bfag ._ffgg .Peek (4);if _cfc !=nil {return MakeBool (false ),_cfc ;};if (len (_ceb )>=4)&&(string (_ceb [:4])=="\u0074\u0072\u0075\u0065"){_bfag ._ffgg .Discard (4);return MakeBool (true ),nil ;};_ceb ,_cfc =_bfag ._ffgg .Peek (5);if _cfc !=nil {return MakeBool (false ),_cfc ;};if (len (_ceb )>=5)&&(string (_ceb [:5])=="\u0066\u0061\u006cs\u0065"){_bfag ._ffgg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_fgd *PSOperand )floor (_aecc *PSStack )error {_fdf ,_cbg :=_aecc .Pop ();if _cbg !=nil {return _cbg ;};if _fec ,_eeef :=_fdf .(*PSReal );_eeef {_cbg =_aecc .Push (MakeReal (_gf .Floor (_fec .Val )));}else if _gag ,_ead :=_fdf .(*PSInteger );_ead {_cbg =_aecc .Push (MakeInteger (_gag .Val ));}else {return ErrTypeCheck ;};return _cbg ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_adb *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_efdg ,_gada :=_adb .Pop ();if _gada !=nil {return 0,_gada ;};if _cadb ,_aedg :=_efdg .(*PSReal );_aedg {return _cadb .Val ,nil ;}else if _ccgb ,_gdcde :=_efdg .(*PSInteger );_gdcde {return float64 (_ccgb .Val ),nil ;}else {return 0,ErrTypeCheck ;};};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_eda *PSStack )DebugString ()string {_bge :="\u005b\u0020";for _ ,_eeeb :=range *_eda {_bge +=_eeeb .DebugString ();_bge +="\u0020";};_bge +="\u005d";return _bge ;};func (_aa *PSOperand )atan (_gfg *PSStack )error {_gafb ,_bbb :=_gfg .PopNumberAsFloat64 ();if _bbb !=nil {return _bbb ;};_aac ,_bbb :=_gfg .PopNumberAsFloat64 ();if _bbb !=nil {return _bbb ;};if _gafb ==0{var _fab error ;if _aac < 0{_fab =_gfg .Push (MakeReal (270));}else {_fab =_gfg .Push (MakeReal (90));};return _fab ;};_dd :=_aac /_gafb ;_cff :=_gf .Atan (_dd )*180/_gf .Pi ;_bbb =_gfg .Push (MakeReal (_cff ));return _bbb ;};func (_bbc *PSOperand )cos (_gbb *PSStack )error {_aba ,_bfce :=_gbb .PopNumberAsFloat64 ();if _bfce !=nil {return _bfce ;};_cee :=_gf .Cos (_aba *_gf .Pi /180.0);_bfce =_gbb .Push (MakeReal (_cee ));return _bfce ;};func (_gagd *PSOperand )ne (_fgb *PSStack )error {_cfgc :=_gagd .eq (_fgb );if _cfgc !=nil {return _cfgc ;};_cfgc =_gagd .not (_fgb );return _cfgc ;};

// Push pushes an object on top of the stack.
func (_dgff *PSStack )Push (obj PSObject )error {if len (*_dgff )> 100{return ErrStackOverflow ;};*_dgff =append (*_dgff ,obj );return nil ;};

// Parse parses the postscript and store as a program that can be executed.
func (_eea *PSParser )Parse ()(*PSProgram ,error ){_eea .skipSpaces ();_adf ,_gfa :=_eea ._ffgg .Peek (2);if _gfa !=nil {return nil ,_gfa ;};if _adf [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_ddd ,_gfa :=_eea .parseFunction ();if _gfa !=nil &&_gfa !=_f .EOF {return nil ,_gfa ;};return _ddd ,_gfa ;};func (_fgg *PSOperand )exch (_gdfb *PSStack )error {_fcee ,_fbfd :=_gdfb .Pop ();if _fbfd !=nil {return _fbfd ;};_efg ,_fbfd :=_gdfb .Pop ();if _fbfd !=nil {return _fbfd ;};_fbfd =_gdfb .Push (_fcee );if _fbfd !=nil {return _fbfd ;};_fbfd =_gdfb .Push (_efg );return _fbfd ;};func (_egaeb *PSOperand )gt (_fga *PSStack )error {_baf ,_fgag :=_fga .PopNumberAsFloat64 ();if _fgag !=nil {return _fgag ;};_egc ,_fgag :=_fga .PopNumberAsFloat64 ();if _fgag !=nil {return _fgag ;};if _gf .Abs (_egc -_baf )< _ga {_fca :=_fga .Push (MakeBool (false ));return _fca ;}else if _egc > _baf {_decf :=_fga .Push (MakeBool (true ));return _decf ;}else {_bacf :=_fga .Push (MakeBool (false ));return _bacf ;};};func (_cdaf *PSParser )parseOperand ()(*PSOperand ,error ){var _ddff []byte ;for {_bec ,_gbef :=_cdaf ._ffgg .Peek (1);if _gbef !=nil {if _gbef ==_f .EOF {break ;};return nil ,_gbef ;};if _dc .IsDelimiter (_bec [0]){break ;};if _dc .IsWhiteSpace (_bec [0]){break ;};_daed ,_ :=_cdaf ._ffgg .ReadByte ();_ddff =append (_ddff ,_daed );};if len (_ddff )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_ddff )),nil ;};const _ga =0.000001;

// Append appends an object to the PSProgram.
func (_be *PSProgram )Append (obj PSObject ){*_be =append (*_be ,obj )};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// Exec executes the operand `op` in the state specified by `stack`.
func (_cdfg *PSOperand )Exec (stack *PSStack )error {_ef :=ErrUnsupportedOperand ;switch *_cdfg {case "\u0061\u0062\u0073":_ef =_cdfg .abs (stack );case "\u0061\u0064\u0064":_ef =_cdfg .add (stack );case "\u0061\u006e\u0064":_ef =_cdfg .and (stack );case "\u0061\u0074\u0061\u006e":_ef =_cdfg .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_ef =_cdfg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_ef =_cdfg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_ef =_cdfg .copy (stack );case "\u0063\u006f\u0073":_ef =_cdfg .cos (stack );case "\u0063\u0076\u0069":_ef =_cdfg .cvi (stack );case "\u0063\u0076\u0072":_ef =_cdfg .cvr (stack );case "\u0064\u0069\u0076":_ef =_cdfg .div (stack );case "\u0064\u0075\u0070":_ef =_cdfg .dup (stack );case "\u0065\u0071":_ef =_cdfg .eq (stack );case "\u0065\u0078\u0063\u0068":_ef =_cdfg .exch (stack );case "\u0065\u0078\u0070":_ef =_cdfg .exp (stack );case "\u0066\u006c\u006fo\u0072":_ef =_cdfg .floor (stack );case "\u0067\u0065":_ef =_cdfg .ge (stack );case "\u0067\u0074":_ef =_cdfg .gt (stack );case "\u0069\u0064\u0069\u0076":_ef =_cdfg .idiv (stack );case "\u0069\u0066":_ef =_cdfg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_ef =_cdfg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_ef =_cdfg .index (stack );case "\u006c\u0065":_ef =_cdfg .le (stack );case "\u006c\u006f\u0067":_ef =_cdfg .log (stack );case "\u006c\u006e":_ef =_cdfg .ln (stack );case "\u006c\u0074":_ef =_cdfg .lt (stack );case "\u006d\u006f\u0064":_ef =_cdfg .mod (stack );case "\u006d\u0075\u006c":_ef =_cdfg .mul (stack );case "\u006e\u0065":_ef =_cdfg .ne (stack );case "\u006e\u0065\u0067":_ef =_cdfg .neg (stack );case "\u006e\u006f\u0074":_ef =_cdfg .not (stack );case "\u006f\u0072":_ef =_cdfg .or (stack );case "\u0070\u006f\u0070":_ef =_cdfg .pop (stack );case "\u0072\u006f\u0075n\u0064":_ef =_cdfg .round (stack );case "\u0072\u006f\u006c\u006c":_ef =_cdfg .roll (stack );case "\u0073\u0069\u006e":_ef =_cdfg .sin (stack );case "\u0073\u0071\u0072\u0074":_ef =_cdfg .sqrt (stack );case "\u0073\u0075\u0062":_ef =_cdfg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_ef =_cdfg .truncate (stack );case "\u0078\u006f\u0072":_ef =_cdfg .xor (stack );};return _ef ;};func (_gade *PSOperand )ifelse (_edd *PSStack )error {_gbe ,_bdf :=_edd .Pop ();if _bdf !=nil {return _bdf ;};_efe ,_bdf :=_edd .Pop ();if _bdf !=nil {return _bdf ;};_ffcd ,_bdf :=_edd .Pop ();if _bdf !=nil {return _bdf ;};_aaa ,_bcad :=_gbe .(*PSProgram );if !_bcad {return ErrTypeCheck ;};_ebc ,_bcad :=_efe .(*PSProgram );if !_bcad {return ErrTypeCheck ;};_ccd ,_bcad :=_ffcd .(*PSBoolean );if !_bcad {return ErrTypeCheck ;};if _ccd .Val {_fdfe :=_ebc .Exec (_edd );return _fdfe ;};_bdf =_aaa .Exec (_edd );return _bdf ;};func (_cffg *PSOperand )mul (_efeg *PSStack )error {_cega ,_fad :=_efeg .Pop ();if _fad !=nil {return _fad ;};_gdgf ,_fad :=_efeg .Pop ();if _fad !=nil {return _fad ;};_daef ,_gaffb :=_cega .(*PSReal );_bdff ,_bfe :=_cega .(*PSInteger );if !_gaffb &&!_bfe {return ErrTypeCheck ;};_bbd ,_gdbd :=_gdgf .(*PSReal );_dcbc ,_age :=_gdgf .(*PSInteger );if !_gdbd &&!_age {return ErrTypeCheck ;};if _bfe &&_age {_fdaa :=_bdff .Val *_dcbc .Val ;_ggg :=_efeg .Push (MakeInteger (_fdaa ));return _ggg ;};var _aceg float64 =0;if _gaffb {_aceg =_daef .Val ;}else {_aceg =float64 (_bdff .Val );};if _gdbd {_aceg *=_bbd .Val ;}else {_aceg *=float64 (_dcbc .Val );};_fad =_efeg .Push (MakeReal (_aceg ));return _fad ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _e []float64 ;for _ ,_bd :=range objects {if _a ,_ae :=_bd .(*PSInteger );_ae {_e =append (_e ,float64 (_a .Val ));}else if _ea ,_ba :=_bd .(*PSReal );_ba {_e =append (_e ,_ea .Val );}else {return nil ,ErrTypeCheck ;};};return _e ,nil ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_dgg *PSOperand )lt (_cad *PSStack )error {_abfg ,_gfd :=_cad .PopNumberAsFloat64 ();if _gfd !=nil {return _gfd ;};_aab ,_gfd :=_cad .PopNumberAsFloat64 ();if _gfd !=nil {return _gfd ;};if _gf .Abs (_aab -_abfg )< _ga {_gace :=_cad .Push (MakeBool (false ));return _gace ;}else if _aab < _abfg {_bfcb :=_cad .Push (MakeBool (true ));return _bfcb ;}else {_gfgd :=_cad .Push (MakeBool (false ));return _gfgd ;};};