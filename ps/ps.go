//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_d "bytes";_c "errors";_ea "fmt";_ag "github.com/unidoc/unipdf/v3/common";_gd "github.com/unidoc/unipdf/v3/core";_g "io";_f "math";);

// String returns a string representation of the stack.
func (_dca *PSStack )String ()string {_gbef :="\u005b\u0020";for _ ,_eaa :=range *_dca {_gbef +=_eaa .String ();_gbef +="\u0020";};_gbef +="\u005d";return _gbef ;};

// Pop pops an object from the top of the stack.
func (_dde *PSStack )Pop ()(PSObject ,error ){if len (*_dde )< 1{return nil ,ErrStackUnderflow ;};_efgd :=(*_dde )[len (*_dde )-1];*_dde =(*_dde )[0:len (*_dde )-1];return _efgd ,nil ;};func (_ec *PSInteger )DebugString ()string {return _ea .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ec .Val );
};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ce *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_aed :=range objects {_aef :=_ce .Stack .Push (_aed );if _aef !=nil {return nil ,_aef ;};};_eg :=_ce ._aa .Exec (_ce .Stack );if _eg !=nil {_ag .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eg );
return nil ,_eg ;};_eaf :=[]PSObject (*_ce .Stack );_ce .Stack .Empty ();return _eaf ,nil ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_eda *PSOperand )div (_fgc *PSStack )error {_gfd ,_faf :=_fgc .Pop ();if _faf !=nil {return _faf ;};_acb ,_faf :=_fgc .Pop ();if _faf !=nil {return _faf ;};_bgf ,_de :=_gfd .(*PSReal );_fdec ,_ebg :=_gfd .(*PSInteger );if !_de &&!_ebg {return ErrTypeCheck ;
};if _de &&_bgf .Val ==0{return ErrUndefinedResult ;};if _ebg &&_fdec .Val ==0{return ErrUndefinedResult ;};_dfb ,_eeef :=_acb .(*PSReal );_edad ,_bag :=_acb .(*PSInteger );if !_eeef &&!_bag {return ErrTypeCheck ;};var _cbc float64 ;if _eeef {_cbc =_dfb .Val ;
}else {_cbc =float64 (_edad .Val );};if _de {_cbc /=_bgf .Val ;}else {_cbc /=float64 (_fdec .Val );};_faf =_fgc .Push (MakeReal (_cbc ));return _faf ;};func (_ddga *PSOperand )not (_daa *PSStack )error {_gafe ,_fdb :=_daa .Pop ();if _fdb !=nil {return _fdb ;
};if _geef ,_ggca :=_gafe .(*PSBoolean );_ggca {_fdb =_daa .Push (MakeBool (!_geef .Val ));return _fdb ;}else if _ffab ,_ecda :=_gafe .(*PSInteger );_ecda {_fdb =_daa .Push (MakeInteger (^_ffab .Val ));return _fdb ;}else {return ErrTypeCheck ;};};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_cbbfb *PSStack )DebugString ()string {_bee :="\u005b\u0020";for _ ,_agde :=range *_cbbfb {_bee +=_agde .DebugString ();_bee +="\u0020";};_bee +="\u005d";return _bee ;};func (_ggd *PSOperand )sqrt (_edgb *PSStack )error {_bcb ,_aadc :=_edgb .PopNumberAsFloat64 ();
if _aadc !=nil {return _aadc ;};if _bcb < 0{return ErrRangeCheck ;};_cgc :=_f .Sqrt (_bcb );_aadc =_edgb .Push (MakeReal (_cgc ));return _aadc ;};func (_abf *PSOperand )truncate (_adbb *PSStack )error {_eeeb ,_gge :=_adbb .Pop ();if _gge !=nil {return _gge ;
};if _ddgd ,_gfdd :=_eeeb .(*PSReal );_gfdd {_cedb :=int (_ddgd .Val );_gge =_adbb .Push (MakeReal (float64 (_cedb )));}else if _edcd ,_aegdg :=_eeeb .(*PSInteger );_aegdg {_gge =_adbb .Push (MakeInteger (_edcd .Val ));}else {return ErrTypeCheck ;};return _gge ;
};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gacg *PSParser )parseNumber ()(PSObject ,error ){_fdeg ,_acfa :=_gd .ParseNumber (_gacg ._dgda );if _acfa !=nil {return nil ,_acfa ;};switch _gaeb :=_fdeg .(type ){case *_gd .PdfObjectFloat :return MakeReal (float64 (*_gaeb )),nil ;
case *_gd .PdfObjectInteger :return MakeInteger (int (*_gaeb )),nil ;};return nil ,_ea .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fdeg );};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_gcf *PSOperand )copy (_fgb *PSStack )error {_gcc ,_beb :=_fgb .PopInteger ();if _beb !=nil {return _beb ;};if _gcc < 0{return ErrRangeCheck ;};if _gcc > len (*_fgb ){return ErrRangeCheck ;};*_fgb =append (*_fgb ,(*_fgb )[len (*_fgb )-_gcc :]...);
return nil ;};func (_eee *PSOperand )cvr (_geb *PSStack )error {_ad ,_cbb :=_geb .Pop ();if _cbb !=nil {return _cbb ;};if _ggb ,_faa :=_ad .(*PSReal );_faa {_cbb =_geb .Push (MakeReal (_ggb .Val ));}else if _eba ,_dgaf :=_ad .(*PSInteger );_dgaf {_cbb =_geb .Push (MakeReal (float64 (_eba .Val )));
}else {return ErrTypeCheck ;};return _cbb ;};func (_cba *PSOperand )ge (_gdac *PSStack )error {_ebe ,_gce :=_gdac .PopNumberAsFloat64 ();if _gce !=nil {return _gce ;};_afc ,_gce :=_gdac .PopNumberAsFloat64 ();if _gce !=nil {return _gce ;};if _f .Abs (_afc -_ebe )< _cd {_gdca :=_gdac .Push (MakeBool (true ));
return _gdca ;}else if _afc > _ebe {_bbc :=_gdac .Push (MakeBool (true ));return _bbc ;}else {_ddfd :=_gdac .Push (MakeBool (false ));return _ddfd ;};};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_efbg :=PSInteger {};_efbg .Val =val ;return &_efbg };

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_cbae :=PSOperand (val );return &_cbae };func (_ecf *PSParser )parseBool ()(*PSBoolean ,error ){_bea ,_fgef :=_ecf ._dgda .Peek (4);if _fgef !=nil {return MakeBool (false ),_fgef ;};if (len (_bea )>=4)&&(string (_bea [:4])=="\u0074\u0072\u0075\u0065"){_ecf ._dgda .Discard (4);
return MakeBool (true ),nil ;};_bea ,_fgef =_ecf ._dgda .Peek (5);if _fgef !=nil {return MakeBool (false ),_fgef ;};if (len (_bea )>=5)&&(string (_bea [:5])=="\u0066\u0061\u006cs\u0065"){_ecf ._dgda .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_ebf *PSOperand )add (_gb *PSStack )error {_ge ,_gg :=_gb .Pop ();if _gg !=nil {return _gg ;};_ggg ,_gg :=_gb .Pop ();if _gg !=nil {return _gg ;};_ffd ,_bf :=_ge .(*PSReal );_ggc ,_agf :=_ge .(*PSInteger );if !_bf &&!_agf {return ErrTypeCheck ;
};_ecb ,_gaf :=_ggg .(*PSReal );_fba ,_feg :=_ggg .(*PSInteger );if !_gaf &&!_feg {return ErrTypeCheck ;};if _agf &&_feg {_dbd :=_ggc .Val +_fba .Val ;_dae :=_gb .Push (MakeInteger (_dbd ));return _dae ;};var _bbaf float64 ;if _bf {_bbaf =_ffd .Val ;}else {_bbaf =float64 (_ggc .Val );
};if _gaf {_bbaf +=_ecb .Val ;}else {_bbaf +=float64 (_fba .Val );};_gg =_gb .Push (MakeReal (_bbaf ));return _gg ;};func (_dfaa *PSParser )skipSpaces ()(int ,error ){_dee :=0;for {_efcb ,_bdcg :=_dfaa ._dgda .Peek (1);if _bdcg !=nil {return 0,_bdcg ;};
if _gd .IsWhiteSpace (_efcb [0]){_dfaa ._dgda .ReadByte ();_dee ++;}else {break ;};};return _dee ,nil ;};func (_cdbd *PSOperand )index (_fedg *PSStack )error {_aeff ,_aag :=_fedg .Pop ();if _aag !=nil {return _aag ;};_bac ,_agdd :=_aeff .(*PSInteger );
if !_agdd {return ErrTypeCheck ;};if _bac .Val < 0{return ErrRangeCheck ;};if _bac .Val > len (*_fedg )-1{return ErrStackUnderflow ;};_ffec :=(*_fedg )[len (*_fedg )-1-_bac .Val ];_aag =_fedg .Push (_ffec .Duplicate ());return _aag ;};func (_fabc *PSParser )parseFunction ()(*PSProgram ,error ){_aacd ,_ :=_fabc ._dgda .ReadByte ();
if _aacd !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_cecc :=NewPSProgram ();for {_fabc .skipSpaces ();_fabc .skipComments ();_gbe ,_efca :=_fabc ._dgda .Peek (2);if _efca !=nil {if _efca ==_g .EOF {break ;
};return nil ,_efca ;};_ag .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gbe ));if _gbe [0]=='}'{_ag .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_fabc ._dgda .ReadByte ();
break ;}else if _gbe [0]=='{'{_ag .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_cbbf ,_dec :=_fabc .parseFunction ();if _dec !=nil {return nil ,_dec ;};_cecc .Append (_cbbf );}else if _gd .IsDecimalDigit (_gbe [0])||(_gbe [0]=='-'&&_gd .IsDecimalDigit (_gbe [1])){_ag .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_bedf ,_gadbc :=_fabc .parseNumber ();if _gadbc !=nil {return nil ,_gadbc ;};_cecc .Append (_bedf );}else {_ag .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gbe ,_ =_fabc ._dgda .Peek (5);_fbce :=string (_gbe );
_ag .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_fbce );if (len (_fbce )> 4)&&(_fbce [:5]=="\u0066\u0061\u006cs\u0065"){_aggg ,_cdd :=_fabc .parseBool ();if _cdd !=nil {return nil ,_cdd ;};_cecc .Append (_aggg );}else if (len (_fbce )> 3)&&(_fbce [:4]=="\u0074\u0072\u0075\u0065"){_efb ,_ddcd :=_fabc .parseBool ();
if _ddcd !=nil {return nil ,_ddcd ;};_cecc .Append (_efb );}else {_abcfa ,_cee :=_fabc .parseOperand ();if _cee !=nil {return nil ,_cee ;};_cecc .Append (_abcfa );};};};return _cecc ,nil ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _b []float64 ;for _ ,_fb :=range objects {if _dg ,_ae :=_fb .(*PSInteger );_ae {_b =append (_b ,float64 (_dg .Val ));}else if _fdf ,_bg :=_fb .(*PSReal );_bg {_b =append (_b ,_fdf .Val );
}else {return nil ,ErrTypeCheck ;};};return _b ,nil ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_dc *PSOperand )String ()string {return string (*_dc )};func (_da *PSReal )Duplicate ()PSObject {_gda :=PSReal {};_gda .Val =_da .Val ;return &_gda };func _cdge (_gged int )int {if _gged < 0{return -_gged ;};return _gged ;
};func (_ebag *PSOperand )ifelse (_eag *PSStack )error {_acfe ,_edgf :=_eag .Pop ();if _edgf !=nil {return _edgf ;};_gae ,_edgf :=_eag .Pop ();if _edgf !=nil {return _edgf ;};_bcc ,_edgf :=_eag .Pop ();if _edgf !=nil {return _edgf ;};_bdcb ,_gdff :=_acfe .(*PSProgram );
if !_gdff {return ErrTypeCheck ;};_dfcd ,_gdff :=_gae .(*PSProgram );if !_gdff {return ErrTypeCheck ;};_gbf ,_gdff :=_bcc .(*PSBoolean );if !_gdff {return ErrTypeCheck ;};if _gbf .Val {_acad :=_dfcd .Exec (_eag );return _acad ;};_edgf =_bdcb .Exec (_eag );
return _edgf ;};var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bdg :=PSReal {};_bdg .Val =val ;return &_bdg };func (_abcb *PSParser )parseOperand ()(*PSOperand ,error ){var _abe []byte ;for {_cdad ,_acag :=_abcb ._dgda .Peek (1);if _acag !=nil {if _acag ==_g .EOF {break ;};return nil ,_acag ;
};if _gd .IsDelimiter (_cdad [0]){break ;};if _gd .IsWhiteSpace (_cdad [0]){break ;};_efd ,_ :=_abcb ._dgda .ReadByte ();_abe =append (_abe ,_efd );};if len (_abe )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_abe )),nil ;};func (_gfg *PSOperand )exp (_ggbg *PSStack )error {_aaf ,_gcfa :=_ggbg .PopNumberAsFloat64 ();if _gcfa !=nil {return _gcfa ;};_aedf ,_gcfa :=_ggbg .PopNumberAsFloat64 ();if _gcfa !=nil {return _gcfa ;};if _f .Abs (_aaf )< 1&&_aedf < 0{return ErrUndefinedResult ;
};_febc :=_f .Pow (_aedf ,_aaf );_gcfa =_ggbg .Push (MakeReal (_febc ));return _gcfa ;};func (_bd *PSOperand )atan (_gef *PSStack )error {_ffe ,_febgb :=_gef .PopNumberAsFloat64 ();if _febgb !=nil {return _febgb ;};_ba ,_febgb :=_gef .PopNumberAsFloat64 ();
if _febgb !=nil {return _febgb ;};if _ffe ==0{var _dab error ;if _ba < 0{_dab =_gef .Push (MakeReal (270));}else {_dab =_gef .Push (MakeReal (90));};return _dab ;};_efgg :=_ba /_ffe ;_fec :=_f .Atan (_efgg )*180/_f .Pi ;_febgb =_gef .Push (MakeReal (_fec ));
return _febgb ;};func (_cc *PSOperand )dup (_cdb *PSStack )error {_fece ,_eccc :=_cdb .Pop ();if _eccc !=nil {return _eccc ;};_eccc =_cdb .Push (_fece );if _eccc !=nil {return _eccc ;};_eccc =_cdb .Push (_fece .Duplicate ());return _eccc ;};func (_ggdf *PSOperand )sub (_bafb *PSStack )error {_gff ,_bffc :=_bafb .Pop ();
if _bffc !=nil {return _bffc ;};_afgf ,_bffc :=_bafb .Pop ();if _bffc !=nil {return _bffc ;};_cbca ,_cdg :=_gff .(*PSReal );_afa ,_dac :=_gff .(*PSInteger );if !_cdg &&!_dac {return ErrTypeCheck ;};_cacf ,_efed :=_afgf .(*PSReal );_ccb ,_cedcc :=_afgf .(*PSInteger );
if !_efed &&!_cedcc {return ErrTypeCheck ;};if _dac &&_cedcc {_bede :=_ccb .Val -_afa .Val ;_acc :=_bafb .Push (MakeInteger (_bede ));return _acc ;};var _fddd float64 =0;if _efed {_fddd =_cacf .Val ;}else {_fddd =float64 (_ccb .Val );};if _cdg {_fddd -=_cbca .Val ;
}else {_fddd -=float64 (_afa .Val );};_bffc =_bafb .Push (MakeReal (_fddd ));return _bffc ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_cb *PSInteger )Duplicate ()PSObject {_aede :=PSInteger {};_aede .Val =_cb .Val ;return &_aede };func (_fed *PSOperand )exch (_bga *PSStack )error {_dea ,_dcf :=_bga .Pop ();if _dcf !=nil {return _dcf ;};_fge ,_dcf :=_bga .Pop ();
if _dcf !=nil {return _dcf ;};_dcf =_bga .Push (_dea );if _dcf !=nil {return _dcf ;};_dcf =_bga .Push (_fge );return _dcf ;};func (_age *PSOperand )Duplicate ()PSObject {_eb :=*_age ;return &_eb };func (_dcc *PSOperand )idiv (_fcab *PSStack )error {_fab ,_debc :=_fcab .Pop ();
if _debc !=nil {return _debc ;};_dbdg ,_debc :=_fcab .Pop ();if _debc !=nil {return _debc ;};_cbgdd ,_afg :=_fab .(*PSInteger );if !_afg {return ErrTypeCheck ;};if _cbgdd .Val ==0{return ErrUndefinedResult ;};_dbg ,_afg :=_dbdg .(*PSInteger );if !_afg {return ErrTypeCheck ;
};_cac :=_dbg .Val /_cbgdd .Val ;_debc =_fcab .Push (MakeInteger (_cac ));return _debc ;};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_ced *PSOperand )DebugString ()string {return _ea .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ced );
};func (_gc *PSOperand )bitshift (_geg *PSStack )error {_afe ,_eeac :=_geg .PopInteger ();if _eeac !=nil {return _eeac ;};_ca ,_eeac :=_geg .PopInteger ();if _eeac !=nil {return _eeac ;};var _fga int ;if _afe >=0{_fga =_ca <<uint (_afe );}else {_fga =_ca >>uint (-_afe );
};_eeac =_geg .Push (MakeInteger (_fga ));return _eeac ;};

// Append appends an object to the PSProgram.
func (_be *PSProgram )Append (obj PSObject ){*_be =append (*_be ,obj )};func (_adf *PSOperand )log (_fdc *PSStack )error {_deac ,_cef :=_fdc .PopNumberAsFloat64 ();if _cef !=nil {return _cef ;};_bbbg :=_f .Log10 (_deac );_cef =_fdc .Push (MakeReal (_bbbg ));
return _cef ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_bdf :=PSParser {};_efcf :=_d .NewBuffer (content );_bdf ._dgda =_e .NewReader (_efcf );return &_bdf ;};

// Empty empties the stack.
func (_aeda *PSStack )Empty (){*_aeda =[]PSObject {}};func (_fa *PSProgram )String ()string {_ga :="\u007b\u0020";for _ ,_egf :=range *_fa {_ga +=_egf .String ();_ga +="\u0020";};_ga +="\u007d";return _ga ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_aaa *PSBoolean )Duplicate ()PSObject {_ed :=PSBoolean {};_ed .Val =_aaa .Val ;return &_ed };func (_bfg *PSOperand )ceiling (_edg *PSStack )error {_acf ,_fcd :=_edg .Pop ();if _fcd !=nil {return _fcd ;
};if _cag ,_cec :=_acf .(*PSReal );_cec {_fcd =_edg .Push (MakeReal (_f .Ceil (_cag .Val )));}else if _dga ,_df :=_acf .(*PSInteger );_df {_fcd =_edg .Push (MakeInteger (_dga .Val ));}else {_fcd =ErrTypeCheck ;};return _fcd ;};func (_dfc *PSOperand )ifCondition (_aad *PSStack )error {_ddd ,_ddc :=_aad .Pop ();
if _ddc !=nil {return _ddc ;};_aaab ,_ddc :=_aad .Pop ();if _ddc !=nil {return _ddc ;};_afd ,_bce :=_ddd .(*PSProgram );if !_bce {return ErrTypeCheck ;};_dgb ,_bce :=_aaab .(*PSBoolean );if !_bce {return ErrTypeCheck ;};if _dgb .Val {_cedc :=_afd .Exec (_aad );
return _cedc ;};return nil ;};

// Parse parses the postscript and store as a program that can be executed.
func (_gag *PSParser )Parse ()(*PSProgram ,error ){_gag .skipSpaces ();_fgcdd ,_ged :=_gag ._dgda .Peek (2);if _ged !=nil {return nil ,_ged ;};if _fgcdd [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_aacc ,_ged :=_gag .parseFunction ();if _ged !=nil &&_ged !=_g .EOF {return nil ,_ged ;};return _aacc ,_ged ;};func (_gga *PSOperand )mod (_gfge *PSStack )error {_efga ,_bgff :=_gfge .Pop ();if _bgff !=nil {return _bgff ;};_aegd ,_bgff :=_gfge .Pop ();
if _bgff !=nil {return _bgff ;};_dfce ,_egfa :=_efga .(*PSInteger );if !_egfa {return ErrTypeCheck ;};if _dfce .Val ==0{return ErrUndefinedResult ;};_aadb ,_egfa :=_aegd .(*PSInteger );if !_egfa {return ErrTypeCheck ;};_daea :=_aadb .Val %_dfce .Val ;_bgff =_gfge .Push (MakeInteger (_daea ));
return _bgff ;};func (_dd *PSBoolean )DebugString ()string {return _ea .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_dd .Val );};func (_dbf *PSOperand )sin (_def *PSStack )error {_gdg ,_abda :=_def .PopNumberAsFloat64 ();if _abda !=nil {return _abda ;
};_gbcg :=_f .Sin (_gdg *_f .Pi /180.0);_abda =_def .Push (MakeReal (_gbcg ));return _abda ;};func (_efee *PSOperand )pop (_ggcaf *PSStack )error {_ ,_dbcg :=_ggcaf .Pop ();if _dbcg !=nil {return _dbcg ;};return nil ;};

// Exec executes the program, typically leaving output values on the stack.
func (_ee *PSProgram )Exec (stack *PSStack )error {for _ ,_feb :=range *_ee {var _ece error ;switch _db :=_feb .(type ){case *PSInteger :_ddf :=_db ;_ece =stack .Push (_ddf );case *PSReal :_efe :=_db ;_ece =stack .Push (_efe );case *PSBoolean :_fbb :=_db ;
_ece =stack .Push (_fbb );case *PSProgram :_abdg :=_db ;_ece =stack .Push (_abdg );case *PSOperand :_bed :=_db ;_ece =_bed .Exec (stack );default:return ErrTypeCheck ;};if _ece !=nil {return _ece ;};};return nil ;};func (_eccb *PSOperand )xor (_bdcc *PSStack )error {_ggcg ,_cfbf :=_bdcc .Pop ();
if _cfbf !=nil {return _cfbf ;};_daae ,_cfbf :=_bdcc .Pop ();if _cfbf !=nil {return _cfbf ;};if _abfa ,_dfbf :=_ggcg .(*PSBoolean );_dfbf {_cagf ,_ccf :=_daae .(*PSBoolean );if !_ccf {return ErrTypeCheck ;};_cfbf =_bdcc .Push (MakeBool (_abfa .Val !=_cagf .Val ));
return _cfbf ;};if _aadg ,_cce :=_ggcg .(*PSInteger );_cce {_edgg ,_cgaf :=_daae .(*PSInteger );if !_cgaf {return ErrTypeCheck ;};_cfbf =_bdcc .Push (MakeInteger (_aadg .Val ^_edgg .Val ));return _cfbf ;};return ErrTypeCheck ;};func (_cg *PSBoolean )String ()string {return _ea .Sprintf ("\u0025\u0076",_cg .Val )};
func (_baf *PSOperand )le (_gaee *PSStack )error {_fgcd ,_ffaa :=_gaee .PopNumberAsFloat64 ();if _ffaa !=nil {return _ffaa ;};_cgac ,_ffaa :=_gaee .PopNumberAsFloat64 ();if _ffaa !=nil {return _ffaa ;};if _f .Abs (_cgac -_fgcd )< _cd {_aedb :=_gaee .Push (MakeBool (true ));
return _aedb ;}else if _cgac < _fgcd {_efc :=_gaee .Push (MakeBool (true ));return _efc ;}else {_bcca :=_gaee .Push (MakeBool (false ));return _bcca ;};};const _cd =0.000001;func (_eab *PSOperand )round (_ddcc *PSStack )error {_gea ,_acd :=_ddcc .Pop ();
if _acd !=nil {return _acd ;};if _ebce ,_cedd :=_gea .(*PSReal );_cedd {_acd =_ddcc .Push (MakeReal (_f .Floor (_ebce .Val +0.5)));}else if _fgd ,_dgd :=_gea .(*PSInteger );_dgd {_acd =_ddcc .Push (MakeInteger (_fgd .Val ));}else {return ErrTypeCheck ;
};return _acd ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_efg *PSOperand )and (_eeb *PSStack )error {_egg ,_ebd :=_eeb .Pop ();if _ebd !=nil {return _ebd ;};_cbf ,_ebd :=_eeb .Pop ();if _ebd !=nil {return _ebd ;};if _fbba ,_ecc :=_egg .(*PSBoolean );_ecc {_af ,_fde :=_cbf .(*PSBoolean );
if !_fde {return ErrTypeCheck ;};_ebd =_eeb .Push (MakeBool (_fbba .Val &&_af .Val ));return _ebd ;};if _ege ,_eafb :=_egg .(*PSInteger );_eafb {_fdd ,_fc :=_cbf .(*PSInteger );if !_fc {return ErrTypeCheck ;};_ebd =_eeb .Push (MakeInteger (_ege .Val &_fdd .Val ));
return _ebd ;};return ErrTypeCheck ;};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_daeg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_efgdf ,_fdege :=_daeg .Pop ();if _fdege !=nil {return 0,_fdege ;};if _edfe ,_dfae :=_efgdf .(*PSReal );_dfae {return _edfe .Val ,nil ;}else if _bacf ,_fdbe :=_efgdf .(*PSInteger );_fdbe {return float64 (_bacf .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_fbe *PSOperand )floor (_ffg *PSStack )error {_deb ,_edac :=_ffg .Pop ();if _edac !=nil {return _edac ;};if _daeb ,_cfe :=_deb .(*PSReal );_cfe {_edac =_ffg .Push (MakeReal (_f .Floor (_daeb .Val )));}else if _feaa ,_ffa :=_deb .(*PSInteger );
_ffa {_edac =_ffg .Push (MakeInteger (_feaa .Val ));}else {return ErrTypeCheck ;};return _edac ;};func (_bb *PSReal )DebugString ()string {return _ea .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bb .Val );};

// PSParser is a basic Postscript parser.
type PSParser struct{_dgda *_e .Reader };func (_geec *PSOperand )or (_dfd *PSStack )error {_gafa ,_ffc :=_dfd .Pop ();if _ffc !=nil {return _ffc ;};_fcb ,_ffc :=_dfd .Pop ();if _ffc !=nil {return _ffc ;};if _eeeg ,_gcg :=_gafa .(*PSBoolean );_gcg {_eec ,_efa :=_fcb .(*PSBoolean );
if !_efa {return ErrTypeCheck ;};_ffc =_dfd .Push (MakeBool (_eeeg .Val ||_eec .Val ));return _ffc ;};if _aac ,_bced :=_gafa .(*PSInteger );_bced {_dag ,_cefe :=_fcb .(*PSInteger );if !_cefe {return ErrTypeCheck ;};_ffc =_dfd .Push (MakeInteger (_aac .Val |_dag .Val ));
return _ffc ;};return ErrTypeCheck ;};func (_egc *PSOperand )abs (_eea *PSStack )error {_aeg ,_bbb :=_eea .Pop ();if _bbb !=nil {return _bbb ;};if _agd ,_eafe :=_aeg .(*PSReal );_eafe {_bbe :=_agd .Val ;if _bbe < 0{_bbb =_eea .Push (MakeReal (-_bbe ));
}else {_bbb =_eea .Push (MakeReal (_bbe ));};}else if _ac ,_fg :=_aeg .(*PSInteger );_fg {_gad :=_ac .Val ;if _gad < 0{_bbb =_eea .Push (MakeInteger (-_gad ));}else {_bbb =_eea .Push (MakeInteger (_gad ));};}else {return ErrTypeCheck ;};return _bbb ;};
func (_ef *PSReal )String ()string {return _ea .Sprintf ("\u0025\u002e\u0035\u0066",_ef .Val )};

// Exec executes the operand `op` in the state specified by `stack`.
func (_aaaf *PSOperand )Exec (stack *PSStack )error {_febg :=ErrUnsupportedOperand ;switch *_aaaf {case "\u0061\u0062\u0073":_febg =_aaaf .abs (stack );case "\u0061\u0064\u0064":_febg =_aaaf .add (stack );case "\u0061\u006e\u0064":_febg =_aaaf .and (stack );
case "\u0061\u0074\u0061\u006e":_febg =_aaaf .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_febg =_aaaf .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_febg =_aaaf .ceiling (stack );case "\u0063\u006f\u0070\u0079":_febg =_aaaf .copy (stack );
case "\u0063\u006f\u0073":_febg =_aaaf .cos (stack );case "\u0063\u0076\u0069":_febg =_aaaf .cvi (stack );case "\u0063\u0076\u0072":_febg =_aaaf .cvr (stack );case "\u0064\u0069\u0076":_febg =_aaaf .div (stack );case "\u0064\u0075\u0070":_febg =_aaaf .dup (stack );
case "\u0065\u0071":_febg =_aaaf .eq (stack );case "\u0065\u0078\u0063\u0068":_febg =_aaaf .exch (stack );case "\u0065\u0078\u0070":_febg =_aaaf .exp (stack );case "\u0066\u006c\u006fo\u0072":_febg =_aaaf .floor (stack );case "\u0067\u0065":_febg =_aaaf .ge (stack );
case "\u0067\u0074":_febg =_aaaf .gt (stack );case "\u0069\u0064\u0069\u0076":_febg =_aaaf .idiv (stack );case "\u0069\u0066":_febg =_aaaf .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_febg =_aaaf .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_febg =_aaaf .index (stack );
case "\u006c\u0065":_febg =_aaaf .le (stack );case "\u006c\u006f\u0067":_febg =_aaaf .log (stack );case "\u006c\u006e":_febg =_aaaf .ln (stack );case "\u006c\u0074":_febg =_aaaf .lt (stack );case "\u006d\u006f\u0064":_febg =_aaaf .mod (stack );case "\u006d\u0075\u006c":_febg =_aaaf .mul (stack );
case "\u006e\u0065":_febg =_aaaf .ne (stack );case "\u006e\u0065\u0067":_febg =_aaaf .neg (stack );case "\u006e\u006f\u0074":_febg =_aaaf .not (stack );case "\u006f\u0072":_febg =_aaaf .or (stack );case "\u0070\u006f\u0070":_febg =_aaaf .pop (stack );case "\u0072\u006f\u0075n\u0064":_febg =_aaaf .round (stack );
case "\u0072\u006f\u006c\u006c":_febg =_aaaf .roll (stack );case "\u0073\u0069\u006e":_febg =_aaaf .sin (stack );case "\u0073\u0071\u0072\u0074":_febg =_aaaf .sqrt (stack );case "\u0073\u0075\u0062":_febg =_aaaf .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_febg =_aaaf .truncate (stack );
case "\u0078\u006f\u0072":_febg =_aaaf .xor (stack );};return _febg ;};func (_cgf *PSParser )skipComments ()error {if _ ,_babg :=_cgf .skipSpaces ();_babg !=nil {return _babg ;};_fedgc :=true ;for {_fgbc ,_defg :=_cgf ._dgda .Peek (1);if _defg !=nil {_ag .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_defg .Error ());
return _defg ;};if _fedgc &&_fgbc [0]!='%'{return nil ;};_fedgc =false ;if (_fgbc [0]!='\r')&&(_fgbc [0]!='\n'){_cgf ._dgda .ReadByte ();}else {break ;};};return _cgf .skipComments ();};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_aa *PSProgram ;};func (_bgc *PSInteger )String ()string {return _ea .Sprintf ("\u0025\u0064",_bgc .Val )};var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_eafbc *PSOperand )mul (_cda *PSStack )error {_ffgb ,_edc :=_cda .Pop ();if _edc !=nil {return _edc ;};_gcb ,_edc :=_cda .Pop ();if _edc !=nil {return _edc ;};_cdaf ,_cede :=_ffgb .(*PSReal );_gfc ,_dbc :=_ffgb .(*PSInteger );if !_cede &&!_dbc {return ErrTypeCheck ;
};_fce ,_efgc :=_gcb .(*PSReal );_bcd ,_bbcc :=_gcb .(*PSInteger );if !_efgc &&!_bbcc {return ErrTypeCheck ;};if _dbc &&_bbcc {_cca :=_gfc .Val *_bcd .Val ;_gac :=_cda .Push (MakeInteger (_cca ));return _gac ;};var _ggf float64 ;if _cede {_ggf =_cdaf .Val ;
}else {_ggf =float64 (_gfc .Val );};if _efgc {_ggf *=_fce .Val ;}else {_ggf *=float64 (_bcd .Val );};_edc =_cda .Push (MakeReal (_ggf ));return _edc ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bbbe :=PSBoolean {};_bbbe .Val =val ;return &_bbbe };func (_bgb *PSOperand )gt (_cecf *PSStack )error {_dbdb ,_bde :=_cecf .PopNumberAsFloat64 ();if _bde !=nil {return _bde ;};_bbcf ,_bde :=_cecf .PopNumberAsFloat64 ();
if _bde !=nil {return _bde ;};if _f .Abs (_bbcf -_dbdb )< _cd {_adb :=_cecf .Push (MakeBool (false ));return _adb ;}else if _bbcf > _dbdb {_fca :=_cecf .Push (MakeBool (true ));return _fca ;}else {_bab :=_cecf .Push (MakeBool (false ));return _bab ;};};
func (_gee *PSOperand )eq (_fddf *PSStack )error {_cdbe ,_dgg :=_fddf .Pop ();if _dgg !=nil {return _dgg ;};_edf ,_dgg :=_fddf .Pop ();if _dgg !=nil {return _dgg ;};_ade ,_gadb :=_cdbe .(*PSBoolean );_bfa ,_cde :=_edf .(*PSBoolean );if _gadb ||_cde {var _edab error ;
if _gadb &&_cde {_edab =_fddf .Push (MakeBool (_ade .Val ==_bfa .Val ));}else {_edab =_fddf .Push (MakeBool (false ));};return _edab ;};var _ddg float64 ;var _cga float64 ;if _cbgd ,_cf :=_cdbe .(*PSInteger );_cf {_ddg =float64 (_cbgd .Val );}else if _dgff ,_ebdg :=_cdbe .(*PSReal );
_ebdg {_ddg =_dgff .Val ;}else {return ErrTypeCheck ;};if _bdc ,_abc :=_edf .(*PSInteger );_abc {_cga =float64 (_bdc .Val );}else if _gbc ,_bc :=_edf .(*PSReal );_bc {_cga =_gbc .Val ;}else {return ErrTypeCheck ;};if _f .Abs (_cga -_ddg )< _cd {_dgg =_fddf .Push (MakeBool (true ));
}else {_dgg =_fddf .Push (MakeBool (false ));};return _dgg ;};

// Push pushes an object on top of the stack.
func (_dge *PSStack )Push (obj PSObject )error {if len (*_dge )> 100{return ErrStackOverflow ;};*_dge =append (*_dge ,obj );return nil ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_aba *PSProgram )Duplicate ()PSObject {_fe :=&PSProgram {};for _ ,_bba :=range *_aba {_fe .Append (_bba .Duplicate ());};return _fe ;};func (_ecg *PSOperand )lt (_eebe *PSStack )error {_eebef ,_afcg :=_eebe .PopNumberAsFloat64 ();
if _afcg !=nil {return _afcg ;};_fgcg ,_afcg :=_eebe .PopNumberAsFloat64 ();if _afcg !=nil {return _afcg ;};if _f .Abs (_fgcg -_eebef )< _cd {_aded :=_eebe .Push (MakeBool (false ));return _aded ;}else if _fgcg < _eebef {_bcea :=_eebe .Push (MakeBool (true ));
return _bcea ;}else {_cfb :=_eebe .Push (MakeBool (false ));return _cfb ;};};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_accc *PSStack )PopInteger ()(int ,error ){_bfe ,_gdcf :=_accc .Pop ();if _gdcf !=nil {return 0,_gdcf ;};if _cff ,_dcg :=_bfe .(*PSInteger );_dcg {return _cff .Val ,nil ;};return 0,ErrTypeCheck ;};func (_cab *PSOperand )cvi (_ddfc *PSStack )error {_gdf ,_gf :=_ddfc .Pop ();
if _gf !=nil {return _gf ;};if _dcd ,_ebc :=_gdf .(*PSReal );_ebc {_dgf :=int (_dcd .Val );_gf =_ddfc .Push (MakeInteger (_dgf ));}else if _fbc ,_aca :=_gdf .(*PSInteger );_aca {_gdc :=_fbc .Val ;_gf =_ddfc .Push (MakeInteger (_gdc ));}else {return ErrTypeCheck ;
};return _gf ;};func (_ffb *PSProgram )DebugString ()string {_abd :="\u007b\u0020";for _ ,_aab :=range *_ffb {_abd +=_aab .DebugString ();_abd +="\u0020";};_abd +="\u007d";return _abd ;};func (_caga *PSOperand )ln (_ede *PSStack )error {_acfc ,_bacd :=_ede .PopNumberAsFloat64 ();
if _bacd !=nil {return _bacd ;};_gdce :=_f .Log (_acfc );_bacd =_ede .Push (MakeReal (_gdce ));return _bacd ;};func (_cbg *PSOperand )cos (_egce *PSStack )error {_fbaa ,_fea :=_egce .PopNumberAsFloat64 ();if _fea !=nil {return _fea ;};_afed :=_f .Cos (_fbaa *_f .Pi /180.0);
_fea =_egce .Push (MakeReal (_afed ));return _fea ;};func (_bbba *PSOperand )roll (_acadc *PSStack )error {_bff ,_agg :=_acadc .Pop ();if _agg !=nil {return _agg ;};_fcc ,_agg :=_acadc .Pop ();if _agg !=nil {return _agg ;};_gadd ,_dfbb :=_bff .(*PSInteger );
if !_dfbb {return ErrTypeCheck ;};_fecc ,_dfbb :=_fcc .(*PSInteger );if !_dfbb {return ErrTypeCheck ;};if _fecc .Val < 0{return ErrRangeCheck ;};if _fecc .Val ==0||_fecc .Val ==1{return nil ;};if _fecc .Val > len (*_acadc ){return ErrStackUnderflow ;};
for _dbdge :=0;_dbdge < _cdge (_gadd .Val );_dbdge ++{var _dfa []PSObject ;_dfa =(*_acadc )[len (*_acadc )-(_fecc .Val ):len (*_acadc )];if _gadd .Val > 0{_bad :=_dfa [len (_dfa )-1];_dfa =append ([]PSObject {_bad },_dfa [0:len (_dfa )-1]...);}else {_dad :=_dfa [len (_dfa )-_fecc .Val ];
_dfa =append (_dfa [1:],_dad );};_debf :=append ((*_acadc )[0:len (*_acadc )-_fecc .Val ],_dfa ...);_acadc =&_debf ;};return nil ;};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_ecd *PSOperand )ne (_cdbf *PSStack )error {_cbd :=_ecd .eq (_cdbf );if _cbd !=nil {return _cbd ;};_cbd =_ecd .not (_cdbf );return _cbd ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ff :=&PSExecutor {};_ff .Stack =NewPSStack ();_ff ._aa =program ;return _ff ;};func (_fef *PSOperand )neg (_abcf *PSStack )error {_abb ,_dddg :=_abcf .Pop ();if _dddg !=nil {return _dddg ;};if _ebdc ,_eca :=_abb .(*PSReal );
_eca {_dddg =_abcf .Push (MakeReal (-_ebdc .Val ));return _dddg ;}else if _bdb ,_efce :=_abb .(*PSInteger );_efce {_dddg =_abcf .Push (MakeInteger (-_bdb .Val ));return _dddg ;}else {return ErrTypeCheck ;};};