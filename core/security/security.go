//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_eg "bytes";_da "crypto/aes";_d "crypto/cipher";_a "crypto/md5";_be "crypto/rand";_dad "crypto/rc4";_fg "crypto/sha256";_b "crypto/sha512";_db "encoding/binary";_c "errors";_ea "fmt";_g "github.com/unidoc/unipdf/v3/common";_dc "hash";
_e "io";_bd "math";);func (_bbc stdHandlerR6 )alg11 (_cgdc *StdEncryptDict ,_dfcc []byte )([]byte ,error ){if _ggg :=_gfd ("\u0061\u006c\u00671\u0031","\u0055",48,_cgdc .U );_ggg !=nil {return nil ,_ggg ;};_fgb :=make ([]byte ,len (_dfcc )+8);_gcf :=copy (_fgb ,_dfcc );
_gcf +=copy (_fgb [_gcf :],_cgdc .U [32:40]);_gda ,_ggd :=_bbc .alg2b (_cgdc .R ,_fgb ,_dfcc ,nil );if _ggd !=nil {return nil ,_ggd ;};_gda =_gda [:32];if !_eg .Equal (_gda ,_cgdc .U [:32]){return nil ,nil ;};return _gda ,nil ;};func (_cfe stdHandlerR6 )alg2b (R int ,_bbae ,_daf ,_cac []byte )([]byte ,error ){if R ==5{return _ddff (_bbae );
};return _aega (_bbae ,_daf ,_cac );};func (_ae *ecbEncrypter )BlockSize ()int {return _ae ._dd };func (_gcb stdHandlerR4 )alg4 (_fa []byte ,_cge []byte )([]byte ,error ){_ac ,_ce :=_dad .NewCipher (_fa );if _ce !=nil {return nil ,_c .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_gad :=[]byte (_cgf );_gcbe :=make ([]byte ,len (_gad ));_ac .XORKeyStream (_gcbe ,_gad );return _gcbe ,nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_cbb stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_caa :=make ([]byte ,32);if _ ,_beb :=_e .ReadFull (_be .Reader ,_caa );_beb !=nil {return nil ,_beb ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _dcec :=_cbb .alg8 (d ,_caa ,upass );_dcec !=nil {return nil ,_dcec ;};if _ffb :=_cbb .alg9 (d ,_caa ,opass );_ffb !=nil {return nil ,_ffb ;};if d .R ==5{return _caa ,nil ;
};if _cde :=_cbb .alg10 (d ,_caa );_cde !=nil {return nil ,_cde ;};return _caa ,nil ;};func (_fda errInvalidField )Error ()string {return _ea .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_fda .Func ,_fda .Field ,_fda .Exp ,_fda .Got );
};func (_fc *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_fc ._dd !=0{_g .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_g .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_fc ._eb .Encrypt (dst ,src [:_fc ._dd ]);src =src [_fc ._dd :];dst =dst [_fc ._dd :];};};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_bbd stdHandlerR6 )alg12 (_ecbf *StdEncryptDict ,_bcgg []byte )([]byte ,error ){if _ecc :=_gfd ("\u0061\u006c\u00671\u0032","\u0055",48,_ecbf .U );
_ecc !=nil {return nil ,_ecc ;};if _gbg :=_gfd ("\u0061\u006c\u00671\u0032","\u004f",48,_ecbf .O );_gbg !=nil {return nil ,_gbg ;};_aacc :=make ([]byte ,len (_bcgg )+8+48);_dagb :=copy (_aacc ,_bcgg );_dagb +=copy (_aacc [_dagb :],_ecbf .O [32:40]);_dagb +=copy (_aacc [_dagb :],_ecbf .U [0:48]);
_cea ,_cae :=_bbd .alg2b (_ecbf .R ,_aacc ,_bcgg ,_ecbf .U [0:48]);if _cae !=nil {return nil ,_cae ;};_cea =_cea [:32];if !_eg .Equal (_cea ,_ecbf .O [:32]){return nil ,nil ;};return _cea ,nil ;};func _fd (_gg _d .Block )_d .BlockMode {return (*ecbDecrypter )(_ad (_gg ))};


// Authenticate implements StdHandler interface.
func (_gfdaa stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _gfdaa .alg2a (d ,pass );};var _ StdHandler =stdHandlerR6 {};func (_dcd stdHandlerR4 )alg2 (_ggaf *StdEncryptDict ,_ee []byte )[]byte {_g .Log .Trace ("\u0061\u006c\u0067\u0032");
_ab :=_dcd .paddedPass (_ee );_dada :=_a .New ();_dada .Write (_ab );_dada .Write (_ggaf .O );var _gcc [4]byte ;_db .LittleEndian .PutUint32 (_gcc [:],uint32 (_ggaf .P ));_dada .Write (_gcc [:]);_g .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_gcc );
_dada .Write ([]byte (_dcd .ID0 ));_g .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ggaf .R ,_ggaf .EncryptMetadata );
if (_ggaf .R >=4)&&!_ggaf .EncryptMetadata {_dada .Write ([]byte {0xff,0xff,0xff,0xff});};_fbg :=_dada .Sum (nil );if _ggaf .R >=3{_dada =_a .New ();for _fe :=0;_fe < 50;_fe ++{_dada .Reset ();_dada .Write (_fbg [0:_dcd .Length /8]);_fbg =_dada .Sum (nil );
};};if _ggaf .R >=3{return _fbg [0:_dcd .Length /8];};return _fbg [0:5];};type stdHandlerR6 struct{};func (_bcg stdHandlerR6 )alg9 (_dbac *StdEncryptDict ,_eed []byte ,_fbe []byte )error {if _cda :=_gfd ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_eed );
_cda !=nil {return _cda ;};if _gebd :=_gfd ("\u0061\u006c\u0067\u0039","\u0055",48,_dbac .U );_gebd !=nil {return _gebd ;};var _bcb [16]byte ;if _ ,_cfee :=_e .ReadFull (_be .Reader ,_bcb [:]);_cfee !=nil {return _cfee ;};_add :=_bcb [0:8];_gdf :=_bcb [8:16];
_gfda :=_dbac .U [:48];_eaad :=make ([]byte ,len (_fbe )+len (_add )+len (_gfda ));_abba :=copy (_eaad ,_fbe );_abba +=copy (_eaad [_abba :],_add );_abba +=copy (_eaad [_abba :],_gfda );_bfe ,_faea :=_bcg .alg2b (_dbac .R ,_eaad ,_fbe ,_gfda );if _faea !=nil {return _faea ;
};O :=make ([]byte ,len (_bfe )+len (_add )+len (_gdf ));_abba =copy (O ,_bfe [:32]);_abba +=copy (O [_abba :],_add );_abba +=copy (O [_abba :],_gdf );_dbac .O =O ;_abba =len (_fbe );_abba +=copy (_eaad [_abba :],_gdf );_bfe ,_faea =_bcg .alg2b (_dbac .R ,_eaad ,_fbe ,_gfda );
if _faea !=nil {return _faea ;};_gbf ,_faea :=_becc (_bfe [:32]);if _faea !=nil {return _faea ;};_gcg :=make ([]byte ,_da .BlockSize );_cff :=_d .NewCBCEncrypter (_gbf ,_gcg );OE :=make ([]byte ,32);_cff .CryptBlocks (OE ,_eed [:32]);_dbac .OE =OE ;return nil ;
};func (_bgg stdHandlerR4 )alg3 (R int ,_cf ,_ga []byte )([]byte ,error ){var _bf []byte ;if len (_ga )> 0{_bf =_bgg .alg3Key (R ,_ga );}else {_bf =_bgg .alg3Key (R ,_cf );};_ba ,_ebf :=_dad .NewCipher (_bf );if _ebf !=nil {return nil ,_c .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_edb :=_bgg .paddedPass (_cf );_fcaa :=make ([]byte ,len (_edb ));_ba .XORKeyStream (_fcaa ,_edb );if R >=3{_ff :=make ([]byte ,len (_bf ));for _bga :=0;_bga < 19;_bga ++{for _dce :=0;_dce < len (_bf );_dce ++{_ff [_dce ]=_bf [_dce ]^byte (_bga +1);};
_edd ,_dbb :=_dad .NewCipher (_ff );if _dbb !=nil {return nil ,_c .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_edd .XORKeyStream (_fcaa ,_fcaa );};};return _fcaa ,nil ;};func (_fca stdHandlerR4 )alg3Key (R int ,_cc []byte )[]byte {_gge :=_a .New ();
_ag :=_fca .paddedPass (_cc );_gge .Write (_ag );if R >=3{for _ef :=0;_ef < 50;_ef ++{_fbd :=_gge .Sum (nil );_gge =_a .New ();_gge .Write (_fbd );};};_eab :=_gge .Sum (nil );if R ==2{_eab =_eab [0:5];}else {_eab =_eab [0:_fca .Length /8];};return _eab ;
};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func (_ec stdHandlerR4 )alg6 (_gff *StdEncryptDict ,_gbd []byte )([]byte ,error ){var (_efb []byte ;
_bcc error ;);_feg :=_ec .alg2 (_gff ,_gbd );if _gff .R ==2{_efb ,_bcc =_ec .alg4 (_feg ,_gbd );}else if _gff .R >=3{_efb ,_bcc =_ec .alg5 (_feg ,_gbd );}else {return nil ,_c .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _bcc !=nil {return nil ,_bcc ;
};_g .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_efb ),string (_gff .U ));_fbc :=_efb ;_dae :=_gff .U ;if _gff .R >=3{if len (_fbc )> 16{_fbc =_fbc [0:16];};if len (_dae )> 16{_dae =_dae [0:16];
};};if !_eg .Equal (_fbc ,_dae ){return nil ,nil ;};return _feg ,nil ;};func (_eea stdHandlerR4 )alg5 (_cd []byte ,_geb []byte )([]byte ,error ){_ggec :=_a .New ();_ggec .Write ([]byte (_cgf ));_ggec .Write ([]byte (_eea .ID0 ));_fgf :=_ggec .Sum (nil );
_g .Log .Trace ("\u0061\u006c\u0067\u0035");_g .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_cd );_g .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_eea .ID0 );if len (_fgf )!=16{return nil ,_c .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_ca ,_ega :=_dad .NewCipher (_cd );if _ega !=nil {return nil ,_c .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_acf :=make ([]byte ,16);_ca .XORKeyStream (_acf ,_fgf );_fac :=make ([]byte ,len (_cd ));for _abb :=0;
_abb < 19;_abb ++{for _bec :=0;_bec < len (_cd );_bec ++{_fac [_bec ]=_cd [_bec ]^byte (_abb +1);};_ca ,_ega =_dad .NewCipher (_fac );if _ega !=nil {return nil ,_c .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ca .XORKeyStream (_acf ,_acf );_g .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_abb ,_fac );_g .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_abb ,_acf );
};_fae :=make ([]byte ,32);for _fee :=0;_fee < 16;_fee ++{_fae [_fee ]=_acf [_fee ];};_ ,_ega =_be .Read (_fae [16:32]);if _ega !=nil {return nil ,_c .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _fae ,nil ;};func (_aad stdHandlerR4 )alg7 (_cfa *StdEncryptDict ,_ceg []byte )([]byte ,error ){_gfg :=_aad .alg3Key (_cfa .R ,_ceg );_efd :=make ([]byte ,len (_cfa .O ));if _cfa .R ==2{_fef ,_eeab :=_dad .NewCipher (_gfg );if _eeab !=nil {return nil ,_c .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_fef .XORKeyStream (_efd ,_cfa .O );}else if _cfa .R >=3{_cbe :=append ([]byte {},_cfa .O ...);for _bdf :=0;_bdf < 20;_bdf ++{_dg :=append ([]byte {},_gfg ...);for _eec :=0;_eec < len (_gfg );_eec ++{_dg [_eec ]^=byte (19-_bdf );};_fea ,_dbg :=_dad .NewCipher (_dg );
if _dbg !=nil {return nil ,_c .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_fea .XORKeyStream (_efd ,_cbe );_cbe =append ([]byte {},_efd ...);};}else {return nil ,_c .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");
};_ddc ,_faf :=_aad .alg6 (_cfa ,_efd );if _faf !=nil {return nil ,nil ;};return _ddc ,nil ;};func (_gbcc stdHandlerR6 )alg10 (_gfc *StdEncryptDict ,_dfa []byte )error {if _dgb :=_gfd ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_dfa );_dgb !=nil {return _dgb ;
};_gadd :=uint64 (uint32 (_gfc .P ))|(_bd .MaxUint32 <<32);Perms :=make ([]byte ,16);_db .LittleEndian .PutUint64 (Perms [:8],_gadd );if _gfc .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_efef :=_e .ReadFull (_be .Reader ,Perms [12:16]);
_efef !=nil {return _efef ;};_dff ,_dcc :=_becc (_dfa [:32]);if _dcc !=nil {return _dcc ;};_geg :=_gf (_dff );_geg .CryptBlocks (Perms ,Perms );_gfc .Perms =Perms [:16];return nil ;};func (_ge *ecbDecrypter )BlockSize ()int {return _ge ._dd };func (_dfc stdHandlerR6 )alg8 (_eaa *StdEncryptDict ,_bae []byte ,_cgd []byte )error {if _daa :=_gfd ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_bae );
_daa !=nil {return _daa ;};var _gffe [16]byte ;if _ ,_aae :=_e .ReadFull (_be .Reader ,_gffe [:]);_aae !=nil {return _aae ;};_dag :=_gffe [0:8];_fba :=_gffe [8:16];_bbf :=make ([]byte ,len (_cgd )+len (_dag ));_ebag :=copy (_bbf ,_cgd );copy (_bbf [_ebag :],_dag );
_fcad ,_bdd :=_dfc .alg2b (_eaa .R ,_bbf ,_cgd ,nil );if _bdd !=nil {return _bdd ;};U :=make ([]byte ,len (_fcad )+len (_dag )+len (_fba ));_ebag =copy (U ,_fcad [:32]);_ebag +=copy (U [_ebag :],_dag );copy (U [_ebag :],_fba );_eaa .U =U ;_ebag =len (_cgd );
copy (_bbf [_ebag :],_fba );_fcad ,_bdd =_dfc .alg2b (_eaa .R ,_bbf ,_cgd ,nil );if _bdd !=nil {return _bdd ;};_fec ,_bdd :=_becc (_fcad [:32]);if _bdd !=nil {return _bdd ;};_bca :=make ([]byte ,_da .BlockSize );_ebb :=_d .NewCBCEncrypter (_fec ,_bca );
UE :=make ([]byte ,32);_ebb .CryptBlocks (UE ,_bae [:32]);_eaa .UE =UE ;return nil ;};const _cgf ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";func _ad (_de _d .Block )*ecb {return &ecb {_eb :_de ,_dd :_de .BlockSize ()}};
const (PermOwner =Permissions (_bd .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);
PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););

// Authenticate implements StdHandler interface.
func (_bfc stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_g .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_gd ,_ccf :=_bfc .alg7 (d ,pass );if _ccf !=nil {return nil ,0,_ccf ;};if _gd !=nil {_g .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gd ,PermOwner ,nil ;
};_g .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_gd ,_ccf =_bfc .alg6 (d ,pass );if _ccf !=nil {return nil ,0,_ccf ;};
if _gd !=nil {_g .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gd ,d .P ,nil ;};return nil ,0,nil ;};func (stdHandlerR4 )paddedPass (_bc []byte )[]byte {_aa :=make ([]byte ,32);
_cgfa :=copy (_aa ,_bc );for ;_cgfa < 32;_cgfa ++{_aa [_cgfa ]=_cgf [_cgfa -len (_bc )];};return _aa ;};func _becc (_ece []byte )(_d .Block ,error ){_fff ,_deg :=_da .NewCipher (_ece );if _deg !=nil {_g .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_deg );
return nil ,_deg ;};return _fff ,nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_gfa stdHandlerR6 )alg13 (_dbbf *StdEncryptDict ,_cfd []byte )error {if _ebfa :=_gfd ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_cfd );_ebfa !=nil {return _ebfa ;};if _ceaf :=_gfd ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_dbbf .Perms );
_ceaf !=nil {return _ceaf ;};_dfg :=make ([]byte ,16);copy (_dfg ,_dbbf .Perms [:16]);_cgdf ,_gaee :=_da .NewCipher (_cfd [:32]);if _gaee !=nil {return _gaee ;};_ebfb :=_fd (_cgdf );_ebfb .CryptBlocks (_dfg ,_dfg );if !_eg .Equal (_dfg [9:12],[]byte ("\u0061\u0064\u0062")){return _c .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_cbgc :=Permissions (_db .LittleEndian .Uint32 (_dfg [0:4]));if _cbgc !=_dbbf .P {return _c .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _ddfe bool ;if _dfg [8]=='T'{_ddfe =true ;}else if _dfg [8]=='F'{_ddfe =false ;}else {return _c .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _ddfe !=_dbbf .EncryptMetadata {return _c .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func _ddcc (_ecb []byte ,_daec int ){_acg :=_daec ;for _acg < len (_ecb ){copy (_ecb [_acg :],_ecb [:_acg ]);_acg *=2;};};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_dbd *StdEncryptDict ,_gc ,_cb []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_gga *StdEncryptDict ,_df []byte )([]byte ,Permissions ,error );};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func _aega (_gfe ,_aec ,_cdc []byte )([]byte ,error ){var (_cfb ,_cab ,_bbb _dc .Hash ;);_cfb =_fg .New ();_gaeb :=make ([]byte ,64);_aac :=_cfb ;_aac .Write (_gfe );K :=_aac .Sum (_gaeb [:0]);_acb :=make ([]byte ,64*(127+64+48));
_cba :=func (_egb int )([]byte ,error ){_ccff :=len (_aec )+len (K )+len (_cdc );_cbg :=_acb [:_ccff ];_bba :=copy (_cbg ,_aec );_bba +=copy (_cbg [_bba :],K [:]);_bba +=copy (_cbg [_bba :],_cdc );if _bba !=_ccff {_g .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_c .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_acb [:_ccff *64];_ddcc (K1 ,_ccff );_aaf ,_aed :=_becc (K [0:16]);if _aed !=nil {return nil ,_aed ;};_dea :=_d .NewCBCEncrypter (_aaf ,K [16:32]);_dea .CryptBlocks (K1 ,K1 );
E :=K1 ;_bagb :=0;for _aab :=0;_aab < 16;_aab ++{_bagb +=int (E [_aab ]%3);};var _cec _dc .Hash ;switch _bagb %3{case 0:_cec =_cfb ;case 1:if _cab ==nil {_cab =_b .New384 ();};_cec =_cab ;case 2:if _bbb ==nil {_bbb =_b .New ();};_cec =_bbb ;};_cec .Reset ();
_cec .Write (E );K =_cec .Sum (_gaeb [:0]);return E ,nil ;};for _gdc :=0;;{E ,_cbge :=_cba (_gdc );if _cbge !=nil {return nil ,_cbge ;};_fefe :=E [len (E )-1];_gdc ++;if _gdc >=64&&_fefe <=uint8 (_gdc -32){break ;};};return K [:32],nil ;};var _ StdHandler =stdHandlerR4 {};
type ecb struct{_eb _d .Block ;_dd int ;};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_ddf stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_dbf :=_ddf .alg3 (d .R ,upass ,opass );if _dbf !=nil {_g .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_dbf );
return nil ,_dbf ;};d .O =O ;_g .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_bfg :=_ddf .alg2 (d ,upass );U ,_dbf :=_ddf .alg5 (_bfg ,upass );if _dbf !=nil {_g .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_dbf );
return nil ,_dbf ;};d .U =U ;_g .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _bfg ,nil ;};func _ddff (_fab []byte )([]byte ,error ){_fabd :=_fg .New ();_fabd .Write (_fab );return _fabd .Sum (nil ),nil ;};func _gf (_fb _d .Block )_d .BlockMode {return (*ecbEncrypter )(_ad (_fb ))};
func _gfd (_gb ,_eae string ,_cg int ,_bg []byte )error {if len (_bg )< _cg {return errInvalidField {Func :_gb ,Field :_eae ,Exp :_cg ,Got :len (_bg )};};return nil ;};type ecbDecrypter ecb ;type ecbEncrypter ecb ;func (_gae stdHandlerR6 )alg2a (_aadc *StdEncryptDict ,_efe []byte )([]byte ,Permissions ,error ){if _agc :=_gfd ("\u0061\u006c\u00672\u0061","\u004f",48,_aadc .O );
_agc !=nil {return nil ,0,_agc ;};if _af :=_gfd ("\u0061\u006c\u00672\u0061","\u0055",48,_aadc .U );_af !=nil {return nil ,0,_af ;};if len (_efe )> 127{_efe =_efe [:127];};_dbgd ,_fdae :=_gae .alg12 (_aadc ,_efe );if _fdae !=nil {return nil ,0,_fdae ;};
var (_bef []byte ;_bcf []byte ;_aeg []byte ;);var _gbc Permissions ;if len (_dbgd )!=0{_gbc =PermOwner ;_efda :=make ([]byte ,len (_efe )+8+48);_bdg :=copy (_efda ,_efe );_bdg +=copy (_efda [_bdg :],_aadc .O [40:48]);copy (_efda [_bdg :],_aadc .U [0:48]);
_bef =_efda ;_bcf =_aadc .OE ;_aeg =_aadc .U [0:48];}else {_dbgd ,_fdae =_gae .alg11 (_aadc ,_efe );if _fdae ==nil &&len (_dbgd )==0{_dbgd ,_fdae =_gae .alg11 (_aadc ,[]byte (""));};if _fdae !=nil {return nil ,0,_fdae ;}else if len (_dbgd )==0{return nil ,0,nil ;
};_gbc =_aadc .P ;_gde :=make ([]byte ,len (_efe )+8);_ggab :=copy (_gde ,_efe );copy (_gde [_ggab :],_aadc .U [40:48]);_bef =_gde ;_bcf =_aadc .UE ;_aeg =nil ;};if _fbb :=_gfd ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_bcf );_fbb !=nil {return nil ,0,_fbb ;
};_bcf =_bcf [:32];_bb ,_fdae :=_gae .alg2b (_aadc .R ,_bef ,_efe ,_aeg );if _fdae !=nil {return nil ,0,_fdae ;};_dcg ,_fdae :=_da .NewCipher (_bb [:32]);if _fdae !=nil {return nil ,0,_fdae ;};_dba :=make ([]byte ,_da .BlockSize );_befg :=_d .NewCBCDecrypter (_dcg ,_dba );
_fege :=make ([]byte ,32);_befg .CryptBlocks (_fege ,_bcf );if _aadc .R ==5{return _fege ,_gbc ,nil ;};_fdae =_gae .alg13 (_aadc ,_fege );if _fdae !=nil {return nil ,0,_fdae ;};return _fege ,_gbc ,nil ;};func (_ed *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ed ._dd !=0{_g .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_g .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ed ._eb .Decrypt (dst ,src [:_ed ._dd ]);src =src [_ed ._dd :];dst =dst [_ed ._dd :];};};type stdHandlerR4 struct{Length int ;ID0 string ;};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e");
);

// Allowed checks if a set of permissions can be granted.
func (_cbd Permissions )Allowed (p2 Permissions )bool {return _cbd &p2 ==p2 };