//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ce "bytes";_fa "crypto/aes";_b "crypto/cipher";_a "crypto/md5";_bf "crypto/rand";_dc "crypto/rc4";_ga "crypto/sha256";_d "crypto/sha512";_gaa "encoding/binary";_gg "errors";_fd "fmt";_ba "github.com/unidoc/unipdf/v3/common";_g "hash";
_c "io";_be "math";);func (_gdg stdHandlerR4 )alg5 (_ec []byte ,_dcf []byte )([]byte ,error ){_gce :=_a .New ();_gce .Write ([]byte (_fcf ));_gce .Write ([]byte (_gdg .ID0 ));_fcbg :=_gce .Sum (nil );_ba .Log .Trace ("\u0061\u006c\u0067\u0035");_ba .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_ec );
_ba .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_gdg .ID0 );if len (_fcbg )!=16{return nil ,_gg .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_bca ,_ff :=_dc .NewCipher (_ec );
if _ff !=nil {return nil ,_gg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_df :=make ([]byte ,16);_bca .XORKeyStream (_df ,_fcbg );_gdd :=make ([]byte ,len (_ec ));for _dcdc :=0;_dcdc < 19;_dcdc ++{for _ea :=0;
_ea < len (_ec );_ea ++{_gdd [_ea ]=_ec [_ea ]^byte (_dcdc +1);};_bca ,_ff =_dc .NewCipher (_gdd );if _ff !=nil {return nil ,_gg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bca .XORKeyStream (_df ,_df );
_ba .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_dcdc ,_gdd );_ba .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_dcdc ,_df );};_bdc :=make ([]byte ,32);
for _adf :=0;_adf < 16;_adf ++{_bdc [_adf ]=_df [_adf ];};_ ,_ff =_bf .Read (_bdc [16:32]);if _ff !=nil {return nil ,_gg .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");};
return _bdc ,nil ;};var _ StdHandler =stdHandlerR6 {};func _fdf (_bd _b .Block )_b .BlockMode {return (*ecbDecrypter )(_bfg (_bd ))};const _fcf ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";
func (_cebf stdHandlerR6 )alg9 (_bef *StdEncryptDict ,_ecb []byte ,_fdba []byte )error {if _eec :=_ab ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_ecb );_eec !=nil {return _eec ;};if _fdbac :=_ab ("\u0061\u006c\u0067\u0039","\u0055",48,_bef .U );
_fdbac !=nil {return _fdbac ;};var _ffa [16]byte ;if _ ,_daf :=_c .ReadFull (_bf .Reader ,_ffa [:]);_daf !=nil {return _daf ;};_fea :=_ffa [0:8];_aage :=_ffa [8:16];_aad :=_bef .U [:48];_caaf :=make ([]byte ,len (_fdba )+len (_fea )+len (_aad ));_fadf :=copy (_caaf ,_fdba );
_fadf +=copy (_caaf [_fadf :],_fea );_fadf +=copy (_caaf [_fadf :],_aad );_fdg ,_fee :=_cebf .alg2b (_bef .R ,_caaf ,_fdba ,_aad );if _fee !=nil {return _fee ;};O :=make ([]byte ,len (_fdg )+len (_fea )+len (_aage ));_fadf =copy (O ,_fdg [:32]);_fadf +=copy (O [_fadf :],_fea );
_fadf +=copy (O [_fadf :],_aage );_bef .O =O ;_fadf =len (_fdba );_fadf +=copy (_caaf [_fadf :],_aage );_fdg ,_fee =_cebf .alg2b (_bef .R ,_caaf ,_fdba ,_aad );if _fee !=nil {return _fee ;};_eeeg ,_fee :=_adg (_fdg [:32]);if _fee !=nil {return _fee ;};
_fgba :=make ([]byte ,_fa .BlockSize );_gcda :=_b .NewCBCEncrypter (_eeeg ,_fgba );OE :=make ([]byte ,32);_gcda .CryptBlocks (OE ,_ecb [:32]);_bef .OE =OE ;return nil ;};type stdHandlerR6 struct{};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func _adg (_abb []byte )(_b .Block ,error ){_bde ,_dbb :=_fa .NewCipher (_abb );if _dbb !=nil {_ba .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_dbb );
return nil ,_dbb ;};return _bde ,nil ;};func (_gaf *ecbDecrypter )BlockSize ()int {return _gaf ._ced };func _fgbd (_ged []byte )([]byte ,error ){_gae :=_ga .New ();_gae .Write (_ged );return _gae .Sum (nil ),nil ;};func (_cee stdHandlerR6 )alg10 (_egd *StdEncryptDict ,_fcc []byte )error {if _dgfc :=_ab ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_fcc );
_dgfc !=nil {return _dgfc ;};_gdcb :=uint64 (uint32 (_egd .P ))|(_be .MaxUint32 <<32);Perms :=make ([]byte ,16);_gaa .LittleEndian .PutUint64 (Perms [:8],_gdcb );if _egd .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_ebb :=_c .ReadFull (_bf .Reader ,Perms [12:16]);_ebb !=nil {return _ebb ;};_bda ,_baa :=_adg (_fcc [:32]);if _baa !=nil {return _baa ;};_edcd :=_fg (_bda );_edcd .CryptBlocks (Perms ,Perms );_egd .Perms =Perms [:16];return nil ;};func (_aba stdHandlerR4 )alg4 (_ed []byte ,_bfd []byte )([]byte ,error ){_da ,_efa :=_dc .NewCipher (_ed );
if _efa !=nil {return nil ,_gg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_aag :=[]byte (_fcf );_cc :=make ([]byte ,len (_aag ));_da .XORKeyStream (_cc ,_aag );return _cc ,nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};const (PermOwner =Permissions (_be .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);
PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_bdga stdHandlerR6 )alg8 (_gcdc *StdEncryptDict ,_gdc []byte ,_dbf []byte )error {if _eca :=_ab ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_gdc );
_eca !=nil {return _eca ;};var _cea [16]byte ;if _ ,_egg :=_c .ReadFull (_bf .Reader ,_cea [:]);_egg !=nil {return _egg ;};_ecg :=_cea [0:8];_cggb :=_cea [8:16];_abab :=make ([]byte ,len (_dbf )+len (_ecg ));_ceba :=copy (_abab ,_dbf );copy (_abab [_ceba :],_ecg );
_dfc ,_ada :=_bdga .alg2b (_gcdc .R ,_abab ,_dbf ,nil );if _ada !=nil {return _ada ;};U :=make ([]byte ,len (_dfc )+len (_ecg )+len (_cggb ));_ceba =copy (U ,_dfc [:32]);_ceba +=copy (U [_ceba :],_ecg );copy (U [_ceba :],_cggb );_gcdc .U =U ;_ceba =len (_dbf );
copy (_abab [_ceba :],_cggb );_dfc ,_ada =_bdga .alg2b (_gcdc .R ,_abab ,_dbf ,nil );if _ada !=nil {return _ada ;};_afb ,_ada :=_adg (_dfc [:32]);if _ada !=nil {return _ada ;};_ac :=make ([]byte ,_fa .BlockSize );_eee :=_b .NewCBCEncrypter (_afb ,_ac );
UE :=make ([]byte ,32);_eee .CryptBlocks (UE ,_gdc [:32]);_gcdc .UE =UE ;return nil ;};

// Allowed checks if a set of permissions can be granted.
func (_bac Permissions )Allowed (p2 Permissions )bool {return _bac &p2 ==p2 };func _ab (_dd ,_bfb string ,_ef int ,_ae []byte )error {if len (_ae )< _ef {return errInvalidField {Func :_dd ,Field :_bfb ,Exp :_ef ,Got :len (_ae )};};return nil ;};func (_cdc stdHandlerR4 )alg3Key (R int ,_dga []byte )[]byte {_dcb :=_a .New ();
_cde :=_cdc .paddedPass (_dga );_dcb .Write (_cde );if R >=3{for _aeg :=0;_aeg < 50;_aeg ++{_affe :=_dcb .Sum (nil );_dcb =_a .New ();_dcb .Write (_affe );};};_efg :=_dcb .Sum (nil );if R ==2{_efg =_efg [0:5];}else {_efg =_efg [0:_cdc .Length /8];};return _efg ;
};func (_eb *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_eb ._ced !=0{_ba .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ba .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_eb ._fc .Encrypt (dst ,src [:_eb ._ced ]);src =src [_eb ._ced :];dst =dst [_eb ._ced :];};};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_cg *StdEncryptDict ,_db ,_af []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_fb *StdEncryptDict ,_fag []byte )([]byte ,Permissions ,error );};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_fdb stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_ebf :=_fdb .alg3 (d .R ,upass ,opass );if _ebf !=nil {_ba .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ebf );
return nil ,_ebf ;};d .O =O ;_ba .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_ee :=_fdb .alg2 (d ,upass );U ,_ebf :=_fdb .alg5 (_ee ,upass );if _ebf !=nil {_ba .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ebf );
return nil ,_ebf ;};d .U =U ;_ba .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _ee ,nil ;};type ecbEncrypter ecb ;func (_bcf stdHandlerR6 )alg13 (_eea *StdEncryptDict ,_feg []byte )error {if _dgaed :=_ab ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_feg );
_dgaed !=nil {return _dgaed ;};if _age :=_ab ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_eea .Perms );_age !=nil {return _age ;};_dafe :=make ([]byte ,16);copy (_dafe ,_eea .Perms [:16]);_fcbf ,_fgg :=_fa .NewCipher (_feg [:32]);if _fgg !=nil {return _fgg ;
};_dac :=_fdf (_fcbf );_dac .CryptBlocks (_dafe ,_dafe );if !_ce .Equal (_dafe [9:12],[]byte ("\u0061\u0064\u0062")){return _gg .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_cgca :=Permissions (_gaa .LittleEndian .Uint32 (_dafe [0:4]));if _cgca !=_eea .P {return _gg .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _feag bool ;if _dafe [8]=='T'{_feag =true ;}else if _dafe [8]=='F'{_feag =false ;}else {return _gg .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _feag !=_eea .EncryptMetadata {return _gg .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func _bfg (_cf _b .Block )*ecb {return &ecb {_fc :_cf ,_ced :_cf .BlockSize ()}};

// Authenticate implements StdHandler interface.
func (_fbdf stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _fbdf .alg2a (d ,pass );};func (_gee stdHandlerR6 )alg2b (R int ,_ede ,_fdc ,_cgg []byte )([]byte ,error ){if R ==5{return _fgbd (_ede );};return _bgb (_ede ,_fdc ,_cgg );
};type ecb struct{_fc _b .Block ;_ced int ;};func (_ad *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ad ._ced !=0{_ba .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ba .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ad ._fc .Decrypt (dst ,src [:_ad ._ced ]);src =src [_ad ._ced :];dst =dst [_ad ._ced :];};};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_fgfa stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_fgfe :=make ([]byte ,32);if _ ,_bec :=_c .ReadFull (_bf .Reader ,_fgfe );_bec !=nil {return nil ,_bec ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _edb :=_fgfa .alg8 (d ,_fgfe ,upass );_edb !=nil {return nil ,_edb ;};if _eba :=_fgfa .alg9 (d ,_fgfe ,opass );_eba !=nil {return nil ,_eba ;};if d .R ==5{return _fgfe ,nil ;
};if _ccbe :=_fgfa .alg10 (d ,_fgfe );_ccbe !=nil {return nil ,_ccbe ;};return _fgfe ,nil ;};func (stdHandlerR4 )paddedPass (_cgc []byte )[]byte {_dg :=make ([]byte ,32);_fcd :=copy (_dg ,_cgc );for ;_fcd < 32;_fcd ++{_dg [_fcd ]=_fcf [_fcd -len (_cgc )];
};return _dg ;};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func _bgb (_add ,_cfe ,_cfg []byte )([]byte ,error ){var (_ggc ,_aacge ,_adec _g .Hash ;);_ggc =_ga .New ();_bbc :=make ([]byte ,64);_bce :=_ggc ;
_bce .Write (_add );K :=_bce .Sum (_bbc [:0]);_addb :=make ([]byte ,64*(127+64+48));_eafd :=func (_fgc int )([]byte ,error ){_fac :=len (_cfe )+len (K )+len (_cfg );_fbdg :=_addb [:_fac ];_gbc :=copy (_fbdg ,_cfe );_gbc +=copy (_fbdg [_gbc :],K [:]);_gbc +=copy (_fbdg [_gbc :],_cfg );
if _gbc !=_fac {_ba .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");return nil ,_gg .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");
};K1 :=_addb [:_fac *64];_bg (K1 ,_fac );_bgbd ,_gf :=_adg (K [0:16]);if _gf !=nil {return nil ,_gf ;};_cfc :=_b .NewCBCEncrypter (_bgbd ,K [16:32]);_cfc .CryptBlocks (K1 ,K1 );E :=K1 ;_bdfc :=0;for _cag :=0;_cag < 16;_cag ++{_bdfc +=int (E [_cag ]%3);
};var _gcbg _g .Hash ;switch _bdfc %3{case 0:_gcbg =_ggc ;case 1:if _aacge ==nil {_aacge =_d .New384 ();};_gcbg =_aacge ;case 2:if _adec ==nil {_adec =_d .New ();};_gcbg =_adec ;};_gcbg .Reset ();_gcbg .Write (E );K =_gcbg .Sum (_bbc [:0]);return E ,nil ;
};for _ceg :=0;;{E ,_abaa :=_eafd (_ceg );if _abaa !=nil {return nil ,_abaa ;};_dge :=E [len (E )-1];_ceg ++;if _ceg >=64&&_dge <=uint8 (_ceg -32){break ;};};return K [:32],nil ;};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;
};

// Authenticate implements StdHandler interface.
func (_deg stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_ba .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_bfc ,_cff :=_deg .alg7 (d ,pass );if _cff !=nil {return nil ,0,_cff ;};if _bfc !=nil {_ba .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bfc ,PermOwner ,nil ;
};_ba .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_bfc ,_cff =_deg .alg6 (d ,pass );if _cff !=nil {return nil ,0,_cff ;
};if _bfc !=nil {_ba .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bfc ,d .P ,nil ;};return nil ,0,nil ;};func (_ggd errInvalidField )Error ()string {return _fd .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_ggd .Func ,_ggd .Field ,_ggd .Exp ,_ggd .Got );
};func (_adfe stdHandlerR6 )alg2a (_bae *StdEncryptDict ,_geg []byte )([]byte ,Permissions ,error ){if _gcg :=_ab ("\u0061\u006c\u00672\u0061","\u004f",48,_bae .O );_gcg !=nil {return nil ,0,_gcg ;};if _aacg :=_ab ("\u0061\u006c\u00672\u0061","\u0055",48,_bae .U );
_aacg !=nil {return nil ,0,_aacg ;};if len (_geg )> 127{_geg =_geg [:127];};_ebg ,_bb :=_adfe .alg12 (_bae ,_geg );if _bb !=nil {return nil ,0,_bb ;};var (_dcgf []byte ;_ccd []byte ;_ccc []byte ;);var _gdb Permissions ;if len (_ebg )!=0{_gdb =PermOwner ;
_aef :=make ([]byte ,len (_geg )+8+48);_affc :=copy (_aef ,_geg );_affc +=copy (_aef [_affc :],_bae .O [40:48]);copy (_aef [_affc :],_bae .U [0:48]);_dcgf =_aef ;_ccd =_bae .OE ;_ccc =_bae .U [0:48];}else {_ebg ,_bb =_adfe .alg11 (_bae ,_geg );if _bb ==nil &&len (_ebg )==0{_ebg ,_bb =_adfe .alg11 (_bae ,[]byte (""));
};if _bb !=nil {return nil ,0,_bb ;}else if len (_ebg )==0{return nil ,0,nil ;};_gdb =_bae .P ;_edc :=make ([]byte ,len (_geg )+8);_dbd :=copy (_edc ,_geg );copy (_edc [_dbd :],_bae .U [40:48]);_dcgf =_edc ;_ccd =_bae .UE ;_ccc =nil ;};if _adc :=_ab ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_ccd );
_adc !=nil {return nil ,0,_adc ;};_ccd =_ccd [:32];_afa ,_bb :=_adfe .alg2b (_bae .R ,_dcgf ,_geg ,_ccc );if _bb !=nil {return nil ,0,_bb ;};_gbge ,_bb :=_fa .NewCipher (_afa [:32]);if _bb !=nil {return nil ,0,_bb ;};_gcd :=make ([]byte ,_fa .BlockSize );
_fdfd :=_b .NewCBCDecrypter (_gbge ,_gcd );_ccb :=make ([]byte ,32);_fdfd .CryptBlocks (_ccb ,_ccd );if _bae .R ==5{return _ccb ,_gdb ,nil ;};_bb =_adfe .alg13 (_bae ,_ccb );if _bb !=nil {return nil ,0,_bb ;};return _ccb ,_gdb ,nil ;};func _bg (_bcc []byte ,_bab int ){_dbbb :=_bab ;
for _dbbb < len (_bcc ){copy (_bcc [_dbbb :],_bcc [:_dbbb ]);_dbbb *=2;};};func _fg (_e _b .Block )_b .BlockMode {return (*ecbEncrypter )(_bfg (_e ))};type ecbDecrypter ecb ;func (_bc *ecbEncrypter )BlockSize ()int {return _bc ._ced };func (_ade stdHandlerR4 )alg7 (_bdg *StdEncryptDict ,_fae []byte )([]byte ,error ){_fad :=_ade .alg3Key (_bdg .R ,_fae );
_faa :=make ([]byte ,len (_bdg .O ));if _bdg .R ==2{_ddf ,_bag :=_dc .NewCipher (_fad );if _bag !=nil {return nil ,_gg .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_ddf .XORKeyStream (_faa ,_bdg .O );}else if _bdg .R >=3{_fbfb :=append ([]byte {},_bdg .O ...);
for _cfd :=0;_cfd < 20;_cfd ++{_ccf :=append ([]byte {},_fad ...);for _dgfd :=0;_dgfd < len (_fad );_dgfd ++{_ccf [_dgfd ]^=byte (19-_cfd );};_bdf ,_cb :=_dc .NewCipher (_ccf );if _cb !=nil {return nil ,_gg .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_bdf .XORKeyStream (_faa ,_fbfb );_fbfb =append ([]byte {},_faa ...);};}else {return nil ,_gg .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_gbg ,_dec :=_ade .alg6 (_bdg ,_faa );if _dec !=nil {return nil ,nil ;};return _gbg ,nil ;};type stdHandlerR4 struct{Length int ;
ID0 string ;};var _ StdHandler =stdHandlerR4 {};func (_eg stdHandlerR4 )alg6 (_fbe *StdEncryptDict ,_dbg []byte )([]byte ,error ){var (_gb []byte ;_fe error ;);_eaf :=_eg .alg2 (_fbe ,_dbg );if _fbe .R ==2{_gb ,_fe =_eg .alg4 (_eaf ,_dbg );}else if _fbe .R >=3{_gb ,_fe =_eg .alg5 (_eaf ,_dbg );
}else {return nil ,_gg .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _fe !=nil {return nil ,_fe ;};_ba .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_gb ),string (_fbe .U ));
_ceb :=_gb ;_dcg :=_fbe .U ;if _fbe .R >=3{if len (_ceb )> 16{_ceb =_ceb [0:16];};if len (_dcg )> 16{_dcg =_dcg [0:16];};};if !_ce .Equal (_ceb ,_dcg ){return nil ,nil ;};return _eaf ,nil ;};func (_afc stdHandlerR6 )alg12 (_fbea *StdEncryptDict ,_eda []byte )([]byte ,error ){if _egb :=_ab ("\u0061\u006c\u00671\u0032","\u0055",48,_fbea .U );
_egb !=nil {return nil ,_egb ;};if _cfde :=_ab ("\u0061\u006c\u00671\u0032","\u004f",48,_fbea .O );_cfde !=nil {return nil ,_cfde ;};_ffb :=make ([]byte ,len (_eda )+8+48);_cec :=copy (_ffb ,_eda );_cec +=copy (_ffb [_cec :],_fbea .O [32:40]);_cec +=copy (_ffb [_cec :],_fbea .U [0:48]);
_fgf ,_bfdd :=_afc .alg2b (_fbea .R ,_ffb ,_eda ,_fbea .U [0:48]);if _bfdd !=nil {return nil ,_bfdd ;};_fgf =_fgf [:32];if !_ce .Equal (_fgf ,_fbea .O [:32]){return nil ,nil ;};return _fgf ,nil ;};func (_gaac stdHandlerR6 )alg11 (_acb *StdEncryptDict ,_aaged []byte )([]byte ,error ){if _dbba :=_ab ("\u0061\u006c\u00671\u0031","\u0055",48,_acb .U );
_dbba !=nil {return nil ,_dbba ;};_adb :=make ([]byte ,len (_aaged )+8);_affg :=copy (_adb ,_aaged );_affg +=copy (_adb [_affg :],_acb .U [32:40]);_cfec ,_fgd :=_gaac .alg2b (_acb .R ,_adb ,_aaged ,nil );if _fgd !=nil {return nil ,_fgd ;};_cfec =_cfec [:32];
if !_ce .Equal (_cfec ,_acb .U [:32]){return nil ,nil ;};return _cfec ,nil ;};func (_de stdHandlerR4 )alg2 (_dgf *StdEncryptDict ,_aff []byte )[]byte {_ba .Log .Trace ("\u0061\u006c\u0067\u0032");_ge :=_de .paddedPass (_aff );_fbf :=_a .New ();_fbf .Write (_ge );
_fbf .Write (_dgf .O );var _cd [4]byte ;_gaa .LittleEndian .PutUint32 (_cd [:],uint32 (_dgf .P ));_fbf .Write (_cd [:]);_ba .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_cd );_fbf .Write ([]byte (_de .ID0 ));_ba .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_dgf .R ,_dgf .EncryptMetadata );
if (_dgf .R >=4)&&!_dgf .EncryptMetadata {_fbf .Write ([]byte {0xff,0xff,0xff,0xff});};_aa :=_fbf .Sum (nil );if _dgf .R >=3{_fbf =_a .New ();for _fba :=0;_fba < 50;_fba ++{_fbf .Reset ();_fbf .Write (_aa [0:_de .Length /8]);_aa =_fbf .Sum (nil );};};if _dgf .R >=3{return _aa [0:_de .Length /8];
};return _aa [0:5];};func (_gafe stdHandlerR4 )alg3 (R int ,_fbd ,_aac []byte )([]byte ,error ){var _dcd []byte ;if len (_aac )> 0{_dcd =_gafe .alg3Key (R ,_aac );}else {_dcd =_gafe .alg3Key (R ,_fbd );};_fcb ,_gc :=_dc .NewCipher (_dcd );if _gc !=nil {return nil ,_gg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_fgb :=_gafe .paddedPass (_fbd );_ggde :=make ([]byte ,len (_fgb ));_fcb .XORKeyStream (_ggde ,_fgb );if R >=3{_gge :=make ([]byte ,len (_dcd ));for _gcb :=0;_gcb < 19;_gcb ++{for _caa :=0;_caa < len (_dcd );_caa ++{_gge [_caa ]=_dcd [_caa ]^byte (_gcb +1);
};_gd ,_dgae :=_dc .NewCipher (_gge );if _dgae !=nil {return nil ,_gg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_gd .XORKeyStream (_ggde ,_ggde );};};return _ggde ,nil ;};