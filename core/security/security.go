//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ec "bytes";_b "crypto/aes";_d "crypto/cipher";_a "crypto/md5";_f "crypto/rand";_cac "crypto/rc4";_e "crypto/sha256";_cf "crypto/sha512";_dac "encoding/binary";_cc "errors";_ff "fmt";_cag "github.com/unidoc/unipdf/v3/common";_ca "hash";
_da "io";_bc "math";);func (_fbc stdHandlerR6 )alg13 (_gcba *StdEncryptDict ,_fad []byte )error {if _defe :=_db ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_fad );_defe !=nil {return _defe ;};if _adg :=_db ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_gcba .Perms );
_adg !=nil {return _adg ;};_eaf :=make ([]byte ,16);copy (_eaf ,_gcba .Perms [:16]);_fbbg ,_bdg :=_b .NewCipher (_fad [:32]);if _bdg !=nil {return _bdg ;};_gab :=_ge (_fbbg );_gab .CryptBlocks (_eaf ,_eaf );if !_ec .Equal (_eaf [9:12],[]byte ("\u0061\u0064\u0062")){return _cc .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_bdgc :=Permissions (_dac .LittleEndian .Uint32 (_eaf [0:4]));if _bdgc !=_gcba .P {return _cc .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _gba bool ;if _eaf [8]=='T'{_gba =true ;}else if _eaf [8]=='F'{_gba =false ;}else {return _cc .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _gba !=_gcba .EncryptMetadata {return _cc .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_def stdHandlerR6 )alg12 (_geb *StdEncryptDict ,_bbf []byte )([]byte ,error ){if _cdef :=_db ("\u0061\u006c\u00671\u0032","\u0055",48,_geb .U );_cdef !=nil {return nil ,_cdef ;};if _dca :=_db ("\u0061\u006c\u00671\u0032","\u004f",48,_geb .O );
_dca !=nil {return nil ,_dca ;};_agd :=make ([]byte ,len (_bbf )+8+48);_ccg :=copy (_agd ,_bbf );_ccg +=copy (_agd [_ccg :],_geb .O [32:40]);_ccg +=copy (_agd [_ccg :],_geb .U [0:48]);_eadb ,_gebc :=_def .alg2b (_geb .R ,_agd ,_bbf ,_geb .U [0:48]);if _gebc !=nil {return nil ,_gebc ;
};_eadb =_eadb [:32];if !_ec .Equal (_eadb ,_geb .O [:32]){return nil ,nil ;};return _eadb ,nil ;};func (_cbf stdHandlerR6 )alg11 (_abdf *StdEncryptDict ,_afad []byte )([]byte ,error ){if _fdd :=_db ("\u0061\u006c\u00671\u0031","\u0055",48,_abdf .U );_fdd !=nil {return nil ,_fdd ;
};_dff :=make ([]byte ,len (_afad )+8);_gcfa :=copy (_dff ,_afad );_gcfa +=copy (_dff [_gcfa :],_abdf .U [32:40]);_dge ,_cga :=_cbf .alg2b (_abdf .R ,_dff ,_afad ,nil );if _cga !=nil {return nil ,_cga ;};_dge =_dge [:32];if !_ec .Equal (_dge ,_abdf .U [:32]){return nil ,nil ;
};return _dge ,nil ;};var _ StdHandler =stdHandlerR6 {};func (_eba stdHandlerR4 )alg3Key (R int ,_de []byte )[]byte {_gf :=_a .New ();_ba :=_eba .paddedPass (_de );_gf .Write (_ba );if R >=3{for _bd :=0;_bd < 50;_bd ++{_cda :=_gf .Sum (nil );_gf =_a .New ();
_gf .Write (_cda );};};_ed :=_gf .Sum (nil );if R ==2{_ed =_ed [0:5];}else {_ed =_ed [0:_eba .Length /8];};return _ed ;};const (PermOwner =Permissions (_bc .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);
PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func _fgc (_cb _d .Block )_d .BlockMode {return (*ecbEncrypter )(_fg (_cb ))};
func _fg (_df _d .Block )*ecb {return &ecb {_be :_df ,_ag :_df .BlockSize ()}};func (_g *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_g ._ag !=0{_cag .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_cag .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_g ._be .Encrypt (dst ,src [:_g ._ag ]);src =src [_g ._ag :];dst =dst [_g ._ag :];};};func (_gfa stdHandlerR6 )alg9 (_gdf *StdEncryptDict ,_aabg []byte ,_fgea []byte )error {if _gfb :=_db ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_aabg );
_gfb !=nil {return _gfb ;};if _eabbg :=_db ("\u0061\u006c\u0067\u0039","\u0055",48,_gdf .U );_eabbg !=nil {return _eabbg ;};var _fdc [16]byte ;if _ ,_gbdg :=_da .ReadFull (_f .Reader ,_fdc [:]);_gbdg !=nil {return _gbdg ;};_cffb :=_fdc [0:8];_dbf :=_fdc [8:16];
_efa :=_gdf .U [:48];_gaf :=make ([]byte ,len (_fgea )+len (_cffb )+len (_efa ));_ceg :=copy (_gaf ,_fgea );_ceg +=copy (_gaf [_ceg :],_cffb );_ceg +=copy (_gaf [_ceg :],_efa );_cdaa ,_cgfd :=_gfa .alg2b (_gdf .R ,_gaf ,_fgea ,_efa );if _cgfd !=nil {return _cgfd ;
};O :=make ([]byte ,len (_cdaa )+len (_cffb )+len (_dbf ));_ceg =copy (O ,_cdaa [:32]);_ceg +=copy (O [_ceg :],_cffb );_ceg +=copy (O [_ceg :],_dbf );_gdf .O =O ;_ceg =len (_fgea );_ceg +=copy (_gaf [_ceg :],_dbf );_cdaa ,_cgfd =_gfa .alg2b (_gdf .R ,_gaf ,_fgea ,_efa );
if _cgfd !=nil {return _cgfd ;};_ceb ,_cgfd :=_bea (_cdaa [:32]);if _cgfd !=nil {return _cgfd ;};_aad :=make ([]byte ,_b .BlockSize );_fab :=_d .NewCBCEncrypter (_ceb ,_aad );OE :=make ([]byte ,32);_fab .CryptBlocks (OE ,_aabg [:32]);_gdf .OE =OE ;return nil ;
};func _bea (_cbe []byte )(_d .Block ,error ){_cdf ,_gad :=_b .NewCipher (_cbe );if _gad !=nil {_cag .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_gad );
return nil ,_gad ;};return _cdf ,nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_adfa stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_adc :=make ([]byte ,32);if _ ,_dfag :=_da .ReadFull (_f .Reader ,_adc );_dfag !=nil {return nil ,_dfag ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;
d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _abc :=_adfa .alg8 (d ,_adc ,upass );_abc !=nil {return nil ,_abc ;};if _edb :=_adfa .alg9 (d ,_adc ,opass );_edb !=nil {return nil ,_edb ;};if d .R ==5{return _adc ,nil ;
};if _cgg :=_adfa .alg10 (d ,_adc );_cgg !=nil {return nil ,_cgg ;};return _adc ,nil ;};func (_eef stdHandlerR6 )alg10 (_efg *StdEncryptDict ,_gac []byte )error {if _egb :=_db ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_gac );_egb !=nil {return _egb ;
};_cfa :=uint64 (uint32 (_efg .P ))|(_bc .MaxUint32 <<32);Perms :=make ([]byte ,16);_dac .LittleEndian .PutUint64 (Perms [:8],_cfa );if _efg .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_bag :=_da .ReadFull (_f .Reader ,Perms [12:16]);
_bag !=nil {return _bag ;};_gdea ,_dcdd :=_bea (_gac [:32]);if _dcdd !=nil {return _dcdd ;};_agb :=_fgc (_gdea );_agb .CryptBlocks (Perms ,Perms );_efg .Perms =Perms [:16];return nil ;};func (_bb *ecbEncrypter )BlockSize ()int {return _bb ._ag };func _aac (_gaee []byte ,_egd int ){_dgfc :=_egd ;
for _dgfc < len (_gaee ){copy (_gaee [_dgfc :],_gaee [:_dgfc ]);_dgfc *=2;};};

// Authenticate implements StdHandler interface.
func (_fbb stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_cag .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_gcf ,_gee :=_fbb .alg7 (d ,pass );if _gee !=nil {return nil ,0,_gee ;};if _gcf !=nil {_cag .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gcf ,PermOwner ,nil ;
};_cag .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_gcf ,_gee =_fbb .alg6 (d ,pass );if _gee !=nil {return nil ,0,_gee ;
};if _gcf !=nil {_cag .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gcf ,d .P ,nil ;};return nil ,0,nil ;};func (_ga *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ga ._ag !=0{_cag .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_cag .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ga ._be .Decrypt (dst ,src [:_ga ._ag ]);src =src [_ga ._ag :];dst =dst [_ga ._ag :];};};func (_ebe stdHandlerR4 )alg6 (_dbd *StdEncryptDict ,_bedb []byte )([]byte ,error ){var (_ebag []byte ;_gae error ;);_fac :=_ebe .alg2 (_dbd ,_bedb );
if _dbd .R ==2{_ebag ,_gae =_ebe .alg4 (_fac ,_bedb );}else if _dbd .R >=3{_ebag ,_gae =_ebe .alg5 (_fac ,_bedb );}else {return nil ,_cc .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _gae !=nil {return nil ,_gae ;};_cag .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_ebag ),string (_dbd .U ));
_fe :=_ebag ;_dgda :=_dbd .U ;if _dbd .R >=3{if len (_fe )> 16{_fe =_fe [0:16];};if len (_dgda )> 16{_dgda =_dgda [0:16];};};if !_ec .Equal (_fe ,_dgda ){return nil ,nil ;};return _fac ,nil ;};func (_gdd stdHandlerR6 )alg8 (_ce *StdEncryptDict ,_cceb []byte ,_bgf []byte )error {if _fec :=_db ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_cceb );
_fec !=nil {return _fec ;};var _fd [16]byte ;if _ ,_bac :=_da .ReadFull (_f .Reader ,_fd [:]);_bac !=nil {return _bac ;};_fbf :=_fd [0:8];_cfbf :=_fd [8:16];_fed :=make ([]byte ,len (_bgf )+len (_fbf ));_bgbc :=copy (_fed ,_bgf );copy (_fed [_bgbc :],_fbf );
_gcc ,_dd :=_gdd .alg2b (_ce .R ,_fed ,_bgf ,nil );if _dd !=nil {return _dd ;};U :=make ([]byte ,len (_gcc )+len (_fbf )+len (_cfbf ));_bgbc =copy (U ,_gcc [:32]);_bgbc +=copy (U [_bgbc :],_fbf );copy (U [_bgbc :],_cfbf );_ce .U =U ;_bgbc =len (_bgf );
copy (_fed [_bgbc :],_cfbf );_gcc ,_dd =_gdd .alg2b (_ce .R ,_fed ,_bgf ,nil );if _dd !=nil {return _dd ;};_aae ,_dd :=_bea (_gcc [:32]);if _dd !=nil {return _dd ;};_dcde :=make ([]byte ,_b .BlockSize );_cge :=_d .NewCBCEncrypter (_aae ,_dcde );UE :=make ([]byte ,32);
_cge .CryptBlocks (UE ,_cceb [:32]);_ce .UE =UE ;return nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_fb stdHandlerR4 )alg4 (_dec []byte ,_ebad []byte )([]byte ,error ){_aeg ,_gc :=_cac .NewCipher (_dec );if _gc !=nil {return nil ,_cc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_cab :=[]byte (_eb );_aeb :=make ([]byte ,len (_cab ));_aeg .XORKeyStream (_aeb ,_cab );return _aeb ,nil ;};

// Allowed checks if a set of permissions can be granted.
func (_fc Permissions )Allowed (p2 Permissions )bool {return _fc &p2 ==p2 };func (_ea stdHandlerR4 )alg3 (R int ,_bf ,_daa []byte )([]byte ,error ){var _fce []byte ;if len (_daa )> 0{_fce =_ea .alg3Key (R ,_daa );}else {_fce =_ea .alg3Key (R ,_bf );};_bbc ,_bdb :=_cac .NewCipher (_fce );
if _bdb !=nil {return nil ,_cc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_ecd :=_ea .paddedPass (_bf );_ead :=make ([]byte ,len (_ecd ));_bbc .XORKeyStream (_ead ,_ecd );if R >=3{_caf :=make ([]byte ,len (_fce ));
for _cgf :=0;_cgf < 19;_cgf ++{for _aab :=0;_aab < len (_fce );_aab ++{_caf [_aab ]=_fce [_aab ]^byte (_cgf +1);};_deb ,_dgf :=_cac .NewCipher (_caf );if _dgf !=nil {return nil ,_cc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_deb .XORKeyStream (_ead ,_ead );};};return _ead ,nil ;};func _aed (_edd []byte )([]byte ,error ){_dfed :=_e .New ();_dfed .Write (_edd );return _dfed .Sum (nil ),nil ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;type ecbDecrypter ecb ;func (_gcb stdHandlerR4 )alg5 (_fge []byte ,_afb []byte )([]byte ,error ){_gbd :=_a .New ();_gbd .Write ([]byte (_eb ));_gbd .Write ([]byte (_gcb .ID0 ));_add :=_gbd .Sum (nil );_cag .Log .Trace ("\u0061\u006c\u0067\u0035");
_cag .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_fge );_cag .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_gcb .ID0 );if len (_add )!=16{return nil ,_cc .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_dgdc ,_ffb :=_cac .NewCipher (_fge );if _ffb !=nil {return nil ,_cc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bbcf :=make ([]byte ,16);_dgdc .XORKeyStream (_bbcf ,_add );_ab :=make ([]byte ,len (_fge ));
for _eg :=0;_eg < 19;_eg ++{for _bdc :=0;_bdc < len (_fge );_bdc ++{_ab [_bdc ]=_fge [_bdc ]^byte (_eg +1);};_dgdc ,_ffb =_cac .NewCipher (_ab );if _ffb !=nil {return nil ,_cc .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_dgdc .XORKeyStream (_bbcf ,_bbcf );_cag .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_eg ,_ab );_cag .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_eg ,_bbcf );
};_bed :=make ([]byte ,32);for _cde :=0;_cde < 16;_cde ++{_bed [_cde ]=_bbcf [_cde ];};_ ,_ffb =_f .Read (_bed [16:32]);if _ffb !=nil {return nil ,_cc .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _bed ,nil ;};type stdHandlerR4 struct{Length int ;ID0 string ;};func _bg (_ace ,_bbcc ,_ecg []byte )([]byte ,error ){var (_ccd ,_acb ,_acg _ca .Hash ;);_ccd =_e .New ();_eee :=make ([]byte ,64);_efe :=_ccd ;_efe .Write (_ace );K :=_efe .Sum (_eee [:0]);
_cfb :=make ([]byte ,64*(127+64+48));_eadc :=func (_aba int )([]byte ,error ){_afeb :=len (_bbcc )+len (K )+len (_ecg );_bgb :=_cfb [:_afeb ];_ecgc :=copy (_bgb ,_bbcc );_ecgc +=copy (_bgb [_ecgc :],K [:]);_ecgc +=copy (_bgb [_ecgc :],_ecg );if _ecgc !=_afeb {_cag .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_cc .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_cfb [:_afeb *64];_aac (K1 ,_afeb );_ebaa ,_efeg :=_bea (K [0:16]);if _efeg !=nil {return nil ,_efeg ;};_eec :=_d .NewCBCEncrypter (_ebaa ,K [16:32]);_eec .CryptBlocks (K1 ,K1 );
E :=K1 ;_aca :=0;for _bef :=0;_bef < 16;_bef ++{_aca +=int (E [_bef ]%3);};var _bfb _ca .Hash ;switch _aca %3{case 0:_bfb =_ccd ;case 1:if _acb ==nil {_acb =_cf .New384 ();};_bfb =_acb ;case 2:if _acg ==nil {_acg =_cf .New ();};_bfb =_acg ;};_bfb .Reset ();
_bfb .Write (E );K =_bfb .Sum (_eee [:0]);return E ,nil ;};for _gdg :=0;;{E ,_ega :=_eadc (_gdg );if _ega !=nil {return nil ,_ega ;};_gfe :=E [len (E )-1];_gdg ++;if _gdg >=64&&_gfe <=uint8 (_gdg -32){break ;};};return K [:32],nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};

// Authenticate implements StdHandler interface.
func (_abg stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _abg .alg2a (d ,pass );};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_dg *StdEncryptDict ,_dfa ,_ac []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_aa *StdEncryptDict ,_bbe []byte )([]byte ,Permissions ,error );};func _ge (_ad _d .Block )_d .BlockMode {return (*ecbDecrypter )(_fg (_ad ))};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e");
);func (_bbb errInvalidField )Error ()string {return _ff .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_bbb .Func ,_bbb .Field ,_bbb .Exp ,_bbb .Got );
};func (_eca stdHandlerR4 )alg7 (_abd *StdEncryptDict ,_afe []byte )([]byte ,error ){_gbg :=_eca .alg3Key (_abd .R ,_afe );_cdg :=make ([]byte ,len (_abd .O ));if _abd .R ==2{_ee ,_dag :=_cac .NewCipher (_gbg );if _dag !=nil {return nil ,_cc .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_ee .XORKeyStream (_cdg ,_abd .O );}else if _abd .R >=3{_cce :=append ([]byte {},_abd .O ...);for _ade :=0;_ade < 20;_ade ++{_daag :=append ([]byte {},_gbg ...);for _fbd :=0;_fbd < len (_gbg );_fbd ++{_daag [_fbd ]^=byte (19-_ade );};_gedd ,_bbbg :=_cac .NewCipher (_daag );
if _bbbg !=nil {return nil ,_cc .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_gedd .XORKeyStream (_cdg ,_cce );_cce =append ([]byte {},_cdg ...);};}else {return nil ,_cc .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");
};_gd ,_dcd :=_eca .alg6 (_abd ,_cdg );if _dcd !=nil {return nil ,nil ;};return _gd ,nil ;};func _db (_ae ,_gb string ,_ada int ,_aaa []byte )error {if len (_aaa )< _ada {return errInvalidField {Func :_ae ,Field :_gb ,Exp :_ada ,Got :len (_aaa )};};return nil ;
};const _eb ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";type ecb struct{_be _d .Block ;_ag int ;};func (_cd stdHandlerR4 )alg2 (_ged *StdEncryptDict ,_fa []byte )[]byte {_cag .Log .Trace ("\u0061\u006c\u0067\u0032");
_dfe :=_cd .paddedPass (_fa );_cff :=_a .New ();_cff .Write (_dfe );_cff .Write (_ged .O );var _dgd [4]byte ;_dac .LittleEndian .PutUint32 (_dgd [:],uint32 (_ged .P ));_cff .Write (_dgd [:]);_cag .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_dgd );
_cff .Write ([]byte (_cd .ID0 ));_cag .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ged .R ,_ged .EncryptMetadata );
if (_ged .R >=4)&&!_ged .EncryptMetadata {_cff .Write ([]byte {0xff,0xff,0xff,0xff});};_fcd :=_cff .Sum (nil );if _ged .R >=3{_cff =_a .New ();for _cba :=0;_cba < 50;_cba ++{_cff .Reset ();_cff .Write (_fcd [0:_cd .Length /8]);_fcd =_cff .Sum (nil );};
};if _ged .R >=3{return _fcd [0:_cd .Length /8];};return _fcd [0:5];};func (stdHandlerR4 )paddedPass (_cg []byte )[]byte {_dc :=make ([]byte ,32);_ccb :=copy (_dc ,_cg );for ;_ccb < 32;_ccb ++{_dc [_ccb ]=_eb [_ccb -len (_cg )];};return _dc ;};type errInvalidField struct{Func string ;
Field string ;Exp int ;Got int ;};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;type ecbEncrypter ecb ;func (_cdec stdHandlerR6 )alg2a (_bfe *StdEncryptDict ,_gbgg []byte )([]byte ,Permissions ,error ){if _dcf :=_db ("\u0061\u006c\u00672\u0061","\u004f",48,_bfe .O );_dcf !=nil {return nil ,0,_dcf ;};if _ef :=_db ("\u0061\u006c\u00672\u0061","\u0055",48,_bfe .U );
_ef !=nil {return nil ,0,_ef ;};if len (_gbgg )> 127{_gbgg =_gbgg [:127];};_cdc ,_edc :=_cdec .alg12 (_bfe ,_gbgg );if _edc !=nil {return nil ,0,_edc ;};var (_afa []byte ;_fee []byte ;_gca []byte ;);var _eab Permissions ;if len (_cdc )!=0{_eab =PermOwner ;
_bbcg :=make ([]byte ,len (_gbgg )+8+48);_adfd :=copy (_bbcg ,_gbgg );_adfd +=copy (_bbcg [_adfd :],_bfe .O [40:48]);copy (_bbcg [_adfd :],_bfe .U [0:48]);_afa =_bbcg ;_fee =_bfe .OE ;_gca =_bfe .U [0:48];}else {_cdc ,_edc =_cdec .alg11 (_bfe ,_gbgg );
if _edc ==nil &&len (_cdc )==0{_cdc ,_edc =_cdec .alg11 (_bfe ,[]byte (""));};if _edc !=nil {return nil ,0,_edc ;}else if len (_cdc )==0{return nil ,0,nil ;};_eab =_bfe .P ;_gdc :=make ([]byte ,len (_gbgg )+8);_eabb :=copy (_gdc ,_gbgg );copy (_gdc [_eabb :],_bfe .U [40:48]);
_afa =_gdc ;_fee =_bfe .UE ;_gca =nil ;};if _gbf :=_db ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_fee );_gbf !=nil {return nil ,0,_gbf ;};_fee =_fee [:32];_dgdd ,_edc :=_cdec .alg2b (_bfe .R ,_afa ,_gbgg ,_gca );if _edc !=nil {return nil ,0,_edc ;
};_cgb ,_edc :=_b .NewCipher (_dgdd [:32]);if _edc !=nil {return nil ,0,_edc ;};_ccf :=make ([]byte ,_b .BlockSize );_efc :=_d .NewCBCDecrypter (_cgb ,_ccf );_bba :=make ([]byte ,32);_efc .CryptBlocks (_bba ,_fee );if _bfe .R ==5{return _bba ,_eab ,nil ;
};_edc =_cdec .alg13 (_bfe ,_bba );if _edc !=nil {return nil ,0,_edc ;};return _bba ,_eab ,nil ;};func (_aec stdHandlerR6 )alg2b (R int ,_gaa ,_acc ,_gaab []byte )([]byte ,error ){if R ==5{return _aed (_gaa );};return _bg (_gaa ,_acc ,_gaab );};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_bad stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_cdgb :=_bad .alg3 (d .R ,upass ,opass );if _cdgb !=nil {_cag .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cdgb );
return nil ,_cdgb ;};d .O =O ;_cag .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_dbdc :=_bad .alg2 (d ,upass );U ,_cdgb :=_bad .alg5 (_dbdc ,upass );if _cdgb !=nil {_cag .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cdgb );
return nil ,_cdgb ;};d .U =U ;_cag .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _dbdc ,nil ;};func (_adf *ecbDecrypter )BlockSize ()int {return _adf ._ag };type stdHandlerR6 struct{};var _ StdHandler =stdHandlerR4 {};
