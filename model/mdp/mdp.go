//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_bg "errors";_c "fmt";_d "github.com/unidoc/unipdf/v3/core";);

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};func (_fgb *DiffResults )addError (_afcb *DiffResult ){if _fgb .Errors ==nil {_fgb .Errors =make ([]*DiffResult ,0);};_fgb .Errors =append (_fgb .Errors ,_afcb );};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_fe *defaultDiffPolicy )compareAnnots (_ffd int ,_eea ,_aac []_d .PdfObject )error {_cag :=make (map[int64 ]*_d .PdfObjectDictionary );for _ ,_bbf :=range _eea {_ccd ,_dbaa :=_d .GetIndirect (_bbf );
if !_dbaa {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ecc ,_dbaa :=_d .GetDict (_ccd .PdfObject );if !_dbaa {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cag [_ccd .ObjectNumber ]=_ecc ;};for _ ,_eeae :=range _aac {_cd ,_df :=_d .GetIndirect (_eeae );if !_df {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_aaa ,_df :=_d .GetDict (_cd .PdfObject );if !_df {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_afc ,_ :=_d .GetStringVal (_aaa .Get ("\u0054"));
_fadb ,_ :=_d .GetNameVal (_aaa .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_ce :=_cag [_cd .ObjectNumber ];!_ce {switch _fe ._g {case NoRestrictions ,FillFormsAndAnnots :_fe ._e .addWarningWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fadb ,_afc ));
default:_bbae ,_aec :=_d .GetDict (_cd .PdfObject );if !_aec {return _bg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bdg ,_aec :=_d .GetNameVal (_bbae .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_aec {return _bg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _bdg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fe ._g {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fe ._e .addWarningWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fadb ,_afc ));
default:_fe ._e .addErrorWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fadb ,_afc ));};}else {_fe ._e .addErrorWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_fadb ,_afc ));
};};}else {delete (_cag ,_cd .ObjectNumber );if _egg ,_ece :=_fe ._cf [_cd .ObjectNumber ];_ece {switch _fe ._g {case NoRestrictions ,FillFormsAndAnnots :_fe ._e .addWarningWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fadb ,_afc ));
default:_bc ,_dgg :=_d .GetIndirect (_egg );if !_dgg {return _bg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_agfa ,_dgg :=_d .GetDict (_bc .PdfObject );if !_dgg {return _bg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_dga ,_dgg :=_d .GetNameVal (_agfa .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_dgg {return _bg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _dga =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fe ._g {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fe ._e .addWarningWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fadb ,_afc ));
default:_fe ._e .addErrorWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fadb ,_afc ));};}else {_fe ._e .addErrorWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_fadb ,_afc ));
};};};};};for _ ,_fdg :=range _cag {_dag ,_ :=_d .GetStringVal (_fdg .Get ("\u0054"));_eda ,_ :=_d .GetNameVal (_fdg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _fe ._g {case NoRestrictions ,FillFormsAndAnnots :_fe ._e .addWarningWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_eda ,_dag ));
default:_fe ._e .addErrorWithDescription (_ffd ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_eda ,_dag ));};};return nil ;};

// String returns the state of the warning.
func (_dda *DiffResult )String ()string {return _c .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_dda .Description ,_dda .Revision );};func (_fada *DiffResults )addWarningWithDescription (_dgb int ,_ead string ){if _fada .Warnings ==nil {_fada .Warnings =make ([]*DiffResult ,0);
};_fada .Warnings =append (_fada .Warnings ,&DiffResult {Revision :_dgb ,Description :_ead });};type defaultDiffPolicy struct{_cf map[int64 ]_d .PdfObject ;_e *DiffResults ;_g DocMDPPermission ;};func (_dgfb *DiffResults )addWarning (_bcf *DiffResult ){if _dgfb .Warnings ==nil {_dgfb .Warnings =make ([]*DiffResult ,0);
};_dgfb .Warnings =append (_dgfb .Warnings ,_bcf );};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_cf :nil ,_e :&DiffResults {},_g :0};};func (_afe *defaultDiffPolicy )compareFields (_fad int ,_aff ,_cfde []_d .PdfObject )error {_ebg :=make (map[int64 ]*_d .PdfObjectDictionary );
for _ ,_gfc :=range _aff {_ac ,_gd :=_d .GetIndirect (_gfc );if !_gd {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bgb ,_gd :=_d .GetDict (_ac .PdfObject );
if !_gd {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ebg [_ac .ObjectNumber ]=_bgb ;};for _ ,_fg :=range _cfde {_ff ,_debg :=_d .GetIndirect (_fg );
if !_debg {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bgc ,_debg :=_d .GetDict (_ff .PdfObject );if !_debg {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_bgc .Get ("\u0054");if _ ,_gfcc :=_afe ._cf [_ff .ObjectNumber ];_gfcc {switch _afe ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_afe ._e .addWarningWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_afe ._e .addErrorWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_gaeg :=_ebg [_ff .ObjectNumber ];!_gaeg {switch _afe ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_afe ._e .addWarningWithDescription (_fad ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bgc .Get ("\u0054")));
default:_afe ._e .addErrorWithDescription (_fad ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bgc .Get ("\u0054")));};}else {delete (_ebg ,_ff .ObjectNumber );if _ ,_cc :=_afe ._cf [_ff .ObjectNumber ];
_cc {switch _afe ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_afe ._e .addWarningWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bgc .Get ("\u0054")));default:_afe ._e .addErrorWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bgc .Get ("\u0054")));
};};};if FT ,_egb :=_d .GetNameVal (_bgc .Get ("\u0046\u0054"));_egb {if FT =="\u0053\u0069\u0067"{if _caf ,_fgf :=_d .GetIndirect (_bgc .Get ("\u0056"));_fgf {if _ ,_gfd :=_afe ._cf [_caf .ObjectNumber ];_gfd {switch _afe ._g {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_afe ._e .addWarningWithDescription (_fad ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_afe ._e .addErrorWithDescription (_fad ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_abc :=range _ebg {switch _afe ._g {case NoRestrictions :_afe ._e .addWarningWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_abc .Get ("\u0054")));default:_afe ._e .addErrorWithDescription (_fad ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_abc .Get ("\u0054")));
};};return nil ;};func (_eef *DiffResults )addErrorWithDescription (_bfaf int ,_cec string ){if _eef .Errors ==nil {_eef .Errors =make ([]*DiffResult ,0);};_eef .Errors =append (_eef .Errors ,&DiffResult {Revision :_bfaf ,Description :_cec });};func (_fag *defaultDiffPolicy )comparePages (_eba int ,_bb ,_egc *_d .PdfIndirectObject )error {if _ ,_ffb :=_fag ._cf [_egc .ObjectNumber ];
_ffb {_fag ._e .addErrorWithDescription (_eba ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_dgd ,_ebd :=_d .GetDict (_egc .PdfObject );_baa ,_bage :=_d .GetDict (_bb .PdfObject );if !_ebd ||!_bage {return _bg .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ad ,_ebd :=_d .GetArray (_dgd .Get ("\u004b\u0069\u0064\u0073"));_aa ,_bage :=_d .GetArray (_baa .Get ("\u004b\u0069\u0064\u0073"));if !_ebd ||!_bage {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_aga :=_ad .Len ();if _aga > _aa .Len (){_aga =_aa .Len ();};for _ge :=0;_ge < _aga ;_ge ++{_affa ,_gbf :=_d .GetIndirect (_d .ResolveReference (_aa .Get (_ge )));_gee ,_dea :=_d .GetIndirect (_d .ResolveReference (_ad .Get (_ge )));if !_gbf ||!_dea {return _bg .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _affa .ObjectNumber !=_gee .ObjectNumber {_fag ._e .addErrorWithDescription (_eba ,_c .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_ge ));};_dba ,_gbf :=_d .GetDict (_gee );_agf ,_dea :=_d .GetDict (_affa );
if !_gbf ||!_dea {return _bg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_ege ,_ee :=_adc (_dba .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _ee !=nil {return _ee ;};_fc ,_ee :=_adc (_agf .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ee !=nil {return _ee ;};if _bfc :=_fag .compareAnnots (_eba ,_fc ,_ege );_bfc !=nil {return _bfc ;};};for _dgf :=_aga +1;_dgf <=_ad .Len ();_dgf ++{_fag ._e .addErrorWithDescription (_eba ,_c .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_dgf ));
};for _gde :=_aga +1;_gde <=_aa .Len ();_gde ++{_fag ._e .addErrorWithDescription (_eba ,_c .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gde ));};return nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_dc *_d .PdfParser ,_eaf *_d .PdfParser ,_bff *MDPParameters )(*DiffResults ,error );};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);

// IsPermitted returns true if changes permitted.
func (_faa *DiffResults )IsPermitted ()bool {return len (_faa .Errors )==0};func (_ec *defaultDiffPolicy )compareRevisions (_ae *_d .PdfParser ,_ga *_d .PdfParser )(*DiffResults ,error ){var _bd error ;_ec ._cf ,_bd =_ga .GetUpdatedObjects (_ae );if _bd !=nil {return &DiffResults {},_bd ;
};if len (_ec ._cf )==0{return &DiffResults {},nil ;};_gb :=_ga .GetRevisionNumber ();_fd ,_be :=_d .GetIndirect (_d .ResolveReference (_ae .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ca ,_de :=_d .GetIndirect (_d .ResolveReference (_ga .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_be ||!_de {return &DiffResults {},_bg .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_db ,_be :=_d .GetDict (_d .ResolveReference (_fd .PdfObject ));
_af ,_de :=_d .GetDict (_d .ResolveReference (_ca .PdfObject ));if !_be ||!_de {return &DiffResults {},_bg .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _dbb ,_fb :=_d .GetIndirect (_af .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fb {_eg ,_ed :=_d .GetDict (_dbb );if !_ed {return &DiffResults {},_bg .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cfd :=make ([]_d .PdfObject ,0);if _dd ,_ag :=_d .GetIndirect (_db .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ag {if _bfd ,_bge :=_d .GetDict (_dd );_bge {if _eb ,_dbf :=_d .GetArray (_bfd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_dbf {_cfd =_eb .Elements ();};};};_dbe ,_ed :=_d .GetArray (_eg .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_ed {return &DiffResults {},_bg .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _afa :=_ec .compareFields (_gb ,_cfd ,_dbe .Elements ());_afa !=nil {return &DiffResults {},_afa ;};};_fbg ,_deb :=_d .GetIndirect (_af .Get ("\u0050\u0061\u0067e\u0073"));if !_deb {return &DiffResults {},_bg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_fa ,_deb :=_d .GetIndirect (_db .Get ("\u0050\u0061\u0067e\u0073"));if !_deb {return &DiffResults {},_bg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _gae :=_ec .comparePages (_gb ,_fa ,_fbg );_gae !=nil {return &DiffResults {},_gae ;};return _ec ._e ,nil ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_ba *defaultDiffPolicy )ReviewFile (oldParser *_d .PdfParser ,newParser *_d .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_bg .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_bg .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_ba ._g =NoRestrictions ;}else {_ba ._g =params .DocMDPLevel ;};_f :=&DiffResults {};for _bf :=oldParser .GetRevisionNumber ()+1;_bf <=newParser .GetRevisionNumber ();_bf ++{_bag ,_ea :=newParser .GetRevision (_bf -1);
if _ea !=nil {return nil ,_ea ;};_a ,_ea :=newParser .GetRevision (_bf );if _ea !=nil {return nil ,_ea ;};_gf ,_ea :=_ba .compareRevisions (_bag ,_a );if _ea !=nil {return nil ,_ea ;};_f .Warnings =append (_f .Warnings ,_gf .Warnings ...);_f .Errors =append (_f .Errors ,_gf .Errors ...);
};return _f ,nil ;};func _adc (_bfa _d .PdfObject )([]_d .PdfObject ,error ){_gbfc :=make ([]_d .PdfObject ,0);if _bfa !=nil {_cg :=_bfa ;if _cdf ,_aacd :=_d .GetIndirect (_bfa );_aacd {_cg =_cdf .PdfObject ;};if _gbd ,_bgf :=_d .GetArray (_cg );_bgf {_gbfc =_gbd .Elements ();
}else {return nil ,_bg .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _gbfc ,nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;