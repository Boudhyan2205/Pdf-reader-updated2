//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_b "errors";_g "fmt";_e "github.com/unidoc/unipdf/v3/core";);const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_fg *defaultDiffPolicy )compareRevisions (_fa *_e .PdfParser ,_efe *_e .PdfParser )(*DiffResults ,error ){var _ea error ;_fg ._f ,_ea =_efe .GetUpdatedObjects (_fa );if _ea !=nil {return &DiffResults {},_ea ;
};if len (_fg ._f )==0{return &DiffResults {},nil ;};_ca :=_efe .GetRevisionNumber ();_gc ,_cd :=_e .GetIndirect (_e .ResolveReference (_fa .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ee ,_ded :=_e .GetIndirect (_e .ResolveReference (_efe .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_cd ||!_ded {return &DiffResults {},_b .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_bd ,_cd :=_e .GetDict (_e .ResolveReference (_gc .PdfObject ));
_fad ,_ded :=_e .GetDict (_e .ResolveReference (_ee .PdfObject ));if !_cd ||!_ded {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _ac ,_efc :=_e .GetIndirect (_fad .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_efc {_cag ,_db :=_e .GetDict (_ac );if !_db {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_be :=make ([]_e .PdfObject ,0);if _gce ,_df :=_e .GetIndirect (_bd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_df {if _beb ,_bc :=_e .GetDict (_gce );_bc {if _bed ,_dba :=_e .GetArray (_beb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_dba {_be =_bed .Elements ();};};};_ba ,_db :=_e .GetArray (_cag .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_db {return &DiffResults {},_b .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _bb :=_fg .compareFields (_ca ,_be ,_ba .Elements ());_bb !=nil {return &DiffResults {},_bb ;};};_dge ,_eg :=_e .GetIndirect (_fad .Get ("\u0050\u0061\u0067e\u0073"));if !_eg {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_ag ,_eg :=_e .GetIndirect (_bd .Get ("\u0050\u0061\u0067e\u0073"));if !_eg {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _cae :=_fg .comparePages (_ca ,_ag ,_dge );_cae !=nil {return &DiffResults {},_cae ;};return _fg ._a ,nil ;};func (_gb *DiffResults )addWarning (_dcd *DiffResult ){if _gb .Warnings ==nil {_gb .Warnings =make ([]*DiffResult ,0);};_gb .Warnings =append (_gb .Warnings ,_dcd );
};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;type defaultDiffPolicy struct{_f map[int64 ]_e .PdfObject ;_a *DiffResults ;_ef DocMDPPermission ;};func (_faf *defaultDiffPolicy )compareAnnots (_dgg int ,_eag ,_fc []_e .PdfObject )error {_bda :=make (map[int64 ]*_e .PdfObjectDictionary );
for _ ,_egg :=range _eag {_bbf ,_dbcb :=_e .GetIndirect (_egg );if !_dbcb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_cagf ,_dbcb :=_e .GetDict (_bbf .PdfObject );
if !_dbcb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bda [_bbf .ObjectNumber ]=_cagf ;};for _ ,_eff :=range _fc {_add ,_eggc :=_e .GetIndirect (_eff );
if !_eggc {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_effc ,_eggc :=_e .GetDict (_add .PdfObject );if !_eggc {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_bdad ,_ :=_e .GetStringVal (_effc .Get ("\u0054"));_eb ,_ :=_e .GetNameVal (_effc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_bdcc :=_bda [_add .ObjectNumber ];!_bdcc {switch _faf ._ef {case NoRestrictions ,FillFormsAndAnnots :_faf ._a .addWarningWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_eb ,_bdad ));
default:_bdca ,_aa :=_e .GetDict (_add .PdfObject );if !_aa {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bag ,_aa :=_e .GetNameVal (_bdca .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_aa {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _bag =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _faf ._ef {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_faf ._a .addWarningWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_eb ,_bdad ));
default:_faf ._a .addErrorWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_eb ,_bdad ));};}else {_faf ._a .addErrorWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_eb ,_bdad ));
};};}else {delete (_bda ,_add .ObjectNumber );if _cbd ,_bfg :=_faf ._f [_add .ObjectNumber ];_bfg {switch _faf ._ef {case NoRestrictions ,FillFormsAndAnnots :_faf ._a .addWarningWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_eb ,_bdad ));
default:_dabb ,_bbeg :=_e .GetIndirect (_cbd );if !_bbeg {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_cbb ,_bbeg :=_e .GetDict (_dabb .PdfObject );if !_bbeg {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_dc ,_bbeg :=_e .GetNameVal (_cbb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_bbeg {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _dc =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _faf ._ef {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_faf ._a .addWarningWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_eb ,_bdad ));
default:_faf ._a .addErrorWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_eb ,_bdad ));};}else {_faf ._a .addErrorWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_eb ,_bdad ));
};};};};};for _ ,_ae :=range _bda {_adc ,_ :=_e .GetStringVal (_ae .Get ("\u0054"));_egb ,_ :=_e .GetNameVal (_ae .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _faf ._ef {case NoRestrictions ,FillFormsAndAnnots :_faf ._a .addWarningWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_egb ,_adc ));
default:_faf ._a .addErrorWithDescription (_dgg ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_egb ,_adc ));};};return nil ;};func (_fgg *defaultDiffPolicy )comparePages (_ceg int ,_deb ,_efa *_e .PdfIndirectObject )error {if _ ,_bfa :=_fgg ._f [_efa .ObjectNumber ];
_bfa {_fgg ._a .addErrorWithDescription (_ceg ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_fb ,_ffa :=_e .GetDict (_efa .PdfObject );_dad ,_bbe :=_e .GetDict (_deb .PdfObject );if !_ffa ||!_bbe {return _b .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_fea ,_ffa :=_e .GetArray (_fb .Get ("\u004b\u0069\u0064\u0073"));_gd ,_bbe :=_e .GetArray (_dad .Get ("\u004b\u0069\u0064\u0073"));if !_ffa ||!_bbe {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_ecg :=_fea .Len ();if _ecg > _gd .Len (){_ecg =_gd .Len ();};for _bdc :=0;_bdc < _ecg ;_bdc ++{_ad ,_cdf :=_e .GetIndirect (_e .ResolveReference (_gd .Get (_bdc )));_gdf ,_egf :=_e .GetIndirect (_e .ResolveReference (_fea .Get (_bdc )));if !_cdf ||!_egf {return _b .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _ad .ObjectNumber !=_gdf .ObjectNumber {_fgg ._a .addErrorWithDescription (_ceg ,_g .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_bdc ));};_fdg ,_cdf :=_e .GetDict (_gdf );_fbd ,_egf :=_e .GetDict (_ad );
if !_cdf ||!_egf {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_bgd ,_ade :=_cdb (_fdg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _ade !=nil {return _ade ;};_abc ,_ade :=_cdb (_fbd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ade !=nil {return _ade ;};if _bdb :=_fgg .compareAnnots (_ceg ,_abc ,_bgd );_bdb !=nil {return _bdb ;};};for _cdg :=_ecg +1;_cdg <=_fea .Len ();_cdg ++{_fgg ._a .addErrorWithDescription (_ceg ,_g .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cdg ));
};for _bdd :=_ecg +1;_bdd <=_gd .Len ();_bdd ++{_fgg ._a .addErrorWithDescription (_ceg ,_g .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_bdd ));};return nil ;};func _cdb (_gcgf _e .PdfObject )([]_e .PdfObject ,error ){_accd :=make ([]_e .PdfObject ,0);
if _gcgf !=nil {_adf :=_gcgf ;if _bdda ,_bgb :=_e .GetIndirect (_gcgf );_bgb {_adf =_bdda .PdfObject ;};if _dbab ,_fga :=_e .GetArray (_adf );_fga {_accd =_dbab .Elements ();}else {return nil ,_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _accd ,nil ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_ddc *defaultDiffPolicy )compareFields (_ge int ,_agf ,_deg []_e .PdfObject )error {_cad :=make (map[int64 ]*_e .PdfObjectDictionary );for _ ,_ed :=range _agf {_cb ,_cc :=_e .GetIndirect (_ed );
if !_cc {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bf ,_cc :=_e .GetDict (_cb .PdfObject );if !_cc {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cad [_cb .ObjectNumber ]=_bf ;};for _ ,_cbc :=range _deg {_ggc ,_dac :=_e .GetIndirect (_cbc );if !_dac {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_dbc ,_dac :=_e .GetDict (_ggc .PdfObject );if !_dac {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_dbc .Get ("\u0054");if _ ,_bg :=_ddc ._f [_ggc .ObjectNumber ];
_bg {switch _ddc ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ddc ._a .addWarningWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));default:_ddc ._a .addErrorWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
};};if _ ,_dab :=_cad [_ggc .ObjectNumber ];!_dab {switch _ddc ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ddc ._a .addWarningWithDescription (_ge ,_g .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_dbc .Get ("\u0054")));
default:_ddc ._a .addErrorWithDescription (_ge ,_g .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_dbc .Get ("\u0054")));};}else {delete (_cad ,_ggc .ObjectNumber );if _ ,_ege :=_ddc ._f [_ggc .ObjectNumber ];
_ege {switch _ddc ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ddc ._a .addWarningWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_dbc .Get ("\u0054")));
default:_ddc ._a .addErrorWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_dbc .Get ("\u0054")));};};};if FT ,_cf :=_e .GetNameVal (_dbc .Get ("\u0046\u0054"));_cf {if FT =="\u0053\u0069\u0067"{if _ddd ,_ffc :=_e .GetIndirect (_dbc .Get ("\u0056"));
_ffc {if _ ,_cgb :=_ddc ._f [_ddd .ObjectNumber ];_cgb {switch _ddc ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ddc ._a .addWarningWithDescription (_ge ,_g .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_ddc ._a .addErrorWithDescription (_ge ,_g .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};};
};for _ ,_fd :=range _cad {switch _ddc ._ef {case NoRestrictions :_ddc ._a .addWarningWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_fd .Get ("\u0054")));default:_ddc ._a .addErrorWithDescription (_ge ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_fd .Get ("\u0054")));
};};return nil ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_ab *defaultDiffPolicy )ReviewFile (oldParser *_e .PdfParser ,newParser *_e .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_b .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_b .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_ab ._ef =NoRestrictions ;}else {_ab ._ef =params .DocMDPLevel ;};_d :=&DiffResults {};for _dg :=oldParser .GetRevisionNumber ()+1;_dg <=newParser .GetRevisionNumber ();_dg ++{_de ,_dd :=newParser .GetRevision (_dg -1);
if _dd !=nil {return nil ,_dd ;};_gg ,_dd :=newParser .GetRevision (_dg );if _dd !=nil {return nil ,_dd ;};_da ,_dd :=_ab .compareRevisions (_de ,_gg );if _dd !=nil {return nil ,_dd ;};_d .Warnings =append (_d .Warnings ,_da .Warnings ...);_d .Errors =append (_d .Errors ,_da .Errors ...);
};return _d ,nil ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_f :nil ,_a :&DiffResults {},_ef :0};};func (_fag *DiffResults )addWarningWithDescription (_bfaa int ,_dbb string ){if _fag .Warnings ==nil {_fag .Warnings =make ([]*DiffResult ,0);
};_fag .Warnings =append (_fag .Warnings ,&DiffResult {Revision :_bfaa ,Description :_dbb });};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_ecf *_e .PdfParser ,_edd *_e .PdfParser ,_ffg *MDPParameters )(*DiffResults ,error );};func (_efeb *DiffResults )addError (_gf *DiffResult ){if _efeb .Errors ==nil {_efeb .Errors =make ([]*DiffResult ,0);};_efeb .Errors =append (_efeb .Errors ,_gf );
};

// String returns the state of the warning.
func (_bde *DiffResult )String ()string {return _g .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_bde .Description ,_bde .Revision );};func (_efb *DiffResults )addErrorWithDescription (_bgbe int ,_eeb string ){if _efb .Errors ==nil {_efb .Errors =make ([]*DiffResult ,0);
};_efb .Errors =append (_efb .Errors ,&DiffResult {Revision :_bgbe ,Description :_eeb });};

// IsPermitted returns true if changes permitted.
func (_dee *DiffResults )IsPermitted ()bool {return len (_dee .Errors )==0};