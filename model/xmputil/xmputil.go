//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package xmputil provides abstraction used by the pdf document XMP Metadata.
package xmputil ;import (_e "errors";_cd "fmt";_b "github.com/trimmer-io/go-xmp/models/pdf";_d "github.com/trimmer-io/go-xmp/models/xmp_base";_ac "github.com/trimmer-io/go-xmp/models/xmp_mm";_ca "github.com/trimmer-io/go-xmp/xmp";_bc "github.com/unidoc/unipdf/v3/core";
_f "github.com/unidoc/unipdf/v3/internal/timeutils";_be "github.com/unidoc/unipdf/v3/internal/uuid";_cf "github.com/unidoc/unipdf/v3/model/xmputil/pdfaextension";_ga "github.com/unidoc/unipdf/v3/model/xmputil/pdfaid";_a "strconv";_g "time";);

// SetPdfAExtension sets the pdfaExtension XMP metadata.
func (_af *Document )SetPdfAExtension ()error {_gdb ,_afa :=_cf .MakeModel (_af ._bea );if _afa !=nil {return _afa ;};if _afa =_cf .FillModel (_af ._bea ,_gdb );_afa !=nil {return _afa ;};if _afa =_gdb .SyncToXMP (_af ._bea );_afa !=nil {return _afa ;};
return nil ;};

// MediaManagement are the values from the document media management metadata.
type MediaManagement struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
OriginalDocumentID GUID ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
DocumentID GUID ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
InstanceID GUID ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
DerivedFrom *MediaManagementDerivedFrom ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
VersionID string ;

// Versions is the history of the document versions along with the comments, timestamps and issuers.
Versions []MediaManagementVersion ;};

// PdfAID is the result of the XMP pdfaid metadata.
type PdfAID struct{Part int ;Conformance string ;};

// MediaManagementDerivedFrom is a structure that contains references of identifiers and versions
// from which given document was derived.
type MediaManagementDerivedFrom struct{OriginalDocumentID GUID ;DocumentID GUID ;InstanceID GUID ;VersionID string ;};

// GetGoXmpDocument gets direct access to the go-xmp.Document.
// All changes done to specified document would result in change of this document 'd'.
func (_fb *Document )GetGoXmpDocument ()*_ca .Document {return _fb ._bea };

// MediaManagementVersion is the version of the media management xmp metadata.
type MediaManagementVersion struct{VersionID string ;ModifyDate _g .Time ;Comments string ;Modifier string ;};

// Document is an implementation of the xmp document.
// It is a wrapper over go-xmp/xmp.Document that provides some Pdf predefined functionality.
type Document struct{_bea *_ca .Document };

// GUID is a string representing a globally unique identifier.
type GUID string ;

// PdfInfo is the xmp document pdf info.
type PdfInfo struct{InfoDict _bc .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;};

// GetPdfInfo gets the document pdf info.
func (_df *Document )GetPdfInfo ()(*PdfInfo ,bool ){_cg :=PdfInfo {};var _ae *_bc .PdfObjectDictionary ;_fbe :=func (_dcd string ,_cfg _bc .PdfObject ){if _ae ==nil {_ae =_bc .MakeDict ();};_ae .Set (_bc .PdfObjectName (_dcd ),_cfg );};_faa ,_fd :=_df ._bea .FindModel (_b .NsPDF ).(*_b .PDFInfo );
if !_fd {_dfc ,_db :=_df ._bea .FindModel (_d .NsXmp ).(*_d .XmpBase );if !_db {return nil ,false ;};if _dfc .CreatorTool !=""{_fbe ("\u0043r\u0065\u0061\u0074\u006f\u0072",_bc .MakeString (string (_dfc .CreatorTool )));};if !_dfc .CreateDate .IsZero (){_fbe ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_bc .MakeString (_f .FormatPdfTime (_dfc .CreateDate .Value ())));
};if !_dfc .ModifyDate .IsZero (){_fbe ("\u004do\u0064\u0044\u0061\u0074\u0065",_bc .MakeString (_f .FormatPdfTime (_dfc .ModifyDate .Value ())));};_cg .InfoDict =_ae ;return &_cg ,true ;};_cg .Copyright =_faa .Copyright ;_cg .PdfVersion =_faa .PDFVersion ;
_cg .Marked =bool (_faa .Marked );if len (_faa .Title )> 0{_fbe ("\u0054\u0069\u0074l\u0065",_bc .MakeString (_faa .Title .Default ()));};if len (_faa .Author )> 0{_fbe ("\u0041\u0075\u0074\u0068\u006f\u0072",_bc .MakeString (_faa .Author [0]));};if _faa .Keywords !=""{_fbe ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_bc .MakeString (_faa .Keywords ));
};if len (_faa .Subject )> 0{_fbe ("\u0053u\u0062\u006a\u0065\u0063\u0074",_bc .MakeString (_faa .Subject .Default ()));};if _faa .Creator !=""{_fbe ("\u0043r\u0065\u0061\u0074\u006f\u0072",_bc .MakeString (string (_faa .Creator )));};if _faa .Producer !=""{_fbe ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_bc .MakeString (string (_faa .Producer )));
};if _faa .Trapped {_fbe ("\u0054r\u0061\u0070\u0070\u0065\u0064",_bc .MakeName ("\u0054\u0072\u0075\u0065"));};if !_faa .CreationDate .IsZero (){_fbe ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_bc .MakeString (_f .FormatPdfTime (_faa .CreationDate .Value ())));
};if !_faa .ModifyDate .IsZero (){_fbe ("\u004do\u0064\u0044\u0061\u0074\u0065",_bc .MakeString (_f .FormatPdfTime (_faa .ModifyDate .Value ())));};_cg .InfoDict =_ae ;return &_cg ,true ;};

// GetMediaManagement gets the media management metadata from provided xmp document.
func (_dgc *Document )GetMediaManagement ()(*MediaManagement ,bool ){_aa :=_ac .FindModel (_dgc ._bea );if _aa ==nil {return nil ,false ;};_dd :=make ([]MediaManagementVersion ,len (_aa .Versions ));for _fc ,_bab :=range _aa .Versions {_dd [_fc ]=MediaManagementVersion {VersionID :_bab .Version ,ModifyDate :_bab .ModifyDate .Value (),Comments :_bab .Comments ,Modifier :_bab .Modifier };
};_ced :=&MediaManagement {OriginalDocumentID :GUID (_aa .OriginalDocumentID .Value ()),DocumentID :GUID (_aa .DocumentID .Value ()),InstanceID :GUID (_aa .InstanceID .Value ()),VersionID :_aa .VersionID ,Versions :_dd };if _aa .DerivedFrom !=nil {_ced .DerivedFrom =&MediaManagementDerivedFrom {OriginalDocumentID :GUID (_aa .DerivedFrom .OriginalDocumentID ),DocumentID :GUID (_aa .DerivedFrom .DocumentID ),InstanceID :GUID (_aa .DerivedFrom .InstanceID ),VersionID :_aa .DerivedFrom .VersionID };
};return _ced ,true ;};

// NewDocument creates a new document without any previous xmp information.
func NewDocument ()*Document {_fg :=_ca .NewDocument ();return &Document {_bea :_fg }};

// GetPdfaExtensionSchemas gets a pdfa extension schemas.
func (_cc *Document )GetPdfaExtensionSchemas ()([]_cf .Schema ,error ){_ed :=_cc ._bea .FindModel (_cf .Namespace );if _ed ==nil {return nil ,nil ;};_bcd ,_cdb :=_ed .(*_cf .Model );if !_cdb {return nil ,_cd .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u006d\u006f\u0064\u0065l f\u006fr \u0070\u0064\u0066\u0061\u0045\u0078\u0074en\u0073\u0069\u006f\u006e\u0073\u003a\u0020%\u0054",_ed );
};return _bcd .Schemas ,nil ;};

// LoadDocument loads up the xmp document from provided input stream.
func LoadDocument (stream []byte )(*Document ,error ){_gd :=_ca .NewDocument ();if _fa :=_ca .Unmarshal (stream ,_gd );_fa !=nil {return nil ,_fa ;};return &Document {_bea :_gd },nil ;};

// Marshal the document into xml byte stream.
func (_gdf *Document )Marshal ()([]byte ,error ){if _gdf ._bea .IsDirty (){if _gf :=_gdf ._bea .SyncModels ();_gf !=nil {return nil ,_gf ;};};return _ca .Marshal (_gdf ._bea );};

// GetPdfAID gets the pdfaid xmp metadata model.
func (_cgf *Document )GetPdfAID ()(*PdfAID ,bool ){_gbd ,_ec :=_cgf ._bea .FindModel (_ga .Namespace ).(*_ga .Model );if !_ec {return nil ,false ;};return &PdfAID {Part :_gbd .Part ,Conformance :_gbd .Conformance },true ;};

// PdfInfoOptions are the options used for setting pdf info.
type PdfInfoOptions struct{InfoDict _bc .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;

// Overwrite if set to true, overwrites all values found in the current pdf info xmp model to the ones provided.
Overwrite bool ;};

// SetPdfAID sets up pdfaid xmp metadata.
// In example: Part: '1' Conformance: 'B' states for PDF/A 1B.
func (_ge *Document )SetPdfAID (part int ,conformance string )error {_fcd ,_fe :=_ga .MakeModel (_ge ._bea );if _fe !=nil {return _fe ;};_fcd .Part =part ;_fcd .Conformance =conformance ;if _feb :=_fcd .SyncToXMP (_ge ._bea );_feb !=nil {return _feb ;};
return nil ;};

// MarshalIndent the document into xml byte stream with predefined prefix and indent.
func (_ff *Document )MarshalIndent (prefix ,indent string )([]byte ,error ){if _ff ._bea .IsDirty (){if _bg :=_ff ._bea .SyncModels ();_bg !=nil {return nil ,_bg ;};};return _ca .MarshalIndent (_ff ._bea ,prefix ,indent );};

// SetMediaManagement sets up XMP media management metadata: namespace xmpMM.
func (_ag *Document )SetMediaManagement (options *MediaManagementOptions )error {_dg ,_ab :=_ac .MakeModel (_ag ._bea );if _ab !=nil {return _ab ;};if options ==nil {options =new (MediaManagementOptions );};_ce :=_ac .ResourceRef {};if _dg .OriginalDocumentID .IsZero (){if options .OriginalDocumentID !=""{_dg .OriginalDocumentID =_ca .GUID (options .OriginalDocumentID );
}else {_beg ,_fff :=_be .NewUUID ();if _fff !=nil {return _fff ;};_dg .OriginalDocumentID =_ca .GUID (_beg .String ());};}else {_ce .OriginalDocumentID =_dg .OriginalDocumentID ;};switch {case options .DocumentID !="":_dg .DocumentID =_ca .GUID (options .DocumentID );
case options .NewDocumentID ||_dg .DocumentID .IsZero ():if !_dg .DocumentID .IsZero (){_ce .DocumentID =_dg .DocumentID ;};_cge ,_gbg :=_be .NewUUID ();if _gbg !=nil {return _gbg ;};_dg .DocumentID =_ca .GUID (_cge .String ());};if !_dg .InstanceID .IsZero (){_ce .InstanceID =_dg .InstanceID ;
};_dg .InstanceID =_ca .GUID (options .InstanceID );if _dg .InstanceID ==""{_gbe ,_caa :=_be .NewUUID ();if _caa !=nil {return _caa ;};_dg .InstanceID =_ca .GUID (_gbe .String ());};if !_ce .IsZero (){_dg .DerivedFrom =&_ce ;};_bdf :=options .VersionID ;
if _dg .VersionID !=""{_edg ,_abc :=_a .Atoi (_dg .VersionID );if _abc !=nil {_bdf =_a .Itoa (len (_dg .Versions )+1);}else {_bdf =_a .Itoa (_edg +1);};};if _bdf ==""{_bdf ="\u0031";};_dg .VersionID =_bdf ;if _ab =_dg .SyncToXMP (_ag ._bea );_ab !=nil {return _ab ;
};return nil ;};

// SetPdfInfo sets the pdf info into selected document.
func (_acb *Document )SetPdfInfo (options *PdfInfoOptions )error {if options ==nil {return _e .New ("\u006ei\u006c\u0020\u0070\u0064\u0066\u0020\u006f\u0070\u0074\u0069\u006fn\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fbb ,_ad :=_b .MakeModel (_acb ._bea );
if _ad !=nil {return _ad ;};if options .Overwrite {*_fbb =_b .PDFInfo {};};if options .InfoDict !=nil {_dc ,_gff :=_bc .GetDict (options .InfoDict );if !_gff {return _cd .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",options .InfoDict );
};var _ba *_bc .PdfObjectString ;for _ ,_bag :=range _dc .Keys (){switch _bag {case "\u0054\u0069\u0074l\u0065":_ba ,_gff =_bc .GetString (_dc .Get ("\u0054\u0069\u0074l\u0065"));if _gff {_fbb .Title =_ca .NewAltString (_ba );};case "\u0041\u0075\u0074\u0068\u006f\u0072":_ba ,_gff =_bc .GetString (_dc .Get ("\u0041\u0075\u0074\u0068\u006f\u0072"));
if _gff {_fbb .Author =_ca .NewStringList (_ba .String ());};case "\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":_ba ,_gff =_bc .GetString (_dc .Get ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073"));if _gff {_fbb .Keywords =_ba .String ();};case "\u0043r\u0065\u0061\u0074\u006f\u0072":_ba ,_gff =_bc .GetString (_dc .Get ("\u0043r\u0065\u0061\u0074\u006f\u0072"));
if _gff {_fbb .Creator =_ca .AgentName (_ba .String ());};case "\u0053u\u0062\u006a\u0065\u0063\u0074":_ba ,_gff =_bc .GetString (_dc .Get ("\u0053u\u0062\u006a\u0065\u0063\u0074"));if _gff {_fbb .Subject =_ca .NewAltString (_ba .String ());};case "\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":_ba ,_gff =_bc .GetString (_dc .Get ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072"));
if _gff {_fbb .Producer =_ca .AgentName (_ba .String ());};case "\u0054r\u0061\u0070\u0070\u0065\u0064":_gg ,_gc :=_bc .GetName (_dc .Get ("\u0054r\u0061\u0070\u0070\u0065\u0064"));if _gc {switch _gg .String (){case "\u0054\u0072\u0075\u0065":_fbb .Trapped =true ;
case "\u0046\u0061\u006cs\u0065":_fbb .Trapped =false ;default:_fbb .Trapped =true ;};};case "\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":if _cda ,_aca :=_bc .GetString (_dc .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065"));
_aca &&_cda .String ()!=""{_gag ,_bce :=_f .ParsePdfTime (_cda .String ());if _bce !=nil {return _cd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0072e\u0061\u0074\u0069\u006f\u006e\u0044\u0061t\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0077",_bce );
};_fbb .CreationDate =_ca .NewDate (_gag );};case "\u004do\u0064\u0044\u0061\u0074\u0065":if _afe ,_gb :=_bc .GetString (_dc .Get ("\u004do\u0064\u0044\u0061\u0074\u0065"));_gb &&_afe .String ()!=""{_ef ,_bd :=_f .ParsePdfTime (_afe .String ());if _bd !=nil {return _cd .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w",_bd );
};_fbb .ModifyDate =_ca .NewDate (_ef );};};};};if options .PdfVersion !=""{_fbb .PDFVersion =options .PdfVersion ;};if options .Marked {_fbb .Marked =_ca .Bool (options .Marked );};if options .Copyright !=""{_fbb .Copyright =options .Copyright ;};if _ad =_fbb .SyncToXMP (_acb ._bea );
_ad !=nil {return _ad ;};return nil ;};

// MediaManagementOptions are the options for the Media management xmp metadata.
type MediaManagementOptions struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
// By default, this value is generated.
OriginalDocumentID string ;

// NewDocumentID is a flag which generates a new Document identifier while setting media management.
// This value should be set to true only if the document is stored and saved as new document.
// Otherwise, if the document is modified and overwrites previous file, it should be set to false.
NewDocumentID bool ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
// By default, this value is generated if NewDocumentID is true or previous doesn't exist.
DocumentID string ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
// By default, this value is generated.
InstanceID string ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
// By default, the derived from structure is filled from previous XMP metadata (if exists).
DerivedFrom string ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
// By default, this values is incremented or set to the next version number.
VersionID string ;

// ModifyComment is a comment to given modification
ModifyComment string ;

// ModifyDate is a custom modification date for the versions.
// By default, this would be set to time.Now().
ModifyDate _g .Time ;

// Modifier is a person who did the modification.
Modifier string ;};