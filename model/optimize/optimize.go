//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_cb "bytes";_c "crypto/md5";_da "errors";_eb "fmt";_g "github.com/unidoc/unipdf/v3/common";_bb "github.com/unidoc/unipdf/v3/contentstream";_be "github.com/unidoc/unipdf/v3/core";_gb "github.com/unidoc/unipdf/v3/extractor";_b "github.com/unidoc/unipdf/v3/internal/imageutil";
_d "github.com/unidoc/unipdf/v3/internal/textencoding";_cf "github.com/unidoc/unipdf/v3/model";_a "github.com/unidoc/unitype";_e "golang.org/x/image/draw";_ef "math";_ca "strings";);

// Append appends optimizers to the chain.
func (_cc *Chain )Append (optimizers ..._cf .Optimizer ){_cc ._bf =append (_cc ._bf ,optimizers ...)};func _fgf (_abad []_be .PdfObject ,_feca map[_be .PdfObject ]_be .PdfObject ){if len (_feca )==0{return ;};for _fafdg ,_eadg :=range _abad {if _dfgd ,_egba :=_feca [_eadg ];
_egba {_abad [_fafdg ]=_dfgd ;continue ;};_feca [_eadg ]=_eadg ;switch _bffb :=_eadg .(type ){case *_be .PdfObjectArray :_bcc :=make ([]_be .PdfObject ,_bffb .Len ());copy (_bcc ,_bffb .Elements ());_fgf (_bcc ,_feca );for _aagc ,_gbdb :=range _bcc {_bffb .Set (_aagc ,_gbdb );
};case *_be .PdfObjectStreams :_fgf (_bffb .Elements (),_feca );case *_be .PdfObjectStream :_abef :=[]_be .PdfObject {_bffb .PdfObjectDictionary };_fgf (_abef ,_feca );_bffb .PdfObjectDictionary =_abef [0].(*_be .PdfObjectDictionary );case *_be .PdfObjectDictionary :_fagc :=_bffb .Keys ();
_fae :=make ([]_be .PdfObject ,len (_fagc ));for _ccfg ,_bcbb :=range _fagc {_fae [_ccfg ]=_bffb .Get (_bcbb );};_fgf (_fae ,_feca );for _dbf ,_fccf :=range _fagc {_bffb .Set (_fccf ,_fae [_dbf ]);};case *_be .PdfIndirectObject :_fab :=[]_be .PdfObject {_bffb .PdfObject };
_fgf (_fab ,_feca );_bffb .PdfObject =_fab [0];};};};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_be .PdfObjectStream ;PPI float64 ;};func _edcf (_gcfd []*_be .PdfIndirectObject )map[string ][]string {_gdag :=map[string ][]string {};
for _ ,_fed :=range _gcfd {_dcfd ,_ffc :=_be .GetDict (_fed .PdfObject );if !_ffc {continue ;};_eged :=_dcfd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_ffg :=_be .TraceToDirectObject (_eged );_aaf :="";if _dca ,_gfbg :=_ffg .(*_be .PdfObjectArray );
_gfbg {var _adf []string ;for _ ,_bab :=range _dca .Elements (){_aecc ,_gdbc :=_dfeb (_bab );if _gdbc !=nil {continue ;};_adf =append (_adf ,_aecc );};_aaf =_ca .Join (_adf ,"\u0020");};if _aff ,_dgbb :=_ffg .(*_be .PdfObjectStream );_dgbb {_ebgg ,_efd :=_be .DecodeStream (_aff );
if _efd !=nil {continue ;};_aaf =string (_ebgg );};_dadbd :=_bb .NewContentStreamParser (_aaf );_cec ,_bdff :=_dadbd .Parse ();if _bdff !=nil {continue ;};for _ ,_addc :=range *_cec {_efb :=_addc .Operand ;_dfa :=_addc .Params ;switch _efb {case "\u0044\u006f":_feda :=_dfa [0].String ();
if _ ,_afda :=_gdag ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_afda {_gdag ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_feda };}else {_gdag ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_gdag ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_feda );
};case "\u0054\u0066":_bedf :=_dfa [0].String ();if _ ,_dea :=_gdag ["\u0046\u006f\u006e\u0074"];!_dea {_gdag ["\u0046\u006f\u006e\u0074"]=[]string {_bedf };}else {_gdag ["\u0046\u006f\u006e\u0074"]=append (_gdag ["\u0046\u006f\u006e\u0074"],_bedf );};
case "\u0067\u0073":_gcb :=_dfa [0].String ();if _ ,_baae :=_gdag ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_baae {_gdag ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_gcb };}else {_gdag ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_gdag ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_gcb );
};};};};return _gdag ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _cbg (_add _be .PdfObject )[]content {if _add ==nil {return nil ;};_dbb ,_dede :=_be .GetArray (_add );if !_dede {_g .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _ceg []content ;for _ ,_efcb :=range _dbb .Elements (){_dag ,_ggc :=_be .GetDict (_efcb );if !_ggc {_g .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_aee ,_ggc :=_be .GetDict (_dag .Get ("\u0041\u0050"));if !_ggc {_g .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cfb :=_be .TraceToDirectObject (_aee .Get ("\u004e"));
if _cfb ==nil {_g .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _dec *_be .PdfObjectStream ;switch _bdfd :=_cfb .(type ){case *_be .PdfObjectDictionary :_ecce ,_ede :=_be .GetName (_dag .Get ("\u0041\u0053"));
if !_ede {_g .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dec ,_ede =_be .GetStream (_bdfd .Get (*_ecce ));if !_ede {_g .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_be .PdfObjectStream :_dec =_bdfd ;};if _dec ==nil {_g .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_beb ,_dfea :=_cf .NewXObjectFormFromStream (_dec );if _dfea !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dfea );
continue ;};_aa ,_dfea :=_beb .GetContentStream ();if _dfea !=nil {_g .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_dfea );continue ;};_ceg =append (_ceg ,content {_edc :string (_aa ),_gbd :_beb .Resources });
};return _ceg ;};func _geb (_gbc *_cf .XObjectImage ,_effe imageModifications )error {_gddg ,_egc :=_gbc .ToImage ();if _egc !=nil {return _egc ;};if _effe .Scale !=0{_gddg ,_egc =_eecb (_gddg ,_effe .Scale );if _egc !=nil {return _egc ;};};if _effe .Encoding !=nil {_gbc .Filter =_effe .Encoding ;
};_gbc .Decode =nil ;switch _accf :=_gbc .Filter .(type ){case *_be .FlateEncoder :if _accf .Predictor !=1&&_accf .Predictor !=11{_accf .Predictor =1;};};if _egc =_gbc .SetImage (_gddg ,nil );_egc !=nil {_g .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_egc );
return _egc ;};_gbc .ToPdfObject ();return nil ;};type content struct{_edc string ;_gbd *_cf .PdfPageResources ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _ebf (_bdf []_be .PdfObject )(_fcg map[*_be .PdfObjectStream ]struct{},_gg error ){_fcg =map[*_be .PdfObjectStream ]struct{}{};_dd :=map[*_cf .PdfFont ]struct{}{};_bbc :=_ffcg (_bdf );for _ ,_bde :=range _bbc ._edcc {_bed ,_dad :=_be .GetDict (_bde .PdfObject );
if !_dad {continue ;};_bede ,_dad :=_be .GetDict (_bed .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dad {continue ;};_ebg ,_ :=_gbgb (_bed .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_efg ,_dff :=_cf .NewPdfPageResourcesFromDict (_bede );
if _dff !=nil {return nil ,_dff ;};_caed :=[]content {{_edc :_ebg ,_gbd :_efg }};_bcd :=_cbg (_bed .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _bcd !=nil {_caed =append (_caed ,_bcd ...);};for _ ,_gde :=range _caed {_gcd ,_gcf :=_gb .NewFromContents (_gde ._edc ,_gde ._gbd );
if _gcf !=nil {return nil ,_gcf ;};_egd ,_ ,_ ,_gcf :=_gcd .ExtractPageText ();if _gcf !=nil {return nil ,_gcf ;};for _ ,_aece :=range _egd .Marks ().Elements (){if _aece .Font ==nil {continue ;};if _ ,_dbd :=_dd [_aece .Font ];!_dbd {_dd [_aece .Font ]=struct{}{};
};};};};_bcdb :=map[*_be .PdfObjectStream ][]*_cf .PdfFont {};for _gfca :=range _dd {_dgb :=_gfca .FontDescriptor ();if _dgb ==nil ||_dgb .FontFile2 ==nil {continue ;};_cfae ,_bdb :=_be .GetStream (_dgb .FontFile2 );if !_bdb {continue ;};_bcdb [_cfae ]=append (_bcdb [_cfae ],_gfca );
};for _ecbg :=range _bcdb {var _fcb []rune ;var _fcc []_a .GlyphIndex ;for _ ,_gdde :=range _bcdb [_ecbg ]{switch _gdc :=_gdde .Encoder ().(type ){case *_d .IdentityEncoder :_eee :=_gdc .RegisteredRunes ();_bbb :=make ([]_a .GlyphIndex ,len (_eee ));for _ebd ,_gfb :=range _eee {_bbb [_ebd ]=_a .GlyphIndex (_gfb );
};_fcc =append (_fcc ,_bbb ...);case *_d .TrueTypeFontEncoder :_dcd :=_gdc .RegisteredRunes ();_fcb =append (_fcb ,_dcd ...);case _d .SimpleEncoder :_gdf :=_gdc .Charcodes ();for _ ,_fa :=range _gdf {_bg ,_cgf :=_gdc .CharcodeToRune (_fa );if !_cgf {_g .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fa );
continue ;};_fcb =append (_fcb ,_bg );};};};_gg =_eddb (_ecbg ,_fcb ,_fcc );if _gg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_gg );
return nil ,_gg ;};_fcg [_ecbg ]=struct{}{};};return _fcg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cbf *CleanContentstream )Optimize (objects []_be .PdfObject )(_gf []_be .PdfObject ,_agf error ){_dc :=map[*_be .PdfObjectStream ]struct{}{};var _fc []*_be .PdfObjectStream ;_fca :=func (_eg *_be .PdfObjectStream ){if _ ,_cba :=_dc [_eg ];!_cba {_dc [_eg ]=struct{}{};
_fc =append (_fc ,_eg );};};_cbdg :=map[_be .PdfObject ]bool {};_gd :=map[_be .PdfObject ]bool {};for _ ,_ee :=range objects {switch _de :=_ee .(type ){case *_be .PdfIndirectObject :switch _fge :=_de .PdfObject .(type ){case *_be .PdfObjectDictionary :if _ccg ,_cg :=_be .GetName (_fge .Get ("\u0054\u0079\u0070\u0065"));
!_cg ||_ccg .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _cae ,_ga :=_be .GetStream (_fge .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ga {_fca (_cae );}else if _cfa ,_gfc :=_be .GetArray (_fge .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_gfc {var _bba []*_be .PdfObjectStream ;for _ ,_gdd :=range _cfa .Elements (){if _agc ,_dbe :=_be .GetStream (_gdd );_dbe {_bba =append (_bba ,_agc );};};if len (_bba )> 0{var _aca _cb .Buffer ;for _ ,_gc :=range _bba {if _eeg ,_eec :=_be .DecodeStream (_gc );
_eec ==nil {_aca .Write (_eeg );};_cbdg [_gc ]=true ;};_cd ,_gbe :=_be .MakeStream (_aca .Bytes (),_be .NewFlateEncoder ());if _gbe !=nil {return nil ,_gbe ;};_gd [_cd ]=true ;_fge .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_cd );_fca (_cd );
};};};case *_be .PdfObjectStream :if _bea ,_bcf :=_be .GetName (_de .Get ("\u0054\u0079\u0070\u0065"));!_bcf ||_bea .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _edd ,_ace :=_be .GetName (_de .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_ace ||_edd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_fca (_de );};};for _ ,_ded :=range _fc {_agf =_bd (_ded );if _agf !=nil {return nil ,_agf ;};};_gf =nil ;for _ ,_gee :=range objects {if _cbdg [_gee ]{continue ;};_gf =append (_gf ,_gee );
};for _aec :=range _gd {_gf =append (_gf ,_aec );};return _gf ,nil ;};type objectStructure struct{_efeb *_be .PdfObjectDictionary ;_bedee *_be .PdfObjectDictionary ;_edcc []*_be .PdfIndirectObject ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_fcbf :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_fcbf .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_fcbf .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ced :=new (ImagePPI );
_ced .ImageUpperPPI =options .ImageUpperPPI ;_fcbf .Append (_ced );};if options .ImageQuality > 0{_ffdb :=new (Image );_ffdb .ImageQuality =options .ImageQuality ;_fcbf .Append (_ffdb );};if options .CombineDuplicateDirectObjects {_fcbf .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_fcbf .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_fcbf .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_fcbf .Append (new (ObjectStreams ));
};if options .CompressStreams {_fcbf .Append (new (CompressStreams ));};if options .CleanUnusedResources {_fcbf .Append (new (CleanUnusedResources ));};return _fcbf ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _dfeb (_affe _be .PdfObject )(string ,error ){_gdcg :=_be .TraceToDirectObject (_affe );switch _afc :=_gdcg .(type ){case *_be .PdfObjectString :return _afc .Str (),nil ;case *_be .PdfObjectStream :_dgf ,_dfd :=_be .DecodeStream (_afc );
if _dfd !=nil {return "",_dfd ;};return string (_dgf ),nil ;};return "",_eb .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_gdcg );
};func _gdea (_dge []_be .PdfObject )(map[_be .PdfObject ]struct{},error ){_fe :=_ffcg (_dge );_begb :=_fe ._edcc ;_dbg :=make (map[_be .PdfObject ]struct{});_bfc :=_edcf (_begb );for _ ,_bgd :=range _begb {_aae ,_ege :=_be .GetDict (_bgd .PdfObject );
if !_ege {continue ;};_dfg ,_ege :=_be .GetDict (_aae .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ege {continue ;};_gff :=_bfc ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_cef ,_ege :=_be .GetDict (_dfg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
if _ege {_begbd :=_afdc (_cef );for _ ,_ggd :=range _begbd {if _ffce (_ggd ,_gff ){continue ;};_ega :=*_be .MakeName (_ggd );_gfe :=_cef .Get (_ega );_dbg [_gfe ]=struct{}{};_cef .Remove (_ega );_aba :=_caa (_gfe ,_dbg );if _aba !=nil {_g .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_gfe );
};};};_ggcc ,_ege :=_be .GetDict (_dfg .Get ("\u0046\u006f\u006e\u0074"));_egda :=_bfc ["\u0046\u006f\u006e\u0074"];if _ege {_ff :=_afdc (_ggcc );for _ ,_cfdg :=range _ff {if _ffce (_cfdg ,_egda ){continue ;};_cbdgb :=*_be .MakeName (_cfdg );_ffd :=_ggcc .Get (_cbdgb );
_dbg [_ffd ]=struct{}{};_ggcc .Remove (_cbdgb );_efa :=_caa (_ffd ,_dbg );if _efa !=nil {_g .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_ffd );
};};};_cad ,_ege :=_be .GetDict (_dfg .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _ege {_edca :=_afdc (_cad );_gda :=_bfc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_cgc :=range _edca {if _ffce (_cgc ,_gda ){continue ;};_ccc :=*_be .MakeName (_cgc );
_eac :=_cad .Get (_ccc );_dbg [_eac ]=struct{}{};_cad .Remove (_ccc );_dba :=_caa (_eac ,_dbg );if _dba !=nil {_g .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_eac );
};};};};return _dbg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bfd *Image )Optimize (objects []_be .PdfObject )(_cbfg []_be .PdfObject ,_ecf error ){if _bfd .ImageQuality <=0{return objects ,nil ;};_daa :=_eaf (objects );if len (_daa )==0{return objects ,nil ;};_fcd :=make (map[_be .PdfObject ]_be .PdfObject );
_egb :=make (map[_be .PdfObject ]struct{});for _ ,_ccfa :=range _daa {_decd :=_ccfa .Stream .Get ("\u0053\u004d\u0061s\u006b");_egb [_decd ]=struct{}{};};for _baag ,_cgge :=range _daa {_bcg :=_cgge .Stream ;if _ ,_dcdc :=_egb [_bcg ];_dcdc {continue ;};
_abb ,_agcd :=_cf .NewXObjectImageFromStream (_bcg );if _agcd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agcd );continue ;};switch _abb .Filter .(type ){case *_be .JBIG2Encoder :continue ;case *_be .CCITTFaxEncoder :continue ;
};_bbcb ,_agcd :=_abb .ToImage ();if _agcd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agcd );continue ;};_fff :=_be .NewDCTEncoder ();_fff .ColorComponents =_bbcb .ColorComponents ;_fff .Quality =_bfd .ImageQuality ;
_fff .BitsPerComponent =_cgge .BitsPerComponent ;_fff .Width =_cgge .Width ;_fff .Height =_cgge .Height ;_efgca ,_agcd :=_fff .EncodeBytes (_bbcb .Data );if _agcd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agcd );
continue ;};var _abf _be .StreamEncoder ;_abf =_fff ;{_cafa :=_be .NewFlateEncoder ();_egaa :=_be .NewMultiEncoder ();_egaa .AddEncoder (_cafa );_egaa .AddEncoder (_fff );_afbb ,_dded :=_egaa .EncodeBytes (_bbcb .Data );if _dded !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dded );
continue ;};if len (_afbb )< len (_efgca ){_g .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_efgca ),len (_afbb ),len (_bcg .Stream ));
_efgca =_afbb ;_abf =_egaa ;};};_cece :=len (_bcg .Stream );if _cece < len (_efgca ){continue ;};_gabe :=&_be .PdfObjectStream {Stream :_efgca };_gabe .PdfObjectReference =_bcg .PdfObjectReference ;_gabe .PdfObjectDictionary =_be .MakeDict ();_gabe .Merge (_bcg .PdfObjectDictionary );
_gabe .Merge (_abf .MakeStreamDict ());_gabe .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_be .MakeInteger (int64 (len (_efgca ))));_fcd [_bcg ]=_gabe ;_daa [_baag ].Stream =_gabe ;};_cbfg =make ([]_be .PdfObject ,len (objects ));copy (_cbfg ,objects );
_fgf (_cbfg ,_fcd );return _cbfg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edcd *CombineDuplicateDirectObjects )Optimize (objects []_be .PdfObject )(_agff []_be .PdfObject ,_fbd error ){_gggdd (objects );_dbc :=make (map[string ][]*_be .PdfObjectDictionary );var _eagf func (_fcgg *_be .PdfObjectDictionary );_eagf =func (_dga *_be .PdfObjectDictionary ){for _ ,_ecbgb :=range _dga .Keys (){_adb :=_dga .Get (_ecbgb );
if _ddca ,_cbe :=_adb .(*_be .PdfObjectDictionary );_cbe {_dcfc :=_c .New ();_dcfc .Write ([]byte (_ddca .WriteString ()));_afdb :=string (_dcfc .Sum (nil ));_dbc [_afdb ]=append (_dbc [_afdb ],_ddca );_eagf (_ddca );};};};for _ ,_aed :=range objects {_edf ,_dfc :=_aed .(*_be .PdfIndirectObject );
if !_dfc {continue ;};if _fdf ,_bfb :=_edf .PdfObject .(*_be .PdfObjectDictionary );_bfb {_eagf (_fdf );};};_ecbe :=make ([]_be .PdfObject ,0,len (_dbc ));_bbd :=make (map[_be .PdfObject ]_be .PdfObject );for _ ,_caab :=range _dbc {if len (_caab )< 2{continue ;
};_gdg :=_be .MakeDict ();_gdg .Merge (_caab [0]);_gbg :=_be .MakeIndirectObject (_gdg );_ecbe =append (_ecbe ,_gbg );for _ebce :=0;_ebce < len (_caab );_ebce ++{_cgaa :=_caab [_ebce ];_bbd [_cgaa ]=_gbg ;};};_agff =make ([]_be .PdfObject ,len (objects ));
copy (_agff ,objects );_agff =append (_ecbe ,_agff ...);_fgf (_agff ,_bbd );return _agff ,nil ;};func _caa (_fdc _be .PdfObject ,_bef map[_be .PdfObject ]struct{})error {if _dedg ,_abe :=_fdc .(*_be .PdfIndirectObject );_abe {_bef [_fdc ]=struct{}{};_dbaa :=_caa (_dedg .PdfObject ,_bef );
if _dbaa !=nil {return _dbaa ;};return nil ;};if _eed ,_aga :=_fdc .(*_be .PdfObjectStream );_aga {_bef [_eed ]=struct{}{};_dde :=_caa (_eed .PdfObjectDictionary ,_bef );if _dde !=nil {return _dde ;};return nil ;};if _dcb ,_cgg :=_fdc .(*_be .PdfObjectDictionary );
_cgg {for _ ,_fce :=range _dcb .Keys (){_cfaeg :=_dcb .Get (_fce );_ =_cfaeg ;if _afb ,_cdb :=_cfaeg .(*_be .PdfObjectReference );_cdb {_cfaeg =_afb .Resolve ();_dcb .Set (_fce ,_cfaeg );};if _fce !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _dab :=_caa (_cfaeg ,_bef );
_dab !=nil {return _dab ;};};};return nil ;};if _gab ,_baf :=_fdc .(*_be .PdfObjectArray );_baf {if _gab ==nil {return _da .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _fb ,_cdf :=range _gab .Elements (){if _cga ,_fcgc :=_cdf .(*_be .PdfObjectReference );
_fcgc {_cdf =_cga .Resolve ();_gab .Set (_fb ,_cdf );};if _agg :=_caa (_cdf ,_bef );_agg !=nil {return _agg ;};};return nil ;};return nil ;};func _gggdd (_ebb []_be .PdfObject ){for _cgfg ,_eaa :=range _ebb {switch _cfbd :=_eaa .(type ){case *_be .PdfIndirectObject :_cfbd .ObjectNumber =int64 (_cgfg +1);
_cfbd .GenerationNumber =0;case *_be .PdfObjectStream :_cfbd .ObjectNumber =int64 (_cgfg +1);_cfbd .GenerationNumber =0;case *_be .PdfObjectStreams :_cfbd .ObjectNumber =int64 (_cgfg +1);_cfbd .GenerationNumber =0;};};};func _eecb (_bac *_cf .Image ,_abbd float64 )(*_cf .Image ,error ){_aag ,_eede :=_bac .ToGoImage ();
if _eede !=nil {return nil ,_eede ;};var _bgcg _b .Image ;_ffgc ,_bae :=_aag .(*_b .Monochrome );if _bae {if _eede =_ffgc .ResolveDecode ();_eede !=nil {return nil ,_eede ;};_bgcg ,_eede =_ffgc .Scale (_abbd );if _eede !=nil {return nil ,_eede ;};}else {_dfae :=int (_ef .RoundToEven (float64 (_bac .Width )*_abbd ));
_gggc :=int (_ef .RoundToEven (float64 (_bac .Height )*_abbd ));_bgcg ,_eede =_b .NewImage (_dfae ,_gggc ,int (_bac .BitsPerComponent ),_bac .ColorComponents ,nil ,nil ,nil );if _eede !=nil {return nil ,_eede ;};_e .CatmullRom .Scale (_bgcg ,_bgcg .Bounds (),_aag ,_aag .Bounds (),_e .Over ,&_e .Options {});
};_edfa :=_bgcg .Base ();_cadf :=&_cf .Image {Width :int64 (_edfa .Width ),Height :int64 (_edfa .Height ),BitsPerComponent :int64 (_edfa .BitsPerComponent ),ColorComponents :_edfa .ColorComponents ,Data :_edfa .Data };_cadf .SetDecode (_edfa .Decode );
_cadf .SetAlpha (_edfa .Alpha );return _cadf ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _bd (_db *_be .PdfObjectStream )error {_df ,_gea :=_be .DecodeStream (_db );if _gea !=nil {return _gea ;};_efc :=_bb .NewContentStreamParser (string (_df ));_cbd ,_gea :=_efc .Parse ();if _gea !=nil {return _gea ;};
_cbd =_ac (_cbd );_ag :=_cbd .Bytes ();if len (_ag )>=len (_df ){return nil ;};_ab ,_gea :=_be .MakeStream (_cbd .Bytes (),_be .NewFlateEncoder ());if _gea !=nil {return _gea ;};_db .Stream =_ab .Stream ;_db .Merge (_ab .PdfObjectDictionary );return nil ;
};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};func _ffce (_cdbd string ,_caf []string )bool {for _ ,_ccge :=range _caf {if _cdbd ==_ccge {return true ;};};return false ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_fd *Chain )GetOptimizers ()[]_cf .Optimizer {return _fd ._bf };func _eddb (_deg *_be .PdfObjectStream ,_acc []rune ,_abc []_a .GlyphIndex )error {_deg ,_gad :=_be .GetStream (_deg );if !_gad {_g .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _da .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_faf ,_bbbf :=_be .DecodeStream (_deg );if _bbbf !=nil {_g .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_bbbf );
return _bbbf ;};_dadb ,_bbbf :=_a .Parse (_cb .NewReader (_faf ));if _bbbf !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_deg .Stream ));
return _bbbf ;};_bcdc :=_abc ;if len (_acc )> 0{_eeb :=_dadb .LookupRunes (_acc );_bcdc =append (_bcdc ,_eeb ...);};_dadb ,_bbbf =_dadb .SubsetKeepIndices (_bcdc );if _bbbf !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_bbbf );
return _bbbf ;};var _gbb _cb .Buffer ;_bbbf =_dadb .Write (&_gbb );if _bbbf !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bbbf );return _bbbf ;};if _gbb .Len ()> len (_faf ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_eag ,_bbbf :=_be .MakeStream (_gbb .Bytes (),_be .NewFlateEncoder ());if _bbbf !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bbbf );return _bbbf ;
};*_deg =*_eag ;_deg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_be .MakeInteger (int64 (_gbb .Len ())));return nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fgg *CompressStreams )Optimize (objects []_be .PdfObject )(_cgbd []_be .PdfObject ,_ddee error ){_cgbd =make ([]_be .PdfObject ,len (objects ));copy (_cgbd ,objects );for _ ,_addd :=range objects {_fcbc ,_bfe :=_be .GetStream (_addd );if !_bfe {continue ;
};if _edg :=_fcbc .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_edg !=nil {if _ ,_cca :=_be .GetName (_edg );_cca {continue ;};if _gdce ,_ffb :=_be .GetArray (_edg );_ffb &&_gdce .Len ()> 0{continue ;};};_bgda :=_be .NewFlateEncoder ();var _gce []byte ;
_gce ,_ddee =_bgda .EncodeBytes (_fcbc .Stream );if _ddee !=nil {return _cgbd ,_ddee ;};_fbg :=_bgda .MakeStreamDict ();if len (_gce )+len (_fbg .WriteString ())< len (_fcbc .Stream ){_fcbc .Stream =_gce ;_fcbc .PdfObjectDictionary .Merge (_fbg );_fcbc .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_be .MakeInteger (int64 (len (_fcbc .Stream ))));
};};return _cgbd ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_acg *CleanFonts )Optimize (objects []_be .PdfObject )(_gbba []_be .PdfObject ,_bad error ){var _gdb map[*_be .PdfObjectStream ]struct{};if _acg .Subset {var _ecc error ;_gdb ,_ecc =_ebf (objects );if _ecc !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_ecc );
return nil ,_ecc ;};};for _ ,_fgd :=range objects {_fccc ,_cce :=_be .GetStream (_fgd );if !_cce {continue ;};if _ ,_ecba :=_gdb [_fccc ];_ecba {continue ;};_efe ,_ce :=_be .NewEncoderFromStream (_fccc );if _ce !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_ce );
continue ;};_gca ,_ce :=_efe .DecodeStream (_fccc );if _ce !=nil {_g .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_ce );
continue ;};if len (_gca )< 4{continue ;};_eba :=string (_gca [:4]);if _eba =="\u004f\u0054\u0054\u004f"{continue ;};if _eba !="\u0000\u0001\u0000\u0000"&&_eba !="\u0074\u0072\u0075\u0065"{continue ;};_ad ,_ce :=_a .Parse (_cb .NewReader (_gca ));if _ce !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ce );
continue ;};_ce =_ad .Optimize ();if _ce !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_ce );continue ;};var _ebc _cb .Buffer ;
_ce =_ad .Write (&_ebc );if _ce !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ce );continue ;
};if _ebc .Len ()> len (_gca ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ddc ,_ce :=_be .MakeStream (_ebc .Bytes (),_be .NewFlateEncoder ());if _ce !=nil {continue ;};*_fccc =*_ddc ;_fccc .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_be .MakeInteger (int64 (_ebc .Len ())));};return objects ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfge *ObjectStreams )Optimize (objects []_be .PdfObject )(_gadd []_be .PdfObject ,_ecg error ){_ffag :=&_be .PdfObjectStreams {};_cbec :=make ([]_be .PdfObject ,0,len (objects ));for _ ,_egce :=range objects {if _gfcfb ,_caeb :=_egce .(*_be .PdfIndirectObject );
_caeb &&_gfcfb .GenerationNumber ==0{_ffag .Append (_egce );}else {_cbec =append (_cbec ,_egce );};};if _ffag .Len ()==0{return _cbec ,nil ;};_gadd =make ([]_be .PdfObject ,0,len (_cbec )+_ffag .Len ()+1);if _ffag .Len ()> 1{_gadd =append (_gadd ,_ffag );
};_gadd =append (_gadd ,_ffag .Elements ()...);_gadd =append (_gadd ,_cbec ...);return _gadd ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_baab *CombineIdenticalIndirectObjects )Optimize (objects []_be .PdfObject )(_fgda []_be .PdfObject ,_cgcg error ){_gggdd (objects );_ffa :=make (map[_be .PdfObject ]_be .PdfObject );_caabb :=make (map[_be .PdfObject ]struct{});_cge :=make (map[string ][]*_be .PdfIndirectObject );
for _ ,_egfc :=range objects {_fde ,_bgdb :=_egfc .(*_be .PdfIndirectObject );if !_bgdb {continue ;};if _adef ,_bce :=_fde .PdfObject .(*_be .PdfObjectDictionary );_bce {if _egg ,_fecb :=_adef .Get ("\u0054\u0079\u0070\u0065").(*_be .PdfObjectName );_fecb &&*_egg =="\u0050\u0061\u0067\u0065"{continue ;
};_bga :=_c .New ();_bga .Write ([]byte (_adef .WriteString ()));_dfb :=string (_bga .Sum (nil ));_cge [_dfb ]=append (_cge [_dfb ],_fde );};};for _ ,_dae :=range _cge {if len (_dae )< 2{continue ;};_fbc :=_dae [0];for _cfbb :=1;_cfbb < len (_dae );_cfbb ++{_ggf :=_dae [_cfbb ];
_ffa [_ggf ]=_fbc ;_caabb [_ggf ]=struct{}{};};};_fgda =make ([]_be .PdfObject ,0,len (objects )-len (_caabb ));for _ ,_aefd :=range objects {if _ ,_dbce :=_caabb [_aefd ];_dbce {continue ;};_fgda =append (_fgda ,_aefd );};_fgf (_fgda ,_ffa );return _fgda ,nil ;
};func _afdc (_fgc *_be .PdfObjectDictionary )[]string {_bgc :=[]string {};for _ ,_aafe :=range _fgc .Keys (){_bgc =append (_bgc ,_aafe .String ());};return _bgc ;};func _gbgb (_ffbb _be .PdfObject )(_ebcg string ,_bbcd []_be .PdfObject ){var _fgfb _cb .Buffer ;
switch _adg :=_ffbb .(type ){case *_be .PdfIndirectObject :_bbcd =append (_bbcd ,_adg );_ffbb =_adg .PdfObject ;};switch _befe :=_ffbb .(type ){case *_be .PdfObjectStream :if _eef ,_ecbed :=_be .DecodeStream (_befe );_ecbed ==nil {_fgfb .Write (_eef );
_bbcd =append (_bbcd ,_befe );};case *_be .PdfObjectArray :for _ ,_gfeb :=range _befe .Elements (){switch _ceec :=_gfeb .(type ){case *_be .PdfObjectStream :if _befd ,_gcfa :=_be .DecodeStream (_ceec );_gcfa ==nil {_fgfb .Write (_befd );_bbcd =append (_bbcd ,_ceec );
};};};};return _fgfb .String (),_bbcd ;};type imageModifications struct{Scale float64 ;Encoding _be .StreamEncoder ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ea *Chain )Optimize (objects []_be .PdfObject )(_bc []_be .PdfObject ,_ec error ){_fg :=objects ;for _ ,_af :=range _ea ._bf {_cfd ,_ed :=_af .Optimize (_fg );if _ed !=nil {_g .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ed );
continue ;};_fg =_cfd ;};return _fg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbdf *CombineDuplicateStreams )Optimize (objects []_be .PdfObject )(_cdd []_be .PdfObject ,_geeb error ){_gcdb :=make (map[_be .PdfObject ]_be .PdfObject );_deb :=make (map[_be .PdfObject ]struct{});_abdd :=make (map[string ][]*_be .PdfObjectStream );
for _ ,_fbdd :=range objects {if _bff ,_cab :=_fbdd .(*_be .PdfObjectStream );_cab {_eebg :=_c .New ();_eebg .Write (_bff .Stream );_eebg .Write ([]byte (_bff .PdfObjectDictionary .WriteString ()));_bge :=string (_eebg .Sum (nil ));_abdd [_bge ]=append (_abdd [_bge ],_bff );
};};for _ ,_cafb :=range _abdd {if len (_cafb )< 2{continue ;};_cfadg :=_cafb [0];for _bee :=1;_bee < len (_cafb );_bee ++{_eea :=_cafb [_bee ];_gcdb [_eea ]=_cfadg ;_deb [_eea ]=struct{}{};};};_cdd =make ([]_be .PdfObject ,0,len (objects )-len (_deb ));
for _ ,_agda :=range objects {if _ ,_fba :=_deb [_agda ];_fba {continue ;};_cdd =append (_cdd ,_agda );};_fgf (_cdd ,_gcdb );return _cdd ,nil ;};

// Optimize implements Optimizer interface.
func (_gead *CleanUnusedResources )Optimize (objects []_be .PdfObject )(_egdb []_be .PdfObject ,_gaf error ){_baa ,_gaf :=_gdea (objects );if _gaf !=nil {return nil ,_gaf ;};_ade :=[]_be .PdfObject {};for _ ,_cdc :=range objects {_ ,_abd :=_baa [_cdc ];
if _abd {continue ;};_ade =append (_ade ,_cdc );};return _ade ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_efge *ImagePPI )Optimize (objects []_be .PdfObject )(_ecfc []_be .PdfObject ,_degc error ){if _efge .ImageUpperPPI <=0{return objects ,nil ;};_fcfd :=_eaf (objects );if len (_fcfd )==0{return objects ,nil ;};_gdad :=make (map[_be .PdfObject ]struct{});
for _ ,_ecbad :=range _fcfd {_bfbf :=_ecbad .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_gdad [_bfbf ]=struct{}{};};_bbf :=make (map[*_be .PdfObjectStream ]*imageInfo );for _ ,_gafc :=range _fcfd {_bbf [_gafc .Stream ]=_gafc ;};var _aefc *_be .PdfObjectDictionary ;
for _ ,_dfef :=range objects {if _gcba ,_fga :=_be .GetDict (_dfef );_aefc ==nil &&_fga {if _eace ,_beaa :=_be .GetName (_gcba .Get ("\u0054\u0079\u0070\u0065"));_beaa &&*_eace =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_aefc =_gcba ;};};};if _aefc ==nil {return objects ,nil ;
};_bcba ,_cabf :=_be .GetDict (_aefc .Get ("\u0050\u0061\u0067e\u0073"));if !_cabf {return objects ,nil ;};_cfbf ,_aefa :=_be .GetArray (_bcba .Get ("\u004b\u0069\u0064\u0073"));if !_aefa {return objects ,nil ;};for _ ,_baed :=range _cfbf .Elements (){_cbbe :=make (map[string ]*imageInfo );
_gggcb ,_gcg :=_be .GetDict (_baed );if !_gcg {continue ;};_bgdg ,_ :=_gbgb (_gggcb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_bgdg )==0{continue ;};_fafb ,_eccg :=_be .GetDict (_gggcb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_eccg {continue ;};_cbbb ,_fbab :=_cf .NewPdfPageResourcesFromDict (_fafb );if _fbab !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_fbab );
continue ;};_efag ,_eecf :=_be .GetDict (_fafb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_eecf {continue ;};_gggd :=_efag .Keys ();for _ ,_cfda :=range _gggd {if _gdgc ,_afcd :=_be .GetStream (_efag .Get (_cfda ));_afcd {if _deac ,_ebgb :=_bbf [_gdgc ];
_ebgb {_cbbe [string (_cfda )]=_deac ;};};};_bbdd :=_bb .NewContentStreamParser (_bgdg );_bade ,_fbab :=_bbdd .Parse ();if _fbab !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fbab );continue ;};_cea :=_bb .NewContentStreamProcessor (*_bade );
_cea .AddHandler (_bb .HandlerConditionEnumAllOperands ,"",func (_bedd *_bb .ContentStreamOperation ,_agb _bb .GraphicsState ,_gcda *_cf .PdfPageResources )error {switch _bedd .Operand {case "\u0044\u006f":if len (_bedd .Params )!=1{_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_adcd ,_ebaa :=_be .GetName (_bedd .Params [0]);if !_ebaa {_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _adcf ,_deag :=_cbbe [string (*_adcd )];_deag {_dada :=_agb .CTM .ScalingFactorX ();_age :=_agb .CTM .ScalingFactorY ();_dfbf ,_bag :=_dada /72.0,_age /72.0;_edcaa ,_aafg :=float64 (_adcf .Width )/_dfbf ,float64 (_adcf .Height )/_bag ;
if _dfbf ==0||_bag ==0{_edcaa =72.0;_aafg =72.0;};_adcf .PPI =_ef .Max (_adcf .PPI ,_edcaa );_adcf .PPI =_ef .Max (_adcf .PPI ,_aafg );};};return nil ;});_fbab =_cea .Process (_cbbb );if _fbab !=nil {_g .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_fbab );
continue ;};};for _ ,_cbge :=range _fcfd {if _ ,_gcae :=_gdad [_cbge .Stream ];_gcae {continue ;};if _cbge .PPI <=_efge .ImageUpperPPI {continue ;};_aaa ,_edce :=_cf .NewXObjectImageFromStream (_cbge .Stream );if _edce !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_edce );
continue ;};var _fagf imageModifications ;_fagf .Scale =_efge .ImageUpperPPI /_cbge .PPI ;if _cbge .BitsPerComponent ==1&&_cbge .ColorComponents ==1{_edcdd :=_ef .Round (_cbge .PPI /_efge .ImageUpperPPI );_gfea :=_b .NextPowerOf2 (uint (_edcdd ));if _b .InDelta (float64 (_gfea ),1/_fagf .Scale ,0.3){_fagf .Scale =float64 (1)/float64 (_gfea );
};if _ ,_gbce :=_aaa .Filter .(*_be .JBIG2Encoder );!_gbce {_fagf .Encoding =_be .NewJBIG2Encoder ();};};if _edce =_geb (_aaa ,_fagf );_edce !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_edce );
continue ;};_fagf .Encoding =nil ;if _dcg ,_cadd :=_be .GetStream (_cbge .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_cadd {_egbc ,_eda :=_cf .NewXObjectImageFromStream (_dcg );if _eda !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eda );
continue ;};if _eda =_geb (_egbc ,_fagf );_eda !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eda );continue ;};};};return objects ,nil ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_bf []_cf .Optimizer };func _ac (_bbg *_bb .ContentStreamOperations )*_bb .ContentStreamOperations {if _bbg ==nil {return nil ;};_ae :=_bb .ContentStreamOperations {};for _ ,_ge :=range *_bbg {switch _ge .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_ge .Params )==6{if _ead ,_bcb :=_be .GetNumbersAsFloat (_ge .Params );_bcb ==nil {if _ead [0]==1&&_ead [1]==0&&_ead [2]==0&&_ead [3]==1{_ge =&_bb .ContentStreamOperation {Params :[]_be .PdfObject {_ge .Params [4],_ge .Params [5]},Operand :"\u0054\u0064"};
};};};};_ae =append (_ae ,_ge );};return &_ae ;};func _ffcg (_ddef []_be .PdfObject )objectStructure {_dee :=objectStructure {};_eecfg :=false ;for _ ,_gfgg :=range _ddef {switch _bebg :=_gfgg .(type ){case *_be .PdfIndirectObject :_aeee ,_dgbf :=_be .GetDict (_bebg );
if !_dgbf {continue ;};_ebad ,_dgbf :=_be .GetName (_aeee .Get ("\u0054\u0079\u0070\u0065"));if !_dgbf {continue ;};switch _ebad .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_dee ._efeb =_aeee ;_eecfg =true ;};};if _eecfg {break ;};};if !_eecfg {return _dee ;
};_bgac ,_cgeg :=_be .GetDict (_dee ._efeb .Get ("\u0050\u0061\u0067e\u0073"));if !_cgeg {return _dee ;};_dee ._bedee =_bgac ;_gadg ,_cgeg :=_be .GetArray (_bgac .Get ("\u004b\u0069\u0064\u0073"));if !_cgeg {return _dee ;};for _ ,_gafb :=range _gadg .Elements (){_aab ,_fad :=_be .GetIndirect (_gafb );
if !_fad {break ;};_dee ._edcc =append (_dee ._edcc ,_aab );};return _dee ;};func _eaf (_degb []_be .PdfObject )[]*imageInfo {_dagf :=_be .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_cgbe :=make (map[*_be .PdfObjectStream ]struct{});var _fag []*imageInfo ;
for _ ,_fage :=range _degb {_cfg ,_beef :=_be .GetStream (_fage );if !_beef {continue ;};if _ ,_fcff :=_cgbe [_cfg ];_fcff {continue ;};_cgbe [_cfg ]=struct{}{};_ddb :=_cfg .PdfObjectDictionary .Get (_dagf );_acee ,_beef :=_be .GetName (_ddb );if !_beef ||string (*_acee )!="\u0049\u006d\u0061g\u0065"{continue ;
};_acge :=&imageInfo {Stream :_cfg ,BitsPerComponent :8};if _agdag ,_gag :=_be .GetIntVal (_cfg .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_gag {_acge .BitsPerComponent =_agdag ;};if _adc ,_bgcc :=_be .GetIntVal (_cfg .Get ("\u0057\u0069\u0064t\u0068"));
_bgcc {_acge .Width =_adc ;};if _dfcf ,_eae :=_be .GetIntVal (_cfg .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_eae {_acge .Height =_dfcf ;};_bbca ,_geeba :=_cf .NewPdfColorspaceFromPdfObject (_cfg .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _geeba !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_geeba );continue ;};if _bbca ==nil {_fbgc ,_fda :=_be .GetName (_cfg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _fda {switch _fbgc .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_bbca =_cf .NewPdfColorspaceDeviceGray ();
_acge .BitsPerComponent =1;};};};switch _edcb :=_bbca .(type ){case *_cf .PdfColorspaceDeviceRGB :_acge .ColorComponents =3;case *_cf .PdfColorspaceDeviceGray :_acge .ColorComponents =1;default:_g .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_edcb );
continue ;};_fag =append (_fag ,_acge );};return _fag ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};