//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fc "bytes";_ae "crypto/md5";_c "errors";_e "fmt";_ab "github.com/unidoc/unipdf/v3/common";_ff "github.com/unidoc/unipdf/v3/contentstream";_g "github.com/unidoc/unipdf/v3/core";_afe "github.com/unidoc/unipdf/v3/extractor";_af "github.com/unidoc/unipdf/v3/internal/textencoding";_fg "github.com/unidoc/unipdf/v3/model";_gc "github.com/unidoc/unitype";_fd "golang.org/x/image/draw";_b "image";_a "math";);func _bfab (_bbd _g .PdfObject )(_bbgg string ,_eegb []_g .PdfObject ){var _deeb _fc .Buffer ;switch _afec :=_bbd .(type ){case *_g .PdfIndirectObject :_eegb =append (_eegb ,_afec );_bbd =_afec .PdfObject ;};switch _agbd :=_bbd .(type ){case *_g .PdfObjectStream :if _fggg ,_cecf :=_g .DecodeStream (_agbd );_cecf ==nil {_deeb .Write (_fggg );_eegb =append (_eegb ,_agbd );};case *_g .PdfObjectArray :for _ ,_ccg :=range _agbd .Elements (){switch _fdff :=_ccg .(type ){case *_g .PdfObjectStream :if _fdca ,_gcda :=_g .DecodeStream (_fdff );_gcda ==nil {_deeb .Write (_fdca );_eegb =append (_eegb ,_fdff );};};};};return _deeb .String (),_eegb ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbga *CombineDuplicateStreams )Optimize (objects []_g .PdfObject )(_fddb []_g .PdfObject ,_dca error ){_dfba :=make (map[_g .PdfObject ]_g .PdfObject );_bcc :=make (map[_g .PdfObject ]struct{});_gaf :=make (map[string ][]*_g .PdfObjectStream );for _ ,_feb :=range objects {if _fbf ,_aedb :=_feb .(*_g .PdfObjectStream );_aedb {_cbc :=_ae .New ();_cbc .Write ([]byte (_fbf .Stream ));_ecc :=string (_cbc .Sum (nil ));_gaf [_ecc ]=append (_gaf [_ecc ],_fbf );};};for _ ,_ge :=range _gaf {if len (_ge )< 2{continue ;};_fac :=_ge [0];for _dfe :=1;_dfe < len (_ge );_dfe ++{_caff :=_ge [_dfe ];_dfba [_caff ]=_fac ;_bcc [_caff ]=struct{}{};};};_fddb =make ([]_g .PdfObject ,0,len (objects )-len (_bcc ));for _ ,_daf :=range objects {if _ ,_dcaf :=_bcc [_daf ];_dcaf {continue ;};_fddb =append (_fddb ,_daf );};_fdbe (_fddb ,_dfba );return _fddb ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ce *CleanFonts )Optimize (objects []_g .PdfObject )(_fbg []_g .PdfObject ,_fgg error ){var _aac map[*_g .PdfObjectStream ]struct{};if _ce .Subset {var _efe error ;_aac ,_efe =_efg (objects );if _efe !=nil {return nil ,_efe ;};};for _ ,_ffg :=range objects {_bgb ,_cfa :=_g .GetStream (_ffg );if !_cfa {continue ;};if _ ,_aab :=_aac [_bgb ];_aab {continue ;};_efa ,_dedc :=_g .NewEncoderFromStream (_bgb );if _dedc !=nil {_ab .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_dedc );continue ;};_dfb ,_dedc :=_efa .DecodeStream (_bgb );if _dedc !=nil {_ab .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_dedc );continue ;};if len (_dfb )< 4{continue ;};_beb :=string (_dfb [:4]);if _beb =="\u004f\u0054\u0054\u004f"{continue ;};if _beb !="\u0000\u0001\u0000\u0000"&&_beb !="\u0074\u0072\u0075\u0065"{continue ;};_gbgd ,_dedc :=_gc .Parse (_fc .NewReader (_dfb ));if _dedc !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dedc );continue ;};_dedc =_gbgd .Optimize ();if _dedc !=nil {continue ;};var _gcaa _fc .Buffer ;_dedc =_gbgd .Write (&_gcaa );if _dedc !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dedc );continue ;};if _gcaa .Len ()> len (_dfb ){_ab .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_ffdf ,_dedc :=_g .MakeStream (_gcaa .Bytes (),_g .NewFlateEncoder ());if _dedc !=nil {continue ;};*_bgb =*_ffdf ;_bgb .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_g .MakeInteger (int64 (_gcaa .Len ())));};return objects ,nil ;};func _afb (_fdbeg []_g .PdfObject )objectStructure {_ggaf :=objectStructure {};_fceg :=false ;for _ ,_acb :=range _fdbeg {switch _gegb :=_acb .(type ){case *_g .PdfIndirectObject :_cca ,_bcg :=_g .GetDict (_gegb );if !_bcg {continue ;};_abac ,_bcg :=_g .GetName (_cca .Get ("\u0054\u0079\u0070\u0065"));if !_bcg {continue ;};switch _abac .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ggaf ._cggd =_cca ;_fceg =true ;};};if _fceg {break ;};};if !_fceg {return _ggaf ;};_cfb ,_gceba :=_g .GetDict (_ggaf ._cggd .Get ("\u0050\u0061\u0067e\u0073"));if !_gceba {return _ggaf ;};_ggaf ._aga =_cfb ;_fddg ,_gceba :=_g .GetArray (_cfb .Get ("\u004b\u0069\u0064\u0073"));if !_gceba {return _ggaf ;};for _ ,_aad :=range _fddg .Elements (){_acd ,_cffg :=_g .GetIndirect (_aad );if !_cffg {break ;};_ggaf ._dde =append (_ggaf ._dde ,_acd );};return _ggaf ;};

// Append appends optimizers to the chain.
func (_bg *Chain )Append (optimizers ..._fg .Optimizer ){_bg ._gcd =append (_bg ._gcd ,optimizers ...)};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aabd *ImagePPI )Optimize (objects []_g .PdfObject )(_agb []_g .PdfObject ,_bead error ){if _aabd .ImageUpperPPI <=0{return objects ,nil ;};_eede :=_bga (objects );if len (_eede )==0{return objects ,nil ;};_fdfc :=make (map[_g .PdfObject ]struct{});for _ ,_cbdg :=range _eede {_gdbc :=_cbdg .Stream .PdfObjectDictionary .Get (_g .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_fdfc [_gdbc ]=struct{}{};};_gag :=make (map[*_g .PdfObjectStream ]*imageInfo );for _ ,_ddcd :=range _eede {_gag [_ddcd .Stream ]=_ddcd ;};var _adg *_g .PdfObjectDictionary ;for _ ,_defa :=range objects {if _efc ,_fdbc :=_g .GetDict (_defa );_adg ==nil &&_fdbc {if _cda ,_ebcb :=_g .GetName (_efc .Get (_g .PdfObjectName ("\u0054\u0079\u0070\u0065")));_ebcb &&*_cda =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_adg =_efc ;};};};if _adg ==nil {return objects ,nil ;};_ffa ,_adgg :=_g .GetDict (_adg .Get (_g .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_adgg {return objects ,nil ;};_aace ,_bae :=_g .GetArray (_ffa .Get (_g .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_bae {return objects ,nil ;};_cffe :=make (map[string ]*imageInfo );for _ ,_fcde :=range _aace .Elements (){_efga ,_eadd :=_g .GetDict (_fcde );if !_eadd {continue ;};_fcg ,_beab :=_g .GetArray (_efga .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_beab {continue ;};_aee ,_dcf :=_g .GetDict (_efga .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dcf {continue ;};_aff ,_decf :=_g .GetDict (_aee .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_decf {continue ;};_bfd :=_aff .Keys ();for _ ,_beaa :=range _bfd {if _geg ,_cgde :=_g .GetStream (_aff .Get (_beaa ));_cgde {if _bgag ,_gedc :=_gag [_geg ];_gedc {_cffe [string (_beaa )]=_bgag ;};};};for _ ,_ggd :=range _fcg .Elements (){if _gacc ,_cdgc :=_g .GetStream (_ggd );_cdgc {_fed ,_dcg :=_g .NewEncoderFromStream (_gacc );if _dcg !=nil {return nil ,_dcg ;};_ddca ,_dcg :=_fed .DecodeStream (_gacc );if _dcg !=nil {return nil ,_dcg ;};_deea :=_ff .NewContentStreamParser (string (_ddca ));_ebcf ,_dcg :=_deea .Parse ();if _dcg !=nil {return nil ,_dcg ;};_gbc ,_gec :=1.0,1.0;for _ ,_dcab :=range *_ebcf {if _dcab .Operand =="\u0051"{_gbc ,_gec =1.0,1.0;};if _dcab .Operand =="\u0063\u006d"&&len (_dcab .Params )==6{if _abaee ,_gcbe :=_g .GetFloatVal (_dcab .Params [0]);_gcbe {_gbc =_gbc *_abaee ;};if _adf ,_fdgd :=_g .GetFloatVal (_dcab .Params [3]);_fdgd {_gec =_gec *_adf ;};if _abe ,_fff :=_g .GetIntVal (_dcab .Params [0]);_fff {_gbc =_gbc *float64 (_abe );};if _aedd ,_adbb :=_g .GetIntVal (_dcab .Params [3]);_adbb {_gec =_gec *float64 (_aedd );};};if _dcab .Operand =="\u0044\u006f"&&len (_dcab .Params )==1{_gae ,_baeg :=_g .GetName (_dcab .Params [0]);if !_baeg {continue ;};if _ggfc ,_cdbe :=_cffe [string (*_gae )];_cdbe {_ece ,_cedd :=_gbc /72.0,_gec /72.0;_daga ,_ffaa :=float64 (_ggfc .Width )/_ece ,float64 (_ggfc .Height )/_cedd ;if _ece ==0||_cedd ==0{_daga =72.0;_ffaa =72.0;};_ggfc .PPI =_a .Max (_ggfc .PPI ,_daga );_ggfc .PPI =_a .Max (_ggfc .PPI ,_ffaa );};};};};};};for _ ,_eaab :=range _eede {if _ ,_egg :=_fdfc [_eaab .Stream ];_egg {continue ;};if _eaab .PPI <=_aabd .ImageUpperPPI {continue ;};_faf :=_aabd .ImageUpperPPI /_eaab .PPI ;if _ggda :=_aeb (_eaab .Stream ,_faf );_ggda !=nil {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ggda );}else {if _bee ,_bbg :=_g .GetStream (_eaab .Stream .PdfObjectDictionary .Get (_g .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_bbg {if _dgfg :=_aeb (_bee ,_faf );_dgfg !=nil {return nil ,_dgfg ;};};};};return objects ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _fdbe (_fabd []_g .PdfObject ,_dfbf map[_g .PdfObject ]_g .PdfObject ){if _dfbf ==nil ||len (_dfbf )==0{return ;};for _fea ,_bfgf :=range _fabd {if _cfe ,_gda :=_dfbf [_bfgf ];_gda {_fabd [_fea ]=_cfe ;continue ;};_dfbf [_bfgf ]=_bfgf ;switch _gfg :=_bfgf .(type ){case *_g .PdfObjectArray :_abec :=make ([]_g .PdfObject ,_gfg .Len ());copy (_abec ,_gfg .Elements ());_fdbe (_abec ,_dfbf );for _cdf ,_dge :=range _abec {_gfg .Set (_cdf ,_dge );};case *_g .PdfObjectStreams :_fdbe (_gfg .Elements (),_dfbf );case *_g .PdfObjectStream :_afee :=[]_g .PdfObject {_gfg .PdfObjectDictionary };_fdbe (_afee ,_dfbf );_gfg .PdfObjectDictionary =_afee [0].(*_g .PdfObjectDictionary );case *_g .PdfObjectDictionary :_cbca :=_gfg .Keys ();_cbe :=make ([]_g .PdfObject ,len (_cbca ));for _fbd ,_dfeg :=range _cbca {_cbe [_fbd ]=_gfg .Get (_dfeg );};_fdbe (_cbe ,_dfbf );for _afd ,_ffbdd :=range _cbca {_gfg .Set (_ffbdd ,_cbe [_afd ]);};case *_g .PdfIndirectObject :_gdee :=[]_g .PdfObject {_gfg .PdfObject };_fdbe (_gdee ,_dfbf );_gfg .PdfObject =_gdee [0];};};};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ea *Chain )Optimize (objects []_g .PdfObject )(_gb []_g .PdfObject ,_ac error ){_gb =objects ;for _ ,_gg :=range _ea ._gcd {_gb ,_ac =_gg .Optimize (_gb );if _ac !=nil {return _gb ,_ac ;};};return _gb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bdcd *ObjectStreams )Optimize (objects []_g .PdfObject )(_gfaf []_g .PdfObject ,_ddb error ){_abgb :=&_g .PdfObjectStreams {};_eee :=make ([]_g .PdfObject ,0,len (objects ));for _ ,_fca :=range objects {if _gdcd ,_bbga :=_fca .(*_g .PdfIndirectObject );_bbga &&_gdcd .GenerationNumber ==0{_abgb .Append (_fca );}else {_eee =append (_eee ,_fca );};};if _abgb .Len ()==0{return _eee ,nil ;};_gfaf =make ([]_g .PdfObject ,0,len (_eee )+_abgb .Len ()+1);if _abgb .Len ()> 1{_gfaf =append (_gfaf ,_abgb );};_gfaf =append (_gfaf ,_abgb .Elements ()...);_gfaf =append (_gfaf ,_eee ...);return _gfaf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_age *CombineDuplicateDirectObjects )Optimize (objects []_g .PdfObject )(_fga []_g .PdfObject ,_bedd error ){_cbdf (objects );_efeb :=make (map[string ][]*_g .PdfObjectDictionary );var _ccf func (_eba *_g .PdfObjectDictionary );_ccf =func (_agd *_g .PdfObjectDictionary ){for _ ,_gga :=range _agd .Keys (){_eae :=_agd .Get (_gga );if _abag ,_agdd :=_eae .(*_g .PdfObjectDictionary );_agdd {_eecc :=_ae .New ();_eecc .Write ([]byte (_abag .WriteString ()));_dag :=string (_eecc .Sum (nil ));_efeb [_dag ]=append (_efeb [_dag ],_abag );_ccf (_abag );};};};for _ ,_gcdc :=range objects {_eadg ,_cfg :=_gcdc .(*_g .PdfIndirectObject );if !_cfg {continue ;};if _fde ,_ccfe :=_eadg .PdfObject .(*_g .PdfObjectDictionary );_ccfe {_ccf (_fde );};};_eab :=make ([]_g .PdfObject ,0,len (_efeb ));_ggg :=make (map[_g .PdfObject ]_g .PdfObject );for _ ,_dgc :=range _efeb {if len (_dgc )< 2{continue ;};_bff :=_g .MakeDict ();_bff .Merge (_dgc [0]);_fcb :=_g .MakeIndirectObject (_bff );_eab =append (_eab ,_fcb );for _dfg :=0;_dfg < len (_dgc );_dfg ++{_gdc :=_dgc [_dfg ];_ggg [_gdc ]=_fcb ;};};_fga =make ([]_g .PdfObject ,len (objects ));copy (_fga ,objects );_fga =append (_eab ,_fga ...);_fdbe (_fga ,_ggg );return _fga ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_cec :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_cec .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_cec .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_dab :=new (ImagePPI );_dab .ImageUpperPPI =options .ImageUpperPPI ;_cec .Append (_dab );};if options .ImageQuality > 0{_eaag :=new (Image );_eaag .ImageQuality =options .ImageQuality ;_cec .Append (_eaag );};if options .CombineDuplicateDirectObjects {_cec .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_cec .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_cec .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_cec .Append (new (ObjectStreams ));};if options .CompressStreams {_cec .Append (new (CompressStreams ));};return _cec ;};func _bga (_bfg []_g .PdfObject )[]*imageInfo {_cef :=_g .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_gfa :=make (map[*_g .PdfObjectStream ]struct{});var _cffc error ;var _abae []*imageInfo ;for _ ,_fabc :=range _bfg {_aabe ,_cbd :=_g .GetStream (_fabc );if !_cbd {continue ;};if _ ,_gbb :=_gfa [_aabe ];_gbb {continue ;};_gfa [_aabe ]=struct{}{};_adb :=_aabe .PdfObjectDictionary .Get (_cef );_agdb ,_cbd :=_g .GetName (_adb );if !_cbd ||string (*_agdb )!="\u0049\u006d\u0061g\u0065"{continue ;};_dec :=&imageInfo {BitsPerComponent :8,Stream :_aabe };if _dec .ColorSpace ,_cffc =_fg .DetermineColorspaceNameFromPdfObject (_aabe .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_cffc !=nil {_ab .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_cffc );continue ;};if _bedc ,_gcebf :=_g .GetIntVal (_aabe .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_gcebf {_dec .BitsPerComponent =_bedc ;};if _dcc ,_aacf :=_g .GetIntVal (_aabe .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_aacf {_dec .Width =_dcc ;};if _gbba ,_fee :=_g .GetIntVal (_aabe .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_fee {_dec .Height =_gbba ;};switch _dec .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_dec .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_dec .ColorComponents =1;default:_ab .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_dec .ColorSpace );continue ;};_abae =append (_abae ,_dec );};return _abae ;};func _cf (_cfc *_ff .ContentStreamOperations )*_ff .ContentStreamOperations {if _cfc ==nil {return nil ;};_cfcd :=_ff .ContentStreamOperations {};for _ ,_d :=range *_cfc {switch _d .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_d .Params )==6{if _de ,_ee :=_g .GetNumbersAsFloat (_d .Params );_ee ==nil {if _de [0]==1&&_de [1]==0&&_de [2]==0&&_de [3]==1{_d =&_ff .ContentStreamOperation {Params :[]_g .PdfObject {_d .Params [4],_d .Params [5]},Operand :"\u0054\u0064"};};};};};_cfcd =append (_cfcd ,_d );};return &_cfcd ;};func _eg (_bb *_g .PdfObjectStream )error {_dd ,_gd :=_g .DecodeStream (_bb );if _gd !=nil {return _gd ;};_gf :=_ff .NewContentStreamParser (string (_dd ));_db ,_gd :=_gf .Parse ();if _gd !=nil {return _gd ;};_db =_cf (_db );_ef :=_db .Bytes ();if len (_ef )>=len (_dd ){return nil ;};_def ,_gd :=_g .MakeStream (_db .Bytes (),_g .NewFlateEncoder ());if _gd !=nil {return _gd ;};_bb .Stream =_def .Stream ;_bb .Merge (_def .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ggf *CompressStreams )Optimize (objects []_g .PdfObject )(_gcfe []_g .PdfObject ,_fba error ){_gcfe =make ([]_g .PdfObject ,len (objects ));copy (_gcfe ,objects );for _ ,_bdcf :=range objects {_afg ,_aca :=_g .GetStream (_bdcf );if !_aca {continue ;};if _fgb :=_afg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fgb !=nil {if _ ,_egb :=_g .GetName (_fgb );_egb {continue ;};if _cdc ,_fgbe :=_g .GetArray (_fgb );_fgbe &&_cdc .Len ()> 0{continue ;};};_cbf :=_g .NewFlateEncoder ();var _gcag []byte ;_gcag ,_fba =_cbf .EncodeBytes (_afg .Stream );if _fba !=nil {return _gcfe ,_fba ;};_gafa :=_cbf .MakeStreamDict ();if len (_gcag )+len (_gafa .WriteString ())< len (_afg .Stream ){_afg .Stream =_gcag ;_afg .PdfObjectDictionary .Merge (_gafa );_afg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_g .MakeInteger (int64 (len (_afg .Stream ))));};};return _gcfe ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bgf *CleanContentstream )Optimize (objects []_g .PdfObject )(_ec []_g .PdfObject ,_gcb error ){_dbf :=map[*_g .PdfObjectStream ]struct{}{};var _da []*_g .PdfObjectStream ;_gdb :=func (_edd *_g .PdfObjectStream ){if _ ,_ecf :=_dbf [_edd ];!_ecf {_dbf [_edd ]=struct{}{};_da =append (_da ,_edd );};};for _ ,_cd :=range objects {switch _dgf :=_cd .(type ){case *_g .PdfIndirectObject :switch _ffc :=_dgf .PdfObject .(type ){case *_g .PdfObjectDictionary :if _df ,_bgff :=_g .GetName (_ffc .Get ("\u0054\u0079\u0070\u0065"));!_bgff ||_df .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ba ,_cg :=_g .GetStream (_ffc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cg {_gdb (_ba );}else if _eb ,_ffb :=_g .GetArray (_ffc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ffb {for _ ,_gca :=range _eb .Elements (){if _eea ,_fa :=_g .GetStream (_gca );_fa {_gdb (_eea );};};};};case *_g .PdfObjectStream :if _bd ,_cgg :=_g .GetName (_dgf .Get ("\u0054\u0079\u0070\u0065"));!_cgg ||_bd .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _ga ,_gba :=_g .GetName (_dgf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_gba ||_ga .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_gdb (_dgf );};};for _ ,_gfe :=range _da {_gcb =_eg (_gfe );if _gcb !=nil {return nil ,_gcb ;};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eedb *Image )Optimize (objects []_g .PdfObject )(_eaa []_g .PdfObject ,_geb error ){if _eedb .ImageQuality <=0{return objects ,nil ;};_abb :=_bga (objects );if len (_abb )==0{return objects ,nil ;};_dgfa :=make (map[_g .PdfObject ]_g .PdfObject );_edb :=make (map[_g .PdfObject ]struct{});for _ ,_gcg :=range _abb {_eda :=_gcg .Stream .PdfObjectDictionary .Get (_g .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_edb [_eda ]=struct{}{};};for _gde ,_fabe :=range _abb {_bggf :=_fabe .Stream ;if _ ,_ged :=_edb [_bggf ];_ged {continue ;};_fdbf ,_dedb :=_g .NewEncoderFromStream (_bggf );if _dedb !=nil {_ab .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_aef ,_dedb :=_fdbf .DecodeStream (_bggf );if _dedb !=nil {_ab .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_ggaa :=_g .NewDCTEncoder ();_ggaa .ColorComponents =_fabe .ColorComponents ;_ggaa .Quality =_eedb .ImageQuality ;_ggaa .BitsPerComponent =_fabe .BitsPerComponent ;_ggaa .Width =_fabe .Width ;_ggaa .Height =_fabe .Height ;_fce ,_dedb :=_ggaa .EncodeBytes (_aef );if _dedb !=nil {_ab .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dedb );return nil ,_dedb ;};var _ebd _g .StreamEncoder ;_ebd =_ggaa ;{_dacc :=_g .NewFlateEncoder ();_fbge :=_g .NewMultiEncoder ();_fbge .AddEncoder (_dacc );_fbge .AddEncoder (_ggaa );_febd ,_fcd :=_fbge .EncodeBytes (_aef );if _fcd !=nil {return nil ,_fcd ;};if len (_febd )< len (_fce ){_ab .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_fce ),len (_febd ),len (_bggf .Stream ));_fce =_febd ;_ebd =_fbge ;};};_gdgf :=len (_bggf .Stream );if _gdgf < len (_fce ){continue ;};_fdg :=&_g .PdfObjectStream {Stream :_fce };_fdg .PdfObjectReference =_bggf .PdfObjectReference ;_fdg .PdfObjectDictionary =_g .MakeDict ();_fdg .Merge (_bggf .PdfObjectDictionary );_fdg .Merge (_ebd .MakeStreamDict ());_fdg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_g .MakeInteger (int64 (len (_fce ))));_dgfa [_bggf ]=_fdg ;_abb [_gde ].Stream =_fdg ;};_eaa =make ([]_g .PdfObject ,len (objects ));copy (_eaa ,objects );_fdbe (_eaa ,_dgfa );return _eaa ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bfff *CombineIdenticalIndirectObjects )Optimize (objects []_g .PdfObject )(_bcba []_g .PdfObject ,_gceb error ){_cbdf (objects );_ggb :=make (map[_g .PdfObject ]_g .PdfObject );_fgd :=make (map[_g .PdfObject ]struct{});_adc :=make (map[string ][]*_g .PdfIndirectObject );for _ ,_fec :=range objects {_bef ,_dda :=_fec .(*_g .PdfIndirectObject );if !_dda {continue ;};if _dgcd ,_eecg :=_bef .PdfObject .(*_g .PdfObjectDictionary );_eecg {if _cae ,_ebag :=_dgcd .Get ("\u0054\u0079\u0070\u0065").(*_g .PdfObjectName );_ebag &&*_cae =="\u0050\u0061\u0067\u0065"{continue ;};_bag :=_ae .New ();_bag .Write ([]byte (_dgcd .WriteString ()));_gfca :=string (_bag .Sum (nil ));_adc [_gfca ]=append (_adc [_gfca ],_bef );};};for _ ,_fgge :=range _adc {if len (_fgge )< 2{continue ;};_ccb :=_fgge [0];for _ddd :=1;_ddd < len (_fgge );_ddd ++{_fabb :=_fgge [_ddd ];_ggb [_fabb ]=_ccb ;_fgd [_fabb ]=struct{}{};};};_bcba =make ([]_g .PdfObject ,0,len (objects )-len (_fgd ));for _ ,_edgd :=range objects {if _ ,_fge :=_fgd [_edgd ];_fge {continue ;};_bcba =append (_bcba ,_edgd );};_fdbe (_bcba ,_ggb );return _bcba ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _efg (_aed []_g .PdfObject )(_cfcg map[*_g .PdfObjectStream ]struct{},_edc error ){_cfcg =map[*_g .PdfObjectStream ]struct{}{};_aa :=map[*_fg .PdfFont ]struct{}{};_gac :=_afb (_aed );for _ ,_ffd :=range _gac ._dde {_gfb ,_ded :=_g .GetDict (_ffd .PdfObject );if !_ded {continue ;};_gfeb ,_ded :=_g .GetDict (_gfb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ded {continue ;};_ag ,_ :=_bfab (_gfb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_eded ,_fag :=_fg .NewPdfPageResourcesFromDict (_gfeb );if _fag !=nil {return nil ,_fag ;};_dgd :=[]content {{_eeg :_ag ,_cgd :_eded }};_aec :=_bcb (_gfb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _aec !=nil {_dgd =append (_dgd ,_aec ...);};for _ ,_fdc :=range _dgd {_fe ,_gdbb :=_afe .NewFromContents (_fdc ._eeg ,_fdc ._cgd );if _gdbb !=nil {return nil ,_gdbb ;};_fab ,_ ,_ ,_gdbb :=_fe .ExtractPageText ();if _gdbb !=nil {return nil ,_gdbb ;};for _ ,_cff :=range _fab .Marks ().Elements (){if _cff .Font ==nil {continue ;};if _ ,_fb :=_aa [_cff .Font ];!_fb {_aa [_cff .Font ]=struct{}{};};};};};_cge :=map[*_g .PdfObjectStream ][]*_fg .PdfFont {};for _ad :=range _aa {_abg :=_ad .FontDescriptor ();if _abg ==nil ||_abg .FontFile2 ==nil {continue ;};_gff ,_bf :=_g .GetStream (_abg .FontFile2 );if !_bf {continue ;};_cge [_gff ]=append (_cge [_gff ],_ad );};for _ebe :=range _cge {var _eec []rune ;var _be []_gc .GlyphIndex ;for _ ,_bfb :=range _cge [_ebe ]{switch _dbfb :=_bfb .Encoder ().(type ){case *_af .IdentityEncoder :_eecd :=_dbfb .RegisteredRunes ();_bed :=make ([]_gc .GlyphIndex ,len (_eecd ));for _efd ,_fda :=range _eecd {_bed [_efd ]=_gc .GlyphIndex (_fda );};_be =append (_be ,_bed ...);case *_af .TrueTypeFontEncoder :_eed :=_dbfb .RegisteredRunes ();_eec =append (_eec ,_eed ...);case _af .SimpleEncoder :_gfc :=_dbfb .Charcodes ();for _ ,_cb :=range _gfc {_ca ,_caf :=_dbfb .CharcodeToRune (_cb );if !_caf {_ab .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_cb );continue ;};_eec =append (_eec ,_ca );};};};_edc =_gcc (_ebe ,_eec ,_be );if _edc !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_edc );return nil ,_edc ;};_cfcg [_ebe ]=struct{}{};};return _cfcg ,nil ;};func _gcc (_aba *_g .PdfObjectStream ,_edcb []rune ,_dcec []_gc .GlyphIndex )error {_aba ,_agg :=_g .GetStream (_aba );if !_agg {_ab .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _c .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bde ,_bdee :=_g .DecodeStream (_aba );if _bdee !=nil {_ab .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_bdee );return _bdee ;};_beg ,_bdee :=_gc .Parse (_fc .NewReader (_bde ));if _bdee !=nil {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_aba .Stream ));return _bdee ;};_gccg :=_dcec ;if len (_edcb )> 0{_ddc :=_beg .LookupRunes (_edcb );_gccg =append (_gccg ,_ddc ...);};_beg ,_bdee =_beg .SubsetKeepIndices (_gccg );if _bdee !=nil {_ab .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_bdee );return _bdee ;};var _fdf _fc .Buffer ;_bdee =_beg .Write (&_fdf );if _bdee !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bdee );return _bdee ;};if _fdf .Len ()> len (_bde ){_ab .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_bfc ,_bdee :=_g .MakeStream (_fdf .Bytes (),_g .NewFlateEncoder ());if _bdee !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_bdee );return _bdee ;};*_aba =*_bfc ;_aba .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_g .MakeInteger (int64 (_fdf .Len ())));return nil ;};type objectStructure struct{_cggd *_g .PdfObjectDictionary ;_aga *_g .PdfObjectDictionary ;_dde []*_g .PdfIndirectObject ;};func _cbdf (_fbgeg []_g .PdfObject ){for _fef ,_efgc :=range _fbgeg {switch _edce :=_efgc .(type ){case *_g .PdfIndirectObject :_edce .ObjectNumber =int64 (_fef +1);_edce .GenerationNumber =0;case *_g .PdfObjectStream :_edce .ObjectNumber =int64 (_fef +1);_edce .GenerationNumber =0;case *_g .PdfObjectStreams :_edce .ObjectNumber =int64 (_fef +1);_edce .GenerationNumber =0;};};};func _aeb (_bbf *_g .PdfObjectStream ,_begg float64 )error {_ace ,_bea :=_fg .NewXObjectImageFromStream (_bbf );if _bea !=nil {return _bea ;};_efdb ,_bea :=_ace .ToImage ();if _bea !=nil {return _bea ;};_bedf ,_bea :=_efdb .ToGoImage ();if _bea !=nil {return _bea ;};_abba :=int (_a .RoundToEven (float64 (_efdb .Width )*_begg ));_fgf :=int (_a .RoundToEven (float64 (_efdb .Height )*_begg ));_gfba :=_b .Rect (0,0,_abba ,_fgf );var _aag _fd .Image ;var _fgbg func (_b .Image )(*_fg .Image ,error );switch _ace .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_aag =_b .NewRGBA (_gfba );_fgbg =_fg .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_aag =_b .NewGray (_gfba );_fgbg =_fg .ImageHandling .NewGrayImageFromGoImage ;default:return _e .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_ace .ColorSpace .String ());};_fd .CatmullRom .Scale (_aag ,_aag .Bounds (),_bedf ,_bedf .Bounds (),_fd .Over ,&_fd .Options {});if _efdb ,_bea =_fgbg (_aag );_bea !=nil {return _bea ;};_cea :=_g .MakeDict ();_cea .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_g .MakeInteger (100));_cea .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_g .MakeInteger (1));_ace .Filter .UpdateParams (_cea );if _bea =_ace .SetImage (_efdb ,nil );_bea !=nil {return _bea ;};_ace .ToPdfObject ();return nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_gcd []_fg .Optimizer };type content struct{_eeg string ;_cgd *_fg .PdfPageResources ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};type imageInfo struct{ColorSpace _g .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_g .PdfObjectStream ;PPI float64 ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _bcb (_ada _g .PdfObject )[]content {if _ada ==nil {return nil ;};_ced ,_bgg :=_g .GetArray (_ada );if !_bgg {_ab .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _ead []content ;for _ ,_caa :=range _ced .Elements (){_fbc ,_fdd :=_g .GetDict (_caa );if !_fdd {_ab .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_ccd ,_fdd :=_g .GetDict (_fbc .Get ("\u0041\u0050"));if !_fdd {_ab .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_egd :=_g .TraceToDirectObject (_ccd .Get ("\u004e"));if _egd ==nil {_ab .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _baa *_g .PdfObjectStream ;switch _dee :=_egd .(type ){case *_g .PdfObjectDictionary :_ebc ,_fad :=_g .GetName (_fbc .Get ("\u0041\u0053"));if !_fad {_ab .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_baa ,_fad =_g .GetStream (_dee .Get (*_ebc ));if !_fad {_ab .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_g .PdfObjectStream :_baa =_dee ;};if _baa ==nil {_ab .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_cdb ,_gce :=_fg .NewXObjectFormFromStream (_baa );if _gce !=nil {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gce );continue ;};_beba ,_gce :=_cdb .GetContentStream ();if _gce !=nil {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_gce );continue ;};_ead =append (_ead ,content {_eeg :string (_beba ),_cgd :_cdb .Resources });};return _ead ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};