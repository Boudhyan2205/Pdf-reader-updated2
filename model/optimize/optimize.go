//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fee "bytes";_ce "crypto/md5";_ad "errors";_f "fmt";_b "github.com/unidoc/unipdf/v3/common";_aba "github.com/unidoc/unipdf/v3/contentstream";_bgd "github.com/unidoc/unipdf/v3/core";_bg "github.com/unidoc/unipdf/v3/extractor";_acf "github.com/unidoc/unipdf/v3/internal/imageutil";
_fe "github.com/unidoc/unipdf/v3/internal/textencoding";_ef "github.com/unidoc/unipdf/v3/model";_ab "github.com/unidoc/unitype";_c "golang.org/x/image/draw";_ac "math";_e "strings";);

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbd *CleanContentstream )Optimize (objects []_bgd .PdfObject )(_fbc []_bgd .PdfObject ,_cd error ){_cefb :=map[*_bgd .PdfObjectStream ]struct{}{};var _bc []*_bgd .PdfObjectStream ;_adg :=func (_aa *_bgd .PdfObjectStream ){if _ ,_ecc :=_cefb [_aa ];
!_ecc {_cefb [_aa ]=struct{}{};_bc =append (_bc ,_aa );};};_ade :=map[_bgd .PdfObject ]bool {};_abb :=map[_bgd .PdfObject ]bool {};for _ ,_cg :=range objects {switch _bf :=_cg .(type ){case *_bgd .PdfIndirectObject :switch _ff :=_bf .PdfObject .(type ){case *_bgd .PdfObjectDictionary :if _fgf ,_gc :=_bgd .GetName (_ff .Get ("\u0054\u0079\u0070\u0065"));
!_gc ||_fgf .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _be ,_dc :=_bgd .GetStream (_ff .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_dc {_adg (_be );}else if _af ,_bd :=_bgd .GetArray (_ff .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_bd {var _bgb []*_bgd .PdfObjectStream ;for _ ,_de :=range _af .Elements (){if _bea ,_bfc :=_bgd .GetStream (_de );_bfc {_bgb =append (_bgb ,_bea );};};if len (_bgb )> 0{var _deb _fee .Buffer ;for _ ,_cee :=range _bgb {if _gdc ,_fbd :=_bgd .DecodeStream (_cee );
_fbd ==nil {_deb .Write (_gdc );};_ade [_cee ]=true ;};_bfd ,_cbe :=_bgd .MakeStream (_deb .Bytes (),_bgd .NewFlateEncoder ());if _cbe !=nil {return nil ,_cbe ;};_abb [_bfd ]=true ;_ff .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_bfd );_adg (_bfd );
};};};case *_bgd .PdfObjectStream :if _ag ,_ba :=_bgd .GetName (_bf .Get ("\u0054\u0079\u0070\u0065"));!_ba ||_ag .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _ddd ,_eb :=_bgd .GetName (_bf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_eb ||_ddd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_adg (_bf );};};for _ ,_eee :=range _bc {_cd =_bgc (_eee );if _cd !=nil {return nil ,_cd ;};};_fbc =nil ;for _ ,_cbg :=range objects {if _ade [_cbg ]{continue ;};_fbc =append (_fbc ,_cbg );
};for _fbcg :=range _abb {_fbc =append (_fbc ,_fbcg );};return _fbc ,nil ;};func _bgc (_fg *_bgd .PdfObjectStream )error {_fd ,_fed :=_bgd .DecodeStream (_fg );if _fed !=nil {return _fed ;};_fa :=_aba .NewContentStreamParser (string (_fd ));_cef ,_fed :=_fa .Parse ();
if _fed !=nil {return _fed ;};_cef =_dd (_cef );_gb :=_cef .Bytes ();if len (_gb )>=len (_fd ){return nil ;};_eg ,_fed :=_bgd .MakeStream (_cef .Bytes (),_bgd .NewFlateEncoder ());if _fed !=nil {return _fed ;};_fg .Stream =_eg .Stream ;_fg .Merge (_eg .PdfObjectDictionary );
return nil ;};func _dd (_eea *_aba .ContentStreamOperations )*_aba .ContentStreamOperations {if _eea ==nil {return nil ;};_ced :=_aba .ContentStreamOperations {};for _ ,_cff :=range *_eea {switch _cff .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_cff .Params )==6{if _ed ,_ec :=_bgd .GetNumbersAsFloat (_cff .Params );_ec ==nil {if _ed [0]==1&&_ed [1]==0&&_ed [2]==0&&_ed [3]==1{_cff =&_aba .ContentStreamOperation {Params :[]_bgd .PdfObject {_cff .Params [4],_cff .Params [5]},Operand :"\u0054\u0064"};
};};};};_ced =append (_ced ,_cff );};return &_ced ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_bgd .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bbda *CombineDuplicateStreams )Optimize (objects []_bgd .PdfObject )(_cfg []_bgd .PdfObject ,_ffg error ){_gfa :=make (map[_bgd .PdfObject ]_bgd .PdfObject );_fad :=make (map[_bgd .PdfObject ]struct{});_ecdc :=make (map[string ][]*_bgd .PdfObjectStream );
for _ ,_gccb :=range objects {if _afgf ,_bbaf :=_gccb .(*_bgd .PdfObjectStream );_bbaf {_baf :=_ce .New ();_baf .Write (_afgf .Stream );_baf .Write ([]byte (_afgf .PdfObjectDictionary .WriteString ()));_feg :=string (_baf .Sum (nil ));_ecdc [_feg ]=append (_ecdc [_feg ],_afgf );
};};for _ ,_cgec :=range _ecdc {if len (_cgec )< 2{continue ;};_ddeg :=_cgec [0];for _abfe :=1;_abfe < len (_cgec );_abfe ++{_gbfe :=_cgec [_abfe ];_gfa [_gbfe ]=_ddeg ;_fad [_gbfe ]=struct{}{};};};_cfg =make ([]_bgd .PdfObject ,0,len (objects )-len (_fad ));
for _ ,_fbca :=range objects {if _ ,_eccd :=_fad [_fbca ];_eccd {continue ;};_cfg =append (_cfg ,_fbca );};_agdgf (_cfg ,_gfa );return _cfg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cf *Chain )Optimize (objects []_bgd .PdfObject )(_fb []_bgd .PdfObject ,_d error ){_cb :=objects ;for _ ,_bb :=range _cf ._g {_bbe ,_gd :=_bb .Optimize (_cb );if _gd !=nil {_b .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_gd );
continue ;};_cb =_bbe ;};return _cb ,nil ;};type objectStructure struct{_bed *_bgd .PdfObjectDictionary ;_acgcf *_bgd .PdfObjectDictionary ;_bcgc []*_bgd .PdfIndirectObject ;};type content struct{_dff string ;_gag *_ef .PdfPageResources ;};func _feeg (_beb _bgd .PdfObject )[]content {if _beb ==nil {return nil ;
};_fag ,_bba :=_bgd .GetArray (_beb );if !_bba {_b .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _aafgf []content ;for _ ,_cdb :=range _fag .Elements (){_gdag ,_cdca :=_bgd .GetDict (_cdb );
if !_cdca {_b .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_dad ,_cdca :=_bgd .GetDict (_gdag .Get ("\u0041\u0050"));
if !_cdca {_b .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cfbe :=_bgd .TraceToDirectObject (_dad .Get ("\u004e"));if _cfbe ==nil {_b .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};var _faa *_bgd .PdfObjectStream ;switch _fbcb :=_cfbe .(type ){case *_bgd .PdfObjectDictionary :_cbdf ,_cfe :=_bgd .GetName (_gdag .Get ("\u0041\u0053"));if !_cfe {_b .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");
continue ;};_faa ,_cfe =_bgd .GetStream (_fbcb .Get (*_cbdf ));if !_cfe {_b .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_bgd .PdfObjectStream :_faa =_fbcb ;
};if _faa ==nil {_b .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_aga ,_afa :=_ef .NewXObjectFormFromStream (_faa );
if _afa !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_afa );continue ;};_bebf ,_afa :=_aga .GetContentStream ();
if _afa !=nil {_b .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_afa );continue ;};_aafgf =append (_aafgf ,content {_dff :string (_bebf ),_gag :_aga .Resources });
};return _aafgf ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _gbfc (_fcb string ,_fdcf []string )bool {for _ ,_fbcge :=range _fdcf {if _fcb ==_fbcge {return true ;};};return false ;};func _abaf (_aaa *_bgd .PdfObjectDictionary )[]string {_dbd :=[]string {};for _ ,_fbe :=range _aaa .Keys (){_dbd =append (_dbd ,_fbe .String ());
};return _dbd ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _aeb (_efc []_bgd .PdfObject )(map[_bgd .PdfObject ]struct{},error ){_cdgc :=_ggcc (_efc );_afcc :=_cdgc ._bcgc ;_babc :=make (map[_bgd .PdfObject ]struct{});_ege :=_gfg (_afcc );for _ ,_cedc :=range _afcc {_bade ,_dea :=_bgd .GetDict (_cedc .PdfObject );
if !_dea {continue ;};_add ,_dea :=_bgd .GetDict (_bade .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dea {continue ;};_feda :=_ege ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_bce ,_dea :=_bgd .GetDict (_add .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
if _dea {_ageb :=_abaf (_bce );for _ ,_eceb :=range _ageb {if _gbfc (_eceb ,_feda ){continue ;};_bcgd :=*_bgd .MakeName (_eceb );_geeg :=_bce .Get (_bcgd );_babc [_geeg ]=struct{}{};_bce .Remove (_bcgd );_aee :=_bgcb (_geeg ,_babc );if _aee !=nil {_b .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_geeg );
};};};_debfb ,_dea :=_bgd .GetDict (_add .Get ("\u0046\u006f\u006e\u0074"));_gf :=_ege ["\u0046\u006f\u006e\u0074"];if _dea {_egd :=_abaf (_debfb );for _ ,_daba :=range _egd {if _gbfc (_daba ,_gf ){continue ;};_fcd :=*_bgd .MakeName (_daba );_edd :=_debfb .Get (_fcd );
_babc [_edd ]=struct{}{};_debfb .Remove (_fcd );_dfd :=_bgcb (_edd ,_babc );if _dfd !=nil {_b .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_edd );
};};};_dgb ,_dea :=_bgd .GetDict (_add .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _dea {_aeg :=_abaf (_dgb );_gga :=_ege ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_ddb :=range _aeg {if _gbfc (_ddb ,_gga ){continue ;};_gdeb :=*_bgd .MakeName (_ddb );
_bffe :=_dgb .Get (_gdeb );_babc [_bffe ]=struct{}{};_dgb .Remove (_gdeb );_eed :=_bgcb (_bffe ,_babc );if _eed !=nil {_b .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_bffe );
};};};};return _babc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ggbf *CompressStreams )Optimize (objects []_bgd .PdfObject )(_aebc []_bgd .PdfObject ,_gdgc error ){_aebc =make ([]_bgd .PdfObject ,len (objects ));copy (_aebc ,objects );for _ ,_bfe :=range objects {_egg ,_ega :=_bgd .GetStream (_bfe );if !_ega {continue ;
};if _gdae :=_egg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_gdae !=nil {if _ ,_dacf :=_bgd .GetName (_gdae );_dacf {continue ;};if _cfcd ,_def :=_bgd .GetArray (_gdae );_def &&_cfcd .Len ()> 0{continue ;};};_cged :=_bgd .NewFlateEncoder ();var _accg []byte ;
_accg ,_gdgc =_cged .EncodeBytes (_egg .Stream );if _gdgc !=nil {return _aebc ,_gdgc ;};_eccec :=_cged .MakeStreamDict ();if len (_accg )+len (_eccec .WriteString ())< len (_egg .Stream ){_egg .Stream =_accg ;_egg .PdfObjectDictionary .Merge (_eccec );
_egg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bgd .MakeInteger (int64 (len (_egg .Stream ))));};};return _aebc ,nil ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _eccg (_dca []_bgd .PdfObject )(_feb map[*_bgd .PdfObjectStream ]struct{},_ffd error ){_feb =map[*_bgd .PdfObjectStream ]struct{}{};_cbc :=map[*_ef .PdfFont ]struct{}{};_age :=_ggcc (_dca );for _ ,_gce :=range _age ._bcgc {_afg ,_cbd :=_bgd .GetDict (_gce .PdfObject );
if !_cbd {continue ;};_afd ,_cbd :=_bgd .GetDict (_afg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_cbd {continue ;};_cbef ,_ :=_bcea (_afg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bad ,_aaf :=_ef .NewPdfPageResourcesFromDict (_afd );
if _aaf !=nil {return nil ,_aaf ;};_dg :=[]content {{_dff :_cbef ,_gag :_bad }};_ge :=_feeg (_afg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ge !=nil {_dg =append (_dg ,_ge ...);};for _ ,_bgcc :=range _dg {_eca ,_ea :=_bg .NewFromContents (_bgcc ._dff ,_bgcc ._gag );
if _ea !=nil {return nil ,_ea ;};_gg ,_ ,_ ,_ea :=_eca .ExtractPageText ();if _ea !=nil {return nil ,_ea ;};for _ ,_eec :=range _gg .Marks ().Elements (){if _eec .Font ==nil {continue ;};if _ ,_efb :=_cbc [_eec .Font ];!_efb {_cbc [_eec .Font ]=struct{}{};
};};};};_bae :=map[*_bgd .PdfObjectStream ][]*_ef .PdfFont {};for _cdc :=range _cbc {_gda :=_cdc .FontDescriptor ();if _gda ==nil ||_gda .FontFile2 ==nil {continue ;};_df ,_fc :=_bgd .GetStream (_gda .FontFile2 );if !_fc {continue ;};_bae [_df ]=append (_bae [_df ],_cdc );
};for _gdg :=range _bae {var _cbgb []rune ;var _debf []_ab .GlyphIndex ;for _ ,_aafb :=range _bae [_gdg ]{switch _bff :=_aafb .Encoder ().(type ){case *_fe .IdentityEncoder :_eab :=_bff .RegisteredRunes ();_fcf :=make ([]_ab .GlyphIndex ,len (_eab ));for _ebe ,_aafg :=range _eab {_fcf [_ebe ]=_ab .GlyphIndex (_aafg );
};_debf =append (_debf ,_fcf ...);case *_fe .TrueTypeFontEncoder :_abbf :=_bff .RegisteredRunes ();_cbgb =append (_cbgb ,_abbf ...);case _fe .SimpleEncoder :_bec :=_bff .Charcodes ();for _ ,_ebef :=range _bec {_cgg ,_gee :=_bff .CharcodeToRune (_ebef );
if !_gee {_b .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_ebef );continue ;};_cbgb =append (_cbgb ,_cgg );};};};_ffd =_efe (_gdg ,_cbgb ,_debf );
if _ffd !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ffd );return nil ,_ffd ;};_feb [_gdg ]=struct{}{};
};return _feb ,nil ;};func _gcf (_abag *_ef .Image ,_efa float64 )(*_ef .Image ,error ){_cfbeb ,_egb :=_abag .ToGoImage ();if _egb !=nil {return nil ,_egb ;};var _aefe _acf .Image ;_eae ,_egec :=_cfbeb .(*_acf .Monochrome );if _egec {if _egb =_eae .ResolveDecode ();
_egb !=nil {return nil ,_egb ;};_aefe ,_egb =_eae .Scale (_efa );if _egb !=nil {return nil ,_egb ;};}else {_ebb :=int (_ac .RoundToEven (float64 (_abag .Width )*_efa ));_gbcg :=int (_ac .RoundToEven (float64 (_abag .Height )*_efa ));_aefe ,_egb =_acf .NewImage (_ebb ,_gbcg ,int (_abag .BitsPerComponent ),_abag .ColorComponents ,nil ,nil ,nil );
if _egb !=nil {return nil ,_egb ;};_c .CatmullRom .Scale (_aefe ,_aefe .Bounds (),_cfbeb ,_cfbeb .Bounds (),_c .Over ,&_c .Options {});};_ddff :=_aefe .Base ();_ecf :=&_ef .Image {Width :int64 (_ddff .Width ),Height :int64 (_ddff .Height ),BitsPerComponent :int64 (_ddff .BitsPerComponent ),ColorComponents :_ddff .ColorComponents ,Data :_ddff .Data };
_ecf .SetDecode (_ddff .Decode );_ecf .SetAlpha (_ddff .Alpha );return _ecf ,nil ;};func _bgcb (_cge _bgd .PdfObject ,_ggf map[_bgd .PdfObject ]struct{})error {if _aef ,_bgcg :=_cge .(*_bgd .PdfIndirectObject );_bgcg {_ggf [_cge ]=struct{}{};_fdc :=_bgcb (_aef .PdfObject ,_ggf );
if _fdc !=nil {return _fdc ;};return nil ;};if _bcbe ,_bdgg :=_cge .(*_bgd .PdfObjectStream );_bdgg {_ggf [_bcbe ]=struct{}{};_beg :=_bgcb (_bcbe .PdfObjectDictionary ,_ggf );if _beg !=nil {return _beg ;};return nil ;};if _fce ,_ecce :=_cge .(*_bgd .PdfObjectDictionary );
_ecce {for _ ,_cbcb :=range _fce .Keys (){_cag :=_fce .Get (_cbcb );_ =_cag ;if _efca ,_cfc :=_cag .(*_bgd .PdfObjectReference );_cfc {_cag =_efca .Resolve ();_fce .Set (_cbcb ,_cag );};if _cbcb !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _cec :=_bgcb (_cag ,_ggf );
_cec !=nil {return _cec ;};};};return nil ;};if _bgg ,_dcb :=_cge .(*_bgd .PdfObjectArray );_dcb {if _bgg ==nil {return _ad .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _dgbg ,_bag :=range _bgg .Elements (){if _aab ,_fcdg :=_bag .(*_bgd .PdfObjectReference );
_fcdg {_bag =_aab .Resolve ();_bgg .Set (_dgbg ,_bag );};if _aeca :=_bgcb (_bag ,_ggf );_aeca !=nil {return _aeca ;};};return nil ;};return nil ;};func _egdgb (_aaca *_ef .XObjectImage ,_dddc imageModifications )error {_fade ,_ccg :=_aaca .ToImage ();if _ccg !=nil {return _ccg ;
};if _dddc .Scale !=0{_fade ,_ccg =_gcf (_fade ,_dddc .Scale );if _ccg !=nil {return _ccg ;};};if _dddc .Encoding !=nil {_aaca .Filter =_dddc .Encoding ;};_aaca .Decode =nil ;switch _dbf :=_aaca .Filter .(type ){case *_bgd .FlateEncoder :if _dbf .Predictor !=1&&_dbf .Predictor !=11{_dbf .Predictor =1;
};};if _ccg =_aaca .SetImage (_fade ,nil );_ccg !=nil {_b .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ccg );return _ccg ;};_aaca .ToPdfObject ();return nil ;
};type imageModifications struct{Scale float64 ;Encoding _bgd .StreamEncoder ;};

// Append appends optimizers to the chain.
func (_ee *Chain )Append (optimizers ..._ef .Optimizer ){_ee ._g =append (_ee ._g ,optimizers ...)};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _fge (_eggc []_bgd .PdfObject )[]*imageInfo {_dece :=_bgd .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_cae :=make (map[*_bgd .PdfObjectStream ]struct{});var _dbgc []*imageInfo ;for _ ,_ggbb :=range _eggc {_gge ,_ffgd :=_bgd .GetStream (_ggbb );
if !_ffgd {continue ;};if _ ,_fceec :=_cae [_gge ];_fceec {continue ;};_cae [_gge ]=struct{}{};_bceg :=_gge .PdfObjectDictionary .Get (_dece );_feeec ,_ffgd :=_bgd .GetName (_bceg );if !_ffgd ||string (*_feeec )!="\u0049\u006d\u0061g\u0065"{continue ;};
_fbbb :=&imageInfo {Stream :_gge ,BitsPerComponent :8};if _gcg ,_ddf :=_bgd .GetIntVal (_gge .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ddf {_fbbb .BitsPerComponent =_gcg ;};if _bggd ,_gbc :=_bgd .GetIntVal (_gge .Get ("\u0057\u0069\u0064t\u0068"));
_gbc {_fbbb .Width =_bggd ;};if _cgce ,_gacd :=_bgd .GetIntVal (_gge .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_gacd {_fbbb .Height =_cgce ;};_agdg ,_fdf :=_ef .NewPdfColorspaceFromPdfObject (_gge .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _fdf !=nil {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fdf );continue ;};if _agdg ==nil {_ffde ,_cedd :=_bgd .GetName (_gge .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _cedd {switch _ffde .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_agdg =_ef .NewPdfColorspaceDeviceGray ();
_fbbb .BitsPerComponent =1;};};};switch _bbgc :=_agdg .(type ){case *_ef .PdfColorspaceDeviceRGB :_fbbb .ColorComponents =3;case *_ef .PdfColorspaceDeviceGray :_fbbb .ColorComponents =1;default:_b .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_bbgc );
continue ;};_dbgc =append (_dbgc ,_fbbb );};return _dbgc ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _ggcc (_gaf []_bgd .PdfObject )objectStructure {_cdf :=objectStructure {};_fbbba :=false ;for _ ,_cfcb :=range _gaf {switch _fcde :=_cfcb .(type ){case *_bgd .PdfIndirectObject :_ada ,_fgedd :=_bgd .GetDict (_fcde );
if !_fgedd {continue ;};_cdga ,_fgedd :=_bgd .GetName (_ada .Get ("\u0054\u0079\u0070\u0065"));if !_fgedd {continue ;};switch _cdga .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_cdf ._bed =_ada ;_fbbba =true ;};};if _fbbba {break ;};};if !_fbbba {return _cdf ;
};_ddeac ,_bgf :=_bgd .GetDict (_cdf ._bed .Get ("\u0050\u0061\u0067e\u0073"));if !_bgf {return _cdf ;};_cdf ._acgcf =_ddeac ;_gbfa ,_bgf :=_bgd .GetArray (_ddeac .Get ("\u004b\u0069\u0064\u0073"));if !_bgf {return _cdf ;};for _ ,_ddge :=range _gbfa .Elements (){_efed ,_cffb :=_bgd .GetIndirect (_ddge );
if !_cffb {break ;};_cdf ._bcgc =append (_cdf ._bcgc ,_efed );};return _cdf ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ddea *Image )Optimize (objects []_bgd .PdfObject )(_gffd []_bgd .PdfObject ,_agb error ){if _ddea .ImageQuality <=0{return objects ,nil ;};_dcf :=_fge (objects );if len (_dcf )==0{return objects ,nil ;};_egdf :=make (map[_bgd .PdfObject ]_bgd .PdfObject );
_bdc :=make (map[_bgd .PdfObject ]struct{});for _ ,_cgb :=range _dcf {_agda :=_cgb .Stream .Get ("\u0053\u004d\u0061s\u006b");_bdc [_agda ]=struct{}{};};for _dcdc ,_bgdg :=range _dcf {_ged :=_bgdg .Stream ;if _ ,_deac :=_bdc [_ged ];_deac {continue ;};
_feed ,_ebcb :=_ef .NewXObjectImageFromStream (_ged );if _ebcb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebcb );continue ;};switch _feed .Filter .(type ){case *_bgd .JBIG2Encoder :continue ;case *_bgd .CCITTFaxEncoder :continue ;
};_babd ,_ebcb :=_feed .ToImage ();if _ebcb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebcb );continue ;};_dga :=_bgd .NewDCTEncoder ();_dga .ColorComponents =_babd .ColorComponents ;_dga .Quality =_ddea .ImageQuality ;
_dga .BitsPerComponent =_bgdg .BitsPerComponent ;_dga .Width =_bgdg .Width ;_dga .Height =_bgdg .Height ;_acfb ,_ebcb :=_dga .EncodeBytes (_babd .Data );if _ebcb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebcb );
continue ;};var _agab _bgd .StreamEncoder ;_agab =_dga ;{_cgbc :=_bgd .NewFlateEncoder ();_gea :=_bgd .NewMultiEncoder ();_gea .AddEncoder (_cgbc );_gea .AddEncoder (_dga );_ggbc ,_bacf :=_gea .EncodeBytes (_babd .Data );if _bacf !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bacf );
continue ;};if len (_ggbc )< len (_acfb ){_b .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_acfb ),len (_ggbc ),len (_ged .Stream ));
_acfb =_ggbc ;_agab =_gea ;};};_abfc :=len (_ged .Stream );if _abfc < len (_acfb ){continue ;};_agce :=&_bgd .PdfObjectStream {Stream :_acfb };_agce .PdfObjectReference =_ged .PdfObjectReference ;_agce .PdfObjectDictionary =_bgd .MakeDict ();_agce .Merge (_ged .PdfObjectDictionary );
_agce .Merge (_agab .MakeStreamDict ());_agce .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bgd .MakeInteger (int64 (len (_acfb ))));_egdf [_ged ]=_agce ;_dcf [_dcdc ].Stream =_agce ;};_gffd =make ([]_bgd .PdfObject ,len (objects ));copy (_gffd ,objects );
_agdgf (_gffd ,_egdf );return _gffd ,nil ;};

// Optimize implements Optimizer interface.
func (_ebcg *CleanUnusedResources )Optimize (objects []_bgd .PdfObject )(_dgc []_bgd .PdfObject ,_dcg error ){_ffbb ,_dcg :=_aeb (objects );if _dcg !=nil {return nil ,_dcg ;};_geee :=[]_bgd .PdfObject {};for _ ,_bcb :=range objects {_ ,_agcd :=_ffbb [_bcb ];
if _agcd {continue ;};_geee =append (_geee ,_bcb );};return _geee ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_beaa *CombineDuplicateDirectObjects )Optimize (objects []_bgd .PdfObject )(_cbcc []_bgd .PdfObject ,_dgcf error ){_gdfa (objects );_acgc :=make (map[string ][]*_bgd .PdfObjectDictionary );var _aac func (_fceb *_bgd .PdfObjectDictionary );_aac =func (_ffbd *_bgd .PdfObjectDictionary ){for _ ,_geec :=range _ffbd .Keys (){_cfaf :=_ffbd .Get (_geec );
if _fcc ,_adf :=_cfaf .(*_bgd .PdfObjectDictionary );_adf {_fda :=_ce .New ();_fda .Write ([]byte (_fcc .WriteString ()));_ddcf :=string (_fda .Sum (nil ));_acgc [_ddcf ]=append (_acgc [_ddcf ],_fcc );_aac (_fcc );};};};for _ ,_dcdg :=range objects {_dda ,_ffe :=_dcdg .(*_bgd .PdfIndirectObject );
if !_ffe {continue ;};if _bddf ,_edc :=_dda .PdfObject .(*_bgd .PdfObjectDictionary );_edc {_aac (_bddf );};};_cca :=make ([]_bgd .PdfObject ,0,len (_acgc ));_dgd :=make (map[_bgd .PdfObject ]_bgd .PdfObject );for _ ,_gbed :=range _acgc {if len (_gbed )< 2{continue ;
};_bgge :=_bgd .MakeDict ();_bgge .Merge (_gbed [0]);_gfb :=_bgd .MakeIndirectObject (_bgge );_cca =append (_cca ,_gfb );for _feee :=0;_feee < len (_gbed );_feee ++{_bef :=_gbed [_feee ];_dgd [_bef ]=_gfb ;};};_cbcc =make ([]_bgd .PdfObject ,len (objects ));
copy (_cbcc ,objects );_cbcc =append (_cca ,_cbcc ...);_agdgf (_cbcc ,_dgd );return _cbcc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_feegb *CombineIdenticalIndirectObjects )Optimize (objects []_bgd .PdfObject )(_cggb []_bgd .PdfObject ,_acc error ){_gdfa (objects );_dace :=make (map[_bgd .PdfObject ]_bgd .PdfObject );_daf :=make (map[_bgd .PdfObject ]struct{});_gfaa :=make (map[string ][]*_bgd .PdfIndirectObject );
for _ ,_fea :=range objects {_cgc ,_fgfg :=_fea .(*_bgd .PdfIndirectObject );if !_fgfg {continue ;};if _ecbb ,_dabg :=_cgc .PdfObject .(*_bgd .PdfObjectDictionary );_dabg {if _aadc ,_dce :=_ecbb .Get ("\u0054\u0079\u0070\u0065").(*_bgd .PdfObjectName );
_dce &&*_aadc =="\u0050\u0061\u0067\u0065"{continue ;};_ddac :=_ce .New ();_ddac .Write ([]byte (_ecbb .WriteString ()));_ggb :=string (_ddac .Sum (nil ));_gfaa [_ggb ]=append (_gfaa [_ggb ],_cgc );};};for _ ,_bfcfg :=range _gfaa {if len (_bfcfg )< 2{continue ;
};_agcde :=_bfcfg [0];for _fage :=1;_fage < len (_bfcfg );_fage ++{_egf :=_bfcfg [_fage ];_dace [_egf ]=_agcde ;_daf [_egf ]=struct{}{};};};_cggb =make ([]_bgd .PdfObject ,0,len (objects )-len (_daf ));for _ ,_gae :=range objects {if _ ,_fca :=_daf [_gae ];
_fca {continue ;};_cggb =append (_cggb ,_gae );};_agdgf (_cggb ,_dace );return _cggb ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gad *CleanFonts )Optimize (objects []_bgd .PdfObject )(_bcd []_bgd .PdfObject ,_bab error ){var _cda map[*_bgd .PdfObjectStream ]struct{};if _gad .Subset {var _cgd error ;_cda ,_cgd =_eccg (objects );if _cgd !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cgd );
return nil ,_cgd ;};};for _ ,_ffb :=range objects {_eaa ,_bca :=_bgd .GetStream (_ffb );if !_bca {continue ;};if _ ,_gcc :=_cda [_eaa ];_gcc {continue ;};_cdgb ,_aec :=_bgd .NewEncoderFromStream (_eaa );if _aec !=nil {_b .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_aec );
continue ;};_eabe ,_aec :=_cdgb .DecodeStream (_eaa );if _aec !=nil {_b .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_aec );
continue ;};if len (_eabe )< 4{continue ;};_bfcb :=string (_eabe [:4]);if _bfcb =="\u004f\u0054\u0054\u004f"{continue ;};if _bfcb !="\u0000\u0001\u0000\u0000"&&_bfcb !="\u0074\u0072\u0075\u0065"{continue ;};_dcd ,_aec :=_ab .Parse (_fee .NewReader (_eabe ));
if _aec !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aec );continue ;};_aec =_dcd .Optimize ();
if _aec !=nil {_b .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_aec );continue ;};var _fbdf _fee .Buffer ;_aec =_dcd .Write (&_fbdf );
if _aec !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aec );continue ;};if _fbdf .Len ()> len (_eabe ){_b .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_gdge ,_aec :=_bgd .MakeStream (_fbdf .Bytes (),_bgd .NewFlateEncoder ());if _aec !=nil {continue ;};*_eaa =*_gdge ;_eaa .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bgd .MakeInteger (int64 (_fbdf .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ccf *ImagePPI )Optimize (objects []_bgd .PdfObject )(_agdaa []_bgd .PdfObject ,_ddacb error ){if _ccf .ImageUpperPPI <=0{return objects ,nil ;};_aeef :=_fge (objects );if len (_aeef )==0{return objects ,nil ;};_edg :=make (map[_bgd .PdfObject ]struct{});
for _ ,_agebe :=range _aeef {_fdbd :=_agebe .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_edg [_fdbd ]=struct{}{};};_fagea :=make (map[*_bgd .PdfObjectStream ]*imageInfo );for _ ,_eaec :=range _aeef {_fagea [_eaec .Stream ]=_eaec ;};
var _fbdb *_bgd .PdfObjectDictionary ;for _ ,_edca :=range objects {if _ecg ,_ceab :=_bgd .GetDict (_edca );_fbdb ==nil &&_ceab {if _gdd ,_dfa :=_bgd .GetName (_ecg .Get ("\u0054\u0079\u0070\u0065"));_dfa &&*_gdd =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_fbdb =_ecg ;
};};};if _fbdb ==nil {return objects ,nil ;};_daa ,_efbc :=_bgd .GetDict (_fbdb .Get ("\u0050\u0061\u0067e\u0073"));if !_efbc {return objects ,nil ;};_fba ,_abfb :=_bgd .GetArray (_daa .Get ("\u004b\u0069\u0064\u0073"));if !_abfb {return objects ,nil ;
};for _ ,_fafd :=range _fba .Elements (){_bcdb :=make (map[string ]*imageInfo );_dgg ,_fgb :=_bgd .GetDict (_fafd );if !_fgb {continue ;};_fcg ,_ :=_bcea (_dgg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_fcg )==0{continue ;};_gede ,_gdfe :=_bgd .GetDict (_dgg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_gdfe {continue ;};_febd ,_gca :=_ef .NewPdfPageResourcesFromDict (_gede );if _gca !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_gca );
continue ;};_bafc ,_cgf :=_bgd .GetDict (_gede .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cgf {continue ;};_edcb :=_bafc .Keys ();for _ ,_dee :=range _edcb {if _eedg ,_gcec :=_bgd .GetStream (_bafc .Get (_dee ));_gcec {if _gbecc ,_dcbc :=_fagea [_eedg ];
_dcbc {_bcdb [string (_dee )]=_gbecc ;};};};_dfb :=_aba .NewContentStreamParser (_fcg );_ecbg ,_gca :=_dfb .Parse ();if _gca !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gca );continue ;};_ecbc :=_aba .NewContentStreamProcessor (*_ecbg );
_ecbc .AddHandler (_aba .HandlerConditionEnumAllOperands ,"",func (_egef *_aba .ContentStreamOperation ,_ecdg _aba .GraphicsState ,_daec *_ef .PdfPageResources )error {switch _egef .Operand {case "\u0044\u006f":if len (_egef .Params )!=1{_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_dcfa ,_ebeg :=_bgd .GetName (_egef .Params [0]);if !_ebeg {_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _bga ,_gbdb :=_bcdb [string (*_dcfa )];_gbdb {_bgac :=_ecdg .CTM .ScalingFactorX ();_ddee :=_ecdg .CTM .ScalingFactorY ();_gbgd ,_geed :=_bgac /72.0,_ddee /72.0;_beaab ,_gcgf :=float64 (_bga .Width )/_gbgd ,float64 (_bga .Height )/_geed ;
if _gbgd ==0||_geed ==0{_beaab =72.0;_gcgf =72.0;};_bga .PPI =_ac .Max (_bga .PPI ,_beaab );_bga .PPI =_ac .Max (_bga .PPI ,_gcgf );};};return nil ;});_gca =_ecbc .Process (_febd );if _gca !=nil {_b .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_gca );
continue ;};};for _ ,_ddad :=range _aeef {if _ ,_ffa :=_edg [_ddad .Stream ];_ffa {continue ;};if _ddad .PPI <=_ccf .ImageUpperPPI {continue ;};_edab ,_cbca :=_ef .NewXObjectImageFromStream (_ddad .Stream );if _cbca !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cbca );
continue ;};var _fbeg imageModifications ;_fbeg .Scale =_ccf .ImageUpperPPI /_ddad .PPI ;if _ddad .BitsPerComponent ==1&&_ddad .ColorComponents ==1{_fagf :=_ac .Round (_ddad .PPI /_ccf .ImageUpperPPI );_aadd :=_acf .NextPowerOf2 (uint (_fagf ));if _acf .InDelta (float64 (_aadd ),1/_fbeg .Scale ,0.3){_fbeg .Scale =float64 (1)/float64 (_aadd );
};if _ ,_cggc :=_edab .Filter .(*_bgd .JBIG2Encoder );!_cggc {_fbeg .Encoding =_bgd .NewJBIG2Encoder ();};};if _cbca =_egdgb (_edab ,_fbeg );_cbca !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cbca );
continue ;};_fbeg .Encoding =nil ;if _gagg ,_cde :=_bgd .GetStream (_ddad .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_cde {_fgg ,_aaad :=_ef .NewXObjectImageFromStream (_gagg );if _aaad !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aaad );
continue ;};if _aaad =_egdgb (_fgg ,_fbeg );_aaad !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aaad );continue ;};};};return objects ,nil ;};func _efe (_bcg *_bgd .PdfObjectStream ,_ecb []rune ,_bfa []_ab .GlyphIndex )error {_bcg ,_gbg :=_bgd .GetStream (_bcg );
if !_gbg {_b .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _ad .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_afc ,_ceb :=_bgd .DecodeStream (_bcg );if _ceb !=nil {_b .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ceb );
return _ceb ;};_adga ,_ceb :=_ab .Parse (_fee .NewReader (_afc ));if _ceb !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bcg .Stream ));
return _ceb ;};_ae :=_bfa ;if len (_ecb )> 0{_cbdc :=_adga .LookupRunes (_ecb );_ae =append (_ae ,_cbdc ...);};_adga ,_ceb =_adga .SubsetKeepIndices (_ae );if _ceb !=nil {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_ceb );
return _ceb ;};var _aad _fee .Buffer ;_ceb =_adga .Write (&_aad );if _ceb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ceb );return _ceb ;};if _aad .Len ()> len (_afc ){_b .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_bcc ,_ceb :=_bgd .MakeStream (_aad .Bytes (),_bgd .NewFlateEncoder ());if _ceb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ceb );return _ceb ;
};*_bcg =*_bcc ;_bcg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bgd .MakeInteger (int64 (_aad .Len ())));return nil ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_da *Chain )GetOptimizers ()[]_ef .Optimizer {return _da ._g };func _bcea (_bgfb _bgd .PdfObject )(_agg string ,_bde []_bgd .PdfObject ){var _abfd _fee .Buffer ;switch _ceeb :=_bgfb .(type ){case *_bgd .PdfIndirectObject :_bde =append (_bde ,_ceeb );
_bgfb =_ceeb .PdfObject ;};switch _eef :=_bgfb .(type ){case *_bgd .PdfObjectStream :if _bfdb ,_fbea :=_bgd .DecodeStream (_eef );_fbea ==nil {_abfd .Write (_bfdb );_bde =append (_bde ,_eef );};case *_bgd .PdfObjectArray :for _ ,_gcea :=range _eef .Elements (){switch _ggcf :=_gcea .(type ){case *_bgd .PdfObjectStream :if _bfb ,_dcfb :=_bgd .DecodeStream (_ggcf );
_dcfb ==nil {_abfd .Write (_bfb );_bde =append (_bde ,_ggcf );};};};};return _abfd .String (),_bde ;};func _agdgf (_adc []_bgd .PdfObject ,_dgbf map[_bgd .PdfObject ]_bgd .PdfObject ){if len (_dgbf )==0{return ;};for _bdfa ,_cad :=range _adc {if _afda ,_cbb :=_dgbf [_cad ];
_cbb {_adc [_bdfa ]=_afda ;continue ;};_dgbf [_cad ]=_cad ;switch _cgee :=_cad .(type ){case *_bgd .PdfObjectArray :_fgcg :=make ([]_bgd .PdfObject ,_cgee .Len ());copy (_fgcg ,_cgee .Elements ());_agdgf (_fgcg ,_dgbf );for _gdfec ,_gffc :=range _fgcg {_cgee .Set (_gdfec ,_gffc );
};case *_bgd .PdfObjectStreams :_agdgf (_cgee .Elements (),_dgbf );case *_bgd .PdfObjectStream :_eccf :=[]_bgd .PdfObject {_cgee .PdfObjectDictionary };_agdgf (_eccf ,_dgbf );_cgee .PdfObjectDictionary =_eccf [0].(*_bgd .PdfObjectDictionary );case *_bgd .PdfObjectDictionary :_ffbbc :=_cgee .Keys ();
_cce :=make ([]_bgd .PdfObject ,len (_ffbbc ));for _efaa ,_eaaf :=range _ffbbc {_cce [_efaa ]=_cgee .Get (_eaaf );};_agdgf (_cce ,_dgbf );for _eag ,_bgbb :=range _ffbbc {_cgee .Set (_bgbb ,_cce [_eag ]);};case *_bgd .PdfIndirectObject :_fae :=[]_bgd .PdfObject {_cgee .PdfObject };
_agdgf (_fae ,_dgbf );_cgee .PdfObject =_fae [0];};};};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_egae :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_egae .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_egae .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_dccd :=new (ImagePPI );
_dccd .ImageUpperPPI =options .ImageUpperPPI ;_egae .Append (_dccd );};if options .ImageQuality > 0{_cbefd :=new (Image );_cbefd .ImageQuality =options .ImageQuality ;_egae .Append (_cbefd );};if options .CombineDuplicateDirectObjects {_egae .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_egae .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_egae .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_egae .Append (new (ObjectStreams ));
};if options .CompressStreams {_egae .Append (new (CompressStreams ));};if options .CleanUnusedResources {_egae .Append (new (CleanUnusedResources ));};return _egae ;};func _gbf (_ggag _bgd .PdfObject )(string ,error ){_cbf :=_bgd .TraceToDirectObject (_ggag );
switch _acg :=_cbf .(type ){case *_bgd .PdfObjectString :return _acg .Str (),nil ;case *_bgd .PdfObjectStream :_bagg ,_gbge :=_bgd .DecodeStream (_acg );if _gbge !=nil {return "",_gbge ;};return string (_bagg ),nil ;};return "",_f .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_cbf );
};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_g []_ef .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_dcbf *ObjectStreams )Optimize (objects []_bgd .PdfObject )(_gbcc []_bgd .PdfObject ,_badd error ){_afca :=&_bgd .PdfObjectStreams {};_ccd :=make ([]_bgd .PdfObject ,0,len (objects ));for _ ,_caac :=range objects {if _ffgg ,_afef :=_caac .(*_bgd .PdfIndirectObject );
_afef &&_ffgg .GenerationNumber ==0{_afca .Append (_caac );}else {_ccd =append (_ccd ,_caac );};};if _afca .Len ()==0{return _ccd ,nil ;};_gbcc =make ([]_bgd .PdfObject ,0,len (_ccd )+_afca .Len ()+1);if _afca .Len ()> 1{_gbcc =append (_gbcc ,_afca );};
_gbcc =append (_gbcc ,_afca .Elements ()...);_gbcc =append (_gbcc ,_ccd ...);return _gbcc ,nil ;};func _gdfa (_bage []_bgd .PdfObject ){for _fgcc ,_bddd :=range _bage {switch _bbdg :=_bddd .(type ){case *_bgd .PdfIndirectObject :_bbdg .ObjectNumber =int64 (_fgcc +1);
_bbdg .GenerationNumber =0;case *_bgd .PdfObjectStream :_bbdg .ObjectNumber =int64 (_fgcc +1);_bbdg .GenerationNumber =0;case *_bgd .PdfObjectStreams :_bbdg .ObjectNumber =int64 (_fgcc +1);_bbdg .GenerationNumber =0;};};};func _gfg (_abf []*_bgd .PdfIndirectObject )map[string ][]string {_dabf :=map[string ][]string {};
for _ ,_fef :=range _abf {_baef ,_dfg :=_bgd .GetDict (_fef .PdfObject );if !_dfg {continue ;};_bdg :=_baef .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_gac :=_bgd .TraceToDirectObject (_bdg );_bbd :="";if _bfcf ,_bdfg :=_gac .(*_bgd .PdfObjectArray );
_bdfg {var _bbg []string ;for _ ,_abd :=range _bfcf .Elements (){_bgcf ,_adb :=_gbf (_abd );if _adb !=nil {continue ;};_bbg =append (_bbg ,_bgcf );};_bbd =_e .Join (_bbg ,"\u0020");};if _bfcd ,_ca :=_gac .(*_bgd .PdfObjectStream );_ca {_afe ,_geb :=_bgd .DecodeStream (_bfcd );
if _geb !=nil {continue ;};_bbd =string (_afe );};_dcc :=_aba .NewContentStreamParser (_bbd );_bdd ,_fbb :=_dcc .Parse ();if _fbb !=nil {continue ;};for _ ,_ace :=range *_bdd {_eccga :=_ace .Operand ;_ggc :=_ace .Params ;switch _eccga {case "\u0044\u006f":_afeg :=_ggc [0].String ();
if _ ,_dde :=_dabf ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_dde {_dabf ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_afeg };}else {_dabf ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_dabf ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_afeg );
};case "\u0054\u0066":_gff :=_ggc [0].String ();if _ ,_eda :=_dabf ["\u0046\u006f\u006e\u0074"];!_eda {_dabf ["\u0046\u006f\u006e\u0074"]=[]string {_gff };}else {_dabf ["\u0046\u006f\u006e\u0074"]=append (_dabf ["\u0046\u006f\u006e\u0074"],_gff );};case "\u0067\u0073":_dae :=_ggc [0].String ();
if _ ,_agd :=_dabf ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_agd {_dabf ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_dae };}else {_dabf ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_dabf ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_dae );
};};};};return _dabf ;};