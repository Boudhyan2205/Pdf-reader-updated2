//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fa "bytes";_a "crypto/md5";_c "errors";_d "github.com/unidoc/unipdf/v3/common";_fb "github.com/unidoc/unipdf/v3/contentstream";_bg "github.com/unidoc/unipdf/v3/core";_ade "github.com/unidoc/unipdf/v3/extractor";_ab "github.com/unidoc/unipdf/v3/internal/imageutil";
_ad "github.com/unidoc/unipdf/v3/internal/textencoding";_fbg "github.com/unidoc/unipdf/v3/model";_adc "github.com/unidoc/unitype";_g "golang.org/x/image/draw";_f "math";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_bbb *CombineDuplicateDirectObjects )Optimize (objects []_bg .PdfObject )(_gce []_bg .PdfObject ,_ffb error ){_dbece (objects );_gdae :=make (map[string ][]*_bg .PdfObjectDictionary );var _dfca func (_dgaa *_bg .PdfObjectDictionary );_dfca =func (_abff *_bg .PdfObjectDictionary ){for _ ,_aa :=range _abff .Keys (){_bdg :=_abff .Get (_aa );
if _fcdf ,_cdd :=_bdg .(*_bg .PdfObjectDictionary );_cdd {_ebd :=_a .New ();_ebd .Write ([]byte (_fcdf .WriteString ()));_cgc :=string (_ebd .Sum (nil ));_gdae [_cgc ]=append (_gdae [_cgc ],_fcdf );_dfca (_fcdf );};};};for _ ,_fda :=range objects {_ecfc ,_cec :=_fda .(*_bg .PdfIndirectObject );
if !_cec {continue ;};if _gbb ,_feb :=_ecfc .PdfObject .(*_bg .PdfObjectDictionary );_feb {_dfca (_gbb );};};_dgb :=make ([]_bg .PdfObject ,0,len (_gdae ));_fge :=make (map[_bg .PdfObject ]_bg .PdfObject );for _ ,_ggag :=range _gdae {if len (_ggag )< 2{continue ;
};_dgbb :=_bg .MakeDict ();_dgbb .Merge (_ggag [0]);_cecf :=_bg .MakeIndirectObject (_dgbb );_dgb =append (_dgb ,_cecf );for _eebb :=0;_eebb < len (_ggag );_eebb ++{_dad :=_ggag [_eebb ];_fge [_dad ]=_cecf ;};};_gce =make ([]_bg .PdfObject ,len (objects ));
copy (_gce ,objects );_gce =append (_dgb ,_gce ...);_cebg (_gce ,_fge );return _gce ,nil ;};type objectStructure struct{_eeab *_bg .PdfObjectDictionary ;_baeg *_bg .PdfObjectDictionary ;_accd []*_bg .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfbb *CombineIdenticalIndirectObjects )Optimize (objects []_bg .PdfObject )(_ggaf []_bg .PdfObject ,_bfde error ){_dbece (objects );_bfbe :=make (map[_bg .PdfObject ]_bg .PdfObject );_dgbe :=make (map[_bg .PdfObject ]struct{});_ae :=make (map[string ][]*_bg .PdfIndirectObject );
for _ ,_gfd :=range objects {_bff ,_eabc :=_gfd .(*_bg .PdfIndirectObject );if !_eabc {continue ;};if _bdd ,_aada :=_bff .PdfObject .(*_bg .PdfObjectDictionary );_aada {if _cad ,_dagc :=_bdd .Get ("\u0054\u0079\u0070\u0065").(*_bg .PdfObjectName );_dagc &&*_cad =="\u0050\u0061\u0067\u0065"{continue ;
};_aeb :=_a .New ();_aeb .Write ([]byte (_bdd .WriteString ()));_adcb :=string (_aeb .Sum (nil ));_ae [_adcb ]=append (_ae [_adcb ],_bff );};};for _ ,_egc :=range _ae {if len (_egc )< 2{continue ;};_ddfca :=_egc [0];for _baa :=1;_baa < len (_egc );_baa ++{_cea :=_egc [_baa ];
_bfbe [_cea ]=_ddfca ;_dgbe [_cea ]=struct{}{};};};_ggaf =make ([]_bg .PdfObject ,0,len (objects )-len (_dgbe ));for _ ,_gfg :=range objects {if _ ,_cdf :=_dgbe [_gfg ];_cdf {continue ;};_ggaf =append (_ggaf ,_gfg );};_cebg (_ggaf ,_bfbe );return _ggaf ,nil ;
};func _gaab (_bfdg []_bg .PdfObject )[]*imageInfo {_eac :=_bg .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_cdb :=make (map[*_bg .PdfObjectStream ]struct{});var _dcbbf error ;var _cbbf []*imageInfo ;for _ ,_gdeg :=range _bfdg {_ada ,_cdc :=_bg .GetStream (_gdeg );
if !_cdc {continue ;};if _ ,_aebc :=_cdb [_ada ];_aebc {continue ;};_cdb [_ada ]=struct{}{};_gcee :=_ada .PdfObjectDictionary .Get (_eac );_deae ,_cdc :=_bg .GetName (_gcee );if !_cdc ||string (*_deae )!="\u0049\u006d\u0061g\u0065"{continue ;};_dafe :=&imageInfo {BitsPerComponent :8,Stream :_ada };
if _dafe .ColorSpace ,_dcbbf =_fbg .DetermineColorspaceNameFromPdfObject (_ada .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_dcbbf !=nil {_d .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_dcbbf );
continue ;};if _gfa ,_eed :=_bg .GetIntVal (_ada .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_eed {_dafe .BitsPerComponent =_gfa ;};if _gad ,_agc :=_bg .GetIntVal (_ada .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));
_agc {_dafe .Width =_gad ;};if _agca ,_bdac :=_bg .GetIntVal (_ada .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_bdac {_dafe .Height =_agca ;};switch _dafe .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_dafe .ColorComponents =3;
case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_dafe .ColorComponents =1;default:_d .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_dafe .ColorSpace );
continue ;};_cbbf =append (_cbbf ,_dafe );};return _cbbf ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_fg []_fbg .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_eea *Image )Optimize (objects []_bg .PdfObject )(_ggf []_bg .PdfObject ,_bccd error ){if _eea .ImageQuality <=0{return objects ,nil ;};_fdf :=_gaab (objects );if len (_fdf )==0{return objects ,nil ;};_bee :=make (map[_bg .PdfObject ]_bg .PdfObject );
_fbe :=make (map[_bg .PdfObject ]struct{});for _ ,_cgg :=range _fdf {_fgeb :=_cgg .Stream .PdfObjectDictionary .Get (_bg .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_fbe [_fgeb ]=struct{}{};};for _agcf ,_gfab :=range _fdf {_bgc :=_gfab .Stream ;if _ ,_gdb :=_fbe [_bgc ];
_gdb {continue ;};_ed ,_eabe :=_bg .NewEncoderFromStream (_bgc );if _eabe !=nil {_d .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");
continue ;};_bcb ,_eabe :=_ed .DecodeStream (_bgc );if _eabe !=nil {_d .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");
continue ;};_decf :=_bg .NewDCTEncoder ();_decf .ColorComponents =_gfab .ColorComponents ;_decf .Quality =_eea .ImageQuality ;_decf .BitsPerComponent =_gfab .BitsPerComponent ;_decf .Width =_gfab .Width ;_decf .Height =_gfab .Height ;_dcgd ,_eabe :=_decf .EncodeBytes (_bcb );
if _eabe !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_eabe );return nil ,_eabe ;};var _ceg _bg .StreamEncoder ;_ceg =_decf ;{_cgbb :=_bg .NewFlateEncoder ();_agcc :=_bg .NewMultiEncoder ();_agcc .AddEncoder (_cgbb );_agcc .AddEncoder (_decf );
_aff ,_gff :=_agcc .EncodeBytes (_bcb );if _gff !=nil {return nil ,_gff ;};if len (_aff )< len (_dcgd ){_d .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dcgd ),len (_aff ),len (_bgc .Stream ));
_dcgd =_aff ;_ceg =_agcc ;};};_cbg :=len (_bgc .Stream );if _cbg < len (_dcgd ){continue ;};_gdag :=&_bg .PdfObjectStream {Stream :_dcgd };_gdag .PdfObjectReference =_bgc .PdfObjectReference ;_gdag .PdfObjectDictionary =_bg .MakeDict ();_gdag .Merge (_bgc .PdfObjectDictionary );
_gdag .Merge (_ceg .MakeStreamDict ());_gdag .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bg .MakeInteger (int64 (len (_dcgd ))));_bee [_bgc ]=_gdag ;_fdf [_agcf ].Stream =_gdag ;};_ggf =make ([]_bg .PdfObject ,len (objects ));copy (_ggf ,objects );_cebg (_ggf ,_bee );
return _ggf ,nil ;};func _bbbb (_caae _bg .PdfObject )(_fbaf string ,_babg []_bg .PdfObject ){var _fbec _fa .Buffer ;switch _bef :=_caae .(type ){case *_bg .PdfIndirectObject :_babg =append (_babg ,_bef );_caae =_bef .PdfObject ;};switch _ffc :=_caae .(type ){case *_bg .PdfObjectStream :if _bea ,_edb :=_bg .DecodeStream (_ffc );
_edb ==nil {_fbec .Write (_bea );_babg =append (_babg ,_ffc );};case *_bg .PdfObjectArray :for _ ,_dcge :=range _ffc .Elements (){switch _geb :=_dcge .(type ){case *_bg .PdfObjectStream :if _egge ,_baf :=_bg .DecodeStream (_geb );_baf ==nil {_fbec .Write (_egge );
_babg =append (_babg ,_geb );};};};};return _fbec .String (),_babg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cda *Chain )Optimize (objects []_bg .PdfObject )(_ga []_bg .PdfObject ,_dd error ){_ga =objects ;for _ ,_e :=range _cda ._fg {_ga ,_dd =_e .Optimize (_ga );if _dd !=nil {return _ga ,_dd ;};};return _ga ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgca *CompressStreams )Optimize (objects []_bg .PdfObject )(_deec []_bg .PdfObject ,_dec error ){_deec =make ([]_bg .PdfObject ,len (objects ));copy (_deec ,objects );for _ ,_eca :=range objects {_gee ,_dbbc :=_bg .GetStream (_eca );if !_dbbc {continue ;
};if _fac :=_gee .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fac !=nil {if _ ,_dbee :=_bg .GetName (_fac );_dbee {continue ;};if _ace ,_dgc :=_bg .GetArray (_fac );_dgc &&_ace .Len ()> 0{continue ;};};_gaaa :=_bg .NewFlateEncoder ();var _degcc []byte ;
_degcc ,_dec =_gaaa .EncodeBytes (_gee .Stream );if _dec !=nil {return _deec ,_dec ;};_ebb :=_gaaa .MakeStreamDict ();if len (_degcc )+len (_ebb .WriteString ())< len (_gee .Stream ){_gee .Stream =_degcc ;_gee .PdfObjectDictionary .Merge (_ebb );_gee .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bg .MakeInteger (int64 (len (_gee .Stream ))));
};};return _deec ,nil ;};func _gfeg (_beb *_fbg .XObjectImage ,_gbbe imageModifications )error {_gdd ,_aee :=_beb .ToImage ();if _aee !=nil {return _aee ;};if _gbbe .Scale !=0{_gdd ,_aee =_fdd (_gdd ,_gbbe .Scale );if _aee !=nil {return _aee ;};};if _gbbe .Encoding !=nil {_beb .Filter =_gbbe .Encoding ;
};_baed :=_bg .MakeDict ();_baed .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_bg .MakeInteger (100));_baed .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_bg .MakeInteger (1));_beb .Decode =nil ;if _aee =_beb .SetImage (_gdd ,nil );_aee !=nil {return _aee ;
};_beb .ToPdfObject ();return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Append appends optimizers to the chain.
func (_cd *Chain )Append (optimizers ..._fbg .Optimizer ){_cd ._fg =append (_cd ._fg ,optimizers ...)};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _bca (_gfb *_bg .PdfObjectStream ,_gda []rune ,_afb []_adc .GlyphIndex )error {_gfb ,_egg :=_bg .GetStream (_gfb );if !_egg {_d .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _c .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_adf ,_dcbf :=_bg .DecodeStream (_gfb );if _dcbf !=nil {_d .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_dcbf );
return _dcbf ;};_cdae ,_dcbf :=_adc .Parse (_fa .NewReader (_adf ));if _dcbf !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gfb .Stream ));
return _dcbf ;};_abg :=_afb ;if len (_gda )> 0{_ecb :=_cdae .LookupRunes (_gda );_abg =append (_abg ,_ecb ...);};_cdae ,_dcbf =_cdae .SubsetKeepIndices (_abg );if _dcbf !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_dcbf );
return _dcbf ;};var _ccc _fa .Buffer ;_dcbf =_cdae .Write (&_ccc );if _dcbf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dcbf );return _dcbf ;};if _ccc .Len ()> len (_adf ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_ddbd ,_dcbf :=_bg .MakeStream (_ccc .Bytes (),_bg .NewFlateEncoder ());if _dcbf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dcbf );return _dcbf ;
};*_gfb =*_ddbd ;_gfb .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bg .MakeInteger (int64 (_ccc .Len ())));return nil ;};func _ccb (_fca []_bg .PdfObject )objectStructure {_gaac :=objectStructure {};_afge :=false ;for _ ,_bdga :=range _fca {switch _agg :=_bdga .(type ){case *_bg .PdfIndirectObject :_abec ,_bag :=_bg .GetDict (_agg );
if !_bag {continue ;};_abae ,_bag :=_bg .GetName (_abec .Get ("\u0054\u0079\u0070\u0065"));if !_bag {continue ;};switch _abae .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_gaac ._eeab =_abec ;_afge =true ;};};if _afge {break ;};};if !_afge {return _gaac ;
};_acac ,_dfa :=_bg .GetDict (_gaac ._eeab .Get ("\u0050\u0061\u0067e\u0073"));if !_dfa {return _gaac ;};_gaac ._baeg =_acac ;_gadb ,_dfa :=_bg .GetArray (_acac .Get ("\u004b\u0069\u0064\u0073"));if !_dfa {return _gaac ;};for _ ,_bdef :=range _gadb .Elements (){_efd ,_edd :=_bg .GetIndirect (_bdef );
if !_edd {break ;};_gaac ._accd =append (_gaac ._accd ,_efd );};return _gaac ;};type content struct{_gde string ;_agb *_fbg .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_de *CleanContentstream )Optimize (objects []_bg .PdfObject )(_gb []_bg .PdfObject ,_ba error ){_eaa :=map[*_bg .PdfObjectStream ]struct{}{};var _dbe []*_bg .PdfObjectStream ;_af :=func (_gbg *_bg .PdfObjectStream ){if _ ,_dab :=_eaa [_gbg ];!_dab {_eaa [_gbg ]=struct{}{};
_dbe =append (_dbe ,_gbg );};};for _ ,_aca :=range objects {switch _ef :=_aca .(type ){case *_bg .PdfIndirectObject :switch _ce :=_ef .PdfObject .(type ){case *_bg .PdfObjectDictionary :if _cb ,_acb :=_bg .GetName (_ce .Get ("\u0054\u0079\u0070\u0065"));
!_acb ||_cb .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _bf ,_ddf :=_bg .GetStream (_ce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ddf {_af (_bf );}else if _dag ,_gd :=_bg .GetArray (_ce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_gd {for _ ,_fab :=range _dag .Elements (){if _fc ,_afa :=_bg .GetStream (_fab );_afa {_af (_fc );};};};};case *_bg .PdfObjectStream :if _bad ,_dg :=_bg .GetName (_ef .Get ("\u0054\u0079\u0070\u0065"));!_dg ||_bad .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;
};if _acaf ,_dee :=_bg .GetName (_ef .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_dee ||_acaf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_af (_ef );};};for _ ,_fbgd :=range _dbe {_ba =_bd (_fbgd );if _ba !=nil {return nil ,_ba ;};};return objects ,nil ;
};func _dbece (_agd []_bg .PdfObject ){for _daea ,_affb :=range _agd {switch _cdbf :=_affb .(type ){case *_bg .PdfIndirectObject :_cdbf .ObjectNumber =int64 (_daea +1);_cdbf .GenerationNumber =0;case *_bg .PdfObjectStream :_cdbf .ObjectNumber =int64 (_daea +1);
_cdbf .GenerationNumber =0;case *_bg .PdfObjectStreams :_cdbf .ObjectNumber =int64 (_daea +1);_cdbf .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cedg *ImagePPI )Optimize (objects []_bg .PdfObject )(_cegd []_bg .PdfObject ,_cgd error ){if _cedg .ImageUpperPPI <=0{return objects ,nil ;};_gcdf :=_gaab (objects );if len (_gcdf )==0{return objects ,nil ;};_cfe :=make (map[_bg .PdfObject ]struct{});
for _ ,_ddbb :=range _gcdf {_dfb :=_ddbb .Stream .PdfObjectDictionary .Get (_bg .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_cfe [_dfb ]=struct{}{};};_ccg :=make (map[*_bg .PdfObjectStream ]*imageInfo );for _ ,_fegc :=range _gcdf {_ccg [_fegc .Stream ]=_fegc ;
};var _gdf *_bg .PdfObjectDictionary ;for _ ,_afaf :=range objects {if _gbde ,_fee :=_bg .GetDict (_afaf );_gdf ==nil &&_fee {if _bgdc ,_ecfd :=_bg .GetName (_gbde .Get (_bg .PdfObjectName ("\u0054\u0079\u0070\u0065")));_ecfd &&*_bgdc =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gdf =_gbde ;
};};};if _gdf ==nil {return objects ,nil ;};_dfe ,_eff :=_bg .GetDict (_gdf .Get (_bg .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_eff {return objects ,nil ;};_gfee ,_fcc :=_bg .GetArray (_dfe .Get (_bg .PdfObjectName ("\u004b\u0069\u0064\u0073")));
if !_fcc {return objects ,nil ;};_cdcf :=make (map[string ]*imageInfo );for _ ,_fdde :=range _gfee .Elements (){_effc ,_aab :=_bg .GetDict (_fdde );if !_aab {continue ;};_bffe ,_ecfa :=_bg .GetArray (_effc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
if !_ecfa {continue ;};_fcg ,_bgae :=_bg .GetDict (_effc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bgae {continue ;};_cdbd ,_cdg :=_bg .GetDict (_fcg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cdg {continue ;};_bge :=_cdbd .Keys ();
for _ ,_gaaba :=range _bge {if _afg ,_bbaf :=_bg .GetStream (_cdbd .Get (_gaaba ));_bbaf {if _gced ,_fcde :=_ccg [_afg ];_fcde {_cdcf [string (_gaaba )]=_gced ;};};};for _ ,_cacf :=range _bffe .Elements (){if _fafc ,_bgdf :=_bg .GetStream (_cacf );_bgdf {_ece ,_acc :=_bg .NewEncoderFromStream (_fafc );
if _acc !=nil {return nil ,_acc ;};_fgc ,_acc :=_ece .DecodeStream (_fafc );if _acc !=nil {return nil ,_acc ;};_degg :=_fb .NewContentStreamParser (string (_fgc ));_dde ,_acc :=_degg .Parse ();if _acc !=nil {return nil ,_acc ;};_bbgc ,_daff :=1.0,1.0;for _ ,_abb :=range *_dde {if _abb .Operand =="\u0051"{_bbgc ,_daff =1.0,1.0;
};if _abb .Operand =="\u0063\u006d"&&len (_abb .Params )==6{if _adg ,_gbdd :=_bg .GetFloatVal (_abb .Params [0]);_gbdd {_bbgc =_bbgc *_adg ;};if _cga ,_fege :=_bg .GetFloatVal (_abb .Params [3]);_fege {_daff =_daff *_cga ;};if _ebe ,_aeef :=_bg .GetIntVal (_abb .Params [0]);
_aeef {_bbgc =_bbgc *float64 (_ebe );};if _bfab ,_eaed :=_bg .GetIntVal (_abb .Params [3]);_eaed {_daff =_daff *float64 (_bfab );};};if _abb .Operand =="\u0044\u006f"&&len (_abb .Params )==1{_cee ,_dgcb :=_bg .GetName (_abb .Params [0]);if !_dgcb {continue ;
};if _ggfe ,_dgd :=_cdcf [string (*_cee )];_dgd {_aebg ,_dge :=_bbgc /72.0,_daff /72.0;_efeb ,_dgbbe :=float64 (_ggfe .Width )/_aebg ,float64 (_ggfe .Height )/_dge ;if _aebg ==0||_dge ==0{_efeb =72.0;_dgbbe =72.0;};_ggfe .PPI =_f .Max (_ggfe .PPI ,_efeb );
_ggfe .PPI =_f .Max (_ggfe .PPI ,_dgbbe );};};};};};};for _ ,_dgbd :=range _gcdf {if _ ,_ceec :=_cfe [_dgbd .Stream ];_ceec {continue ;};if _dgbd .PPI <=_cedg .ImageUpperPPI {continue ;};_deb ,_fbff :=_fbg .NewXObjectImageFromStream (_dgbd .Stream );if _fbff !=nil {return nil ,_fbff ;
};var _eead imageModifications ;_eead .Scale =_cedg .ImageUpperPPI /_dgbd .PPI ;if _dgbd .BitsPerComponent ==1&&_dgbd .ColorComponents ==1{_fabb :=_f .Round (_dgbd .PPI /_cedg .ImageUpperPPI );_cdca :=_ab .NextPowerOf2 (uint (_fabb ));if _ab .InDelta (float64 (_cdca ),1/_eead .Scale ,0.3){_eead .Scale =float64 (1)/float64 (_cdca );
};if _ ,_abdbc :=_deb .Filter .(*_bg .JBIG2Encoder );!_abdbc {_eead .Encoding =_bg .NewJBIG2Encoder ();};};if _fbff =_gfeg (_deb ,_eead );_fbff !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_fbff );
continue ;};_eead .Encoding =nil ;if _abdg ,_fbea :=_bg .GetStream (_dgbd .Stream .PdfObjectDictionary .Get (_bg .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_fbea {_bebe ,_ddg :=_fbg .NewXObjectImageFromStream (_abdg );if _ddg !=nil {return nil ,_ddg ;
};if _ddg =_gfeg (_bebe ,_eead );_ddg !=nil {return nil ,_ddg ;};};};return objects ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_acab *ObjectStreams )Optimize (objects []_bg .PdfObject )(_ffge []_bg .PdfObject ,_ddef error ){_aceg :=&_bg .PdfObjectStreams {};_abe :=make ([]_bg .PdfObject ,0,len (objects ));for _ ,_gfgc :=range objects {if _gaff ,_abba :=_gfgc .(*_bg .PdfIndirectObject );
_abba &&_gaff .GenerationNumber ==0{_aceg .Append (_gfgc );}else {_abe =append (_abe ,_gfgc );};};if _aceg .Len ()==0{return _abe ,nil ;};_ffge =make ([]_bg .PdfObject ,0,len (_abe )+_aceg .Len ()+1);if _aceg .Len ()> 1{_ffge =append (_ffge ,_aceg );};
_ffge =append (_ffge ,_aceg .Elements ()...);_ffge =append (_ffge ,_abe ...);return _ffge ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _bd (_dc *_bg .PdfObjectStream )error {_gc ,_fd :=_bg .DecodeStream (_dc );if _fd !=nil {return _fd ;};_fde :=_fb .NewContentStreamParser (string (_gc ));_ag ,_fd :=_fde .Parse ();if _fd !=nil {return _fd ;};_ag =_aba (_ag );
_ac :=_ag .Bytes ();if len (_ac )>=len (_gc ){return nil ;};_dcg ,_fd :=_bg .MakeStream (_ag .Bytes (),_bg .NewFlateEncoder ());if _fd !=nil {return _fd ;};_dc .Stream =_dcg .Stream ;_dc .Merge (_dcg .PdfObjectDictionary );return nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};type imageInfo struct{ColorSpace _bg .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_bg .PdfObjectStream ;PPI float64 ;};func _bda (_bde _bg .PdfObject )[]content {if _bde ==nil {return nil ;
};_dcd ,_acfd :=_bg .GetArray (_bde );if !_acfd {_d .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _eeb []content ;for _ ,_fff :=range _dcd .Elements (){_bfba ,_bdaf :=_bg .GetDict (_fff );
if !_bdaf {_d .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_ced ,_bdaf :=_bg .GetDict (_bfba .Get ("\u0041\u0050"));
if !_bdaf {_d .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_deg :=_bg .TraceToDirectObject (_ced .Get ("\u004e"));if _deg ==nil {_d .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};var _ddfcd *_bg .PdfObjectStream ;switch _gaa :=_deg .(type ){case *_bg .PdfObjectDictionary :_gfbd ,_dae :=_bg .GetName (_bfba .Get ("\u0041\u0053"));if !_dae {_d .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");
continue ;};_ddfcd ,_dae =_bg .GetStream (_gaa .Get (*_gfbd ));if !_dae {_d .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_bg .PdfObjectStream :_ddfcd =_gaa ;
};if _ddfcd ==nil {_d .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_fba ,_fef :=_fbg .NewXObjectFormFromStream (_ddfcd );
if _fef !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fef );continue ;};_fcd ,_fef :=_fba .GetContentStream ();
if _fef !=nil {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_fef );continue ;};_eeb =append (_eeb ,content {_gde :string (_fcd ),_agb :_fba .Resources });
};return _eeb ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_cccg :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_cccg .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_cccg .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ded :=new (ImagePPI );
_ded .ImageUpperPPI =options .ImageUpperPPI ;_cccg .Append (_ded );};if options .ImageQuality > 0{_adbe :=new (Image );_adbe .ImageQuality =options .ImageQuality ;_cccg .Append (_adbe );};if options .CombineDuplicateDirectObjects {_cccg .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_cccg .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_cccg .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_cccg .Append (new (ObjectStreams ));
};if options .CompressStreams {_cccg .Append (new (CompressStreams ));};return _cccg ;};func _aba (_eg *_fb .ContentStreamOperations )*_fb .ContentStreamOperations {if _eg ==nil {return nil ;};_ea :=_fb .ContentStreamOperations {};for _ ,_db :=range *_eg {switch _db .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_db .Params )==6{if _da ,_bgg :=_bg .GetNumbersAsFloat (_db .Params );_bgg ==nil {if _da [0]==1&&_da [1]==0&&_da [2]==0&&_da [3]==1{_db =&_fb .ContentStreamOperation {Params :[]_bg .PdfObject {_db .Params [4],_db .Params [5]},Operand :"\u0054\u0064"};
};};};};_ea =append (_ea ,_db );};return &_ea ;};func _fdd (_egd *_fbg .Image ,_gceec float64 )(*_fbg .Image ,error ){_gdea ,_deaa :=_egd .ToGoImage ();if _deaa !=nil {return nil ,_deaa ;};var _dbec _ab .Image ;_fed ,_eec :=_gdea .(*_ab .Monochrome );if _eec {if _deaa =_fed .ResolveDecode ();
_deaa !=nil {return nil ,_deaa ;};_dbec ,_deaa =_fed .Scale (_gceec );if _deaa !=nil {return nil ,_deaa ;};}else {_gbd :=int (_f .RoundToEven (float64 (_egd .Width )*_gceec ));_bdgd :=int (_f .RoundToEven (float64 (_egd .Height )*_gceec ));_dbec ,_deaa =_ab .NewImage (_gbd ,_bdgd ,int (_egd .BitsPerComponent ),_egd .ColorComponents ,nil ,nil ,nil );
if _deaa !=nil {return nil ,_deaa ;};_g .CatmullRom .Scale (_dbec ,_dbec .Bounds (),_gdea ,_gdea .Bounds (),_g .Over ,&_g .Options {});};_fbf :=_dbec .Base ();_gfc :=&_fbg .Image {Width :int64 (_fbf .Width ),Height :int64 (_fbf .Height ),BitsPerComponent :int64 (_fbf .BitsPerComponent ),ColorComponents :_fbf .ColorComponents ,Data :_fbf .Data };
_gfc .SetDecode (_fbf .Decode );_gfc .SetAlpha (_fbf .Alpha );return _gfc ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};type imageModifications struct{Scale float64 ;Encoding _bg .StreamEncoder ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _adb (_abaf []_bg .PdfObject )(_faf map[*_bg .PdfObjectStream ]struct{},_gf error ){_faf =map[*_bg .PdfObjectStream ]struct{}{};_cff :=map[*_fbg .PdfFont ]struct{}{};_cfc :=_ccb (_abaf );for _ ,_fad :=range _cfc ._accd {_df ,_fe :=_bg .GetDict (_fad .PdfObject );
if !_fe {continue ;};_bgd ,_fe :=_bg .GetDict (_df .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fe {continue ;};_cbb ,_ :=_bbbb (_df .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bfd ,_ee :=_fbg .NewPdfPageResourcesFromDict (_bgd );
if _ee !=nil {return nil ,_ee ;};_ec :=[]content {{_gde :_cbb ,_agb :_bfd }};_dga :=_bda (_df .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _dga !=nil {_ec =append (_ec ,_dga ...);};for _ ,_bae :=range _ec {_egb ,_eab :=_ade .NewFromContents (_bae ._gde ,_bae ._agb );
if _eab !=nil {return nil ,_eab ;};_bfb ,_ ,_ ,_eab :=_egb .ExtractPageText ();if _eab !=nil {return nil ,_eab ;};for _ ,_dgag :=range _bfb .Marks ().Elements (){if _dgag .Font ==nil {continue ;};if _ ,_eb :=_cff [_dgag .Font ];!_eb {_cff [_dgag .Font ]=struct{}{};
};};};};_bac :=map[*_bg .PdfObjectStream ][]*_fbg .PdfFont {};for _dcbb :=range _cff {_bbg :=_dcbb .FontDescriptor ();if _bbg ==nil ||_bbg .FontFile2 ==nil {continue ;};_gcc ,_ecf :=_bg .GetStream (_bbg .FontFile2 );if !_ecf {continue ;};_bac [_gcc ]=append (_bac [_gcc ],_dcbb );
};for _ge :=range _bac {var _ff []rune ;var _cfa []_adc .GlyphIndex ;for _ ,_ggc :=range _bac [_ge ]{switch _bbga :=_ggc .Encoder ().(type ){case *_ad .IdentityEncoder :_cef :=_bbga .RegisteredRunes ();_bfe :=make ([]_adc .GlyphIndex ,len (_cef ));for _ggb ,_dcba :=range _cef {_bfe [_ggb ]=_adc .GlyphIndex (_dcba );
};_cfa =append (_cfa ,_bfe ...);case *_ad .TrueTypeFontEncoder :_cdaa :=_bbga .RegisteredRunes ();_ff =append (_ff ,_cdaa ...);case _ad .SimpleEncoder :_dea :=_bbga .Charcodes ();for _ ,_cg :=range _dea {_efe ,_ffg :=_bbga .CharcodeToRune (_cg );if !_ffg {_d .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_cg );
continue ;};_ff =append (_ff ,_efe );};};};_gf =_bca (_ge ,_ff ,_cfa );if _gf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_gf );
return nil ,_gf ;};_faf [_ge ]=struct{}{};};return _faf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ddfc *CleanFonts )Optimize (objects []_bg .PdfObject )(_dbb []_bg .PdfObject ,_efa error ){var _cgb map[*_bg .PdfObjectStream ]struct{};if _ddfc .Subset {var _ceb error ;_cgb ,_ceb =_adb (objects );if _ceb !=nil {return nil ,_ceb ;};};for _ ,_eag :=range objects {_bcg ,_feg :=_bg .GetStream (_eag );
if !_feg {continue ;};if _ ,_daa :=_cgb [_bcg ];_daa {continue ;};_acf ,_bacd :=_bg .NewEncoderFromStream (_bcg );if _bacd !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_bacd );
continue ;};_gga ,_bacd :=_acf .DecodeStream (_bcg );if _bacd !=nil {_d .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_bacd );
continue ;};if len (_gga )< 4{continue ;};_gef :=string (_gga [:4]);if _gef =="\u004f\u0054\u0054\u004f"{continue ;};if _gef !="\u0000\u0001\u0000\u0000"&&_gef !="\u0074\u0072\u0075\u0065"{continue ;};_efbe ,_bacd :=_adc .Parse (_fa .NewReader (_gga ));
if _bacd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bacd );continue ;};_bacd =_efbe .Optimize ();
if _bacd !=nil {continue ;};var _dfc _fa .Buffer ;_bacd =_efbe .Write (&_dfc );if _bacd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bacd );
continue ;};if _dfc .Len ()> len (_gga ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_efbb ,_bacd :=_bg .MakeStream (_dfc .Bytes (),_bg .NewFlateEncoder ());if _bacd !=nil {continue ;};*_bcg =*_efbb ;_bcg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bg .MakeInteger (int64 (_dfc .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_daf *CombineDuplicateStreams )Optimize (objects []_bg .PdfObject )(_gfe []_bg .PdfObject ,_gcf error ){_gbe :=make (map[_bg .PdfObject ]_bg .PdfObject );_cfg :=make (map[_bg .PdfObject ]struct{});_dgab :=make (map[string ][]*_bg .PdfObjectStream );
for _ ,_eef :=range objects {if _abd ,_eae :=_eef .(*_bg .PdfObjectStream );_eae {_bdf :=_a .New ();_bdf .Write (_abd .Stream );_bdf .Write ([]byte (_abd .PdfObjectDictionary .WriteString ()));_bfa :=string (_bdf .Sum (nil ));_dgab [_bfa ]=append (_dgab [_bfa ],_abd );
};};for _ ,_bcc :=range _dgab {if len (_bcc )< 2{continue ;};_aad :=_bcc [0];for _bcd :=1;_bcd < len (_bcc );_bcd ++{_be :=_bcc [_bcd ];_gbe [_be ]=_aad ;_cfg [_be ]=struct{}{};};};_gfe =make ([]_bg .PdfObject ,0,len (objects )-len (_cfg ));for _ ,_ecd :=range objects {if _ ,_abdb :=_cfg [_ecd ];
_abdb {continue ;};_gfe =append (_gfe ,_ecd );};_cebg (_gfe ,_gbe );return _gfe ,nil ;};func _cebg (_aade []_bg .PdfObject ,_baaa map[_bg .PdfObject ]_bg .PdfObject ){if len (_baaa )==0{return ;};for _eabd ,_gbdeb :=range _aade {if _febd ,_bfad :=_baaa [_gbdeb ];
_bfad {_aade [_eabd ]=_febd ;continue ;};_baaa [_gbdeb ]=_gbdeb ;switch _febb :=_gbdeb .(type ){case *_bg .PdfObjectArray :_cebd :=make ([]_bg .PdfObject ,_febb .Len ());copy (_cebd ,_febb .Elements ());_cebg (_cebd ,_baaa );for _gag ,_dagab :=range _cebd {_febb .Set (_gag ,_dagab );
};case *_bg .PdfObjectStreams :_cebg (_febb .Elements (),_baaa );case *_bg .PdfObjectStream :_bgcc :=[]_bg .PdfObject {_febb .PdfObjectDictionary };_cebg (_bgcc ,_baaa );_febb .PdfObjectDictionary =_bgcc [0].(*_bg .PdfObjectDictionary );case *_bg .PdfObjectDictionary :_eefe :=_febb .Keys ();
_cefg :=make ([]_bg .PdfObject ,len (_eefe ));for _ceaf ,_bcf :=range _eefe {_cefg [_ceaf ]=_febb .Get (_bcf );};_cebg (_cefg ,_baaa );for _fdded ,_cgdd :=range _eefe {_febb .Set (_cgdd ,_cefg [_fdded ]);};case *_bg .PdfIndirectObject :_cegdf :=[]_bg .PdfObject {_febb .PdfObject };
_cebg (_cegdf ,_baaa );_febb .PdfObject =_cegdf [0];};};};