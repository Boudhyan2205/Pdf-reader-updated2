//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_c "bytes";_fc "crypto";_cb "crypto/x509";_ff "encoding/asn1";_ab "encoding/pem";_e "errors";_ea "fmt";_ed "github.com/unidoc/timestamp";_df "github.com/unidoc/unipdf/v3/common";_bc "golang.org/x/crypto/ocsp";_b "io";_d "io/ioutil";
_cg "net/http";_a "time";);

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_ca ()}};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_cd *CRLClient )MakeRequest (serverURL string ,cert *_cb .Certificate )([]byte ,error ){if _cd .HTTPClient ==nil {_cd .HTTPClient =_ca ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_e .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_bb ,_cge :=_cd .HTTPClient .Get (serverURL );if _cge !=nil {return nil ,_cge ;};defer _bb .Body .Close ();_fg ,_cge :=_d .ReadAll (_bb .Body );if _cge !=nil {return nil ,_cge ;};if _gf ,_ :=_ab .Decode (_fg );
_gf !=nil {_fg =_gf .Bytes ;};return _fg ,nil ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cg .Client ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cg .Client ;};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cg .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _fc .Hash ;};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_ca (),Hash :_fc .SHA1 }};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _b .Reader ,opts *_ed .RequestOptions )(*_ed .Request ,error ){if opts ==nil {opts =&_ed .RequestOptions {};};if opts .Hash ==0{opts .Hash =_fc .SHA256 ;};if !opts .Hash .Available (){return nil ,_cb .ErrUnsupportedAlgorithm ;
};_db :=opts .Hash .New ();if _ ,_fbb :=_b .Copy (_db ,body );_fbb !=nil {return nil ,_fbb ;};return &_ed .Request {HashAlgorithm :opts .Hash ,HashedMessage :_db .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_abe *CertClient )IsCA (cert *_cb .Certificate )bool {return cert .IsCA &&_c .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_da *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_cb .Certificate )(*_bc .Response ,[]byte ,error ){if _da .HTTPClient ==nil {_da .HTTPClient =_ca ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_e .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_ge ,_cdb :=_bc .CreateRequest (cert ,issuer ,&_bc .RequestOptions {Hash :_da .Hash });if _cdb !=nil {return nil ,nil ,_cdb ;};_fa ,_cdb :=_da .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_c .NewReader (_ge ));
if _cdb !=nil {return nil ,nil ,_cdb ;};defer _fa .Body .Close ();_fce ,_cdb :=_d .ReadAll (_fa .Body );if _cdb !=nil {return nil ,nil ,_cdb ;};if _fb ,_ :=_ab .Decode (_fce );_fb !=nil {_fce =_fb .Bytes ;};_cca ,_cdb :=_bc .ParseResponseForCert (_fce ,cert ,issuer );
if _cdb !=nil {return nil ,nil ,_cdb ;};return _cca ,_fce ,nil ;};func _ca ()*_cg .Client {return &_cg .Client {Timeout :5*_a .Second }};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_cg .Client ;

// Callbacks.
BeforeHTTPRequest func (_eda *_cg .Request )error ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_dg *TimestampClient )GetEncodedToken (serverURL string ,req *_ed .Request )([]byte ,error ){if serverURL ==""{return nil ,_ea .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_ea .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_edd ,_bgf :=req .Marshal ();if _bgf !=nil {return nil ,_bgf ;
};_fba ,_bgf :=_cg .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_c .NewBuffer (_edd ));if _bgf !=nil {return nil ,_bgf ;};_fba .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _dg .BeforeHTTPRequest !=nil {if _ec :=_dg .BeforeHTTPRequest (_fba );_ec !=nil {return nil ,_ec ;};};_cfa :=_dg .HTTPClient ;if _cfa ==nil {_cfa =_ca ();};_ee ,_bgf :=_cfa .Do (_fba );if _bgf !=nil {return nil ,_bgf ;};defer _ee .Body .Close ();_dbd ,_bgf :=_d .ReadAll (_ee .Body );
if _bgf !=nil {return nil ,_bgf ;};if _ee .StatusCode !=_cg .StatusOK {return nil ,_ea .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_ee .StatusCode );
};var _eec struct{Version _ff .RawValue ;Content _ff .RawValue ;};if _ ,_bgf =_ff .Unmarshal (_dbd ,&_eec );_bgf !=nil {return nil ,_bgf ;};return _eec .Content .FullBytes ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_edb *CertClient )GetIssuer (cert *_cb .Certificate )(*_cb .Certificate ,error ){for _ ,_bd :=range cert .IssuingCertificateURL {_cbc ,_aaf :=_edb .Get (_bd );if _aaf !=nil {_df .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_aaf );
continue ;};return _cbc ,nil ;};return nil ,_ea .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_ca ()}};

// Get retrieves the certificate at the specified URL.
func (_ce *CertClient )Get (url string )(*_cb .Certificate ,error ){if _ce .HTTPClient ==nil {_ce .HTTPClient =_ca ();};_cf ,_ac :=_ce .HTTPClient .Get (url );if _ac !=nil {return nil ,_ac ;};defer _cf .Body .Close ();_aa ,_ac :=_d .ReadAll (_cf .Body );
if _ac !=nil {return nil ,_ac ;};if _cbb ,_ :=_ab .Decode (_aa );_cbb !=nil {_aa =_cbb .Bytes ;};_ga ,_ac :=_cb .ParseCertificate (_aa );if _ac !=nil {return nil ,_ac ;};return _ga ,nil ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_ca ()}};