//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_cf "github.com/unidoc/unipdf/v3/contentstream";_cb "github.com/unidoc/unipdf/v3/contentstream/draw";_a "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_g .PdfPage )error {_eb ,_ga :=page .GetMediaBox ();if _ga !=nil {return _ga ;};_b :=page .Rotate ;_bg :=_b !=nil &&*_b %360!=0&&*_b %90==0;_eb .Normalize ();_gad ,_gf ,_ebb ,_ba :=_eb .Llx ,_eb .Lly ,_eb .Width (),_eb .Height ();
_f :=_gad !=0||_gf !=0;if !_bg &&!_f {return nil ;};_ca :=func (_ed ,_d ,_gb float64 )_cb .BoundingBox {return _cb .Path {Points :[]_cb .Point {_cb .NewPoint (0,0).Rotate (_gb ),_cb .NewPoint (_ed ,0).Rotate (_gb ),_cb .NewPoint (0,_d ).Rotate (_gb ),_cb .NewPoint (_ed ,_d ).Rotate (_gb )}}.GetBoundingBox ();
};_cd :=_cf .NewContentCreator ();var _ff float64 ;if _bg {_ff =-float64 (*page .Rotate );_ag :=_ca (_ebb ,_ba ,_ff );_cd .Translate ((_ag .Width -_ebb )/2+_ebb /2,(_ag .Height -_ba )/2+_ba /2);_cd .RotateDeg (_ff );_cd .Translate (-_ebb /2,-_ba /2);_ebb ,_ba =_ag .Width ,_ag .Height ;
};if _f {_cd .Translate (-_gad ,-_gf );};_ee :=_cd .Operations ();_be ,_ga :=_a .MakeStream (_ee .Bytes (),_a .NewFlateEncoder ());if _ga !=nil {return _ga ;};_edd :=_a .MakeArray (_be );_edd .Append (page .GetContentStreamObjs ()...);*_eb =_g .PdfRectangle {Urx :_ebb ,Ury :_ba };
if _aa :=page .CropBox ;_aa !=nil {_aa .Normalize ();_fff ,_ffg ,_eee ,_ac :=_aa .Llx -_gad ,_aa .Lly -_gf ,_aa .Width (),_aa .Height ();if _bg {_af :=_ca (_eee ,_ac ,_ff );_eee ,_ac =_af .Width ,_af .Height ;};*_aa =_g .PdfRectangle {Llx :_fff ,Lly :_ffg ,Urx :_fff +_eee ,Ury :_ffg +_ac };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ff ,_ee ,_eb );page .Contents =_edd ;page .Rotate =nil ;
return nil ;};