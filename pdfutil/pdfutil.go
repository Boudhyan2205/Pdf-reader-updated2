//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_d "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/contentstream";_g "github.com/unidoc/unipdf/v3/contentstream/draw";_ec "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_e .PdfPage )error {_f ,_cg :=page .GetMediaBox ();if _cg !=nil {return _cg ;};_ac :=page .Rotate ;_ece :=_ac !=nil &&*_ac %360!=0&&*_ac %90==0;_f .Normalize ();_df ,_aca ,_ge ,_fa :=_f .Llx ,_f .Lly ,_f .Width (),_f .Height ();
_gc :=_df !=0||_aca !=0;if !_ece &&!_gc {return nil ;};_gd :=func (_ff ,_fc ,_ag float64 )_g .BoundingBox {return _g .Path {Points :[]_g .Point {_g .NewPoint (0,0).Rotate (_ag ),_g .NewPoint (_ff ,0).Rotate (_ag ),_g .NewPoint (0,_fc ).Rotate (_ag ),_g .NewPoint (_ff ,_fc ).Rotate (_ag )}}.GetBoundingBox ();
};_cb :=_a .NewContentCreator ();var _eb float64 ;if _ece {_eb =-float64 (*page .Rotate );_fe :=_gd (_ge ,_fa ,_eb );_cb .Translate ((_fe .Width -_ge )/2+_ge /2,(_fe .Height -_fa )/2+_fa /2);_cb .RotateDeg (_eb );_cb .Translate (-_ge /2,-_fa /2);_ge ,_fa =_fe .Width ,_fe .Height ;
};if _gc {_cb .Translate (-_df ,-_aca );};_ca :=_cb .Operations ();_ad ,_cg :=_ec .MakeStream (_ca .Bytes (),_ec .NewFlateEncoder ());if _cg !=nil {return _cg ;};_eg :=_ec .MakeArray (_ad );_eg .Append (page .GetContentStreamObjs ()...);*_f =_e .PdfRectangle {Urx :_ge ,Ury :_fa };
if _adf :=page .CropBox ;_adf !=nil {_adf .Normalize ();_aa ,_cd ,_de ,_ae :=_adf .Llx -_df ,_adf .Lly -_aca ,_adf .Width (),_adf .Height ();if _ece {_fd :=_gd (_de ,_ae ,_eb );_de ,_ae =_fd .Width ,_fd .Height ;};*_adf =_e .PdfRectangle {Llx :_aa ,Lly :_cd ,Urx :_aa +_de ,Ury :_cd +_ae };
};_d .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_eb ,_ca ,_f );page .Contents =_eg ;page .Rotate =nil ;
return nil ;};