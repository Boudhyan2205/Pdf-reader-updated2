//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_e "github.com/unidoc/unipdf/v3/common";_gac "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/contentstream/draw";_ga "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
//   - Normalize the page rotation.
//     Rotates the contents of the page according to the Rotate entry, thus
//     flattening the rotation. The Rotate entry of the page is set to nil.
//   - Normalize the media box.
//     If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//     the contents of the page are translated to (-Llx, -Lly). After
//     normalization, the media box is updated (Llx and Lly are set to 0 and
//     Urx and Ury are updated accordingly).
//   - Normalize the crop box.
//     The crop box of the page is updated based on the previous operations.
//
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_b .PdfPage )error {_a ,_gad :=page .GetMediaBox ();if _gad !=nil {return _gad ;};_bc ,_gad :=page .GetRotate ();if _gad !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_gad .Error ());
};_gacf :=_bc %360!=0&&_bc %90==0;_a .Normalize ();_ef ,_dd ,_bcc ,_af :=_a .Llx ,_a .Lly ,_a .Width (),_a .Height ();_ad :=_ef !=0||_dd !=0;if !_gacf &&!_ad {return nil ;};_gd :=func (_f ,_c ,_bd float64 )_d .BoundingBox {return _d .Path {Points :[]_d .Point {_d .NewPoint (0,0).Rotate (_bd ),_d .NewPoint (_f ,0).Rotate (_bd ),_d .NewPoint (0,_c ).Rotate (_bd ),_d .NewPoint (_f ,_c ).Rotate (_bd )}}.GetBoundingBox ();
};_gf :=_gac .NewContentCreator ();var _fe float64 ;if _gacf {_fe =-float64 (_bc );_gg :=_gd (_bcc ,_af ,_fe );_gf .Translate ((_gg .Width -_bcc )/2+_bcc /2,(_gg .Height -_af )/2+_af /2);_gf .RotateDeg (_fe );_gf .Translate (-_bcc /2,-_af /2);_bcc ,_af =_gg .Width ,_gg .Height ;
};if _ad {_gf .Translate (-_ef ,-_dd );};_bdc :=_gf .Operations ();_efa ,_gad :=_ga .MakeStream (_bdc .Bytes (),_ga .NewFlateEncoder ());if _gad !=nil {return _gad ;};_df :=_ga .MakeArray (_efa );_df .Append (page .GetContentStreamObjs ()...);*_a =_b .PdfRectangle {Urx :_bcc ,Ury :_af };
if _efg :=page .CropBox ;_efg !=nil {_efg .Normalize ();_fb ,_eb ,_ggg ,_fee :=_efg .Llx -_ef ,_efg .Lly -_dd ,_efg .Width (),_efg .Height ();if _gacf {_ac :=_gd (_ggg ,_fee ,_fe );_ggg ,_fee =_ac .Width ,_ac .Height ;};*_efg =_b .PdfRectangle {Llx :_fb ,Lly :_eb ,Urx :_fb +_ggg ,Ury :_eb +_fee };
};_e .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_fe ,_bdc ,_a );page .Contents =_df ;page .Rotate =nil ;
return nil ;};