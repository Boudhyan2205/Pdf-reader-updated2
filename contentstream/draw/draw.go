//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_g "fmt";_bc "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/internal/transform";_b "github.com/unidoc/unipdf/v3/model";_cf "math";);

// Scale scales the vector by the specified factor.
func (_ffe Vector )Scale (factor float64 )Vector {_ddd :=_ffe .Magnitude ();_fce :=_ffe .GetPolarAngle ();_ffe .Dx =factor *_ddd *_cf .Cos (_fce );_ffe .Dy =factor *_ddd *_cf .Sin (_fce );return _ffe ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_cb Path )RemovePoint (number int )Path {if number < 1||number > len (_cb .Points ){return _cb ;};_cfg :=number -1;_cb .Points =append (_cb .Points [:_cfg ],_cb .Points [_cfg +1:]...);return _cb ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _b .PdfColor ;BorderEnabled bool ;BorderColor _b .PdfColor ;BorderWidth float64 ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _b .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _b .PdfColor ;Opacity float64 ;};func (_gbc Point )String ()string {return _g .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_gbc .X ,_gbc .Y );
};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_efg Point )Rotate (theta float64 )Point {_ee :=_e .NewPoint (_efg .X ,_efg .Y ).Rotate (theta );return NewPoint (_ee .X ,_ee .Y );};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_dg Path )GetPointNumber (number int )Point {if number < 1||number > len (_dg .Points ){return Point {};};return _dg .Points [number -1];};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// AddVector adds vector to a point.
func (_cfd Point )AddVector (v Vector )Point {_cfd .X +=v .Dx ;_cfd .Y +=v .Dy ;return _cfd };

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_ecf CubicBezierPath )GetBoundingBox ()Rectangle {_ef :=Rectangle {};_db :=0.0;_fc :=0.0;_deg :=0.0;_be :=0.0;for _efe ,_bb :=range _ecf .Curves {_df :=_bb .GetBounds ();if _efe ==0{_db =_df .Llx ;_fc =_df .Urx ;_deg =_df .Lly ;_be =_df .Ury ;continue ;
};if _df .Llx < _db {_db =_df .Llx ;};if _df .Urx > _fc {_fc =_df .Urx ;};if _df .Lly < _deg {_deg =_df .Lly ;};if _df .Ury > _be {_be =_df .Ury ;};};_ef .X =_db ;_ef .Y =_deg ;_ef .Width =_fc -_db ;_ef .Height =_be -_deg ;return _ef ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_a CubicBezierCurve )GetBounds ()_b .PdfRectangle {_aa :=_a .P0 .X ;_ca :=_a .P0 .X ;_ce :=_a .P0 .Y ;_bf :=_a .P0 .Y ;for _de :=0.0;_de <=1.0;_de +=0.001{Rx :=_a .P0 .X *_cf .Pow (1-_de ,3)+_a .P1 .X *3*_de *_cf .Pow (1-_de ,2)+_a .P2 .X *3*_cf .Pow (_de ,2)*(1-_de )+_a .P3 .X *_cf .Pow (_de ,3);
Ry :=_a .P0 .Y *_cf .Pow (1-_de ,3)+_a .P1 .Y *3*_de *_cf .Pow (1-_de ,2)+_a .P2 .Y *3*_cf .Pow (_de ,2)*(1-_de )+_a .P3 .Y *_cf .Pow (_de ,3);if Rx < _aa {_aa =Rx ;};if Rx > _ca {_ca =Rx ;};if Ry < _ce {_ce =Ry ;};if Ry > _bf {_bf =Ry ;};};_gb :=_b .PdfRectangle {};
_gb .Llx =_aa ;_gb .Lly =_ce ;_gb .Urx =_ca ;_gb .Ury =_bf ;return _gb ;};

// Rotate rotates the vector by the specified angle.
func (_cg Vector )Rotate (phi float64 )Vector {_ecc :=_cg .Magnitude ();_bba :=_cg .GetPolarAngle ();return NewVectorPolar (_ecc ,_bba +phi );};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_def Polyline )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){if _def .LineColor ==nil {_def .LineColor =_b .NewPdfColorDeviceRGB (0,0,0);};_eced :=NewPath ();for _ ,_bad :=range _def .Points {_eced =_eced .AppendPoint (_bad );};_ace :=_bc .NewContentCreator ();
_ace .Add_q ().SetStrokingColor (_def .LineColor ).Add_w (_def .LineWidth );if len (gsName )> 1{_ace .Add_gs (_d .PdfObjectName (gsName ));};DrawPathWithCreator (_eced ,_ace );_ace .Add_S ();_ace .Add_Q ();return _ace .Bytes (),_eced .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_bbd BasicLine )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_ge :=_bbd .LineWidth ;_dec :=NewPath ();_dec =_dec .AppendPoint (NewPoint (_bbd .X1 ,_bbd .Y1 ));_dec =_dec .AppendPoint (NewPoint (_bbd .X2 ,_bbd .Y2 ));_bfab :=_bc .NewContentCreator ();
_eafg :=_dec .GetBoundingBox ();DrawPathWithCreator (_dec ,_bfab );if _bbd .LineStyle ==LineStyleDashed {_bfab .Add_d ([]int64 {1,1},0);};_bfab .SetStrokingColor (_bbd .LineColor ).Add_w (_ge ).Add_S ().Add_Q ();return _bfab .Bytes (),_eafg .ToPdfRectangle (),nil ;
};

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_bfd CurvePolygon )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_agb :=_bc .NewContentCreator ();_agb .Add_q ();_bfd .FillEnabled =_bfd .FillEnabled &&_bfd .FillColor !=nil ;if _bfd .FillEnabled {_agb .SetNonStrokingColor (_bfd .FillColor );
};_bfd .BorderEnabled =_bfd .BorderEnabled &&_bfd .BorderColor !=nil ;if _bfd .BorderEnabled {_agb .SetStrokingColor (_bfd .BorderColor );_agb .Add_w (_bfd .BorderWidth );};if len (gsName )> 1{_agb .Add_gs (_d .PdfObjectName (gsName ));};_fbd :=NewCubicBezierPath ();
for _ ,_af :=range _bfd .Rings {for _dc ,_bfag :=range _af {if _dc ==0{_agb .Add_m (_bfag .P0 .X ,_bfag .P0 .Y );}else {_agb .Add_l (_bfag .P0 .X ,_bfag .P0 .Y );};_agb .Add_c (_bfag .P1 .X ,_bfag .P1 .Y ,_bfag .P2 .X ,_bfag .P2 .Y ,_bfag .P3 .X ,_bfag .P3 .Y );
_fbd =_fbd .AppendCurve (_bfag );};_agb .Add_h ();};if _bfd .FillEnabled &&_bfd .BorderEnabled {_agb .Add_B ();}else if _bfd .FillEnabled {_agb .Add_f ();}else if _bfd .BorderEnabled {_agb .Add_S ();};_agb .Add_Q ();return _agb .Bytes (),_fbd .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_bc .ContentCreator ){for _becf ,_gab :=range bpath .Curves {if _becf ==0{creator .Add_m (_gab .P0 .X ,_gab .P0 .Y );};creator .Add_c (_gab .P1 .X ,_gab .P1 .Y ,_gab .P2 .X ,_gab .P2 .Y ,_gab .P3 .X ,_gab .P3 .Y );
};};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _b .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _b .PdfColor ;LineWidth float64 ;};

// Offset shifts the path with the specified offsets.
func (_fd Path )Offset (offX ,offY float64 )Path {for _cc ,_fe :=range _fd .Points {_fd .Points [_cc ]=_fe .Add (offX ,offY );};return _fd ;};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_cca PolyBezierCurve )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){if _cca .BorderColor ==nil {_cca .BorderColor =_b .NewPdfColorDeviceRGB (0,0,0);};_cae :=NewCubicBezierPath ();for _ ,_ebc :=range _cca .Curves {_cae =_cae .AppendCurve (_ebc );
};_dfd :=_bc .NewContentCreator ();_dfd .Add_q ();_cca .FillEnabled =_cca .FillEnabled &&_cca .FillColor !=nil ;if _cca .FillEnabled {_dfd .SetNonStrokingColor (_cca .FillColor );};_dfd .SetStrokingColor (_cca .BorderColor );_dfd .Add_w (_cca .BorderWidth );
if len (gsName )> 1{_dfd .Add_gs (_d .PdfObjectName (gsName ));};for _efgb ,_gbf :=range _cae .Curves {if _efgb ==0{_dfd .Add_m (_gbf .P0 .X ,_gbf .P0 .Y );}else {_dfd .Add_l (_gbf .P0 .X ,_gbf .P0 .Y );};_dfd .Add_c (_gbf .P1 .X ,_gbf .P1 .Y ,_gbf .P2 .X ,_gbf .P2 .Y ,_gbf .P3 .X ,_gbf .P3 .Y );
};if _cca .FillEnabled {_dfd .Add_h ();_dfd .Add_B ();}else {_dfd .Add_S ();};_dfd .Add_Q ();return _dfd .Bytes (),_cae .GetBoundingBox ().ToPdfRectangle (),nil ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Flip changes the sign of the vector: -vector.
func (_ddb Vector )Flip ()Vector {_cabd :=_ddb .Magnitude ();_bgb :=_ddb .GetPolarAngle ();_ddb .Dx =_cabd *_cf .Cos (_bgb +_cf .Pi );_ddb .Dy =_cabd *_cf .Sin (_bgb +_cf .Pi );return _ddb ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_eae Circle )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_ggc :=_eae .Width /2;_ed :=_eae .Height /2;if _eae .BorderEnabled {_ggc -=_eae .BorderWidth /2;_ed -=_eae .BorderWidth /2;};_gf :=0.551784;_cad :=_ggc *_gf ;_fb :=_ed *_gf ;_cab :=NewCubicBezierPath ();
_cab =_cab .AppendCurve (NewCubicBezierCurve (-_ggc ,0,-_ggc ,_fb ,-_cad ,_ed ,0,_ed ));_cab =_cab .AppendCurve (NewCubicBezierCurve (0,_ed ,_cad ,_ed ,_ggc ,_fb ,_ggc ,0));_cab =_cab .AppendCurve (NewCubicBezierCurve (_ggc ,0,_ggc ,-_fb ,_cad ,-_ed ,0,-_ed ));
_cab =_cab .AppendCurve (NewCubicBezierCurve (0,-_ed ,-_cad ,-_ed ,-_ggc ,-_fb ,-_ggc ,0));_cab =_cab .Offset (_ggc ,_ed );if _eae .BorderEnabled {_cab =_cab .Offset (_eae .BorderWidth /2,_eae .BorderWidth /2);};if _eae .X !=0||_eae .Y !=0{_cab =_cab .Offset (_eae .X ,_eae .Y );
};_edd :=_bc .NewContentCreator ();_edd .Add_q ();if _eae .FillEnabled {_edd .SetNonStrokingColor (_eae .FillColor );};if _eae .BorderEnabled {_edd .SetStrokingColor (_eae .BorderColor );_edd .Add_w (_eae .BorderWidth );};if len (gsName )> 1{_edd .Add_gs (_d .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_cab ,_edd );_edd .Add_h ();if _eae .FillEnabled &&_eae .BorderEnabled {_edd .Add_B ();}else if _eae .FillEnabled {_edd .Add_f ();}else if _eae .BorderEnabled {_edd .Add_S ();};_edd .Add_Q ();_ae :=_cab .GetBoundingBox ();if _eae .BorderEnabled {_ae .Height +=_eae .BorderWidth ;
_ae .Width +=_eae .BorderWidth ;_ae .X -=_eae .BorderWidth /2;_ae .Y -=_eae .BorderWidth /2;};return _edd .Bytes (),_ae .ToPdfRectangle (),nil ;};

// AppendPoint adds the specified point to the path.
func (_bd Path )AppendPoint (point Point )Path {_bd .Points =append (_bd .Points ,point );return _bd };

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_bc .ContentCreator ){for _gfed ,_bfaf :=range path .Points {if _gfed ==0{creator .Add_m (_bfaf .X ,_bfaf .Y );}else {creator .Add_l (_bfaf .X ,_bfaf .Y );};};};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_aec :=Vector {};_aec .Dx =b .X -a .X ;_aec .Dy =b .Y -a .Y ;return _aec ;};

// Add adds the specified vector to the current one and returns the result.
func (_aeb Vector )Add (other Vector )Vector {_aeb .Dx +=other .Dx ;_aeb .Dy +=other .Dy ;return _aeb };

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_bg :=CubicBezierCurve {};_bg .P0 =NewPoint (x0 ,y0 );_bg .P1 =NewPoint (x1 ,y1 );_bg .P2 =NewPoint (x2 ,y2 );_bg .P3 =NewPoint (x3 ,y3 );return _bg ;};

// FlipY flips the sign of the Dy component of the vector.
func (_bee Vector )FlipY ()Vector {_bee .Dy =-_bee .Dy ;return _bee };

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_ecg Point )Add (dx ,dy float64 )Point {_ecg .X +=dx ;_ecg .Y +=dy ;return _ecg };

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_degf Line )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_ebcd ,_egf :=_degf .X1 ,_degf .X2 ;_cag ,_ffc :=_degf .Y1 ,_degf .Y2 ;_dfea :=_ffc -_cag ;_agd :=_egf -_ebcd ;_eda :=_cf .Atan2 (_dfea ,_agd );L :=_cf .Sqrt (_cf .Pow (_agd ,2.0)+_cf .Pow (_dfea ,2.0));
_ga :=_degf .LineWidth ;_acdf :=_cf .Pi ;_ead :=1.0;if _agd < 0{_ead *=-1.0;};if _dfea < 0{_ead *=-1.0;};VsX :=_ead *(-_ga /2*_cf .Cos (_eda +_acdf /2));VsY :=_ead *(-_ga /2*_cf .Sin (_eda +_acdf /2)+_ga *_cf .Sin (_eda +_acdf /2));V1X :=VsX +_ga /2*_cf .Cos (_eda +_acdf /2);
V1Y :=VsY +_ga /2*_cf .Sin (_eda +_acdf /2);V2X :=VsX +_ga /2*_cf .Cos (_eda +_acdf /2)+L *_cf .Cos (_eda );V2Y :=VsY +_ga /2*_cf .Sin (_eda +_acdf /2)+L *_cf .Sin (_eda );V3X :=VsX +_ga /2*_cf .Cos (_eda +_acdf /2)+L *_cf .Cos (_eda )+_ga *_cf .Cos (_eda -_acdf /2);
V3Y :=VsY +_ga /2*_cf .Sin (_eda +_acdf /2)+L *_cf .Sin (_eda )+_ga *_cf .Sin (_eda -_acdf /2);V4X :=VsX +_ga /2*_cf .Cos (_eda -_acdf /2);V4Y :=VsY +_ga /2*_cf .Sin (_eda -_acdf /2);_gce :=NewPath ();_gce =_gce .AppendPoint (NewPoint (V1X ,V1Y ));_gce =_gce .AppendPoint (NewPoint (V2X ,V2Y ));
_gce =_gce .AppendPoint (NewPoint (V3X ,V3Y ));_gce =_gce .AppendPoint (NewPoint (V4X ,V4Y ));_fdf :=_degf .LineEndingStyle1 ;_afe :=_degf .LineEndingStyle2 ;_aeg :=3*_ga ;_feg :=3*_ga ;_feb :=(_feg -_ga )/2;if _afe ==LineEndingStyleArrow {_afea :=_gce .GetPointNumber (2);
_cbf :=NewVectorPolar (_aeg ,_eda +_acdf );_egag :=_afea .AddVector (_cbf );_gbcb :=NewVectorPolar (_feg /2,_eda +_acdf /2);_ba :=NewVectorPolar (_aeg ,_eda );_dbg :=NewVectorPolar (_feb ,_eda +_acdf /2);_gca :=_egag .AddVector (_dbg );_eac :=_ba .Add (_gbcb .Flip ());
_ebcf :=_gca .AddVector (_eac );_gga :=_gbcb .Scale (2).Flip ().Add (_eac .Flip ());_fge :=_ebcf .AddVector (_gga );_ece :=_egag .AddVector (NewVectorPolar (_ga ,_eda -_acdf /2));_ccd :=NewPath ();_ccd =_ccd .AppendPoint (_gce .GetPointNumber (1));_ccd =_ccd .AppendPoint (_egag );
_ccd =_ccd .AppendPoint (_gca );_ccd =_ccd .AppendPoint (_ebcf );_ccd =_ccd .AppendPoint (_fge );_ccd =_ccd .AppendPoint (_ece );_ccd =_ccd .AppendPoint (_gce .GetPointNumber (4));_gce =_ccd ;};if _fdf ==LineEndingStyleArrow {_afa :=_gce .GetPointNumber (1);
_cac :=_gce .GetPointNumber (_gce .Length ());_gfe :=NewVectorPolar (_ga /2,_eda +_acdf +_acdf /2);_fgg :=_afa .AddVector (_gfe );_fdfb :=NewVectorPolar (_aeg ,_eda ).Add (NewVectorPolar (_feg /2,_eda +_acdf /2));_fcd :=_fgg .AddVector (_fdfb );_dgbb :=NewVectorPolar (_feb ,_eda -_acdf /2);
_bef :=_fcd .AddVector (_dgbb );_ebcg :=NewVectorPolar (_aeg ,_eda );_eaf :=_cac .AddVector (_ebcg );_fgf :=NewVectorPolar (_feb ,_eda +_acdf +_acdf /2);_ddf :=_eaf .AddVector (_fgf );_bec :=_fgg ;_fde :=NewPath ();_fde =_fde .AppendPoint (_fgg );_fde =_fde .AppendPoint (_fcd );
_fde =_fde .AppendPoint (_bef );for _ ,_afc :=range _gce .Points [1:len (_gce .Points )-1]{_fde =_fde .AppendPoint (_afc );};_fde =_fde .AppendPoint (_eaf );_fde =_fde .AppendPoint (_ddf );_fde =_fde .AppendPoint (_bec );_gce =_fde ;};_gff :=_bc .NewContentCreator ();
_gff .Add_q ().SetNonStrokingColor (_degf .LineColor );if len (gsName )> 1{_gff .Add_gs (_d .PdfObjectName (gsName ));};_gce =_gce .Offset (_degf .X1 ,_degf .Y1 );_ddg :=_gce .GetBoundingBox ();DrawPathWithCreator (_gce ,_gff );if _degf .LineStyle ==LineStyleDashed {_gff .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_gff .Add_f ().Add_Q ();};return _gff .Bytes (),_ddg .ToPdfRectangle (),nil ;};

// Copy returns a clone of the Bezier path.
func (_eb CubicBezierPath )Copy ()CubicBezierPath {_f :=CubicBezierPath {};_f .Curves =append (_f .Curves ,_eb .Curves ...);return _f ;};

// AppendCurve appends the specified Bezier curve to the path.
func (_ceg CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ceg .Curves =append (_ceg .Curves ,curve );return _ceg ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _b .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Length returns the number of points in the path.
func (_cfb Path )Length ()int {return len (_cfb .Points )};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_fec :=Vector {};_fec .Dx =dx ;_fec .Dy =dy ;return _fec };

// FlipX flips the sign of the Dx component of the vector.
func (_faf Vector )FlipX ()Vector {_faf .Dx =-_faf .Dx ;return _faf };

// Magnitude returns the magnitude of the vector.
func (_gee Vector )Magnitude ()float64 {return _cf .Sqrt (_cf .Pow (_gee .Dx ,2.0)+_cf .Pow (_gee .Dy ,2.0));};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_gfb Rectangle )ToPdfRectangle ()*_b .PdfRectangle {return &_b .PdfRectangle {Llx :_gfb .X ,Lly :_gfb .Y ,Urx :_gfb .X +_gfb .Width ,Ury :_gfb .Y +_gfb .Height };};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_gg BoundingBox )ToPdfRectangle ()*_b .PdfRectangle {return &_b .PdfRectangle {Llx :_gg .X ,Lly :_gg .Y ,Urx :_gg .X +_gg .Width ,Ury :_gg .Y +_gg .Height };};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _b .PdfColor ;FillEnabled bool ;FillColor _b .PdfColor ;};

// GetBoundingBox returns the bounding box of the path.
func (_dd Path )GetBoundingBox ()BoundingBox {_ccb :=BoundingBox {};_bfa :=0.0;_fg :=0.0;_da :=0.0;_fed :=0.0;for _gcg ,_dgb :=range _dd .Points {if _gcg ==0{_bfa =_dgb .X ;_fg =_dgb .X ;_da =_dgb .Y ;_fed =_dgb .Y ;continue ;};if _dgb .X < _bfa {_bfa =_dgb .X ;
};if _dgb .X > _fg {_fg =_dgb .X ;};if _dgb .Y < _da {_da =_dgb .Y ;};if _dgb .Y > _fed {_fed =_dgb .Y ;};};_ccb .X =_bfa ;_ccb .Y =_da ;_ccb .Width =_fg -_bfa ;_ccb .Height =_fed -_da ;return _ccb ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;
LineEndingStyleButt LineEndingStyle =2;);

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_ad :=Vector {};_ad .Dx =length *_cf .Cos (theta );_ad .Dy =length *_cf .Sin (theta );return _ad ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_eg Polygon )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_efgd :=_bc .NewContentCreator ();_efgd .Add_q ();_eg .FillEnabled =_eg .FillEnabled &&_eg .FillColor !=nil ;if _eg .FillEnabled {_efgd .SetNonStrokingColor (_eg .FillColor );};
_eg .BorderEnabled =_eg .BorderEnabled &&_eg .BorderColor !=nil ;if _eg .BorderEnabled {_efgd .SetStrokingColor (_eg .BorderColor );_efgd .Add_w (_eg .BorderWidth );};if len (gsName )> 1{_efgd .Add_gs (_d .PdfObjectName (gsName ));};_ag :=NewPath ();for _ ,_dfe :=range _eg .Points {for _bfg ,_ebb :=range _dfe {_ag =_ag .AppendPoint (_ebb );
if _bfg ==0{_efgd .Add_m (_ebb .X ,_ebb .Y );}else {_efgd .Add_l (_ebb .X ,_ebb .Y );};};_efgd .Add_h ();};if _eg .FillEnabled &&_eg .BorderEnabled {_efgd .Add_B ();}else if _eg .FillEnabled {_efgd .Add_f ();}else if _eg .BorderEnabled {_efgd .Add_S ();
};_efgd .Add_Q ();return _efgd .Bytes (),_ag .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Copy returns a clone of the path.
func (_ea Path )Copy ()Path {_beb :=Path {};_beb .Points =append (_beb .Points ,_ea .Points ...);return _beb ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_bgg Vector )GetPolarAngle ()float64 {return _cf .Atan2 (_bgg .Dy ,_bgg .Dx )};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_gc CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_gc .P0 .X +=offX ;_gc .P1 .X +=offX ;_gc .P2 .X +=offX ;_gc .P3 .X +=offX ;_gc .P0 .Y +=offY ;_gc .P1 .Y +=offY ;_gc .P2 .Y +=offY ;_gc .P3 .Y +=offY ;return _gc ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _b .PdfColor ;BorderEnabled bool ;BorderColor _b .PdfColor ;BorderWidth float64 ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ac :=CubicBezierPath {};_ac .Curves =[]CubicBezierCurve {};return _ac ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _b .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _b .PdfColor ;Opacity float64 ;};

// Offset shifts the Bezier path with the specified offsets.
func (_fa CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _acd ,_ec :=range _fa .Curves {_fa .Curves [_acd ]=_ec .AddOffsetXY (offX ,offY );};return _fa ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_bbb Rectangle )Draw (gsName string )([]byte ,*_b .PdfRectangle ,error ){_ega :=NewPath ();_ega =_ega .AppendPoint (NewPoint (0,0));_ega =_ega .AppendPoint (NewPoint (0,_bbb .Height ));_ega =_ega .AppendPoint (NewPoint (_bbb .Width ,_bbb .Height ));
_ega =_ega .AppendPoint (NewPoint (_bbb .Width ,0));_ega =_ega .AppendPoint (NewPoint (0,0));if _bbb .X !=0||_bbb .Y !=0{_ega =_ega .Offset (_bbb .X ,_bbb .Y );};_ccac :=_bc .NewContentCreator ();_ccac .Add_q ();if _bbb .FillEnabled {_ccac .SetNonStrokingColor (_bbb .FillColor );
};if _bbb .BorderEnabled {_ccac .SetStrokingColor (_bbb .BorderColor );_ccac .Add_w (_bbb .BorderWidth );};if len (gsName )> 1{_ccac .Add_gs (_d .PdfObjectName (gsName ));};DrawPathWithCreator (_ega ,_ccac );_ccac .Add_h ();if _bbb .FillEnabled &&_bbb .BorderEnabled {_ccac .Add_B ();
}else if _bbb .FillEnabled {_ccac .Add_f ();}else if _bbb .BorderEnabled {_ccac .Add_S ();};_ccac .Add_Q ();return _ccac .Bytes (),_ega .GetBoundingBox ().ToPdfRectangle (),nil ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);