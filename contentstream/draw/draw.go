//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_b "fmt";_g "github.com/unidoc/unipdf/v3/contentstream";_ab "github.com/unidoc/unipdf/v3/core";_eb "github.com/unidoc/unipdf/v3/internal/transform";_e "github.com/unidoc/unipdf/v3/model";_c "math";);

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ad :=CubicBezierPath {};_ad .Curves =[]CubicBezierCurve {};return _ad ;};

// GetBoundingBox returns the bounding box of the path.
func (_ac Path )GetBoundingBox ()BoundingBox {_bc :=BoundingBox {};_dde :=0.0;_aac :=0.0;_bf :=0.0;_aae :=0.0;for _fc ,_adb :=range _ac .Points {if _fc ==0{_dde =_adb .X ;_aac =_adb .X ;_bf =_adb .Y ;_aae =_adb .Y ;continue ;};if _adb .X < _dde {_dde =_adb .X ;
};if _adb .X > _aac {_aac =_adb .X ;};if _adb .Y < _bf {_bf =_adb .Y ;};if _adb .Y > _aae {_aae =_adb .Y ;};};_bc .X =_dde ;_bc .Y =_bf ;_bc .Width =_aac -_dde ;_bc .Height =_aae -_bf ;return _bc ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_dd Path )GetPointNumber (number int )Point {if number < 1||number > len (_dd .Points ){return Point {};};return _dd .Points [number -1];};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_fcd Point )Rotate (theta float64 )Point {_cg :=_eb .NewPoint (_fcd .X ,_fcd .Y ).Rotate (theta );return NewPoint (_cg .X ,_cg .Y );};

// Length returns the number of points in the path.
func (_cbe Path )Length ()int {return len (_cbe .Points )};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _e .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _e .PdfColor ;Opacity float64 ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _e .PdfColor ;BorderEnabled bool ;BorderColor _e .PdfColor ;BorderWidth float64 ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Offset shifts the Bezier path with the specified offsets.
func (_ce CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _gd ,_ea :=range _ce .Curves {_ce .Curves [_gd ]=_ea .AddOffsetXY (offX ,offY );};return _ce ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_ae Polyline )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){if _ae .LineColor ==nil {_ae .LineColor =_e .NewPdfColorDeviceRGB (0,0,0);};_ceb :=NewPath ();for _ ,_dfbc :=range _ae .Points {_ceb =_ceb .AppendPoint (_dfbc );};_cbd :=_g .NewContentCreator ();
_cbd .Add_q ().SetStrokingColor (_ae .LineColor ).Add_w (_ae .LineWidth );if len (gsName )> 1{_cbd .Add_gs (_ab .PdfObjectName (gsName ));};DrawPathWithCreator (_ceb ,_cbd );_cbd .Add_S ();_cbd .Add_Q ();return _cbd .Bytes (),_ceb .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// Offset shifts the path with the specified offsets.
func (_ebd Path )Offset (offX ,offY float64 )Path {for _ebf ,_ga :=range _ebd .Points {_ebd .Points [_ebf ]=_ga .Add (offX ,offY );};return _ebd ;};

// AddVector adds vector to a point.
func (_fa Point )AddVector (v Vector )Point {_fa .X +=v .Dx ;_fa .Y +=v .Dy ;return _fa };

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _e .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Copy returns a clone of the Bezier path.
func (_aa CubicBezierPath )Copy ()CubicBezierPath {_ecc :=CubicBezierPath {};_ecc .Curves =append (_ecc .Curves ,_aa .Curves ...);return _ecc ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_ccc Circle )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_fce :=_ccc .Width /2;_ba :=_ccc .Height /2;if _ccc .BorderEnabled {_fce -=_ccc .BorderWidth /2;_ba -=_ccc .BorderWidth /2;};_gbe :=0.551784;_cge :=_fce *_gbe ;_cfg :=_ba *_gbe ;
_ed :=NewCubicBezierPath ();_ed =_ed .AppendCurve (NewCubicBezierCurve (-_fce ,0,-_fce ,_cfg ,-_cge ,_ba ,0,_ba ));_ed =_ed .AppendCurve (NewCubicBezierCurve (0,_ba ,_cge ,_ba ,_fce ,_cfg ,_fce ,0));_ed =_ed .AppendCurve (NewCubicBezierCurve (_fce ,0,_fce ,-_cfg ,_cge ,-_ba ,0,-_ba ));
_ed =_ed .AppendCurve (NewCubicBezierCurve (0,-_ba ,-_cge ,-_ba ,-_fce ,-_cfg ,-_fce ,0));_ed =_ed .Offset (_fce ,_ba );if _ccc .BorderEnabled {_ed =_ed .Offset (_ccc .BorderWidth /2,_ccc .BorderWidth /2);};if _ccc .X !=0||_ccc .Y !=0{_ed =_ed .Offset (_ccc .X ,_ccc .Y );
};_dea :=_g .NewContentCreator ();_dea .Add_q ();if _ccc .FillEnabled {_dea .SetNonStrokingColor (_ccc .FillColor );};if _ccc .BorderEnabled {_dea .SetStrokingColor (_ccc .BorderColor );_dea .Add_w (_ccc .BorderWidth );};if len (gsName )> 1{_dea .Add_gs (_ab .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_ed ,_dea );_dea .Add_h ();if _ccc .FillEnabled &&_ccc .BorderEnabled {_dea .Add_B ();}else if _ccc .FillEnabled {_dea .Add_f ();}else if _ccc .BorderEnabled {_dea .Add_S ();};_dea .Add_Q ();_aad :=_ed .GetBoundingBox ();if _ccc .BorderEnabled {_aad .Height +=_ccc .BorderWidth ;
_aad .Width +=_ccc .BorderWidth ;_aad .X -=_ccc .BorderWidth /2;_aad .Y -=_ccc .BorderWidth /2;};return _dea .Bytes (),_aad .ToPdfRectangle (),nil ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_eac BasicLine )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_fac :=_eac .LineWidth ;_gcfa :=NewPath ();_gcfa =_gcfa .AppendPoint (NewPoint (_eac .X1 ,_eac .Y1 ));_gcfa =_gcfa .AppendPoint (NewPoint (_eac .X2 ,_eac .Y2 ));_ffaf :=_g .NewContentCreator ();
_bde :=_gcfa .GetBoundingBox ();DrawPathWithCreator (_gcfa ,_ffaf );if _eac .LineStyle ==LineStyleDashed {_ffaf .Add_d ([]int64 {1,1},0);};_ffaf .SetStrokingColor (_eac .LineColor ).Add_w (_fac ).Add_S ().Add_Q ();return _ffaf .Bytes (),_bde .ToPdfRectangle (),nil ;
};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Copy returns a clone of the path.
func (_bbe Path )Copy ()Path {_bg :=Path {};_bg .Points =append (_bg .Points ,_bbe .Points ...);return _bg ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_af :=CubicBezierCurve {};_af .P0 =NewPoint (x0 ,y0 );_af .P1 =NewPoint (x1 ,y1 );_af .P2 =NewPoint (x2 ,y2 );_af .P3 =NewPoint (x3 ,y3 );return _af ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_ca Polygon )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_cgg :=_g .NewContentCreator ();_cgg .Add_q ();_ca .FillEnabled =_ca .FillEnabled &&_ca .FillColor !=nil ;if _ca .FillEnabled {_cgg .SetNonStrokingColor (_ca .FillColor );};_ca .BorderEnabled =_ca .BorderEnabled &&_ca .BorderColor !=nil ;
if _ca .BorderEnabled {_cgg .SetStrokingColor (_ca .BorderColor );_cgg .Add_w (_ca .BorderWidth );};if len (gsName )> 1{_cgg .Add_gs (_ab .PdfObjectName (gsName ));};_gc :=NewPath ();for _ ,_ff :=range _ca .Points {for _abg ,_fd :=range _ff {_gc =_gc .AppendPoint (_fd );
if _abg ==0{_cgg .Add_m (_fd .X ,_fd .Y );}else {_cgg .Add_l (_fd .X ,_fd .Y );};};_cgg .Add_h ();};if _ca .FillEnabled &&_ca .BorderEnabled {_cgg .Add_B ();}else if _ca .FillEnabled {_cgg .Add_f ();}else if _ca .BorderEnabled {_cgg .Add_S ();};_cgg .Add_Q ();
return _cgg .Bytes (),_gc .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_aba Point )Add (dx ,dy float64 )Point {_aba .X +=dx ;_aba .Y +=dy ;return _aba };

// GetBoundingBox returns the bounding box of the Bezier path.
func (_cf CubicBezierPath )GetBoundingBox ()Rectangle {_ee :=Rectangle {};_cb :=0.0;_fb :=0.0;_fgf :=0.0;_aab :=0.0;for _ag ,_adc :=range _cf .Curves {_ef :=_adc .GetBounds ();if _ag ==0{_cb =_ef .Llx ;_fb =_ef .Urx ;_fgf =_ef .Lly ;_aab =_ef .Ury ;continue ;
};if _ef .Llx < _cb {_cb =_ef .Llx ;};if _ef .Urx > _fb {_fb =_ef .Urx ;};if _ef .Lly < _fgf {_fgf =_ef .Lly ;};if _ef .Ury > _aab {_aab =_ef .Ury ;};};_ee .X =_cb ;_ee .Y =_fgf ;_ee .Width =_fb -_cb ;_ee .Height =_aab -_fgf ;return _ee ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_cbb Rectangle )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_gdd :=NewPath ();_gdd =_gdd .AppendPoint (NewPoint (0,0));_gdd =_gdd .AppendPoint (NewPoint (0,_cbb .Height ));_gdd =_gdd .AppendPoint (NewPoint (_cbb .Width ,_cbb .Height ));
_gdd =_gdd .AppendPoint (NewPoint (_cbb .Width ,0));_gdd =_gdd .AppendPoint (NewPoint (0,0));if _cbb .X !=0||_cbb .Y !=0{_gdd =_gdd .Offset (_cbb .X ,_cbb .Y );};_ccd :=_g .NewContentCreator ();_ccd .Add_q ();if _cbb .FillEnabled {_ccd .SetNonStrokingColor (_cbb .FillColor );
};if _cbb .BorderEnabled {_ccd .SetStrokingColor (_cbb .BorderColor );_ccd .Add_w (_cbb .BorderWidth );};if len (gsName )> 1{_ccd .Add_gs (_ab .PdfObjectName (gsName ));};DrawPathWithCreator (_gdd ,_ccd );_ccd .Add_h ();if _cbb .FillEnabled &&_cbb .BorderEnabled {_ccd .Add_B ();
}else if _cbb .FillEnabled {_ccd .Add_f ();}else if _cbb .BorderEnabled {_ccd .Add_S ();};_ccd .Add_Q ();return _ccd .Bytes (),_gdd .GetBoundingBox ().ToPdfRectangle (),nil ;};func (_ead Point )String ()string {return _b .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_ead .X ,_ead .Y );
};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_g .ContentCreator ){for _fccb ,_cfb :=range path .Points {if _fccb ==0{creator .Add_m (_cfb .X ,_cfb .Y );}else {creator .Add_l (_cfb .X ,_cfb .Y );};};};

// FlipY flips the sign of the Dy component of the vector.
func (_fgfg Vector )FlipY ()Vector {_fgfg .Dy =-_fgfg .Dy ;return _fgfg };

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_g .ContentCreator ){for _bba ,_cebe :=range bpath .Curves {if _bba ==0{creator .Add_m (_cebe .P0 .X ,_cebe .P0 .Y );};creator .Add_c (_cebe .P1 .X ,_cebe .P1 .Y ,_cebe .P2 .X ,_cebe .P2 .Y ,_cebe .P3 .X ,_cebe .P3 .Y );
};};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _e .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _e .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _e .PdfColor ;Opacity float64 ;};

// Magnitude returns the magnitude of the vector.
func (_gdbe Vector )Magnitude ()float64 {return _c .Sqrt (_c .Pow (_gdbe .Dx ,2.0)+_c .Pow (_gdbe .Dy ,2.0));};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_gab BoundingBox )ToPdfRectangle ()*_e .PdfRectangle {return &_e .PdfRectangle {Llx :_gab .X ,Lly :_gab .Y ,Urx :_gab .X +_gab .Width ,Ury :_gab .Y +_gab .Height };};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Flip changes the sign of the vector: -vector.
func (_bbd Vector )Flip ()Vector {_bfbe :=_bbd .Magnitude ();_dbeb :=_bbd .GetPolarAngle ();_bbd .Dx =_bfbe *_c .Cos (_dbeb +_c .Pi );_bbd .Dy =_bfbe *_c .Sin (_dbeb +_c .Pi );return _bbd ;};

// AppendCurve appends the specified Bezier curve to the path.
func (_ebc CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ebc .Curves =append (_ebc .Curves ,curve );return _ebc ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_ec CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_ec .P0 .X +=offX ;_ec .P1 .X +=offX ;_ec .P2 .X +=offX ;_ec .P3 .X +=offX ;_ec .P0 .Y +=offY ;_ec .P1 .Y +=offY ;_ec .P2 .Y +=offY ;_ec .P3 .Y +=offY ;return _ec ;};

// Add adds the specified vector to the current one and returns the result.
func (_bdec Vector )Add (other Vector )Vector {_bdec .Dx +=other .Dx ;_bdec .Dy +=other .Dy ;return _bdec ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_cfgg Line )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_adf ,_dbe :=_cfgg .X1 ,_cfgg .X2 ;_afg ,_bcd :=_cfgg .Y1 ,_cfgg .Y2 ;_ffa :=_bcd -_afg ;_dag :=_dbe -_adf ;_afb :=_c .Atan2 (_ffa ,_dag );L :=_c .Sqrt (_c .Pow (_dag ,2.0)+_c .Pow (_ffa ,2.0));
_fda :=_cfgg .LineWidth ;_eadf :=_c .Pi ;_agf :=1.0;if _dag < 0{_agf *=-1.0;};if _ffa < 0{_agf *=-1.0;};VsX :=_agf *(-_fda /2*_c .Cos (_afb +_eadf /2));VsY :=_agf *(-_fda /2*_c .Sin (_afb +_eadf /2)+_fda *_c .Sin (_afb +_eadf /2));V1X :=VsX +_fda /2*_c .Cos (_afb +_eadf /2);
V1Y :=VsY +_fda /2*_c .Sin (_afb +_eadf /2);V2X :=VsX +_fda /2*_c .Cos (_afb +_eadf /2)+L *_c .Cos (_afb );V2Y :=VsY +_fda /2*_c .Sin (_afb +_eadf /2)+L *_c .Sin (_afb );V3X :=VsX +_fda /2*_c .Cos (_afb +_eadf /2)+L *_c .Cos (_afb )+_fda *_c .Cos (_afb -_eadf /2);
V3Y :=VsY +_fda /2*_c .Sin (_afb +_eadf /2)+L *_c .Sin (_afb )+_fda *_c .Sin (_afb -_eadf /2);V4X :=VsX +_fda /2*_c .Cos (_afb -_eadf /2);V4Y :=VsY +_fda /2*_c .Sin (_afb -_eadf /2);_abdb :=NewPath ();_abdb =_abdb .AppendPoint (NewPoint (V1X ,V1Y ));_abdb =_abdb .AppendPoint (NewPoint (V2X ,V2Y ));
_abdb =_abdb .AppendPoint (NewPoint (V3X ,V3Y ));_abdb =_abdb .AppendPoint (NewPoint (V4X ,V4Y ));_fdf :=_cfgg .LineEndingStyle1 ;_df :=_cfgg .LineEndingStyle2 ;_dfb :=3*_fda ;_dc :=3*_fda ;_gcf :=(_dc -_fda )/2;if _df ==LineEndingStyleArrow {_bfb :=_abdb .GetPointNumber (2);
_gde :=NewVectorPolar (_dfb ,_afb +_eadf );_fbb :=_bfb .AddVector (_gde );_ace :=NewVectorPolar (_dc /2,_afb +_eadf /2);_bbf :=NewVectorPolar (_dfb ,_afb );_ded :=NewVectorPolar (_gcf ,_afb +_eadf /2);_eg :=_fbb .AddVector (_ded );_gg :=_bbf .Add (_ace .Flip ());
_adg :=_eg .AddVector (_gg );_gae :=_ace .Scale (2).Flip ().Add (_gg .Flip ());_bd :=_adg .AddVector (_gae );_gea :=_fbb .AddVector (NewVectorPolar (_fda ,_afb -_eadf /2));_dab :=NewPath ();_dab =_dab .AppendPoint (_abdb .GetPointNumber (1));_dab =_dab .AppendPoint (_fbb );
_dab =_dab .AppendPoint (_eg );_dab =_dab .AppendPoint (_adg );_dab =_dab .AppendPoint (_bd );_dab =_dab .AppendPoint (_gea );_dab =_dab .AppendPoint (_abdb .GetPointNumber (4));_abdb =_dab ;};if _fdf ==LineEndingStyleArrow {_egd :=_abdb .GetPointNumber (1);
_ffc :=_abdb .GetPointNumber (_abdb .Length ());_dac :=NewVectorPolar (_fda /2,_afb +_eadf +_eadf /2);_fcc :=_egd .AddVector (_dac );_gbed :=NewVectorPolar (_dfb ,_afb ).Add (NewVectorPolar (_dc /2,_afb +_eadf /2));_fde :=_fcc .AddVector (_gbed );_fge :=NewVectorPolar (_gcf ,_afb -_eadf /2);
_ffd :=_fde .AddVector (_fge );_ggc :=NewVectorPolar (_dfb ,_afb );_bga :=_ffc .AddVector (_ggc );_aaa :=NewVectorPolar (_gcf ,_afb +_eadf +_eadf /2);_cbg :=_bga .AddVector (_aaa );_ddg :=_fcc ;_ege :=NewPath ();_ege =_ege .AppendPoint (_fcc );_ege =_ege .AppendPoint (_fde );
_ege =_ege .AppendPoint (_ffd );for _ ,_ggg :=range _abdb .Points [1:len (_abdb .Points )-1]{_ege =_ege .AppendPoint (_ggg );};_ege =_ege .AppendPoint (_bga );_ege =_ege .AppendPoint (_cbg );_ege =_ege .AppendPoint (_ddg );_abdb =_ege ;};_fbc :=_g .NewContentCreator ();
_fbc .Add_q ().SetNonStrokingColor (_cfgg .LineColor );if len (gsName )> 1{_fbc .Add_gs (_ab .PdfObjectName (gsName ));};_abdb =_abdb .Offset (_cfgg .X1 ,_cfgg .Y1 );_ebg :=_abdb .GetBoundingBox ();DrawPathWithCreator (_abdb ,_fbc );if _cfgg .LineStyle ==LineStyleDashed {_fbc .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_fbc .Add_f ().Add_Q ();};return _fbc .Bytes (),_ebg .ToPdfRectangle (),nil ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _e .PdfColor ;BorderEnabled bool ;BorderColor _e .PdfColor ;BorderWidth float64 ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _e .PdfColor ;FillEnabled bool ;FillColor _e .PdfColor ;};

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_abge CurvePolygon )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){_abd :=_g .NewContentCreator ();_abd .Add_q ();_abge .FillEnabled =_abge .FillEnabled &&_abge .FillColor !=nil ;if _abge .FillEnabled {_abd .SetNonStrokingColor (_abge .FillColor );
};_abge .BorderEnabled =_abge .BorderEnabled &&_abge .BorderColor !=nil ;if _abge .BorderEnabled {_abd .SetStrokingColor (_abge .BorderColor );_abd .Add_w (_abge .BorderWidth );};if len (gsName )> 1{_abd .Add_gs (_ab .PdfObjectName (gsName ));};_bce :=NewCubicBezierPath ();
for _ ,_abgg :=range _abge .Rings {for _dda ,_bcea :=range _abgg {if _dda ==0{_abd .Add_m (_bcea .P0 .X ,_bcea .P0 .Y );}else {_abd .Add_l (_bcea .P0 .X ,_bcea .P0 .Y );};_abd .Add_c (_bcea .P1 .X ,_bcea .P1 .Y ,_bcea .P2 .X ,_bcea .P2 .Y ,_bcea .P3 .X ,_bcea .P3 .Y );
_bce =_bce .AppendCurve (_bcea );};_abd .Add_h ();};if _abge .FillEnabled &&_abge .BorderEnabled {_abd .Add_B ();}else if _abge .FillEnabled {_abd .Add_f ();}else if _abge .BorderEnabled {_abd .Add_S ();};_abd .Add_Q ();return _abd .Bytes (),_bce .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_cc Path )RemovePoint (number int )Path {if number < 1||number > len (_cc .Points ){return _cc ;};_ecg :=number -1;_cc .Points =append (_cc .Points [:_ecg ],_cc .Points [_ecg +1:]...);return _cc ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_da Rectangle )ToPdfRectangle ()*_e .PdfRectangle {return &_e .PdfRectangle {Llx :_da .X ,Lly :_da .Y ,Urx :_da .X +_da .Width ,Ury :_da .Y +_da .Height };};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _e .PdfColor ;LineWidth float64 ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_geg :=Vector {};_geg .Dx =b .X -a .X ;_geg .Dy =b .Y -a .Y ;return _geg ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_bbb :=Vector {};_bbb .Dx =length *_c .Cos (theta );_bbb .Dy =length *_c .Sin (theta );return _bbb ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// Scale scales the vector by the specified factor.
func (_fdc Vector )Scale (factor float64 )Vector {_adcg :=_fdc .Magnitude ();_gdde :=_fdc .GetPolarAngle ();_fdc .Dx =factor *_adcg *_c .Cos (_gdde );_fdc .Dy =factor *_adcg *_c .Sin (_gdde );return _fdc ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_ggb Vector )GetPolarAngle ()float64 {return _c .Atan2 (_ggb .Dy ,_ggb .Dx )};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_cfd PolyBezierCurve )Draw (gsName string )([]byte ,*_e .PdfRectangle ,error ){if _cfd .BorderColor ==nil {_cfd .BorderColor =_e .NewPdfColorDeviceRGB (0,0,0);};_ge :=NewCubicBezierPath ();for _ ,_gf :=range _cfd .Curves {_ge =_ge .AppendCurve (_gf );
};_efe :=_g .NewContentCreator ();_efe .Add_q ();_cfd .FillEnabled =_cfd .FillEnabled &&_cfd .FillColor !=nil ;if _cfd .FillEnabled {_efe .SetNonStrokingColor (_cfd .FillColor );};_efe .SetStrokingColor (_cfd .BorderColor );_efe .Add_w (_cfd .BorderWidth );
if len (gsName )> 1{_efe .Add_gs (_ab .PdfObjectName (gsName ));};for _ada ,_efg :=range _ge .Curves {if _ada ==0{_efe .Add_m (_efg .P0 .X ,_efg .P0 .Y );}else {_efe .Add_l (_efg .P0 .X ,_efg .P0 .Y );};_efe .Add_c (_efg .P1 .X ,_efg .P1 .Y ,_efg .P2 .X ,_efg .P2 .Y ,_efg .P3 .X ,_efg .P3 .Y );
};if _cfd .FillEnabled {_efe .Add_h ();_efe .Add_B ();}else {_efe .Add_S ();};_efe .Add_Q ();return _efe .Bytes (),_ge .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rotate rotates the vector by the specified angle.
func (_fae Vector )Rotate (phi float64 )Vector {_afe :=_fae .Magnitude ();_bfd :=_fae .GetPolarAngle ();return NewVectorPolar (_afe ,_bfd +phi );};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_cd :=Vector {};_cd .Dx =dx ;_cd .Dy =dy ;return _cd };

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// FlipX flips the sign of the Dx component of the vector.
func (_gdb Vector )FlipX ()Vector {_gdb .Dx =-_gdb .Dx ;return _gdb };

// AppendPoint adds the specified point to the path.
func (_cec Path )AppendPoint (point Point )Path {_cec .Points =append (_cec .Points ,point );return _cec };

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// GetBounds returns the bounding box of the Bezier curve.
func (_d CubicBezierCurve )GetBounds ()_e .PdfRectangle {_gb :=_d .P0 .X ;_f :=_d .P0 .X ;_de :=_d .P0 .Y ;_bb :=_d .P0 .Y ;for _db :=0.0;_db <=1.0;_db +=0.001{Rx :=_d .P0 .X *_c .Pow (1-_db ,3)+_d .P1 .X *3*_db *_c .Pow (1-_db ,2)+_d .P2 .X *3*_c .Pow (_db ,2)*(1-_db )+_d .P3 .X *_c .Pow (_db ,3);
Ry :=_d .P0 .Y *_c .Pow (1-_db ,3)+_d .P1 .Y *3*_db *_c .Pow (1-_db ,2)+_d .P2 .Y *3*_c .Pow (_db ,2)*(1-_db )+_d .P3 .Y *_c .Pow (_db ,3);if Rx < _gb {_gb =Rx ;};if Rx > _f {_f =Rx ;};if Ry < _de {_de =Ry ;};if Ry > _bb {_bb =Ry ;};};_fg :=_e .PdfRectangle {};
_fg .Llx =_gb ;_fg .Lly =_de ;_fg .Urx =_f ;_fg .Ury =_bb ;return _fg ;};