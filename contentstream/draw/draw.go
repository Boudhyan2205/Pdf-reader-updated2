//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_d "fmt";_a "github.com/unidoc/unipdf/v3/contentstream";_b "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/internal/transform";_df "github.com/unidoc/unipdf/v3/model";_ee "math";);

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_gcd :=Vector {};_gcd .Dx =length *_ee .Cos (theta );_gcd .Dy =length *_ee .Sin (theta );return _gcd ;};

// Length returns the number of points in the path.
func (_fd Path )Length ()int {return len (_fd .Points )};

// Rotate rotates the vector by the specified angle.
func (_bae Vector )Rotate (phi float64 )Vector {_ggb :=_bae .Magnitude ();_cce :=_bae .GetPolarAngle ();return NewVectorPolar (_ggb ,_cce +phi );};func (_cbc Point )String ()string {return _d .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_cbc .X ,_cbc .Y );};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_cba :=CubicBezierPath {};_cba .Curves =[]CubicBezierCurve {};return _cba ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_a .ContentCreator ){for _gag ,_gdd :=range bpath .Curves {if _gag ==0{creator .Add_m (_gdd .P0 .X ,_gdd .P0 .Y );};creator .Add_c (_gdd .P1 .X ,_gdd .P1 .Y ,_gdd .P2 .X ,_gdd .P2 .Y ,_gdd .P3 .X ,_gdd .P3 .Y );};};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_dcc BasicLine )Draw (gsName string )([]byte ,*_df .PdfRectangle ,error ){_gba :=_dcc .LineWidth ;_baf :=NewPath ();_baf =_baf .AppendPoint (NewPoint (_dcc .X1 ,_dcc .Y1 ));_baf =_baf .AppendPoint (NewPoint (_dcc .X2 ,_dcc .Y2 ));_dedb :=_a .NewContentCreator ();_cfc :=_baf .GetBoundingBox ();DrawPathWithCreator (_baf ,_dedb );if _dcc .LineStyle ==LineStyleDashed {_dedb .Add_d ([]int64 {1,1},0);};_dedb .Add_RG (_dcc .LineColor .R (),_dcc .LineColor .G (),_dcc .LineColor .B ()).Add_w (_gba ).Add_S ().Add_Q ();_gfaa :=&_df .PdfRectangle {};_gfaa .Llx =_cfc .X ;_gfaa .Lly =_cfc .Y ;_gfaa .Urx =_cfc .X +_cfc .Width ;_gfaa .Ury =_cfc .Y +_cfc .Height ;return _dedb .Bytes (),_gfaa ,nil ;};

// FlipX flips the sign of the Dx component of the vector.
func (_dcd Vector )FlipX ()Vector {_dcd .Dx =-_dcd .Dx ;return _dcd };

// Offset shifts the path with the specified offsets.
func (_fa Path )Offset (offX ,offY float64 )Path {for _de ,_gf :=range _fa .Points {_fa .Points [_de ]=_gf .Add (offX ,offY );};return _fa ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_df .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_ce Rectangle )Draw (gsName string )([]byte ,*_df .PdfRectangle ,error ){_bda :=NewPath ();_bda =_bda .AppendPoint (NewPoint (0,0));_bda =_bda .AppendPoint (NewPoint (0,_ce .Height ));_bda =_bda .AppendPoint (NewPoint (_ce .Width ,_ce .Height ));_bda =_bda .AppendPoint (NewPoint (_ce .Width ,0));_bda =_bda .AppendPoint (NewPoint (0,0));if _ce .X !=0||_ce .Y !=0{_bda =_bda .Offset (_ce .X ,_ce .Y );};_ccb :=_a .NewContentCreator ();_ccb .Add_q ();if _ce .FillEnabled {_ccb .Add_rg (_ce .FillColor .R (),_ce .FillColor .G (),_ce .FillColor .B ());};if _ce .BorderEnabled {_ccb .Add_RG (_ce .BorderColor .R (),_ce .BorderColor .G (),_ce .BorderColor .B ());_ccb .Add_w (_ce .BorderWidth );};if len (gsName )> 1{_ccb .Add_gs (_b .PdfObjectName (gsName ));};DrawPathWithCreator (_bda ,_ccb );_ccb .Add_h ();if _ce .FillEnabled &&_ce .BorderEnabled {_ccb .Add_B ();}else if _ce .FillEnabled {_ccb .Add_f ();}else if _ce .BorderEnabled {_ccb .Add_S ();};_ccb .Add_Q ();_gcc :=_bda .GetBoundingBox ();_fad :=&_df .PdfRectangle {};_fad .Llx =_gcc .X ;_fad .Lly =_gcc .Y ;_fad .Urx =_gcc .X +_gcc .Width ;_fad .Ury =_gcc .Y +_gcc .Height ;return _ccb .Bytes (),_fad ,nil ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_be :=CubicBezierCurve {};_be .P0 =NewPoint (x0 ,y0 );_be .P1 =NewPoint (x1 ,y1 );_be .P2 =NewPoint (x2 ,y2 );_be .P3 =NewPoint (x3 ,y3 );return _be ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// AppendCurve appends the specified Bezier curve to the path.
func (_bc CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_bc .Curves =append (_bc .Curves ,curve );return _bc ;};

// GetBoundingBox returns the bounding box of the path.
func (_bfd Path )GetBoundingBox ()BoundingBox {_cd :=BoundingBox {};_bbe :=0.0;_cbb :=0.0;_bcc :=0.0;_daf :=0.0;for _fg ,_bgc :=range _bfd .Points {if _fg ==0{_bbe =_bgc .X ;_cbb =_bgc .X ;_bcc =_bgc .Y ;_daf =_bgc .Y ;continue ;};if _bgc .X < _bbe {_bbe =_bgc .X ;};if _bgc .X > _cbb {_cbb =_bgc .X ;};if _bgc .Y < _bcc {_bcc =_bgc .Y ;};if _bgc .Y > _daf {_daf =_bgc .Y ;};};_cd .X =_bbe ;_cd .Y =_bcc ;_cd .Width =_cbb -_bbe ;_cd .Height =_daf -_bcc ;return _cd ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_eb Point )Rotate (theta float64 )Point {_bd :=_c .NewPoint (_eb .X ,_eb .Y ).Rotate (theta );return NewPoint (_bd .X ,_bd .Y );};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Scale scales the vector by the specified factor.
func (_fgf Vector )Scale (factor float64 )Vector {_aagg :=_fgf .Magnitude ();_fada :=_fgf .GetPolarAngle ();_fgf .Dx =factor *_aagg *_ee .Cos (_fada );_fgf .Dy =factor *_aagg *_ee .Sin (_fada );return _fgf ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_f CubicBezierCurve )GetBounds ()_df .PdfRectangle {_fc :=_f .P0 .X ;_bb :=_f .P0 .X ;_ac :=_f .P0 .Y ;_cb :=_f .P0 .Y ;for _bed :=0.0;_bed <=1.0;_bed +=0.001{Rx :=_f .P0 .X *_ee .Pow (1-_bed ,3)+_f .P1 .X *3*_bed *_ee .Pow (1-_bed ,2)+_f .P2 .X *3*_ee .Pow (_bed ,2)*(1-_bed )+_f .P3 .X *_ee .Pow (_bed ,3);Ry :=_f .P0 .Y *_ee .Pow (1-_bed ,3)+_f .P1 .Y *3*_bed *_ee .Pow (1-_bed ,2)+_f .P2 .Y *3*_ee .Pow (_bed ,2)*(1-_bed )+_f .P3 .Y *_ee .Pow (_bed ,3);if Rx < _fc {_fc =Rx ;};if Rx > _bb {_bb =Rx ;};if Ry < _ac {_ac =Ry ;};if Ry > _cb {_cb =Ry ;};};_dd :=_df .PdfRectangle {};_dd .Llx =_fc ;_dd .Lly =_ac ;_dd .Urx =_bb ;_dd .Ury =_cb ;return _dd ;};

// Copy returns a clone of the Bezier path.
func (_fe CubicBezierPath )Copy ()CubicBezierPath {_ag :=CubicBezierPath {};_ag .Curves =[]CubicBezierCurve {};for _ ,_dfd :=range _fe .Curves {_ag .Curves =append (_ag .Curves ,_dfd );};return _ag ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_ebd Circle )Draw (gsName string )([]byte ,*_df .PdfRectangle ,error ){_agb :=_ebd .Width /2;_feg :=_ebd .Height /2;if _ebd .BorderEnabled {_agb -=_ebd .BorderWidth /2;_feg -=_ebd .BorderWidth /2;};_gff :=0.551784;_cae :=_agb *_gff ;_ace :=_feg *_gff ;_cbf :=NewCubicBezierPath ();_cbf =_cbf .AppendCurve (NewCubicBezierCurve (-_agb ,0,-_agb ,_ace ,-_cae ,_feg ,0,_feg ));_cbf =_cbf .AppendCurve (NewCubicBezierCurve (0,_feg ,_cae ,_feg ,_agb ,_ace ,_agb ,0));_cbf =_cbf .AppendCurve (NewCubicBezierCurve (_agb ,0,_agb ,-_ace ,_cae ,-_feg ,0,-_feg ));_cbf =_cbf .AppendCurve (NewCubicBezierCurve (0,-_feg ,-_cae ,-_feg ,-_agb ,-_ace ,-_agb ,0));_cbf =_cbf .Offset (_agb ,_feg );if _ebd .BorderEnabled {_cbf =_cbf .Offset (_ebd .BorderWidth /2,_ebd .BorderWidth /2);};if _ebd .X !=0||_ebd .Y !=0{_cbf =_cbf .Offset (_ebd .X ,_ebd .Y );};_bcd :=_a .NewContentCreator ();_bcd .Add_q ();if _ebd .FillEnabled {_bcd .Add_rg (_ebd .FillColor .R (),_ebd .FillColor .G (),_ebd .FillColor .B ());};if _ebd .BorderEnabled {_bcd .Add_RG (_ebd .BorderColor .R (),_ebd .BorderColor .G (),_ebd .BorderColor .B ());_bcd .Add_w (_ebd .BorderWidth );};if len (gsName )> 1{_bcd .Add_gs (_b .PdfObjectName (gsName ));};DrawBezierPathWithCreator (_cbf ,_bcd );_bcd .Add_h ();if _ebd .FillEnabled &&_ebd .BorderEnabled {_bcd .Add_B ();}else if _ebd .FillEnabled {_bcd .Add_f ();}else if _ebd .BorderEnabled {_bcd .Add_S ();};_bcd .Add_Q ();_gfa :=_cbf .GetBoundingBox ();if _ebd .BorderEnabled {_gfa .Height +=_ebd .BorderWidth ;_gfa .Width +=_ebd .BorderWidth ;_gfa .X -=_ebd .BorderWidth /2;_gfa .Y -=_ebd .BorderWidth /2;};_gbc :=&_df .PdfRectangle {};_gbc .Llx =_gfa .X ;_gbc .Lly =_gfa .Y ;_gbc .Urx =_gfa .X +_gfa .Width ;_gbc .Ury =_gfa .Y +_gfa .Height ;return _bcd .Bytes (),_gbc ,nil ;};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_ec Point )Add (dx ,dy float64 )Point {_ec .X +=dx ;_ec .Y +=dy ;return _ec };

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// AddVector adds vector to a point.
func (_caf Point )AddVector (v Vector )Point {_caf .X +=v .Dx ;_caf .Y +=v .Dy ;return _caf };

// Add adds the specified vector to the current one and returns the result.
func (_cbe Vector )Add (other Vector )Vector {_cbe .Dx +=other .Dx ;_cbe .Dy +=other .Dy ;return _cbe };

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_df .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_agc Line )Draw (gsName string )([]byte ,*_df .PdfRectangle ,error ){_agcc ,_bge :=_agc .X1 ,_agc .X2 ;_cg ,_ga :=_agc .Y1 ,_agc .Y2 ;_cgg :=_ga -_cg ;_bbg :=_bge -_agcc ;_cdb :=_ee .Atan2 (_cgg ,_bbg );L :=_ee .Sqrt (_ee .Pow (_bbg ,2.0)+_ee .Pow (_cgg ,2.0));_bcg :=_agc .LineWidth ;_faf :=_ee .Pi ;_ceb :=1.0;if _bbg < 0{_ceb *=-1.0;};if _cgg < 0{_ceb *=-1.0;};VsX :=_ceb *(-_bcg /2*_ee .Cos (_cdb +_faf /2));VsY :=_ceb *(-_bcg /2*_ee .Sin (_cdb +_faf /2)+_bcg *_ee .Sin (_cdb +_faf /2));V1X :=VsX +_bcg /2*_ee .Cos (_cdb +_faf /2);V1Y :=VsY +_bcg /2*_ee .Sin (_cdb +_faf /2);V2X :=VsX +_bcg /2*_ee .Cos (_cdb +_faf /2)+L *_ee .Cos (_cdb );V2Y :=VsY +_bcg /2*_ee .Sin (_cdb +_faf /2)+L *_ee .Sin (_cdb );V3X :=VsX +_bcg /2*_ee .Cos (_cdb +_faf /2)+L *_ee .Cos (_cdb )+_bcg *_ee .Cos (_cdb -_faf /2);V3Y :=VsY +_bcg /2*_ee .Sin (_cdb +_faf /2)+L *_ee .Sin (_cdb )+_bcg *_ee .Sin (_cdb -_faf /2);V4X :=VsX +_bcg /2*_ee .Cos (_cdb -_faf /2);V4Y :=VsY +_bcg /2*_ee .Sin (_cdb -_faf /2);_eef :=NewPath ();_eef =_eef .AppendPoint (NewPoint (V1X ,V1Y ));_eef =_eef .AppendPoint (NewPoint (V2X ,V2Y ));_eef =_eef .AppendPoint (NewPoint (V3X ,V3Y ));_eef =_eef .AppendPoint (NewPoint (V4X ,V4Y ));_ad :=_agc .LineEndingStyle1 ;_ef :=_agc .LineEndingStyle2 ;_aec :=3*_bcg ;_gfb :=3*_bcg ;_cdd :=(_gfb -_bcg )/2;if _ef ==LineEndingStyleArrow {_aa :=_eef .GetPointNumber (2);_cf :=NewVectorPolar (_aec ,_cdb +_faf );_bbf :=_aa .AddVector (_cf );_bgce :=NewVectorPolar (_gfb /2,_cdb +_faf /2);_aag :=NewVectorPolar (_aec ,_cdb );_ecc :=NewVectorPolar (_cdd ,_cdb +_faf /2);_fadb :=_bbf .AddVector (_ecc );_eee :=_aag .Add (_bgce .Flip ());_gg :=_fadb .AddVector (_eee );_dfdg :=_bgce .Scale (2).Flip ().Add (_eee .Flip ());_cfe :=_gg .AddVector (_dfdg );_db :=_bbf .AddVector (NewVectorPolar (_bcg ,_cdb -_faf /2));_ded :=NewPath ();_ded =_ded .AppendPoint (_eef .GetPointNumber (1));_ded =_ded .AppendPoint (_bbf );_ded =_ded .AppendPoint (_fadb );_ded =_ded .AppendPoint (_gg );_ded =_ded .AppendPoint (_cfe );_ded =_ded .AppendPoint (_db );_ded =_ded .AppendPoint (_eef .GetPointNumber (4));_eef =_ded ;};if _ad ==LineEndingStyleArrow {_dae :=_eef .GetPointNumber (1);_ge :=_eef .GetPointNumber (_eef .Length ());_fbc :=NewVectorPolar (_bcg /2,_cdb +_faf +_faf /2);_cbbe :=_dae .AddVector (_fbc );_ea :=NewVectorPolar (_aec ,_cdb ).Add (NewVectorPolar (_gfb /2,_cdb +_faf /2));_fcf :=_cbbe .AddVector (_ea );_ff :=NewVectorPolar (_cdd ,_cdb -_faf /2);_cfed :=_fcf .AddVector (_ff );_dbe :=NewVectorPolar (_aec ,_cdb );_dg :=_ge .AddVector (_dbe );_baa :=NewVectorPolar (_cdd ,_cdb +_faf +_faf /2);_dc :=_dg .AddVector (_baa );_dce :=_cbbe ;_dgd :=NewPath ();_dgd =_dgd .AppendPoint (_cbbe );_dgd =_dgd .AppendPoint (_fcf );_dgd =_dgd .AppendPoint (_cfed );for _ ,_bdf :=range _eef .Points [1:len (_eef .Points )-1]{_dgd =_dgd .AppendPoint (_bdf );};_dgd =_dgd .AppendPoint (_dg );_dgd =_dgd .AppendPoint (_dc );_dgd =_dgd .AppendPoint (_dce );_eef =_dgd ;};_dac :=_a .NewContentCreator ();_dac .Add_q ().Add_rg (_agc .LineColor .R (),_agc .LineColor .G (),_agc .LineColor .B ());if len (gsName )> 1{_dac .Add_gs (_b .PdfObjectName (gsName ));};_eef =_eef .Offset (_agc .X1 ,_agc .Y1 );_cga :=_eef .GetBoundingBox ();DrawPathWithCreator (_eef ,_dac );if _agc .LineStyle ==LineStyleDashed {_dac .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_dac .Add_f ().Add_Q ();};_dcf :=&_df .PdfRectangle {};_dcf .Llx =_cga .X ;_dcf .Lly =_cga .Y ;_dcf .Urx =_cga .X +_cga .Width ;_dcf .Ury =_cga .Y +_cga .Height ;return _dac .Bytes (),_dcf ,nil ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_ae CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_ae .P0 .X +=offX ;_ae .P1 .X +=offX ;_ae .P2 .X +=offX ;_ae .P3 .X +=offX ;_ae .P0 .Y +=offY ;_ae .P1 .Y +=offY ;_ae .P2 .Y +=offY ;_ae .P3 .Y +=offY ;return _ae ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_bfa :=Vector {};_bfa .Dx =b .X -a .X ;_bfa .Dy =b .Y -a .Y ;return _bfa ;};

// Flip changes the sign of the vector: -vector.
func (_dcg Vector )Flip ()Vector {_bdaf :=_dcg .Magnitude ();_ggg :=_dcg .GetPolarAngle ();_dcg .Dx =_bdaf *_ee .Cos (_ggg +_ee .Pi );_dcg .Dy =_bdaf *_ee .Sin (_ggg +_ee .Pi );return _dcg ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// AppendPoint adds the specified point to the path.
func (_gb Path )AppendPoint (point Point )Path {_gb .Points =append (_gb .Points ,point );return _gb };

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_df .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_df .PdfColorDeviceRGB ;Opacity float64 ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_df .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_df .PdfColorDeviceRGB ;Opacity float64 ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_dacf :=Vector {};_dacf .Dx =dx ;_dacf .Dy =dy ;return _dacf };

// FlipY flips the sign of the Dy component of the vector.
func (_eag Vector )FlipY ()Vector {_eag .Dy =-_eag .Dy ;return _eag };

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_dfda Vector )GetPolarAngle ()float64 {return _ee .Atan2 (_dfda .Dy ,_dfda .Dx )};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// Offset shifts the Bezier path with the specified offsets.
func (_cc CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _eg ,_fcd :=range _cc .Curves {_cc .Curves [_eg ]=_fcd .AddOffsetXY (offX ,offY );};return _cc ;};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_bf Path )GetPointNumber (number int )Point {if number < 1||number > len (_bf .Points ){return Point {};};return _bf .Points [number -1];};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// Copy returns a clone of the path.
func (_fb Path )Copy ()Path {_fea :=Path {};_fea .Points =[]Point {};for _ ,_egg :=range _fb .Points {_fea .Points =append (_fea .Points ,_egg );};return _fea ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_acc CubicBezierPath )GetBoundingBox ()Rectangle {_g :=Rectangle {};_fef :=0.0;_ddd :=0.0;_da :=0.0;_gc :=0.0;for _fcdc ,_beg :=range _acc .Curves {_bg :=_beg .GetBounds ();if _fcdc ==0{_fef =_bg .Llx ;_ddd =_bg .Urx ;_da =_bg .Lly ;_gc =_bg .Ury ;continue ;};if _bg .Llx < _fef {_fef =_bg .Llx ;};if _bg .Urx > _ddd {_ddd =_bg .Urx ;};if _bg .Lly < _da {_da =_bg .Lly ;};if _bg .Ury > _gc {_gc =_bg .Ury ;};};_g .X =_fef ;_g .Y =_da ;_g .Width =_ddd -_fef ;_g .Height =_gc -_da ;return _g ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_eed Path )RemovePoint (number int )Path {if number < 1||number > len (_eed .Points ){return _eed ;};_gce :=number -1;_eed .Points =append (_eed .Points [:_gce ],_eed .Points [_gce +1:]...);return _eed ;};

// Magnitude returns the magnitude of the vector.
func (_dec Vector )Magnitude ()float64 {return _ee .Sqrt (_ee .Pow (_dec .Dx ,2.0)+_ee .Pow (_dec .Dy ,2.0));};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_a .ContentCreator ){for _gd ,_aad :=range path .Points {if _gd ==0{creator .Add_m (_aad .X ,_aad .Y );}else {creator .Add_l (_aad .X ,_aad .Y );};};};