//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_df "bufio";_ab "bytes";_d "encoding/hex";_a "errors";_fc "fmt";_ge "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/core";_cg "github.com/unidoc/unipdf/v3/internal/imageutil";_ac "github.com/unidoc/unipdf/v3/internal/transform";
_b "github.com/unidoc/unipdf/v3/model";_g "image/color";_f "image/jpeg";_aa "io";_ca "math";_c "strconv";);

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_cfe *ContentCreator )Add_Do (name _gg .PdfObjectName )*ContentCreator {_bacg :=ContentStreamOperation {};_bacg .Operand ="\u0044\u006f";_bacg .Params =_ffeb ([]_gg .PdfObjectName {name });_cfe ._cab =append (_cfe ._cab ,&_bacg );return _cfe ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ga *ContentCreator )Add_s ()*ContentCreator {_dfeb :=ContentStreamOperation {};_dfeb .Operand ="\u0073";_ga ._cab =append (_ga ._cab ,&_dfeb );return _ga ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_cab ContentStreamOperations };func (_cdfg *ContentStreamProcessor )getColorspace (_dfeg string ,_beg *_b .PdfPageResources )(_b .PdfColorspace ,error ){switch _dfeg {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _b .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _b .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _b .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _b .NewPdfColorspaceSpecialPattern (),nil ;
};_bedf ,_bda :=_beg .GetColorspaceByName (_gg .PdfObjectName (_dfeg ));if _bda {return _bedf ,nil ;};switch _dfeg {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _b .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _b .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _b .NewPdfColorspaceLab (),nil ;};_ge .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_dfeg );
return nil ,_fc .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_dfeg );};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_gc *ContentCreator )Bytes ()[]byte {return _gc ._cab .Bytes ()};func (_ae *ContentStreamOperations )isWrapped ()bool {if len (*_ae )< 2{return false ;};_bb :=0;for _ ,_caa :=range *_ae {if _caa .Operand =="\u0071"{_bb ++;}else if _caa .Operand =="\u0051"{_bb --;
}else {if _bb < 1{return false ;};};};return _bb ==0;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_bacgf GraphicStateStack ;_eda []*ContentStreamOperation ;_gfaa GraphicsState ;_agbb []handlerEntry ;_cfde int ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ged *ContentCreator )Add_b_starred ()*ContentCreator {_dca :=ContentStreamOperation {};_dca .Operand ="\u0062\u002a";_ged ._cab =append (_ged ._cab ,&_dca );return _ged ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cfg *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bac :=ContentStreamOperation {};_bac .Operand ="\u0063";_bac .Params =_ddc ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_cfg ._cab =append (_cfg ._cab ,&_bac );return _cfg ;};


// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_gfff *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_aage :=handlerEntry {};_aage .Condition =condition ;_aage .Operand =operand ;_aage .Handler =handler ;_gfff ._agbb =append (_gfff ._agbb ,_aage );
};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_edc *ContentCreator )Add_ri (intent _gg .PdfObjectName )*ContentCreator {_caf :=ContentStreamOperation {};_caf .Operand ="\u0072\u0069";_caf .Params =_ffeb ([]_gg .PdfObjectName {intent });_edc ._cab =append (_edc ._cab ,&_caf );return _edc ;};func _dgfe (_bbeg []int64 )[]_gg .PdfObject {var _fcgf []_gg .PdfObject ;
for _ ,_fced :=range _bbeg {_fcgf =append (_fcgf ,_gg .MakeInteger (_fced ));};return _fcgf ;};func _dcd (_eec *ContentStreamInlineImage ,_eae *_gg .PdfObjectDictionary )(*_gg .FlateEncoder ,error ){_gfg :=_gg .NewFlateEncoder ();if _eec ._fef !=nil {_gfg .SetImage (_eec ._fef );
};if _eae ==nil {_dfdc :=_eec .DecodeParms ;if _dfdc !=nil {_bdf ,_cd :=_gg .GetDict (_dfdc );if !_cd {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dfdc );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eae =_bdf ;};};if _eae ==nil {return _gfg ,nil ;};_ge .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eae .String ());
_eeab :=_eae .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _eeab ==nil {_ge .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_gcd ,_adf :=_eeab .(*_gg .PdfObjectInteger );if !_adf {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_eeab );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_gfg .Predictor =int (*_gcd );};_eeab =_eae .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _eeab !=nil {_gecc ,_bgf :=_eeab .(*_gg .PdfObjectInteger );if !_bgf {_ge .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_fc .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_gfg .BitsPerComponent =int (*_gecc );};if _gfg .Predictor > 1{_gfg .Columns =1;_eeab =_eae .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _eeab !=nil {_faf ,_dfcb :=_eeab .(*_gg .PdfObjectInteger );if !_dfcb {return nil ,_fc .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_gfg .Columns =int (*_faf );
};_gfg .Colors =1;_dgeg :=_eae .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dgeg !=nil {_bbdg ,_aggc :=_dgeg .(*_gg .PdfObjectInteger );if !_aggc {return nil ,_fc .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_gfg .Colors =int (*_bbdg );};};return _gfg ,nil ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fcc *ContentCreator )Add_B ()*ContentCreator {_eba :=ContentStreamOperation {};_eba .Operand ="\u0042";_fcc ._cab =append (_fcc ._cab ,&_eba );return _fcc ;};

// Scale applies x-y scaling to the transformation matrix.
func (_bee *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _bee .Add_cm (sx ,0,0,sy ,0,0);};

// Translate applies a simple x-y translation to the transformation matrix.
func (_dgd *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _dgd .Add_cm (1,0,0,1,tx ,ty );};func (_bgc *ContentStreamParser )skipSpaces ()(int ,error ){_gea :=0;for {_dedd ,_decd :=_bgc ._ceca .Peek (1);if _decd !=nil {return 0,_decd ;
};if _gg .IsWhiteSpace (_dedd [0]){_bgc ._ceca .ReadByte ();_gea ++;}else {break ;};};return _gea ,nil ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bgb *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_agf :=ContentStreamOperation {};_agf .Operand ="\u004d";_agf .Params =_ddc ([]float64 {miterlimit });_bgb ._cab =append (_bgb ._cab ,&_agf );return _bgb ;};func _cad (_cbe *ContentStreamInlineImage )(*_gg .MultiEncoder ,error ){_gffg :=_gg .NewMultiEncoder ();
var _fcfc *_gg .PdfObjectDictionary ;var _ebb []_gg .PdfObject ;if _gbf :=_cbe .DecodeParms ;_gbf !=nil {_gdg ,_bbe :=_gbf .(*_gg .PdfObjectDictionary );if _bbe {_fcfc =_gdg ;};_fbg ,_dgda :=_gbf .(*_gg .PdfObjectArray );if _dgda {for _ ,_ffa :=range _fbg .Elements (){if _bad ,_ddbd :=_ffa .(*_gg .PdfObjectDictionary );
_ddbd {_ebb =append (_ebb ,_bad );}else {_ebb =append (_ebb ,nil );};};};};_ggab :=_cbe .Filter ;if _ggab ==nil {return nil ,_fc .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_eaac ,_cgb :=_ggab .(*_gg .PdfObjectArray );
if !_cgb {return nil ,_fc .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _bacf ,_baef :=range _eaac .Elements (){_gfcg ,_cfbg :=_baef .(*_gg .PdfObjectName );
if !_cfbg {return nil ,_fc .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _gbg _gg .PdfObject ;
if _fcfc !=nil {_gbg =_fcfc ;}else {if len (_ebb )> 0{if _bacf >=len (_ebb ){return nil ,_fc .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_gbg =_ebb [_bacf ];};};var _dbf *_gg .PdfObjectDictionary ;if _bbcf ,_bed :=_gbg .(*_gg .PdfObjectDictionary );_bed {_dbf =_bbcf ;};if *_gfcg ==_gg .StreamEncodingFilterNameFlate ||*_gfcg =="\u0046\u006c"{_cdg ,_ccc :=_dcd (_cbe ,_dbf );if _ccc !=nil {return nil ,_ccc ;
};_gffg .AddEncoder (_cdg );}else if *_gfcg ==_gg .StreamEncodingFilterNameLZW {_ced ,_gebe :=_ddf (_cbe ,_dbf );if _gebe !=nil {return nil ,_gebe ;};_gffg .AddEncoder (_ced );}else if *_gfcg ==_gg .StreamEncodingFilterNameASCIIHex {_gca :=_gg .NewASCIIHexEncoder ();
_gffg .AddEncoder (_gca );}else if *_gfcg ==_gg .StreamEncodingFilterNameASCII85 ||*_gfcg =="\u0041\u0038\u0035"{_cfcg :=_gg .NewASCII85Encoder ();_gffg .AddEncoder (_cfcg );}else {_ge .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_gfcg );
return nil ,_fc .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _gffg ,nil ;};func _dgae (_beaeg _gg .PdfObject )(_b .PdfColorspace ,error ){_beee ,_adcb :=_beaeg .(*_gg .PdfObjectArray );
if !_adcb {_ge .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_beaeg );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _beee .Len ()!=4{_ge .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_beee .Len ());
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gdgg ,_adcb :=_beee .Get (0).(*_gg .PdfObjectName );if !_adcb {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_beee );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gdgg !="\u0049"&&*_gdgg !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ge .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_gdgg );
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gdgg ,_adcb =_beee .Get (1).(*_gg .PdfObjectName );if !_adcb {_ge .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_beee );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gdgg !="\u0047"&&*_gdgg !="\u0052\u0047\u0042"&&*_gdgg !="\u0043\u004d\u0059\u004b"&&*_gdgg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_gdgg !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_gdgg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ge .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_gdgg );
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bcab :="";switch *_gdgg {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bcab ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bcab ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_bcab ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_daca :=_gg .MakeArray (_gg .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_gg .MakeName (_bcab ),_beee .Get (2),_beee .Get (3));return _b .NewPdfColorspaceFromPdfObject (_daca );};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_cfd *ContentStreamParser )ExtractText ()(string ,error ){_da ,_ad :=_cfd .Parse ();if _ad !=nil {return "",_ad ;};_abf :=false ;_bab ,_bg :=float64 (-1),float64 (-1);_geb :="";for _ ,_bec :=range *_da {if _bec .Operand =="\u0042\u0054"{_abf =true ;
}else if _bec .Operand =="\u0045\u0054"{_abf =false ;};if _bec .Operand =="\u0054\u0064"||_bec .Operand =="\u0054\u0044"||_bec .Operand =="\u0054\u002a"{_geb +="\u000a";};if _bec .Operand =="\u0054\u006d"{if len (_bec .Params )!=6{continue ;};_eb ,_bea :=_bec .Params [4].(*_gg .PdfObjectFloat );
if !_bea {_db ,_aae :=_bec .Params [4].(*_gg .PdfObjectInteger );if !_aae {continue ;};_eb =_gg .MakeFloat (float64 (*_db ));};_fcd ,_bea :=_bec .Params [5].(*_gg .PdfObjectFloat );if !_bea {_fb ,_ed :=_bec .Params [5].(*_gg .PdfObjectInteger );if !_ed {continue ;
};_fcd =_gg .MakeFloat (float64 (*_fb ));};if _bg ==-1{_bg =float64 (*_fcd );}else if _bg > float64 (*_fcd ){_geb +="\u000a";_bab =float64 (*_eb );_bg =float64 (*_fcd );continue ;};if _bab ==-1{_bab =float64 (*_eb );}else if _bab < float64 (*_eb ){_geb +="\u0009";
_bab =float64 (*_eb );};};if _abf &&_bec .Operand =="\u0054\u004a"{if len (_bec .Params )< 1{continue ;};_bc ,_dg :=_bec .Params [0].(*_gg .PdfObjectArray );if !_dg {return "",_fc .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_bec .Params [0]);
};for _ ,_dac :=range _bc .Elements (){switch _bba :=_dac .(type ){case *_gg .PdfObjectString :_geb +=_bba .Str ();case *_gg .PdfObjectFloat :if *_bba < -100{_geb +="\u0020";};case *_gg .PdfObjectInteger :if *_bba < -100{_geb +="\u0020";};};};}else if _abf &&_bec .Operand =="\u0054\u006a"{if len (_bec .Params )< 1{continue ;
};_fbb ,_gd :=_bec .Params [0].(*_gg .PdfObjectString );if !_gd {return "",_fc .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_bec .Params [0]);
};_geb +=_fbb .Str ();};};return _geb ,nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_ecf *ContentCreator )Add_BT ()*ContentCreator {_cge :=ContentStreamOperation {};_cge .Operand ="\u0042\u0054";_ecf ._cab =append (_ecf ._cab ,&_cge );return _ecf ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dgc *ContentCreator )Add_G (gray float64 )*ContentCreator {_edga :=ContentStreamOperation {};_edga .Operand ="\u0047";_edga .Params =_ddc ([]float64 {gray });_dgc ._cab =append (_dgc ._cab ,&_edga );return _dgc ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gdb *ContentCreator )Add_b ()*ContentCreator {_cfdb :=ContentStreamOperation {};_cfdb .Operand ="\u0062";_gdb ._cab =append (_gdb ._cab ,&_cfdb );return _gdb ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ggda *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0069";_ecd .Params =_ddc ([]float64 {flatness });_ggda ._cab =append (_ggda ._cab ,&_ecd );return _ggda ;};

// Operations returns the list of operations.
func (_ea *ContentCreator )Operations ()*ContentStreamOperations {return &_ea ._cab };

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_gcafc *GraphicStateStack )Pop ()GraphicsState {_gaec :=(*_gcafc )[len (*_gcafc )-1];*_gcafc =(*_gcafc )[:len (*_gcafc )-1];return _gaec ;};func _ddc (_eac []float64 )[]_gg .PdfObject {var _ddac []_gg .PdfObject ;for _ ,_addb :=range _eac {_ddac =append (_ddac ,_gg .MakeFloat (_addb ));
};return _ddac ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_ega *ContentStreamInlineImage )ToImage (resources *_b .PdfPageResources )(*_b .Image ,error ){_bfb ,_bagc :=_ega .toImageBase (resources );if _bagc !=nil {return nil ,_bagc ;};_aafa ,_bagc :=_edcc (_ega );if _bagc !=nil {return nil ,_bagc ;};_ge .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_aafa ,_aafa );
_ge .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_ega );_gdfb ,_bagc :=_aafa .DecodeBytes (_ega ._deede );if _bagc !=nil {return nil ,_bagc ;};_egdg :=&_b .Image {Width :int64 (_bfb .Width ),Height :int64 (_bfb .Height ),BitsPerComponent :int64 (_bfb .BitsPerComponent ),ColorComponents :_bfb .ColorComponents ,Data :_gdfb };
if len (_bfb .Decode )> 0{for _abfc :=0;_abfc < len (_bfb .Decode );_abfc ++{_bfb .Decode [_abfc ]*=float64 ((int (1)<<uint (_bfb .BitsPerComponent ))-1);};_egdg .SetDecode (_bfb .Decode );};return _egdg ,nil ;};

// String returns `ops.Bytes()` as a string.
func (_be *ContentStreamOperations )String ()string {return string (_be .Bytes ())};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgc *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0053\u0043";_bce .Params =_ddc (c );_cgc ._cab =append (_cgc ._cab ,&_bce );return _cgc ;};func (_fbd *ContentStreamInlineImage )toImageBase (_abfb *_b .PdfPageResources )(*_cg .ImageBase ,error ){if _fbd ._fef !=nil {return _fbd ._fef ,nil ;
};_beb :=_cg .ImageBase {};if _fbd .Height ==nil {return nil ,_a .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_aff ,_dga :=_fbd .Height .(*_gg .PdfObjectInteger );
if !_dga {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_beb .Height =int (*_aff );if _fbd .Width ==nil {return nil ,_a .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_fegg ,_dga :=_fbd .Width .(*_gg .PdfObjectInteger );if !_dga {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_beb .Width =int (*_fegg );_eef ,_egfg :=_fbd .IsMask ();if _egfg !=nil {return nil ,_egfg ;
};if _eef {_beb .BitsPerComponent =1;_beb .ColorComponents =1;}else {if _fbd .BitsPerComponent ==nil {_ge .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_beb .BitsPerComponent =8;}else {_edgee ,_dgf :=_fbd .BitsPerComponent .(*_gg .PdfObjectInteger );if !_dgf {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fbd .BitsPerComponent );
return nil ,_a .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_beb .BitsPerComponent =int (*_edgee );};if _fbd .ColorSpace !=nil {_agdd ,_cea :=_fbd .GetColorSpace (_abfb );if _cea !=nil {return nil ,_cea ;};
_beb .ColorComponents =_agdd .GetNumComponents ();}else {_ge .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_beb .ColorComponents =1;};};if _aga ,_dgfa :=_gg .GetArray (_fbd .Decode );_dgfa {_beb .Decode ,_egfg =_aga .ToFloat64Array ();if _egfg !=nil {return nil ,_egfg ;};};_fbd ._fef =&_beb ;return _fbd ._fef ,nil ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_baed *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_fd :=ContentStreamOperation {};_fd .Operand ="\u0073\u0063\u006e";_fd .Params =_ddc (c );_baed ._cab =append (_baed ._cab ,&_fd );return _baed ;};

// AddOperand adds a specified operand.
func (_abb *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_abb ._cab =append (_abb ._cab ,&op );return _abb ;};func (_caac *ContentStreamParser )parseDict ()(*_gg .PdfObjectDictionary ,error ){_ge .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_dgcf :=_gg .MakeDict ();_dda ,_ :=_caac ._ceca .ReadByte ();if _dda !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_dda ,_ =_caac ._ceca .ReadByte ();if _dda !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_caac .skipSpaces ();_bfbf ,_cbae :=_caac ._ceca .Peek (2);if _cbae !=nil {return nil ,_cbae ;};_ge .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_bfbf ),string (_bfbf ));if (_bfbf [0]=='>')&&(_bfbf [1]=='>'){_ge .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_caac ._ceca .ReadByte ();_caac ._ceca .ReadByte ();break ;};_ge .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_cgd ,_cbae :=_caac .parseName ();_ge .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cgd );
if _cbae !=nil {_ge .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_cbae );return nil ,_cbae ;};if len (_cgd )> 4&&_cgd [len (_cgd )-4:]=="\u006e\u0075\u006c\u006c"{_feag :=_cgd [0:len (_cgd )-4];
_ge .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_cgd );_ge .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_feag );
_caac .skipSpaces ();_gaf ,_ :=_caac ._ceca .Peek (1);if _gaf [0]=='/'{_dgcf .Set (_feag ,_gg .MakeNull ());continue ;};};_caac .skipSpaces ();_dacff ,_ ,_cbae :=_caac .parseObject ();if _cbae !=nil {return nil ,_cbae ;};_dgcf .Set (_cgd ,_dacff );_ge .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_cgd ,_dacff .String ());
};return _dgcf ,nil ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_caee *ContentCreator )Add_quote (textstr _gg .PdfObjectString )*ContentCreator {_gdbe :=ContentStreamOperation {};_gdbe .Operand ="\u0027";_gdbe .Params =_eaed ([]_gg .PdfObjectString {textstr });_caee ._cab =append (_caee ._cab ,&_gdbe );return _caee ;
};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fea *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0054\u007a";_abe .Params =_ddc ([]float64 {scale });_fea ._cab =append (_fea ._cab ,&_abe );return _fea ;};func (_bfdc *ContentStreamProcessor )getInitialColor (_bdeg _b .PdfColorspace )(_b .PdfColor ,error ){switch _gege :=_bdeg .(type ){case *_b .PdfColorspaceDeviceGray :return _b .NewPdfColorDeviceGray (0.0),nil ;
case *_b .PdfColorspaceDeviceRGB :return _b .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_b .PdfColorspaceDeviceCMYK :return _b .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_b .PdfColorspaceCalGray :return _b .NewPdfColorCalGray (0.0),nil ;case *_b .PdfColorspaceCalRGB :return _b .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;
case *_b .PdfColorspaceLab :_ede :=0.0;_bcgd :=0.0;_baee :=0.0;if _gege .Range [0]> 0{_ede =_gege .Range [0];};if _gege .Range [2]> 0{_bcgd =_gege .Range [2];};return _b .NewPdfColorLab (_ede ,_bcgd ,_baee ),nil ;case *_b .PdfColorspaceICCBased :if _gege .Alternate ==nil {_ge .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_gege .N );
if _gege .N ==1{_ge .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _bfdc .getInitialColor (_b .NewPdfColorspaceDeviceGray ());}else if _gege .N ==3{_ge .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _bfdc .getInitialColor (_b .NewPdfColorspaceDeviceRGB ());}else if _gege .N ==4{_ge .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _bfdc .getInitialColor (_b .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_a .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _bfdc .getInitialColor (_gege .Alternate );case *_b .PdfColorspaceSpecialIndexed :if _gege .Base ==nil {return nil ,_a .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _bfdc .getInitialColor (_gege .Base );case *_b .PdfColorspaceSpecialSeparation :if _gege .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _bfdc .getInitialColor (_gege .AlternateSpace );case *_b .PdfColorspaceDeviceN :if _gege .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _bfdc .getInitialColor (_gege .AlternateSpace );case *_b .PdfColorspaceSpecialPattern :return nil ,nil ;};_ge .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bdeg );
return nil ,_a .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};var _gbfgb =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ead *ContentCreator )Add_f ()*ContentCreator {_fbe :=ContentStreamOperation {};_fbe .Operand ="\u0066";_ead ._cab =append (_ead ._cab ,&_fbe );return _ead ;};func (_efc *ContentStreamProcessor )handleCommand_sc (_beff *ContentStreamOperation ,_bca *_b .PdfPageResources )error {_egdee :=_efc ._gfaa .ColorspaceNonStroking ;
if !_fceb (_egdee ){if len (_beff .Params )!=_egdee .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_beff .Params ),_egdee );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_abg ,_cbag :=_egdee .ColorFromPdfObjects (_beff .Params );if _cbag !=nil {return _cbag ;};_efc ._gfaa .ColorNonStroking =_abg ;return nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ecbf *ContentCreator )Add_W ()*ContentCreator {_caab :=ContentStreamOperation {};_caab .Operand ="\u0057";_ecbf ._cab =append (_ecbf ._cab ,&_caab );return _ecbf ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfgd *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_egga :=ContentStreamOperation {};_egga .Operand ="\u004b";_egga .Params =_ddc ([]float64 {c ,m ,y ,k });_bfgd ._cab =append (_bfgd ._cab ,&_egga );return _bfgd ;};func _ddf (_bcb *ContentStreamInlineImage ,_fgbd *_gg .PdfObjectDictionary )(*_gg .LZWEncoder ,error ){_fggc :=_gg .NewLZWEncoder ();
if _fgbd ==nil {if _bcb .DecodeParms !=nil {_ebg ,_dec :=_gg .GetDict (_bcb .DecodeParms );if !_dec {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_bcb .DecodeParms );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_fgbd =_ebg ;};};if _fgbd ==nil {return _fggc ,nil ;};_egd :=_fgbd .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _egd !=nil {_edge ,_afg :=_egd .(*_gg .PdfObjectInteger );if !_afg {_ge .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_egd );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_edge !=0&&*_edge !=1{return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_fggc .EarlyChange =int (*_edge );}else {_fggc .EarlyChange =1;};_egd =_fgbd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _egd !=nil {_dfdd ,_adfd :=_egd .(*_gg .PdfObjectInteger );if !_adfd {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_egd );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_fggc .Predictor =int (*_dfdd );};_egd =_fgbd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _egd !=nil {_ebd ,_gaa :=_egd .(*_gg .PdfObjectInteger );if !_gaa {_ge .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_fc .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_fggc .BitsPerComponent =int (*_ebd );};if _fggc .Predictor > 1{_fggc .Columns =1;_egd =_fgbd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _egd !=nil {_fce ,_cde :=_egd .(*_gg .PdfObjectInteger );if !_cde {return nil ,_fc .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fggc .Columns =int (*_fce );
};_fggc .Colors =1;_egd =_fgbd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _egd !=nil {_gcc ,_bef :=_egd .(*_gg .PdfObjectInteger );if !_bef {return nil ,_fc .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_fggc .Colors =int (*_gcc );};};_ge .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_fgbd .String ());return _fggc ,nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_agb *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_aec :=ContentStreamOperation {};_aec .Operand ="\u0072\u0067";_aec .Params =_ddc ([]float64 {r ,g ,b });_agb ._cab =append (_agb ._cab ,&_aec );return _agb ;};func (_dfdb *ContentStreamParser )skipComments ()error {if _ ,_dbc :=_dfdb .skipSpaces ();
_dbc !=nil {return _dbc ;};_adg :=true ;for {_gdbc ,_bfaa :=_dfdb ._ceca .Peek (1);if _bfaa !=nil {_ge .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bfaa .Error ());return _bfaa ;};if _adg &&_gdbc [0]!='%'{return nil ;};_adg =false ;
if (_gdbc [0]!='\r')&&(_gdbc [0]!='\n'){_dfdb ._ceca .ReadByte ();}else {break ;};};return _dfdb .skipComments ();};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gga *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_fg :=ContentStreamOperation {};_fg .Operand ="\u004a";_fg .Params =_ffeb ([]_gg .PdfObjectName {_gg .PdfObjectName (lineCapStyle )});_gga ._cab =append (_gga ._cab ,&_fg );return _gga ;
};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_dfdf *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_dacf :=ContentStreamInlineImage {};for {_dfdf .skipSpaces ();_babe ,_cfdc ,_cgbg :=_dfdf .parseObject ();if _cgbg !=nil {return nil ,_cgbg ;};if !_cfdc {_fac ,_gbfg :=_gg .GetName (_babe );
if !_gbfg {_ge .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_babe );
return nil ,_fc .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_babe );
};_cfbgd ,_ceg ,_fdfb :=_dfdf .parseObject ();if _fdfb !=nil {return nil ,_fdfb ;};if _ceg {return nil ,_fc .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_fac {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_dacf .BitsPerComponent =_cfbgd ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_dacf .ColorSpace =_cfbgd ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_dacf .Decode =_cfbgd ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_dacf .DecodeParms =_cfbgd ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_dacf .Filter =_cfbgd ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_dacf .Height =_cfbgd ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_dacf .ImageMask =_cfbgd ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_dacf .Intent =_cfbgd ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_dacf .Interpolate =_cfbgd ;
case "\u0057","\u0057\u0069\u0064t\u0068":_dacf .Width =_cfbgd ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ge .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_fac );
default:return nil ,_fc .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_fac );};};if _cfdc {_bfga ,_accd :=_babe .(*_gg .PdfObjectString );
if !_accd {return nil ,_fc .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _bfga .Str ()=="\u0045\u0049"{_ge .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_dacf ,nil ;}else if _bfga .Str ()=="\u0049\u0044"{_ge .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_ddfg ,_gac :=_dfdf ._ceca .Peek (1);if _gac !=nil {return nil ,_gac ;};if _gg .IsWhiteSpace (_ddfg [0]){_dfdf ._ceca .Discard (1);};_dacf ._deede =[]byte {};_cec :=0;var _gecca []byte ;for {_geeb ,_ded :=_dfdf ._ceca .ReadByte ();if _ded !=nil {_ge .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_ded ;};if _cec ==0{if _gg .IsWhiteSpace (_geeb ){_gecca =[]byte {};_gecca =append (_gecca ,_geeb );_cec =1;}else if _geeb =='E'{_gecca =append (_gecca ,_geeb );_cec =2;}else {_dacf ._deede =append (_dacf ._deede ,_geeb );};}else if _cec ==1{_gecca =append (_gecca ,_geeb );
if _geeb =='E'{_cec =2;}else {_dacf ._deede =append (_dacf ._deede ,_gecca ...);_gecca =[]byte {};if _gg .IsWhiteSpace (_geeb ){_cec =1;}else {_cec =0;};};}else if _cec ==2{_gecca =append (_gecca ,_geeb );if _geeb =='I'{_cec =3;}else {_dacf ._deede =append (_dacf ._deede ,_gecca ...);
_gecca =[]byte {};_cec =0;};}else if _cec ==3{_gecca =append (_gecca ,_geeb );if _gg .IsWhiteSpace (_geeb ){_fde ,_fggf :=_dfdf ._ceca .Peek (20);if _fggf !=nil &&_fggf !=_aa .EOF {return nil ,_fggf ;};_fdc :=NewContentStreamParser (string (_fde ));_bagg :=true ;
for _beag :=0;_beag < 3;_beag ++{_ccfa ,_fee ,_afc :=_fdc .parseObject ();if _afc !=nil {if _afc ==_aa .EOF {break ;};continue ;};if _fee &&!_ada (_ccfa .String ()){_bagg =false ;break ;};};if _bagg {if len (_dacf ._deede )> 100{_ge .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_dacf ._deede ),_dacf ._deede [:100]);
}else {_ge .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_dacf ._deede ),_dacf ._deede );};return &_dacf ,nil ;};};_dacf ._deede =append (_dacf ._deede ,_gecca ...);
_gecca =[]byte {};_cec =0;};};};};};};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eab *ContentCreator )Add_cs (name _gg .PdfObjectName )*ContentCreator {_bbd :=ContentStreamOperation {};_bbd .Operand ="\u0063\u0073";_bbd .Params =_ffeb ([]_gg .PdfObjectName {name });_eab ._cab =append (_eab ._cab ,&_bbd );return _eab ;};func _ada (_fabgg string )bool {_ ,_fcdc :=_gbfgb [_fabgg ];
return _fcdc };

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dfa *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_efe :=ContentStreamOperation {};_efe .Operand ="\u006b";_efe .Params =_ddc ([]float64 {c ,m ,y ,k });_dfa ._cab =append (_dfa ._cab ,&_efe );return _dfa ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_daf *ContentCreator )Add_Q ()*ContentCreator {_ag :=ContentStreamOperation {};_ag .Operand ="\u0051";_daf ._cab =append (_daf ._cab ,&_ag );return _daf ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dccb *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_ff :=ContentStreamOperation {};_ff .Operand ="\u0054\u0073";_ff .Params =_ddc ([]float64 {rise });_dccb ._cab =append (_dccb ._cab ,&_ff );return _dccb ;};func (_debc *ContentStreamProcessor )handleCommand_CS (_deba *ContentStreamOperation ,_fcg *_b .PdfPageResources )error {if len (_deba .Params )< 1{_ge .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_deba .Params )> 1{_ge .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_cffb ,_gfb :=_deba .Params [0].(*_gg .PdfObjectName );if !_gfb {_ge .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_ecdc ,_ggdf :=_debc .getColorspace (string (*_cffb ),_fcg );if _ggdf !=nil {return _ggdf ;};_debc ._gfaa .ColorspaceStroking =_ecdc ;_age ,_ggdf :=_debc .getInitialColor (_ecdc );
if _ggdf !=nil {return _ggdf ;};_debc ._gfaa .ColorStroking =_age ;return nil ;};func _ffeb (_cegb []_gg .PdfObjectName )[]_gg .PdfObject {var _ffga []_gg .PdfObject ;for _ ,_dgece :=range _cegb {_ffga =append (_ffga ,_gg .MakeName (string (_dgece )));
};return _ffga ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ccb *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ec :=ContentStreamOperation {};_ec .Operand ="\u0063\u006d";_ec .Params =_ddc ([]float64 {a ,b ,c ,d ,e ,f });_ccb ._cab =append (_ccb ._cab ,&_ec );return _ccb ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dde *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_eea :=ContentStreamOperation {};_eea .Operand ="\u006d";_eea .Params =_ddc ([]float64 {x ,y });_dde ._cab =append (_dde ._cab ,&_eea );return _dde ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_deed *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_acc :=ContentStreamOperation {};_acc .Operand ="\u0054\u006d";_acc .Params =_ddc ([]float64 {a ,b ,c ,d ,e ,f });_deed ._cab =append (_deed ._cab ,&_acc );return _deed ;};


// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eaa *ContentCreator )Add_CS (name _gg .PdfObjectName )*ContentCreator {_dfc :=ContentStreamOperation {};_dfc .Operand ="\u0043\u0053";_dfc .Params =_ffeb ([]_gg .PdfObjectName {name });_eaa ._cab =append (_eaa ._cab ,&_dfc );return _eaa ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eccc *ContentCreator )Add_TJ (vals ..._gg .PdfObject )*ContentCreator {_af :=ContentStreamOperation {};_af .Operand ="\u0054\u004a";_af .Params =[]_gg .PdfObject {_gg .MakeArray (vals ...)};_eccc ._cab =append (_eccc ._cab ,&_af );return _eccc ;
};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bd *ContentCreator )Add_Tf (fontName _gg .PdfObjectName ,fontSize float64 )*ContentCreator {_baca :=ContentStreamOperation {};_baca .Operand ="\u0054\u0066";_baca .Params =_ffeb ([]_gg .PdfObjectName {fontName });_baca .Params =append (_baca .Params ,_ddc ([]float64 {fontSize })...);
_bd ._cab =append (_bd ._cab ,&_baca );return _bd ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ggb *ContentCreator )Add_scn_pattern (name _gg .PdfObjectName ,c ...float64 )*ContentCreator {_fdf :=ContentStreamOperation {};_fdf .Operand ="\u0073\u0063\u006e";_fdf .Params =_ddc (c );_fdf .Params =append (_fdf .Params ,_gg .MakeName (string (name )));
_ggb ._cab =append (_ggb ._cab ,&_fdf );return _ggb ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_dee *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ggc :=_ca .Cos (angle *_ca .Pi /180.0);_ef :=_ca .Sin (angle *_ca .Pi /180.0);_addc :=-_ca .Sin (angle *_ca .Pi /180.0);_bfe :=_ca .Cos (angle *_ca .Pi /180.0);return _dee .Add_cm (_ggc ,_ef ,_addc ,_bfe ,0,0);
};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aaf *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_eeg :=ContentStreamOperation {};_eeg .Operand ="\u006a";_eeg .Params =_ffeb ([]_gg .PdfObjectName {_gg .PdfObjectName (lineJoinStyle )});_aaf ._cab =append (_aaf ._cab ,&_eeg );
return _aaf ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ce *ContentCreator )Add_S ()*ContentCreator {_ece :=ContentStreamOperation {};_ece .Operand ="\u0053";_ce ._cab =append (_ce ._cab ,&_ece );return _ce ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_ceca *_df .Reader };func (_effg *ContentStreamProcessor )handleCommand_SC (_aged *ContentStreamOperation ,_dfeba *_b .PdfPageResources )error {_fad :=_effg ._gfaa .ColorspaceStroking ;if len (_aged .Params )!=_fad .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aged .Params ),_fad );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gfe ,_gbcf :=_fad .ColorFromPdfObjects (_aged .Params );if _gbcf !=nil {return _gbcf ;};_effg ._gfaa .ColorStroking =_gfe ;return nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gff *ContentCreator )Add_Tr (render int64 )*ContentCreator {_baa :=ContentStreamOperation {};_baa .Operand ="\u0054\u0072";_baa .Params =_dgfe ([]int64 {render });_gff ._cab =append (_gff ._cab ,&_baa );return _gff ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_dab *ContentCreator )Add_sh (name _gg .PdfObjectName )*ContentCreator {_bbaa :=ContentStreamOperation {};_bbaa .Operand ="\u0073\u0068";_bbaa .Params =_ffeb ([]_gg .PdfObjectName {name });_dab ._cab =append (_dab ._cab ,&_bbaa );return _dab ;};func (_aafg *ContentStreamInlineImage )String ()string {_eggg :=_fc .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_aafg ._deede ));
if _aafg .BitsPerComponent !=nil {_eggg +="\u002d\u0020\u0042\u0050\u0043\u0020"+_aafg .BitsPerComponent .WriteString ()+"\u000a";};if _aafg .ColorSpace !=nil {_eggg +="\u002d\u0020\u0043S\u0020"+_aafg .ColorSpace .WriteString ()+"\u000a";};if _aafg .Decode !=nil {_eggg +="\u002d\u0020\u0044\u0020"+_aafg .Decode .WriteString ()+"\u000a";
};if _aafg .DecodeParms !=nil {_eggg +="\u002d\u0020\u0044P\u0020"+_aafg .DecodeParms .WriteString ()+"\u000a";};if _aafg .Filter !=nil {_eggg +="\u002d\u0020\u0046\u0020"+_aafg .Filter .WriteString ()+"\u000a";};if _aafg .Height !=nil {_eggg +="\u002d\u0020\u0048\u0020"+_aafg .Height .WriteString ()+"\u000a";
};if _aafg .ImageMask !=nil {_eggg +="\u002d\u0020\u0049M\u0020"+_aafg .ImageMask .WriteString ()+"\u000a";};if _aafg .Intent !=nil {_eggg +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_aafg .Intent .WriteString ()+"\u000a";};if _aafg .Interpolate !=nil {_eggg +="\u002d\u0020\u0049\u0020"+_aafg .Interpolate .WriteString ()+"\u000a";
};if _aafg .Width !=nil {_eggg +="\u002d\u0020\u0057\u0020"+_aafg .Width .WriteString ()+"\u000a";};return _eggg ;};

// Push pushes `gs` on the `gsStack`.
func (_beac *GraphicStateStack )Push (gs GraphicsState ){*_beac =append (*_beac ,gs )};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_fed *ContentStreamOperation ,_eaec GraphicsState ,_aabf *_b .PdfPageResources )error ;

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fgg *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_gf :=ContentStreamOperation {};_gf .Operand ="\u0064";_gf .Params =[]_gg .PdfObject {};_gf .Params =append (_gf .Params ,_gg .MakeArrayFromIntegers64 (dashArray ));
_gf .Params =append (_gf .Params ,_gg .MakeInteger (dashPhase ));_fgg ._cab =append (_fgg ._cab ,&_gf );return _fgg ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ecb *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0079";_dgb .Params =_ddc ([]float64 {x1 ,y1 ,x3 ,y3 });_ecb ._cab =append (_ecb ._cab ,&_dgb );return _ecb ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_deb *ContentCreator )Add_g (gray float64 )*ContentCreator {_egf :=ContentStreamOperation {};_egf .Operand ="\u0067";_egf .Params =_ddc ([]float64 {gray });_deb ._cab =append (_deb ._cab ,&_egf );return _deb ;};func (_affe *ContentStreamParser )parseHexString ()(*_gg .PdfObjectString ,error ){_affe ._ceca .ReadByte ();
_dfcbc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _aag []byte ;for {_affe .skipSpaces ();_cbeg ,_bfeb :=_affe ._ceca .Peek (1);if _bfeb !=nil {return _gg .MakeString (""),_bfeb ;
};if _cbeg [0]=='>'{_affe ._ceca .ReadByte ();break ;};_geec ,_ :=_affe ._ceca .ReadByte ();if _ab .IndexByte (_dfcbc ,_geec )>=0{_aag =append (_aag ,_geec );};};if len (_aag )%2==1{_aag =append (_aag ,'0');};_bbaf ,_ :=_d .DecodeString (string (_aag ));
return _gg .MakeHexString (string (_bbaf )),nil ;};func (_gfeb *ContentStreamProcessor )handleCommand_rg (_dcaf *ContentStreamOperation ,_feagg *_b .PdfPageResources )error {_fegge :=_b .NewPdfColorspaceDeviceRGB ();if len (_dcaf .Params )!=_fegge .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dcaf .Params ),_fegge );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_afa ,_fgba :=_fegge .ColorFromPdfObjects (_dcaf .Params );if _fgba !=nil {return _fgba ;};_gfeb ._gfaa .ColorspaceNonStroking =_fegge ;_gfeb ._gfaa .ColorNonStroking =_afa ;return nil ;};func (_eeeb *ContentStreamParser )parseOperand ()(*_gg .PdfObjectString ,error ){var _ebe []byte ;
for {_ddd ,_cbca :=_eeeb ._ceca .Peek (1);if _cbca !=nil {return _gg .MakeString (string (_ebe )),_cbca ;};if _gg .IsDelimiter (_ddd [0]){break ;};if _gg .IsWhiteSpace (_ddd [0]){break ;};_bfbd ,_ :=_eeeb ._ceca .ReadByte ();_ebe =append (_ebe ,_bfbd );
};return _gg .MakeString (string (_ebe )),nil ;};func (_gbd *ContentStreamProcessor )handleCommand_RG (_fca *ContentStreamOperation ,_acd *_b .PdfPageResources )error {_adc :=_b .NewPdfColorspaceDeviceRGB ();if len (_fca .Params )!=_adc .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fca .Params ),_adc );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bbb ,_ggeb :=_adc .ColorFromPdfObjects (_fca .Params );if _ggeb !=nil {return _ggeb ;};_gbd ._gfaa .ColorspaceStroking =_adc ;_gbd ._gfaa .ColorStroking =_bbb ;return nil ;};func (_gfa *ContentStreamParser )parseString ()(*_gg .PdfObjectString ,error ){_gfa ._ceca .ReadByte ();
var _cgf []byte ;_fdfe :=1;for {_gaab ,_agdc :=_gfa ._ceca .Peek (1);if _agdc !=nil {return _gg .MakeString (string (_cgf )),_agdc ;};if _gaab [0]=='\\'{_gfa ._ceca .ReadByte ();_bdca ,_gcaf :=_gfa ._ceca .ReadByte ();if _gcaf !=nil {return _gg .MakeString (string (_cgf )),_gcaf ;
};if _gg .IsOctalDigit (_bdca ){_abfd ,_feb :=_gfa ._ceca .Peek (2);if _feb !=nil {return _gg .MakeString (string (_cgf )),_feb ;};var _aecg []byte ;_aecg =append (_aecg ,_bdca );for _ ,_ecg :=range _abfd {if _gg .IsOctalDigit (_ecg ){_aecg =append (_aecg ,_ecg );
}else {break ;};};_gfa ._ceca .Discard (len (_aecg )-1);_ge .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_aecg );_ebaf ,_feb :=_c .ParseUint (string (_aecg ),8,32);if _feb !=nil {return _gg .MakeString (string (_cgf )),_feb ;
};_cgf =append (_cgf ,byte (_ebaf ));continue ;};switch _bdca {case 'n':_cgf =append (_cgf ,'\n');case 'r':_cgf =append (_cgf ,'\r');case 't':_cgf =append (_cgf ,'\t');case 'b':_cgf =append (_cgf ,'\b');case 'f':_cgf =append (_cgf ,'\f');case '(':_cgf =append (_cgf ,'(');
case ')':_cgf =append (_cgf ,')');case '\\':_cgf =append (_cgf ,'\\');};continue ;}else if _gaab [0]=='('{_fdfe ++;}else if _gaab [0]==')'{_fdfe --;if _fdfe ==0{_gfa ._ceca .ReadByte ();break ;};};_fcfg ,_ :=_gfa ._ceca .ReadByte ();_cgf =append (_cgf ,_fcfg );
};return _gg .MakeString (string (_cgf )),nil ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_edb *ContentCreator )Add_n ()*ContentCreator {_dfd :=ContentStreamOperation {};_dfd .Operand ="\u006e";_edb ._cab =append (_edb ._cab ,&_dfd );return _edb ;};func _bbc (_ddb *ContentStreamInlineImage )(*_gg .DCTEncoder ,error ){_cbdb :=_gg .NewDCTEncoder ();
_gcdg :=_ab .NewReader (_ddb ._deede );_gfd ,_feg :=_f .DecodeConfig (_gcdg );if _feg !=nil {_ge .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_feg );return nil ,_feg ;
};switch _gfd .ColorModel {case _g .RGBAModel :_cbdb .BitsPerComponent =8;_cbdb .ColorComponents =3;case _g .RGBA64Model :_cbdb .BitsPerComponent =16;_cbdb .ColorComponents =3;case _g .GrayModel :_cbdb .BitsPerComponent =8;_cbdb .ColorComponents =1;case _g .Gray16Model :_cbdb .BitsPerComponent =16;
_cbdb .ColorComponents =1;case _g .CMYKModel :_cbdb .BitsPerComponent =8;_cbdb .ColorComponents =4;case _g .YCbCrModel :_cbdb .BitsPerComponent =8;_cbdb .ColorComponents =3;default:return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_cbdb .Width =_gfd .Width ;_cbdb .Height =_gfd .Height ;_ge .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_cbdb );return _cbdb ,nil ;};func (_cecab *ContentStreamProcessor )handleCommand_g (_afgd *ContentStreamOperation ,_afgc *_b .PdfPageResources )error {_dfdca :=_b .NewPdfColorspaceDeviceGray ();
if len (_afgd .Params )!=_dfdca .GetNumComponents (){_ge .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_afgd .Params ),_dfdca );
return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cfee ,_ebgb :=_dfdca .ColorFromPdfObjects (_afgd .Params );if _ebgb !=nil {_ge .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dfdca ,_afgd ,_ebgb );
return _ebgb ;};_cecab ._gfaa .ColorspaceNonStroking =_dfdca ;_cecab ._gfaa .ColorNonStroking =_cfee ;return nil ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dfg *ContentCreator )Add_quotes (textstr _gg .PdfObjectString ,aw ,ac float64 )*ContentCreator {_cac :=ContentStreamOperation {};_cac .Operand ="\u0022";_cac .Params =_ddc ([]float64 {aw ,ac });_cac .Params =append (_cac .Params ,_eaed ([]_gg .PdfObjectString {textstr })...);
_dfg ._cab =append (_dfg ._cab ,&_cac );return _dfg ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_cef *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _cef .CTM .Transform (x ,y );};var (ErrInvalidOperand =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _b .Image ,encoder _gg .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_gg .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_bgfc :=ContentStreamInlineImage {};if img .ColorComponents ==1{_bgfc .ColorSpace =_gg .MakeName ("\u0047");
}else if img .ColorComponents ==3{_bgfc .ColorSpace =_gg .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_bgfc .ColorSpace =_gg .MakeName ("\u0043\u004d\u0059\u004b");}else {_ge .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_bgfc .BitsPerComponent =_gg .MakeInteger (img .BitsPerComponent );
_bgfc .Width =_gg .MakeInteger (img .Width );_bgfc .Height =_gg .MakeInteger (img .Height );_cdc ,_dgec :=encoder .EncodeBytes (img .Data );if _dgec !=nil {return nil ,_dgec ;};_bgfc ._deede =_cdc ;_fccg :=encoder .GetFilterName ();if _fccg !=_gg .StreamEncodingFilterNameRaw {_bgfc .Filter =_gg .MakeName (_fccg );
};return &_bgfc ,nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gcf *ContentCreator )Add_q ()*ContentCreator {_aca :=ContentStreamOperation {};_aca .Operand ="\u0071";_gcf ._cab =append (_gcf ._cab ,&_aca );return _gcf ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_dbd *ContentCreator )Add_W_starred ()*ContentCreator {_edg :=ContentStreamOperation {};_edg .Operand ="\u0057\u002a";_dbd ._cab =append (_dbd ._cab ,&_edg );return _dbd ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fabg *ContentCreator )Add_Tstar ()*ContentCreator {_gee :=ContentStreamOperation {};_gee .Operand ="\u0054\u002a";_fabg ._cab =append (_fabg ._cab ,&_gee );return _fabg ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_aba :=ContentStreamProcessor {};_aba ._bacgf =GraphicStateStack {};_adff :=GraphicsState {};_aba ._gfaa =_adff ;_aba ._agbb =[]handlerEntry {};_aba ._cfde =0;_aba ._eda =ops ;
return &_aba ;};

// GetEncoder returns the encoder of the inline image.
func (_gbc *ContentStreamInlineImage )GetEncoder ()(_gg .StreamEncoder ,error ){return _edcc (_gbc )};func (_abef *ContentStreamProcessor )handleCommand_cm (_ebba *ContentStreamOperation ,_dcdd *_b .PdfPageResources )error {if len (_ebba .Params )!=6{_ge .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_ebba .Params ));
return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_afae ,_efbd :=_gg .GetNumbersAsFloat (_ebba .Params );if _efbd !=nil {return _efbd ;
};_dae :=_ac .NewMatrix (_afae [0],_afae [1],_afae [2],_afae [3],_afae [4],_afae [5]);_abef ._gfaa .CTM .Concat (_dae );return nil ;};func (_caae *ContentStreamParser )parseArray ()(*_gg .PdfObjectArray ,error ){_cbad :=_gg .MakeArray ();_caae ._ceca .ReadByte ();
for {_caae .skipSpaces ();_beae ,_bde :=_caae ._ceca .Peek (1);if _bde !=nil {return _cbad ,_bde ;};if _beae [0]==']'{_caae ._ceca .ReadByte ();break ;};_bcg ,_ ,_bde :=_caae .parseObject ();if _bde !=nil {return _cbad ,_bde ;};_cbad .Append (_bcg );};
return _cbad ,nil ;};func (_gba *ContentStreamParser )parseNumber ()(_gg .PdfObject ,error ){return _gg .ParseNumber (_gba ._ceca );};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_eecd HandlerConditionEnum )Operand ()bool {return _eecd ==HandlerConditionEnumOperand };

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_bgd :=ContentStreamParser {};_gedc :=_ab .NewBufferString (contentStr +"\u000a");_bgd ._ceca =_df .NewReader (_gedc );return &_bgd ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _b .PdfColorspace ;ColorspaceNonStroking _b .PdfColorspace ;ColorStroking _b .PdfColor ;ColorNonStroking _b .PdfColor ;CTM _ac .Matrix ;};

// String is same as Bytes() except returns as a string for convenience.
func (_add *ContentCreator )String ()string {return string (_add ._cab .Bytes ())};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbac *ContentCreator )Add_TL (leading float64 )*ContentCreator {_fag :=ContentStreamOperation {};_fag .Operand ="\u0054\u004c";_fag .Params =_ddc ([]float64 {leading });_cbac ._cab =append (_cbac ._cab ,&_fag );return _cbac ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bae *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u0072\u0065";_ege .Params =_ddc ([]float64 {x ,y ,width ,height });_bae ._cab =append (_bae ._cab ,&_ege );return _bae ;
};func (_bff *ContentStreamProcessor )handleCommand_SCN (_bgaf *ContentStreamOperation ,_bgg *_b .PdfPageResources )error {_egab :=_bff ._gfaa .ColorspaceStroking ;if !_fceb (_egab ){if len (_bgaf .Params )!=_egab .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgaf .Params ),_egab );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_bebb ,_dgbc :=_egab .ColorFromPdfObjects (_bgaf .Params );if _dgbc !=nil {return _dgbc ;};_bff ._gfaa .ColorStroking =_bebb ;return nil ;};func _fceb (_eead _b .PdfColorspace )bool {_ ,_bfgc :=_eead .(*_b .PdfColorspaceSpecialPattern );return _bfgc ;
};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gec *ContentCreator )Add_ET ()*ContentCreator {_ddg :=ContentStreamOperation {};_ddg .Operand ="\u0045\u0054";_gec ._cab =append (_gec ._cab ,&_ddg );return _gec ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ggg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u006c";_cba .Params =_ddc ([]float64 {x ,y });_ggg ._cab =append (_ggg ._cab ,&_cba );return _ggg ;};func (_ggcf *ContentStreamParser )parseNull ()(_gg .PdfObjectNull ,error ){_ ,_accf :=_ggcf ._ceca .Discard (4);
return _gg .PdfObjectNull {},_accf ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bdc *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_fcce :=ContentStreamOperation {};_fcce .Operand ="\u0054\u0064";_fcce .Params =_ddc ([]float64 {tx ,ty });_bdc ._cab =append (_bdc ._cab ,&_fcce );return _bdc ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_gbgc *ContentStreamProcessor )Process (resources *_b .PdfPageResources )error {_gbgc ._gfaa .ColorspaceStroking =_b .NewPdfColorspaceDeviceGray ();_gbgc ._gfaa .ColorspaceNonStroking =_b .NewPdfColorspaceDeviceGray ();_gbgc ._gfaa .ColorStroking =_b .NewPdfColorDeviceGray (0);
_gbgc ._gfaa .ColorNonStroking =_b .NewPdfColorDeviceGray (0);_gbgc ._gfaa .CTM =_ac .IdentityMatrix ();for _ ,_eaaf :=range _gbgc ._eda {var _cbec error ;switch _eaaf .Operand {case "\u0071":_gbgc ._bacgf .Push (_gbgc ._gfaa );case "\u0051":if len (_gbgc ._bacgf )==0{_ge .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_gbgc ._gfaa =_gbgc ._bacgf .Pop ();case "\u0043\u0053":_cbec =_gbgc .handleCommand_CS (_eaaf ,resources );case "\u0063\u0073":_cbec =_gbgc .handleCommand_cs (_eaaf ,resources );case "\u0053\u0043":_cbec =_gbgc .handleCommand_SC (_eaaf ,resources );
case "\u0053\u0043\u004e":_cbec =_gbgc .handleCommand_SCN (_eaaf ,resources );case "\u0073\u0063":_cbec =_gbgc .handleCommand_sc (_eaaf ,resources );case "\u0073\u0063\u006e":_cbec =_gbgc .handleCommand_scn (_eaaf ,resources );case "\u0047":_cbec =_gbgc .handleCommand_G (_eaaf ,resources );
case "\u0067":_cbec =_gbgc .handleCommand_g (_eaaf ,resources );case "\u0052\u0047":_cbec =_gbgc .handleCommand_RG (_eaaf ,resources );case "\u0072\u0067":_cbec =_gbgc .handleCommand_rg (_eaaf ,resources );case "\u004b":_cbec =_gbgc .handleCommand_K (_eaaf ,resources );
case "\u006b":_cbec =_gbgc .handleCommand_k (_eaaf ,resources );case "\u0063\u006d":_cbec =_gbgc .handleCommand_cm (_eaaf ,resources );};if _cbec !=nil {_ge .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_eaaf .Operand ,_cbec );
_ge .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_eaaf .Operand );return _cbec ;};for _ ,_eff :=range _gbgc ._agbb {var _cag error ;if _eff .Condition .All (){_cag =_eff .Handler (_eaaf ,_gbgc ._gfaa ,resources );}else if _eff .Condition .Operand ()&&_eaaf .Operand ==_eff .Operand {_cag =_eff .Handler (_eaaf ,_gbgc ._gfaa ,resources );
};if _cag !=nil {_ge .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_cag );return _cag ;};};};return nil ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_gg .PdfObject ;Operand string ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cae *ContentCreator )Add_h ()*ContentCreator {_aaa :=ContentStreamOperation {};_aaa .Operand ="\u0068";_cae ._cab =append (_cae ._cab ,&_aaa );return _cae ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bcf *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_fab :=ContentStreamOperation {};_fab .Operand ="\u0052\u0047";_fab .Params =_ddc ([]float64 {r ,g ,b });_bcf ._cab =append (_bcf ._cab ,&_fab );return _bcf ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_ggd *ContentStreamOperations )Bytes ()[]byte {var _cga _ab .Buffer ;for _ ,_dfe :=range *_ggd {if _dfe ==nil {continue ;};if _dfe .Operand =="\u0042\u0049"{_cga .WriteString (_dfe .Operand +"\u000a");_cga .WriteString (_dfe .Params [0].WriteString ());
}else {for _ ,_cc :=range _dfe .Params {_cga .WriteString (_cc .WriteString ());_cga .WriteString ("\u0020");};_cga .WriteString (_dfe .Operand +"\u000a");};};return _cga .Bytes ();};func (_fcad *ContentStreamProcessor )handleCommand_k (_gdcf *ContentStreamOperation ,_bebd *_b .PdfPageResources )error {_gede :=_b .NewPdfColorspaceDeviceCMYK ();
if len (_gdcf .Params )!=_gede .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdcf .Params ),_gede );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bggc ,_bcd :=_gede .ColorFromPdfObjects (_gdcf .Params );if _bcd !=nil {return _bcd ;};_fcad ._gfaa .ColorspaceNonStroking =_gede ;_fcad ._gfaa .ColorNonStroking =_bggc ;return nil ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cbd *ContentCreator )Add_SCN_pattern (name _gg .PdfObjectName ,c ...float64 )*ContentCreator {_egg :=ContentStreamOperation {};_egg .Operand ="\u0053\u0043\u004e";_egg .Params =_ddc (c );_egg .Params =append (_egg .Params ,_gg .MakeName (string (name )));
_cbd ._cab =append (_cbd ._cab ,&_egg );return _cbd ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;func (_egde *ContentStreamParser )parseObject ()(_ffe _gg .PdfObject ,_bfd bool ,_fbda error ){_egde .skipSpaces ();for {_fbf ,_gafc :=_egde ._ceca .Peek (2);if _gafc !=nil {return nil ,false ,_gafc ;};_ge .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fbf ));
if _fbf [0]=='%'{_egde .skipComments ();continue ;}else if _fbf [0]=='/'{_ebdb ,_gggc :=_egde .parseName ();_ge .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_ebdb );return &_ebdb ,false ,_gggc ;}else if _fbf [0]=='('{_ge .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_dgbf ,_aee :=_egde .parseString ();return _dgbf ,false ,_aee ;}else if _fbf [0]=='<'&&_fbf [1]!='<'{_ge .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_gge ,_ccbb :=_egde .parseHexString ();return _gge ,false ,_ccbb ;
}else if _fbf [0]=='['{_ge .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_geg ,_edbd :=_egde .parseArray ();return _geg ,false ,_edbd ;}else if _gg .IsFloatDigit (_fbf [0])||(_fbf [0]=='-'&&_gg .IsFloatDigit (_fbf [1])){_ge .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_ecee ,_cdga :=_egde .parseNumber ();return _ecee ,false ,_cdga ;}else if _fbf [0]=='<'&&_fbf [1]=='<'{_dgbb ,_aeec :=_egde .parseDict ();return _dgbb ,false ,_aeec ;}else {_ge .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_fbf ,_ =_egde ._ceca .Peek (5);_gbe :=string (_fbf );_ge .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_gbe );if (len (_gbe )> 3)&&(_gbe [:4]=="\u006e\u0075\u006c\u006c"){_edf ,_bgdg :=_egde .parseNull ();
return &_edf ,false ,_bgdg ;}else if (len (_gbe )> 4)&&(_gbe [:5]=="\u0066\u0061\u006cs\u0065"){_ecba ,_dcef :=_egde .parseBool ();return &_ecba ,false ,_dcef ;}else if (len (_gbe )> 3)&&(_gbe [:4]=="\u0074\u0072\u0075\u0065"){_fead ,_baea :=_egde .parseBool ();
return &_fead ,false ,_baea ;};_eggf ,_fdb :=_egde .parseOperand ();if _fdb !=nil {return _eggf ,false ,_fdb ;};if len (_eggf .String ())< 1{return _eggf ,false ,ErrInvalidOperand ;};return _eggf ,true ,nil ;};};};func (_cce *ContentStreamProcessor )handleCommand_cs (_gbgd *ContentStreamOperation ,_fcb *_b .PdfPageResources )error {if len (_gbgd .Params )< 1{_ge .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gbgd .Params )> 1{_ge .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_afbb ,_gef :=_gbgd .Params [0].(*_gg .PdfObjectName );if !_gef {_ge .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_cfad ,_bebc :=_cce .getColorspace (string (*_afbb ),_fcb );if _bebc !=nil {return _bebc ;};_cce ._gfaa .ColorspaceNonStroking =_cfad ;_gad ,_bebc :=_cce .getInitialColor (_cfad );
if _bebc !=nil {return _bebc ;};_cce ._gfaa .ColorNonStroking =_gad ;return nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// WriteString outputs the object as it is to be written to file.
func (_eee *ContentStreamInlineImage )WriteString ()string {var _agd _ab .Buffer ;_dcde :="";if _eee .BitsPerComponent !=nil {_dcde +="\u002f\u0042\u0050C\u0020"+_eee .BitsPerComponent .WriteString ()+"\u000a";};if _eee .ColorSpace !=nil {_dcde +="\u002f\u0043\u0053\u0020"+_eee .ColorSpace .WriteString ()+"\u000a";
};if _eee .Decode !=nil {_dcde +="\u002f\u0044\u0020"+_eee .Decode .WriteString ()+"\u000a";};if _eee .DecodeParms !=nil {_dcde +="\u002f\u0044\u0050\u0020"+_eee .DecodeParms .WriteString ()+"\u000a";};if _eee .Filter !=nil {_dcde +="\u002f\u0046\u0020"+_eee .Filter .WriteString ()+"\u000a";
};if _eee .Height !=nil {_dcde +="\u002f\u0048\u0020"+_eee .Height .WriteString ()+"\u000a";};if _eee .ImageMask !=nil {_dcde +="\u002f\u0049\u004d\u0020"+_eee .ImageMask .WriteString ()+"\u000a";};if _eee .Intent !=nil {_dcde +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_eee .Intent .WriteString ()+"\u000a";
};if _eee .Interpolate !=nil {_dcde +="\u002f\u0049\u0020"+_eee .Interpolate .WriteString ()+"\u000a";};if _eee .Width !=nil {_dcde +="\u002f\u0057\u0020"+_eee .Width .WriteString ()+"\u000a";};_agd .WriteString (_dcde );_agd .WriteString ("\u0049\u0044\u0020");
_agd .Write (_eee ._deede );_agd .WriteString ("\u000a\u0045\u0049\u000a");return _agd .String ();};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gdf *ContentCreator )SetStrokingColor (color _b .PdfColor )*ContentCreator {switch _dge :=color .(type ){case *_b .PdfColorDeviceGray :_gdf .Add_G (_dge .Val ());case *_b .PdfColorDeviceRGB :_gdf .Add_RG (_dge .R (),_dge .G (),_dge .B ());case *_b .PdfColorDeviceCMYK :_gdf .Add_K (_dge .C (),_dge .M (),_dge .Y (),_dge .K ());
default:_ge .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_dge );
};return _gdf ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_dc :=&ContentCreator {};_dc ._cab =ContentStreamOperations {};return _dc ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cbg *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_gfc :=ContentStreamOperation {};_gfc .Operand ="\u0053\u0043\u004e";_gfc .Params =_ddc (c );_cbg ._cab =append (_cbg ._cab ,&_gfc );return _cbg ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _gg .PdfObject ;ColorSpace _gg .PdfObject ;Decode _gg .PdfObject ;DecodeParms _gg .PdfObject ;Filter _gg .PdfObject ;Height _gg .PdfObject ;ImageMask _gg .PdfObject ;Intent _gg .PdfObject ;Interpolate _gg .PdfObject ;
Width _gg .PdfObject ;_deede []byte ;_fef *_cg .ImageBase ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dgba *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_cfdde :=ContentStreamOperation {};_cfdde .Operand ="\u0054\u0044";_cfdde .Params =_ddc ([]float64 {tx ,ty });_dgba ._cab =append (_dgba ._cab ,&_cfdde );return _dgba ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dba *ContentCreator )Add_Tj (textstr _gg .PdfObjectString )*ContentCreator {_bbag :=ContentStreamOperation {};_bbag .Operand ="\u0054\u006a";_bbag .Params =_eaed ([]_gg .PdfObjectString {textstr });_dba ._cab =append (_dba ._cab ,&_bbag );return _dba ;
};func _eaed (_aecb []_gg .PdfObjectString )[]_gg .PdfObject {var _fcbb []_gg .PdfObject ;for _ ,_adce :=range _aecb {_fcbb =append (_fcbb ,_gg .MakeString (_adce .Str ()));};return _fcbb ;};func (_eaecc *ContentStreamProcessor )handleCommand_scn (_baf *ContentStreamOperation ,_dccf *_b .PdfPageResources )error {_aea :=_eaecc ._gfaa .ColorspaceNonStroking ;
if !_fceb (_aea ){if len (_baf .Params )!=_aea .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_baf .Params ),_aea );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_gdcg ,_agef :=_aea .ColorFromPdfObjects (_baf .Params );if _agef !=nil {_ge .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_baf .Params ,_aea );
return _agef ;};_eaecc ._gfaa .ColorNonStroking =_gdcg ;return nil ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fge *ContentCreator )Add_EMC ()*ContentCreator {_agbd :=ContentStreamOperation {};_agbd .Operand ="\u0045\u004d\u0043";_fge ._cab =append (_fge ._cab ,&_agbd );return _fge ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cdgg *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cdgg .ImageMask !=nil {_dcag ,_becf :=_cdgg .ImageMask .(*_gg .PdfObjectBool );if !_becf {_ge .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_a .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_dcag ),nil ;};return false ,nil ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bfg *ContentCreator )Add_gs (dictName _gg .PdfObjectName )*ContentCreator {_dcc :=ContentStreamOperation {};_dcc .Operand ="\u0067\u0073";_dcc .Params =_ffeb ([]_gg .PdfObjectName {dictName });_bfg ._cab =append (_bfg ._cab ,&_dcc );return _bfg ;
};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_eeb *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_agg :=ContentStreamOperation {};_agg .Operand ="\u0076";_agg .Params =_ddc ([]float64 {x2 ,y2 ,x3 ,y3 });_eeb ._cab =append (_eeb ._cab ,&_agg );return _eeb ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ee *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ee )==0{return _ee ;};if _ee .isWrapped (){return _ee ;};*_ee =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ee ...);_eg :=0;for _ ,_cf :=range *_ee {if _cf .Operand =="\u0071"{_eg ++;
}else if _cf .Operand =="\u0051"{_eg --;};};for _eg > 0{*_ee =append (*_ee ,&ContentStreamOperation {Operand :"\u0051"});_eg --;};return _ee ;};func (_cedg *ContentStreamParser )parseName ()(_gg .PdfObjectName ,error ){_dgbag :="";_baeb :=false ;for {_fda ,_ggag :=_cedg ._ceca .Peek (1);
if _ggag ==_aa .EOF {break ;};if _ggag !=nil {return _gg .PdfObjectName (_dgbag ),_ggag ;};if !_baeb {if _fda [0]=='/'{_baeb =true ;_cedg ._ceca .ReadByte ();}else {_ge .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_fda ,_fda );
return _gg .PdfObjectName (_dgbag ),_fc .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_fda [0]);};}else {if _gg .IsWhiteSpace (_fda [0]){break ;}else if (_fda [0]=='/')||(_fda [0]=='[')||(_fda [0]=='(')||(_fda [0]==']')||(_fda [0]=='<')||(_fda [0]=='>'){break ;
}else if _fda [0]=='#'{_ccag ,_accdd :=_cedg ._ceca .Peek (3);if _accdd !=nil {return _gg .PdfObjectName (_dgbag ),_accdd ;};_cedg ._ceca .Discard (3);_cff ,_accdd :=_d .DecodeString (string (_ccag [1:3]));if _accdd !=nil {return _gg .PdfObjectName (_dgbag ),_accdd ;
};_dgbag +=string (_cff );}else {_fae ,_ :=_cedg ._ceca .ReadByte ();_dgbag +=string (_fae );};};};return _gg .PdfObjectName (_dgbag ),nil ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dfce *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_gae :=ContentStreamOperation {};_gae .Operand ="\u0054\u0077";_gae .Params =_ddc ([]float64 {wordSpace });_dfce ._cab =append (_dfce ._cab ,&_gae );return _dfce ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fdd *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_ebae :=ContentStreamOperation {};_ebae .Operand ="\u0054\u0063";_ebae .Params =_ddc ([]float64 {charSpace });_fdd ._cab =append (_fdd ._cab ,&_ebae );return _fdd ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cfb *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_cfdd :=ContentStreamOperation {};_cfdd .Operand ="\u0077";_cfdd .Params =_ddc ([]float64 {lineWidth });_cfb ._cab =append (_cfb ._cab ,&_cfdd );return _cfb ;};func _edcc (_efb *ContentStreamInlineImage )(_gg .StreamEncoder ,error ){if _efb .Filter ==nil {return _gg .NewRawEncoder (),nil ;
};_afb ,_eaaa :=_efb .Filter .(*_gg .PdfObjectName );if !_eaaa {_fcf ,_gb :=_efb .Filter .(*_gg .PdfObjectArray );if !_gb {return nil ,_fc .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _fcf .Len ()==0{return _gg .NewRawEncoder (),nil ;};if _fcf .Len ()!=1{_aaed ,_bag :=_cad (_efb );if _bag !=nil {_ge .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_bag );
return nil ,_bag ;};_ge .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_aaed );return _aaed ,nil ;};_fgb :=_fcf .Get (0);_afb ,_gb =_fgb .(*_gg .PdfObjectName );if !_gb {return nil ,_fc .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_afb {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _gg .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _gg .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bbc (_efb );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _dcd (_efb ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _ddf (_efb ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _gg .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _gg .NewRunLengthEncoder (),nil ;
default:_ge .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_afb );
return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_dd *ContentCreator )Wrap (){_dd ._cab .WrapIfNeeded ()};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_eceg *ContentCreator )Add_BMC (tag _gg .PdfObjectName )*ContentCreator {_fga :=ContentStreamOperation {};_fga .Operand ="\u0042\u004d\u0043";_fga .Params =_ffeb ([]_gg .PdfObjectName {tag });_eceg ._cab =append (_eceg ._cab ,&_fga );return _eceg ;
};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_fbgd HandlerConditionEnum )All ()bool {return _fbgd ==HandlerConditionEnumAllOperands };

// Parse parses all commands in content stream, returning a list of operation data.
func (_bfa *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_agc :=ContentStreamOperations {};for {_gab :=ContentStreamOperation {};for {_gdge ,_edcg ,_caag :=_bfa .parseObject ();if _caag !=nil {if _caag ==_aa .EOF {return &_agc ,nil ;
};return &_agc ,_caag ;};if _edcg {_gab .Operand ,_ =_gg .GetStringVal (_gdge );_agc =append (_agc ,&_gab );break ;}else {_gab .Params =append (_gab .Params ,_gdge );};};if _gab .Operand =="\u0042\u0049"{_cdf ,_bga :=_bfa .ParseInlineImage ();if _bga !=nil {return &_agc ,_bga ;
};_gab .Params =append (_gab .Params ,_cdf );};};};func (_bcag *ContentStreamProcessor )handleCommand_G (_fbc *ContentStreamOperation ,_bfee *_b .PdfPageResources )error {_fgd :=_b .NewPdfColorspaceDeviceGray ();if len (_fbc .Params )!=_fgd .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fbc .Params ),_fgd );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gaaf ,_gggcc :=_fgd .ColorFromPdfObjects (_fbc .Params );if _gggcc !=nil {return _gggcc ;};_bcag ._gfaa .ColorspaceStroking =_fgd ;_bcag ._gfaa .ColorStroking =_gaaf ;return nil ;};

// GetColorSpace returns the colorspace of the inline image.
func (_cca *ContentStreamInlineImage )GetColorSpace (resources *_b .PdfPageResources )(_b .PdfColorspace ,error ){if _cca .ColorSpace ==nil {_ge .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _b .NewPdfColorspaceDeviceGray (),nil ;};if _bcec ,_dce :=_cca .ColorSpace .(*_gg .PdfObjectArray );_dce {return _dgae (_bcec );};_aab ,_ffb :=_cca .ColorSpace .(*_gg .PdfObjectName );if !_ffb {_ge .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_cca .ColorSpace ,_cca .ColorSpace );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_aab =="\u0047"||*_aab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _b .NewPdfColorspaceDeviceGray (),nil ;}else if *_aab =="\u0052\u0047\u0042"||*_aab =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _b .NewPdfColorspaceDeviceRGB (),nil ;
}else if *_aab =="\u0043\u004d\u0059\u004b"||*_aab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _b .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_aab =="\u0049"||*_aab =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_a .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");
}else {if resources .ColorSpace ==nil {_ge .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aab );
return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_ecdg ,_ffg :=resources .GetColorspaceByName (*_aab );if !_ffg {_ge .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_aab );
return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _ecdg ,nil ;};};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cfc *ContentCreator )SetNonStrokingColor (color _b .PdfColor )*ContentCreator {switch _aaea :=color .(type ){case *_b .PdfColorDeviceGray :_cfc .Add_g (_aaea .Val ());case *_b .PdfColorDeviceRGB :_cfc .Add_rg (_aaea .R (),_aaea .G (),_aaea .B ());
case *_b .PdfColorDeviceCMYK :_cfc .Add_k (_aaea .C (),_aaea .M (),_aaea .Y (),_aaea .K ());default:_ge .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_aaea );
};return _cfc ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ecc *ContentCreator )Add_B_starred ()*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u0042\u002a";_ecc ._cab =append (_ecc ._cab ,&_fa );return _ecc ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fba *ContentCreator )Add_f_starred ()*ContentCreator {_cbc :=ContentStreamOperation {};_cbc .Operand ="\u0066\u002a";_fba ._cab =append (_fba ._cab ,&_cbc );return _fba ;};func (_gbfa *ContentStreamParser )parseBool ()(_gg .PdfObjectBool ,error ){_cda ,_bcfd :=_gbfa ._ceca .Peek (4);
if _bcfd !=nil {return _gg .PdfObjectBool (false ),_bcfd ;};if (len (_cda )>=4)&&(string (_cda [:4])=="\u0074\u0072\u0075\u0065"){_gbfa ._ceca .Discard (4);return _gg .PdfObjectBool (true ),nil ;};_cda ,_bcfd =_gbfa ._ceca .Peek (5);if _bcfd !=nil {return _gg .PdfObjectBool (false ),_bcfd ;
};if (len (_cda )>=5)&&(string (_cda [:5])=="\u0066\u0061\u006cs\u0065"){_gbfa ._ceca .Discard (5);return _gg .PdfObjectBool (false ),nil ;};return _gg .PdfObjectBool (false ),_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_dbg *ContentStreamProcessor )handleCommand_K (_gdgb *ContentStreamOperation ,_fbff *_b .PdfPageResources )error {_dacc :=_b .NewPdfColorspaceDeviceCMYK ();if len (_gdgb .Params )!=_dacc .GetNumComponents (){_ge .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ge .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdgb .Params ),_dacc );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dcdf ,_agea :=_dacc .ColorFromPdfObjects (_gdgb .Params );if _agea !=nil {return _agea ;};_dbg ._gfaa .ColorspaceStroking =_dacc ;_dbg ._gfaa .ColorStroking =_dcdf ;return nil ;};