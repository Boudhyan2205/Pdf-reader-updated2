//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ec "bufio";_f "bytes";_bg "encoding/hex";_a "errors";_d "fmt";_aad "github.com/unidoc/unipdf/v3/common";_bgg "github.com/unidoc/unipdf/v3/core";_ece "github.com/unidoc/unipdf/v3/internal/imageutil";_dd "github.com/unidoc/unipdf/v3/internal/transform";_gc "github.com/unidoc/unipdf/v3/model";_eca "image/color";_c "image/jpeg";_g "io";_aa "math";_e "strconv";);

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fbda *ContentCreator )Add_Tr (render int64 )*ContentCreator {_gfe :=ContentStreamOperation {};_gfe .Operand ="\u0054\u0072";_gfe .Params =_bbg ([]int64 {render });_fbda ._ccg =append (_fbda ._ccg ,&_gfe );return _fbda ;};func _bbg (_geab []int64 )[]_bgg .PdfObject {var _cca []_bgg .PdfObject ;for _ ,_gdcb :=range _geab {_cca =append (_cca ,_bgg .MakeInteger (_gdcb ));};return _cca ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_gcg *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_cfdf :=ContentStreamOperations {};for {_acfb :=ContentStreamOperation {};for {_dcb ,_abdc ,_ggce :=_gcg .parseObject ();if _ggce !=nil {if _ggce ==_g .EOF {return &_cfdf ,nil ;};return &_cfdf ,_ggce ;};if _abdc {_acfb .Operand ,_ =_bgg .GetStringVal (_dcb );_cfdf =append (_cfdf ,&_acfb );break ;}else {_acfb .Params =append (_acfb .Params ,_dcb );};};if _acfb .Operand =="\u0042\u0049"{_ebad ,_bce :=_gcg .ParseInlineImage ();if _bce !=nil {return &_cfdf ,_bce ;};_acfb .Params =append (_acfb .Params ,_ebad );};};};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_df *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_df )==0{return _df ;};if _df .isWrapped (){return _df ;};*_df =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_df ...);_ddd :=0;for _ ,_cfd :=range *_df {if _cfd .Operand =="\u0071"{_ddd ++;}else if _cfd .Operand =="\u0051"{_ddd --;};};for _ddd > 0{*_df =append (*_df ,&ContentStreamOperation {Operand :"\u0051"});_ddd --;};return _df ;};func (_cbb *ContentStreamProcessor )handleCommand_cs (_abdf *ContentStreamOperation ,_ecd *_gc .PdfPageResources )error {if len (_abdf .Params )< 1{_aad .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_abdf .Params )> 1{_aad .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fbef ,_gea :=_abdf .Params [0].(*_bgg .PdfObjectName );if !_gea {_aad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_ede ,_gbae :=_cbb .getColorspace (string (*_fbef ),_ecd );if _gbae !=nil {return _gbae ;};_cbb ._cdce .ColorspaceNonStroking =_ede ;_eccb ,_gbae :=_cbb .getInitialColor (_ede );if _gbae !=nil {return _gbae ;};_cbb ._cdce .ColorNonStroking =_eccb ;return nil ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cefc *ContentCreator )SetNonStrokingColor (color _gc .PdfColor )*ContentCreator {switch _bgf :=color .(type ){case *_gc .PdfColorDeviceGray :_cefc .Add_g (_bgf .Val ());case *_gc .PdfColorDeviceRGB :_cefc .Add_rg (_bgf .R (),_bgf .G (),_bgf .B ());case *_gc .PdfColorDeviceCMYK :_cefc .Add_k (_bgf .C (),_bgf .M (),_bgf .Y (),_bgf .K ());default:_aad .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_bgf );};return _cefc ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_fcdc *GraphicStateStack )Pop ()GraphicsState {_aeb :=(*_fcdc )[len (*_fcdc )-1];*_fcdc =(*_fcdc )[:len (*_fcdc )-1];return _aeb ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aab *ContentCreator )Add_g (gray float64 )*ContentCreator {_dfd :=ContentStreamOperation {};_dfd .Operand ="\u0067";_dfd .Params =_fffc ([]float64 {gray });_aab ._ccg =append (_aab ._ccg ,&_dfd );return _aab ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fdb *ContentCreator )Add_scn_pattern (name _bgg .PdfObjectName ,c ...float64 )*ContentCreator {_ccce :=ContentStreamOperation {};_ccce .Operand ="\u0073\u0063\u006e";_ccce .Params =_fffc (c );_ccce .Params =append (_ccce .Params ,_bgg .MakeName (string (name )));_fdb ._ccg =append (_fdb ._ccg ,&_ccce );return _fdb ;};

// String returns `ops.Bytes()` as a string.
func (_bc *ContentStreamOperations )String ()string {return string (_bc .Bytes ())};func _afgc (_ddfe *ContentStreamInlineImage ,_gga *_bgg .PdfObjectDictionary )(*_bgg .FlateEncoder ,error ){_acd :=_bgg .NewFlateEncoder ();if _ddfe ._bda !=nil {_acd .SetImage (_ddfe ._bda );};if _gga ==nil {_dfa :=_ddfe .DecodeParms ;if _dfa !=nil {_ded ,_ebd :=_bgg .GetDict (_dfa );if !_ebd {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dfa );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_gga =_ded ;};};if _gga ==nil {return _acd ,nil ;};_aad .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gga .String ());_fda :=_gga .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _fda ==nil {_aad .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_daa ,_fcg :=_fda .(*_bgg .PdfObjectInteger );if !_fcg {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fda );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_acd .Predictor =int (*_daa );};_fda =_gga .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _fda !=nil {_gdg ,_eace :=_fda .(*_bgg .PdfObjectInteger );if !_eace {_aad .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_acd .BitsPerComponent =int (*_gdg );};if _acd .Predictor > 1{_acd .Columns =1;_fda =_gga .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _fda !=nil {_ddff ,_ege :=_fda .(*_bgg .PdfObjectInteger );if !_ege {return nil ,_d .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_acd .Columns =int (*_ddff );};_acd .Colors =1;_acgf :=_gga .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _acgf !=nil {_efa ,_dbf :=_acgf .(*_bgg .PdfObjectInteger );if !_dbf {return nil ,_d .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_acd .Colors =int (*_efa );};};return _acd ,nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cegg *ContentCreator )Add_i (flatness float64 )*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0069";_eb .Params =_fffc ([]float64 {flatness });_cegg ._ccg =append (_cegg ._ccg ,&_eb );return _cegg ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fbd *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_bcd :=ContentStreamOperation {};_bcd .Operand ="\u0073\u0063\u006e";_bcd .Params =_fffc (c );_fbd ._ccg =append (_fbd ._ccg ,&_bcd );return _fbd ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ccg ContentStreamOperations };

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eae *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ccf :=ContentStreamOperation {};_ccf .Operand ="\u0063\u006d";_ccf .Params =_fffc ([]float64 {a ,b ,c ,d ,e ,f });_eae ._ccg =append (_eae ._ccg ,&_ccf );return _eae ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bed *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_cfb :=ContentStreamOperation {};_cfb .Operand ="\u0054\u0077";_cfb .Params =_fffc ([]float64 {wordSpace });_bed ._ccg =append (_bed ._ccg ,&_cfb );return _bed ;};

// Scale applies x-y scaling to the transformation matrix.
func (_feb *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _feb .Add_cm (sx ,0,0,sy ,0,0);};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_eggb *ContentCreator )Add_sh (name _bgg .PdfObjectName )*ContentCreator {_fdbe :=ContentStreamOperation {};_fdbe .Operand ="\u0073\u0068";_fdbe .Params =_gddf ([]_bgg .PdfObjectName {name });_eggb ._ccg =append (_eggb ._ccg ,&_fdbe );return _eggb ;};func (_gba *ContentStreamParser )parseNull ()(_bgg .PdfObjectNull ,error ){_ ,_gbf :=_gba ._cacg .Discard (4);return _bgg .PdfObjectNull {},_gbf ;};func (_edf *ContentStreamParser )skipComments ()error {if _ ,_fggca :=_edf .skipSpaces ();_fggca !=nil {return _fggca ;};_gge :=true ;for {_agcd ,_efab :=_edf ._cacg .Peek (1);if _efab !=nil {_aad .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_efab .Error ());return _efab ;};if _gge &&_agcd [0]!='%'{return nil ;};_gge =false ;if (_agcd [0]!='\r')&&(_agcd [0]!='\n'){_edf ._cacg .ReadByte ();}else {break ;};};return _edf .skipComments ();};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgc *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_gbeb :=ContentStreamOperation {};_gbeb .Operand ="\u0052\u0047";_gbeb .Params =_fffc ([]float64 {r ,g ,b });_fgc ._ccg =append (_fgc ._ccg ,&_gbeb );return _fgc ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fdf *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_afg :=ContentStreamOperation {};_afg .Operand ="\u004d";_afg .Params =_fffc ([]float64 {miterlimit });_fdf ._ccg =append (_fdf ._ccg ,&_afg );return _fdf ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fb *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_ceg :=ContentStreamOperation {};_ceg .Operand ="\u0077";_ceg .Params =_fffc ([]float64 {lineWidth });_fb ._ccg =append (_fb ._ccg ,&_ceg );return _fb ;};

// GetColorSpace returns the colorspace of the inline image.
func (_adc *ContentStreamInlineImage )GetColorSpace (resources *_gc .PdfPageResources )(_gc .PdfColorspace ,error ){if _adc .ColorSpace ==nil {_aad .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _gc .NewPdfColorspaceDeviceGray (),nil ;};if _ggg ,_abfe :=_adc .ColorSpace .(*_bgg .PdfObjectArray );_abfe {return _ccdb (_ggg );};_dcab ,_ddfb :=_adc .ColorSpace .(*_bgg .PdfObjectName );if !_ddfb {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_adc .ColorSpace ,_adc .ColorSpace );return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_dcab =="\u0047"||*_dcab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _gc .NewPdfColorspaceDeviceGray (),nil ;}else if *_dcab =="\u0052\u0047\u0042"||*_dcab =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _gc .NewPdfColorspaceDeviceRGB (),nil ;}else if *_dcab =="\u0043\u004d\u0059\u004b"||*_dcab =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _gc .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_dcab =="\u0049"||*_dcab =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_a .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_aad .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dcab );return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_cedb ,_fdcf :=resources .GetColorspaceByName (*_dcab );if !_fdcf {_aad .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_dcab );return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _cedb ,nil ;};};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eg *ContentCreator )Add_gs (dictName _bgg .PdfObjectName )*ContentCreator {_fea :=ContentStreamOperation {};_fea .Operand ="\u0067\u0073";_fea .Params =_gddf ([]_bgg .PdfObjectName {dictName });_eg ._ccg =append (_eg ._ccg ,&_fea );return _eg ;};

// AddOperand adds a specified operand.
func (_fa *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_fa ._ccg =append (_fa ._ccg ,&op );return _fa ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bgb *ContentCreator )Add_B_starred ()*ContentCreator {_bdc :=ContentStreamOperation {};_bdc .Operand ="\u0042\u002a";_bgb ._ccg =append (_bgb ._ccg ,&_bdc );return _bgb ;};func (_cafb *ContentStreamParser )parseName ()(_bgg .PdfObjectName ,error ){_eadg :="";_fcgg :=false ;for {_egc ,_cdc :=_cafb ._cacg .Peek (1);if _cdc ==_g .EOF {break ;};if _cdc !=nil {return _bgg .PdfObjectName (_eadg ),_cdc ;};if !_fcgg {if _egc [0]=='/'{_fcgg =true ;_cafb ._cacg .ReadByte ();}else {_aad .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_egc ,_egc );return _bgg .PdfObjectName (_eadg ),_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_egc [0]);};}else {if _bgg .IsWhiteSpace (_egc [0]){break ;}else if (_egc [0]=='/')||(_egc [0]=='[')||(_egc [0]=='(')||(_egc [0]==']')||(_egc [0]=='<')||(_egc [0]=='>'){break ;}else if _egc [0]=='#'{_fba ,_fge :=_cafb ._cacg .Peek (3);if _fge !=nil {return _bgg .PdfObjectName (_eadg ),_fge ;};_cafb ._cacg .Discard (3);_acfg ,_fge :=_bg .DecodeString (string (_fba [1:3]));if _fge !=nil {return _bgg .PdfObjectName (_eadg ),_fge ;};_eadg +=string (_acfg );}else {_gedf ,_ :=_cafb ._cacg .ReadByte ();_eadg +=string (_gedf );};};};return _bgg .PdfObjectName (_eadg ),nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);func (_faacf *ContentStreamProcessor )handleCommand_G (_bgad *ContentStreamOperation ,_cbfc *_gc .PdfPageResources )error {_fddb :=_gc .NewPdfColorspaceDeviceGray ();if len (_bgad .Params )!=_fddb .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgad .Params ),_fddb );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fgeag ,_cacc :=_fddb .ColorFromPdfObjects (_bgad .Params );if _cacc !=nil {return _cacc ;};_faacf ._cdce .ColorspaceStroking =_fddb ;_faacf ._cdce .ColorStroking =_fgeag ;return nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ffd *ContentCreator )Add_CS (name _bgg .PdfObjectName )*ContentCreator {_fedb :=ContentStreamOperation {};_fedb .Operand ="\u0043\u0053";_fedb .Params =_gddf ([]_bgg .PdfObjectName {name });_ffd ._ccg =append (_ffd ._ccg ,&_fedb );return _ffd ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_caf *ContentCreator )Add_ri (intent _bgg .PdfObjectName )*ContentCreator {_cee :=ContentStreamOperation {};_cee .Operand ="\u0072\u0069";_cee .Params =_gddf ([]_bgg .PdfObjectName {intent });_caf ._ccg =append (_caf ._ccg ,&_cee );return _caf ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fcfe *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bdd :=ContentStreamOperation {};_bdd .Operand ="\u0054\u006d";_bdd .Params =_fffc ([]float64 {a ,b ,c ,d ,e ,f });_fcfe ._ccg =append (_fcfe ._ccg ,&_bdd );return _fcfe ;};func (_ecf *ContentStreamParser )parseHexString ()(*_bgg .PdfObjectString ,error ){_ecf ._cacg .ReadByte ();_dfb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _cfba []byte ;for {_ecf .skipSpaces ();_ccbfg ,_bdfa :=_ecf ._cacg .Peek (1);if _bdfa !=nil {return _bgg .MakeString (""),_bdfa ;};if _ccbfg [0]=='>'{_ecf ._cacg .ReadByte ();break ;};_abfd ,_ :=_ecf ._cacg .ReadByte ();if _f .IndexByte (_dfb ,_abfd )>=0{_cfba =append (_cfba ,_abfd );};};if len (_cfba )%2==1{_cfba =append (_cfba ,'0');};_ccdd ,_ :=_bg .DecodeString (string (_cfba ));return _bgg .MakeHexString (string (_ccdd )),nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_eac *ContentCreator )Add_W ()*ContentCreator {_ff :=ContentStreamOperation {};_ff .Operand ="\u0057";_eac ._ccg =append (_eac ._ccg ,&_ff );return _eac ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_aaa HandlerConditionEnum )Operand ()bool {return _aaa ==HandlerConditionEnumOperand };

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ceee *ContentCreator )Add_cs (name _bgg .PdfObjectName )*ContentCreator {_ggdf :=ContentStreamOperation {};_ggdf .Operand ="\u0063\u0073";_ggdf .Params =_gddf ([]_bgg .PdfObjectName {name });_ceee ._ccg =append (_ceee ._ccg ,&_ggdf );return _ceee ;};

// Operations returns the list of operations.
func (_aed *ContentCreator )Operations ()*ContentStreamOperations {return &_aed ._ccg };func _ccdb (_baae _bgg .PdfObject )(_gc .PdfColorspace ,error ){_abga ,_gdcg :=_baae .(*_bgg .PdfObjectArray );if !_gdcg {_aad .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_baae );return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _abga .Len ()!=4{_aad .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_abga .Len ());return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gbcg ,_gdcg :=_abga .Get (0).(*_bgg .PdfObjectName );if !_gdcg {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_abga );return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gbcg !="\u0049"&&*_gbcg !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_aad .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_gbcg );return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gbcg ,_gdcg =_abga .Get (1).(*_bgg .PdfObjectName );if !_gdcg {_aad .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_abga );return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gbcg !="\u0047"&&*_gbcg !="\u0052\u0047\u0042"&&*_gbcg !="\u0043\u004d\u0059\u004b"&&*_gbcg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_gbcg !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_gbcg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_aad .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_gbcg );return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_aefg :="";switch *_gbcg {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_aefg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_aefg ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_aefg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_edbg :=_bgg .MakeArray (_bgg .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_bgg .MakeName (_aefg ),_abga .Get (2),_abga .Get (3));return _gc .NewPdfColorspaceFromPdfObject (_edbg );};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gb *ContentCreator )Add_S ()*ContentCreator {_cbdc :=ContentStreamOperation {};_cbdc .Operand ="\u0053";_gb ._ccg =append (_gb ._ccg ,&_cbdc );return _gb ;};func (_fgeg *ContentStreamProcessor )handleCommand_CS (_gdd *ContentStreamOperation ,_bfee *_gc .PdfPageResources )error {if len (_gdd .Params )< 1{_aad .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gdd .Params )> 1{_aad .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_agfe ,_abcge :=_gdd .Params [0].(*_bgg .PdfObjectName );if !_abcge {_aad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fcdcd ,_deac :=_fgeg .getColorspace (string (*_agfe ),_bfee );if _deac !=nil {return _deac ;};_fgeg ._cdce .ColorspaceStroking =_fcdcd ;_dfdf ,_deac :=_fgeg .getInitialColor (_fcdcd );if _deac !=nil {return _deac ;};_fgeg ._cdce .ColorStroking =_dfdf ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_edbf *ContentStreamInlineImage )ToImage (resources *_gc .PdfPageResources )(*_gc .Image ,error ){_edde ,_dbae :=_edbf .toImageBase (resources );if _dbae !=nil {return nil ,_dbae ;};_fgf ,_dbae :=_daf (_edbf );if _dbae !=nil {return nil ,_dbae ;};_aad .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_fgf ,_fgf );_aad .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_edbf );_dbfg ,_dbae :=_fgf .DecodeBytes (_edbf ._fedee );if _dbae !=nil {return nil ,_dbae ;};_fcd :=&_gc .Image {Width :int64 (_edde .Width ),Height :int64 (_edde .Height ),BitsPerComponent :int64 (_edde .BitsPerComponent ),ColorComponents :_edde .ColorComponents ,Data :_dbfg };if len (_edde .Decode )> 0{for _cgcg :=0;_cgcg < len (_edde .Decode );_cgcg ++{_edde .Decode [_cgcg ]*=float64 ((int (1)<<uint (_edde .BitsPerComponent ))-1);};_fcd .SetDecode (_edde .Decode );};return _fcd ,nil ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ccca *ContentCreator )Add_h ()*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0068";_ccca ._ccg =append (_ccca ._ccg ,&_agc );return _ccca ;};func (_dfg *ContentStreamInlineImage )toImageBase (_bag *_gc .PdfPageResources )(*_ece .ImageBase ,error ){if _dfg ._bda !=nil {return _dfg ._bda ,nil ;};_fag :=_ece .ImageBase {};if _dfg .Height ==nil {return nil ,_a .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_abg ,_afa :=_dfg .Height .(*_bgg .PdfObjectInteger );if !_afa {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_fag .Height =int (*_abg );if _dfg .Width ==nil {return nil ,_a .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_feac ,_afa :=_dfg .Width .(*_bgg .PdfObjectInteger );if !_afa {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_fag .Width =int (*_feac );_eead ,_fgag :=_dfg .IsMask ();if _fgag !=nil {return nil ,_fgag ;};if _eead {_fag .BitsPerComponent =1;_fag .ColorComponents =1;}else {if _dfg .BitsPerComponent ==nil {_aad .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_fag .BitsPerComponent =8;}else {_deab ,_bae :=_dfg .BitsPerComponent .(*_bgg .PdfObjectInteger );if !_bae {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dfg .BitsPerComponent );return nil ,_a .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_fag .BitsPerComponent =int (*_deab );};if _dfg .ColorSpace !=nil {_ddc ,_fbe :=_dfg .GetColorSpace (_bag );if _fbe !=nil {return nil ,_fbe ;};_fag .ColorComponents =_ddc .GetNumComponents ();}else {_aad .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_fag .ColorComponents =1;};};if _cac ,_gcf :=_bgg .GetArray (_dfg .Decode );_gcf {_fag .Decode ,_fgag =_cac .ToFloat64Array ();if _fgag !=nil {return nil ,_fgag ;};};_dfg ._bda =&_fag ;return _dfg ._bda ,nil ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _gc .PdfColorspace ;ColorspaceNonStroking _gc .PdfColorspace ;ColorStroking _gc .PdfColor ;ColorNonStroking _gc .PdfColor ;CTM _dd .Matrix ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bde *ContentCreator )Add_f_starred ()*ContentCreator {_gbe :=ContentStreamOperation {};_gbe .Operand ="\u0066\u002a";_bde ._ccg =append (_bde ._ccg ,&_gbe );return _bde ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fcb *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_bbd :=ContentStreamOperation {};_bbd .Operand ="\u0054\u007a";_bbd .Params =_fffc ([]float64 {scale });_fcb ._ccg =append (_fcb ._ccg ,&_bbd );return _fcb ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gag *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ca :=ContentStreamOperation {};_ca .Operand ="\u006a";_ca .Params =_gddf ([]_bgg .PdfObjectName {_bgg .PdfObjectName (lineJoinStyle )});_gag ._ccg =append (_gag ._ccg ,&_ca );return _gag ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _gc .Image ,encoder _bgg .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_bgg .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_addg :=ContentStreamInlineImage {};if img .ColorComponents ==1{_addg .ColorSpace =_bgg .MakeName ("\u0047");}else if img .ColorComponents ==3{_addg .ColorSpace =_bgg .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_addg .ColorSpace =_bgg .MakeName ("\u0043\u004d\u0059\u004b");}else {_aad .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_addg .BitsPerComponent =_bgg .MakeInteger (img .BitsPerComponent );_addg .Width =_bgg .MakeInteger (img .Width );_addg .Height =_bgg .MakeInteger (img .Height );_ggb ,_adg :=encoder .EncodeBytes (img .Data );if _adg !=nil {return nil ,_adg ;};_addg ._fedee =_ggb ;_gedb :=encoder .GetFilterName ();if _gedb !=_bgg .StreamEncodingFilterNameRaw {_addg .Filter =_bgg .MakeName (_gedb );};return &_addg ,nil ;};func _dea (_cdb *ContentStreamInlineImage ,_dff *_bgg .PdfObjectDictionary )(*_bgg .LZWEncoder ,error ){_abc :=_bgg .NewLZWEncoder ();if _dff ==nil {if _cdb .DecodeParms !=nil {_fggc ,_beb :=_bgg .GetDict (_cdb .DecodeParms );if !_beb {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cdb .DecodeParms );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dff =_fggc ;};};if _dff ==nil {return _abc ,nil ;};_ebaf :=_dff .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _ebaf !=nil {_ega ,_egaf :=_ebaf .(*_bgg .PdfObjectInteger );if !_egaf {_aad .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_ebaf );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_ega !=0&&*_ega !=1{return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_abc .EarlyChange =int (*_ega );}else {_abc .EarlyChange =1;};_ebaf =_dff .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ebaf !=nil {_caa ,_agdb :=_ebaf .(*_bgg .PdfObjectInteger );if !_agdb {_aad .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ebaf );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_abc .Predictor =int (*_caa );};_ebaf =_dff .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ebaf !=nil {_bfc ,_gdc :=_ebaf .(*_bgg .PdfObjectInteger );if !_gdc {_aad .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_abc .BitsPerComponent =int (*_bfc );};if _abc .Predictor > 1{_abc .Columns =1;_ebaf =_dff .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _ebaf !=nil {_ced ,_fab :=_ebaf .(*_bgg .PdfObjectInteger );if !_fab {return nil ,_d .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_abc .Columns =int (*_ced );};_abc .Colors =1;_ebaf =_dff .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ebaf !=nil {_gage ,_cfc :=_ebaf .(*_bgg .PdfObjectInteger );if !_cfc {return nil ,_d .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_abc .Colors =int (*_gage );};};_aad .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dff .String ());return _abc ,nil ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fad *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fce :=ContentStreamOperation {};_fce .Operand ="\u0063";_fce .Params =_fffc ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_fad ._ccg =append (_fad ._ccg ,&_fce );return _fad ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cd *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_bcde :=ContentStreamOperation {};_bcde .Operand ="\u0054\u0063";_bcde .Params =_fffc ([]float64 {charSpace });_cd ._ccg =append (_cd ._ccg ,&_bcde );return _cd ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cff *ContentCreator )Add_n ()*ContentCreator {_fgaeg :=ContentStreamOperation {};_fgaeg .Operand ="\u006e";_cff ._ccg =append (_cff ._ccg ,&_fgaeg );return _cff ;};func (_efd *ContentStreamProcessor )handleCommand_K (_faf *ContentStreamOperation ,_abcgd *_gc .PdfPageResources )error {_fgcg :=_gc .NewPdfColorspaceDeviceCMYK ();if len (_faf .Params )!=_fgcg .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_faf .Params ),_fgcg );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gbcea ,_bfaf :=_fgcg .ColorFromPdfObjects (_faf .Params );if _bfaf !=nil {return _bfaf ;};_efd ._cdce .ColorspaceStroking =_fgcg ;_efd ._cdce .ColorStroking =_gbcea ;return nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fgg *ContentCreator )Add_W_starred ()*ContentCreator {_cae :=ContentStreamOperation {};_cae .Operand ="\u0057\u002a";_fgg ._ccg =append (_fgg ._ccg ,&_cae );return _fgg ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ggdd *ContentCreator )Wrap (){_ggdd ._ccg .WrapIfNeeded ()};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gfd *ContentCreator )Add_G (gray float64 )*ContentCreator {_ad :=ContentStreamOperation {};_ad .Operand ="\u0047";_ad .Params =_fffc ([]float64 {gray });_gfd ._ccg =append (_gfd ._ccg ,&_ad );return _gfd ;};var (ErrInvalidOperand =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gf *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_fd :=ContentStreamOperation {};_fd .Operand ="\u004a";_fd .Params =_gddf ([]_bgg .PdfObjectName {_bgg .PdfObjectName (lineCapStyle )});_gf ._ccg =append (_gf ._ccg ,&_fd );return _gf ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_cacg *_ec .Reader };

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdf *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_gae :=ContentStreamOperation {};_gae .Operand ="\u004b";_gae .Params =_fffc ([]float64 {c ,m ,y ,k });_bdf ._ccg =append (_bdf ._ccg ,&_gae );return _bdf ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ed *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_fga :=ContentStreamOperation {};_fga .Operand ="\u0064";_fga .Params =[]_bgg .PdfObject {};_fga .Params =append (_fga .Params ,_bgg .MakeArrayFromIntegers64 (dashArray ));_fga .Params =append (_fga .Params ,_bgg .MakeInteger (dashPhase ));_ed ._ccg =append (_ed ._ccg ,&_fga );return _ed ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgd *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u0053\u0043";_eed .Params =_fffc (c );_fgd ._ccg =append (_fgd ._ccg ,&_eed );return _fgd ;};func (_fgddc *ContentStreamParser )parseDict ()(*_bgg .PdfObjectDictionary ,error ){_aad .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_afcg :=_bgg .MakeDict ();_faaa ,_ :=_fgddc ._cacg .ReadByte ();if _faaa !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_faaa ,_ =_fgddc ._cacg .ReadByte ();if _faaa !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_fgddc .skipSpaces ();_ddgd ,_ffff :=_fgddc ._cacg .Peek (2);if _ffff !=nil {return nil ,_ffff ;};_aad .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_ddgd ),string (_ddgd ));if (_ddgd [0]=='>')&&(_ddgd [1]=='>'){_aad .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_fgddc ._cacg .ReadByte ();_fgddc ._cacg .ReadByte ();break ;};_aad .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_eebf ,_ffff :=_fgddc .parseName ();_aad .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eebf );if _ffff !=nil {_aad .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_ffff );return nil ,_ffff ;};if len (_eebf )> 4&&_eebf [len (_eebf )-4:]=="\u006e\u0075\u006c\u006c"{_bfg :=_eebf [0:len (_eebf )-4];_aad .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_eebf );_aad .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bfg );_fgddc .skipSpaces ();_cceb ,_ :=_fgddc ._cacg .Peek (1);if _cceb [0]=='/'{_afcg .Set (_bfg ,_bgg .MakeNull ());continue ;};};_fgddc .skipSpaces ();_fead ,_ ,_ffff :=_fgddc .parseObject ();if _ffff !=nil {return nil ,_ffff ;};_afcg .Set (_eebf ,_fead );_aad .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_eebf ,_fead .String ());};return _afcg ,nil ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_fff :=ContentStreamParser {};_ggfgc :=_f .NewBufferString (contentStr +"\u000a");_fff ._cacg =_ec .NewReader (_ggfgc );return &_fff ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_db *ContentCreator )Add_Do (name _bgg .PdfObjectName )*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u0044\u006f";_ba .Params =_gddf ([]_bgg .PdfObjectName {name });_db ._ccg =append (_db ._ccg ,&_ba );return _db ;};func (_acdd *ContentStreamParser )parseObject ()(_gfa _bgg .PdfObject ,_fgea bool ,_effc error ){_acdd .skipSpaces ();for {_dfba ,_fadc :=_acdd ._cacg .Peek (2);if _fadc !=nil {return nil ,false ,_fadc ;};_aad .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dfba ));if _dfba [0]=='%'{_acdd .skipComments ();continue ;}else if _dfba [0]=='/'{_afbff ,_cgad :=_acdd .parseName ();_aad .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_afbff );return &_afbff ,false ,_cgad ;}else if _dfba [0]=='('{_aad .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_bga ,_aff :=_acdd .parseString ();return _bga ,false ,_aff ;}else if _dfba [0]=='<'&&_dfba [1]!='<'{_aad .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_acfc ,_cfdd :=_acdd .parseHexString ();return _acfc ,false ,_cfdd ;}else if _dfba [0]=='['{_aad .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_bgbe ,_bfcc :=_acdd .parseArray ();return _bgbe ,false ,_bfcc ;}else if _bgg .IsFloatDigit (_dfba [0])||(_dfba [0]=='-'&&_bgg .IsFloatDigit (_dfba [1])){_aad .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_cbf ,_ddb :=_acdd .parseNumber ();return _cbf ,false ,_ddb ;}else if _dfba [0]=='<'&&_dfba [1]=='<'{_bbc ,_fbdb :=_acdd .parseDict ();return _bbc ,false ,_fbdb ;}else {_aad .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dfba ,_ =_acdd ._cacg .Peek (5);_eaa :=string (_dfba );_aad .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_eaa );if (len (_eaa )> 3)&&(_eaa [:4]=="\u006e\u0075\u006c\u006c"){_dfe ,_bece :=_acdd .parseNull ();return &_dfe ,false ,_bece ;}else if (len (_eaa )> 4)&&(_eaa [:5]=="\u0066\u0061\u006cs\u0065"){_edg ,_fbab :=_acdd .parseBool ();return &_edg ,false ,_fbab ;}else if (len (_eaa )> 3)&&(_eaa [:4]=="\u0074\u0072\u0075\u0065"){_eaf ,_aecef :=_acdd .parseBool ();return &_eaf ,false ,_aecef ;};_gcc ,_fdcfe :=_acdd .parseOperand ();if _fdcfe !=nil {return _gcc ,false ,_fdcfe ;};if len (_gcc .String ())< 1{return _gcc ,false ,ErrInvalidOperand ;};return _gcc ,true ,nil ;};};};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Transform returns coordinates x, y transformed by the CTM.
func (_eaed *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _eaed .CTM .Transform (x ,y );};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aaf *ContentCreator )Add_TL (leading float64 )*ContentCreator {_eddb :=ContentStreamOperation {};_eddb .Operand ="\u0054\u004c";_eddb .Params =_fffc ([]float64 {leading });_aaf ._ccg =append (_aaf ._ccg ,&_eddb );return _aaf ;};func (_bgcg *ContentStreamProcessor )handleCommand_g (_fac *ContentStreamOperation ,_aaca *_gc .PdfPageResources )error {_gdbf :=_gc .NewPdfColorspaceDeviceGray ();if len (_fac .Params )!=_gdbf .GetNumComponents (){_aad .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fac .Params ),_gdbf );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fegb ,_dga :=_gdbf .ColorFromPdfObjects (_fac .Params );if _dga !=nil {_aad .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_gdbf ,_fac ,_dga );return _dga ;};_bgcg ._cdce .ColorspaceNonStroking =_gdbf ;_bgcg ._cdce .ColorNonStroking =_fegb ;return nil ;};func (_abdb *ContentStreamParser )parseBool ()(_bgg .PdfObjectBool ,error ){_agcf ,_dgf :=_abdb ._cacg .Peek (4);if _dgf !=nil {return _bgg .PdfObjectBool (false ),_dgf ;};if (len (_agcf )>=4)&&(string (_agcf [:4])=="\u0074\u0072\u0075\u0065"){_abdb ._cacg .Discard (4);return _bgg .PdfObjectBool (true ),nil ;};_agcf ,_dgf =_abdb ._cacg .Peek (5);if _dgf !=nil {return _bgg .PdfObjectBool (false ),_dgf ;};if (len (_agcf )>=5)&&(string (_agcf [:5])=="\u0066\u0061\u006cs\u0065"){_abdb ._cacg .Discard (5);return _bgg .PdfObjectBool (false ),nil ;};return _bgg .PdfObjectBool (false ),_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_gacc *ContentStreamProcessor )handleCommand_SC (_cba *ContentStreamOperation ,_febe *_gc .PdfPageResources )error {_eaebc :=_gacc ._cdce .ColorspaceStroking ;if len (_cba .Params )!=_eaebc .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cba .Params ),_eaebc );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_aaece ,_fffe :=_eaebc .ColorFromPdfObjects (_cba .Params );if _fffe !=nil {return _fffe ;};_gacc ._cdce .ColorStroking =_aaece ;return nil ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_aca GraphicStateStack ;_bffd []*ContentStreamOperation ;_cdce GraphicsState ;_dcaaf []handlerEntry ;_cgg int ;};func (_fbdag *ContentStreamProcessor )getColorspace (_cdcg string ,_cfa *_gc .PdfPageResources )(_gc .PdfColorspace ,error ){switch _cdcg {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _gc .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _gc .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _gc .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _gc .NewPdfColorspaceSpecialPattern (),nil ;};_eafb ,_cfca :=_cfa .GetColorspaceByName (_bgg .PdfObjectName (_cdcg ));if _cfca {return _eafb ,nil ;};switch _cdcg {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _gc .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _gc .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _gc .NewPdfColorspaceLab (),nil ;};_aad .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_cdcg );return nil ,_d .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_cdcg );};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_ace *ContentStreamInlineImage )IsMask ()(bool ,error ){if _ace .ImageMask !=nil {_cffc ,_fbbb :=_ace .ImageMask .(*_bgg .PdfObjectBool );if !_fbbb {_aad .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_a .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_cffc ),nil ;};return false ,nil ;};

// Push pushes `gs` on the `gsStack`.
func (_cffd *GraphicStateStack )Push (gs GraphicsState ){*_cffd =append (*_cffd ,gs )};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_geg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u006c";_gfg .Params =_fffc ([]float64 {x ,y });_geg ._ccg =append (_geg ._ccg ,&_gfg );return _geg ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_acg :=&ContentCreator {};_acg ._ccg =ContentStreamOperations {};return _acg ;};

// String is same as Bytes() except returns as a string for convenience.
func (_cef *ContentCreator )String ()string {return string (_cef ._ccg .Bytes ())};func (_dgc *ContentStreamProcessor )handleCommand_SCN (_ecde *ContentStreamOperation ,_fedbe *_gc .PdfPageResources )error {_agfd :=_dgc ._cdce .ColorspaceStroking ;if !_caff (_agfd ){if len (_ecde .Params )!=_agfd .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecde .Params ),_agfd );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_eecf ,_eddbf :=_agfd .ColorFromPdfObjects (_ecde .Params );if _eddbf !=nil {return _eddbf ;};_dgc ._cdce .ColorStroking =_eecf ;return nil ;};func (_cda *ContentStreamProcessor )handleCommand_RG (_acfag *ContentStreamOperation ,_caad *_gc .PdfPageResources )error {_gcfg :=_gc .NewPdfColorspaceDeviceRGB ();if len (_acfag .Params )!=_gcfg .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_acfag .Params ),_gcfg );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fbbbg ,_gbcd :=_gcfg .ColorFromPdfObjects (_acfag .Params );if _gbcd !=nil {return _gbcd ;};_cda ._cdce .ColorspaceStroking =_gcfg ;_cda ._cdce .ColorStroking =_fbbbg ;return nil ;};func (_fecd *ContentStreamInlineImage )String ()string {_cad :=_d .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_fecd ._fedee ));if _fecd .BitsPerComponent !=nil {_cad +="\u002d\u0020\u0042\u0050\u0043\u0020"+_fecd .BitsPerComponent .WriteString ()+"\u000a";};if _fecd .ColorSpace !=nil {_cad +="\u002d\u0020\u0043S\u0020"+_fecd .ColorSpace .WriteString ()+"\u000a";};if _fecd .Decode !=nil {_cad +="\u002d\u0020\u0044\u0020"+_fecd .Decode .WriteString ()+"\u000a";};if _fecd .DecodeParms !=nil {_cad +="\u002d\u0020\u0044P\u0020"+_fecd .DecodeParms .WriteString ()+"\u000a";};if _fecd .Filter !=nil {_cad +="\u002d\u0020\u0046\u0020"+_fecd .Filter .WriteString ()+"\u000a";};if _fecd .Height !=nil {_cad +="\u002d\u0020\u0048\u0020"+_fecd .Height .WriteString ()+"\u000a";};if _fecd .ImageMask !=nil {_cad +="\u002d\u0020\u0049M\u0020"+_fecd .ImageMask .WriteString ()+"\u000a";};if _fecd .Intent !=nil {_cad +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_fecd .Intent .WriteString ()+"\u000a";};if _fecd .Interpolate !=nil {_cad +="\u002d\u0020\u0049\u0020"+_fecd .Interpolate .WriteString ()+"\u000a";};if _fecd .Width !=nil {_cad +="\u002d\u0020\u0057\u0020"+_fecd .Width .WriteString ()+"\u000a";};return _cad ;};func (_gcba *ContentStreamProcessor )handleCommand_cm (_ebe *ContentStreamOperation ,_aecg *_gc .PdfPageResources )error {if len (_ebe .Params )!=6{_aad .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_ebe .Params ));return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_abe ,_dgec :=_bgg .GetNumbersAsFloat (_ebe .Params );if _dgec !=nil {return _dgec ;};_adfb :=_dd .NewMatrix (_abe [0],_abe [1],_abe [2],_abe [3],_abe [4],_abe [5]);_gcba ._cdce .CTM .Concat (_adfb );return nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eaeb *ContentCreator )Add_Tj (textstr _bgg .PdfObjectString )*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u0054\u006a";_fdc .Params =_bad ([]_bgg .PdfObjectString {textstr });_eaeb ._ccg =append (_eaeb ._ccg ,&_fdc );return _eaeb ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_age *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ggf :=_aa .Cos (angle *_aa .Pi /180.0);_ccge :=_aa .Sin (angle *_aa .Pi /180.0);_ged :=-_aa .Sin (angle *_aa .Pi /180.0);_ccb :=_aa .Cos (angle *_aa .Pi /180.0);return _age .Add_cm (_ggf ,_ccge ,_ged ,_ccb ,0,0);};

// GetEncoder returns the encoder of the inline image.
func (_aecf *ContentStreamInlineImage )GetEncoder ()(_bgg .StreamEncoder ,error ){return _daf (_aecf )};func (_beg *ContentStreamProcessor )handleCommand_scn (_baa *ContentStreamOperation ,_bceb *_gc .PdfPageResources )error {_eeg :=_beg ._cdce .ColorspaceNonStroking ;if !_caff (_eeg ){if len (_baa .Params )!=_eeg .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_baa .Params ),_eeg );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_ecg ,_ecbf :=_eeg .ColorFromPdfObjects (_baa .Params );if _ecbf !=nil {_aad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_baa .Params ,_eeg );return _ecbf ;};_beg ._cdce .ColorNonStroking =_ecg ;return nil ;};func (_efb *ContentStreamParser )parseNumber ()(_bgg .PdfObject ,error ){return _bgg .ParseNumber (_efb ._cacg );};func (_bdee *ContentStreamParser )parseString ()(*_bgg .PdfObjectString ,error ){_bdee ._cacg .ReadByte ();var _ggge []byte ;_abcf :=1;for {_bdg ,_fdcc :=_bdee ._cacg .Peek (1);if _fdcc !=nil {return _bgg .MakeString (string (_ggge )),_fdcc ;};if _bdg [0]=='\\'{_bdee ._cacg .ReadByte ();_edda ,_eaca :=_bdee ._cacg .ReadByte ();if _eaca !=nil {return _bgg .MakeString (string (_ggge )),_eaca ;};if _bgg .IsOctalDigit (_edda ){_gff ,_afbf :=_bdee ._cacg .Peek (2);if _afbf !=nil {return _bgg .MakeString (string (_ggge )),_afbf ;};var _gfb []byte ;_gfb =append (_gfb ,_edda );for _ ,_ffdc :=range _gff {if _bgg .IsOctalDigit (_ffdc ){_gfb =append (_gfb ,_ffdc );}else {break ;};};_bdee ._cacg .Discard (len (_gfb )-1);_aad .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gfb );_ffe ,_afbf :=_e .ParseUint (string (_gfb ),8,32);if _afbf !=nil {return _bgg .MakeString (string (_ggge )),_afbf ;};_ggge =append (_ggge ,byte (_ffe ));continue ;};switch _edda {case 'n':_ggge =append (_ggge ,'\n');case 'r':_ggge =append (_ggge ,'\r');case 't':_ggge =append (_ggge ,'\t');case 'b':_ggge =append (_ggge ,'\b');case 'f':_ggge =append (_ggge ,'\f');case '(':_ggge =append (_ggge ,'(');case ')':_ggge =append (_ggge ,')');case '\\':_ggge =append (_ggge ,'\\');};continue ;}else if _bdg [0]=='('{_abcf ++;}else if _bdg [0]==')'{_abcf --;if _abcf ==0{_bdee ._cacg .ReadByte ();break ;};};_bbe ,_ :=_bdee ._cacg .ReadByte ();_ggge =append (_ggge ,_bbe );};return _bgg .MakeString (string (_ggge )),nil ;};var _ecef =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_bgg .PdfObject ;Operand string ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dcg *ContentCreator )Add_ET ()*ContentCreator {_fbg :=ContentStreamOperation {};_fbg .Operand ="\u0045\u0054";_dcg ._ccg =append (_dcg ._ccg ,&_fbg );return _dcg ;};func (_gbbg *ContentStreamParser )parseOperand ()(*_bgg .PdfObjectString ,error ){var _dfaba []byte ;for {_fffa ,_aadg :=_gbbg ._cacg .Peek (1);if _aadg !=nil {return _bgg .MakeString (string (_dfaba )),_aadg ;};if _bgg .IsDelimiter (_fffa [0]){break ;};if _bgg .IsWhiteSpace (_fffa [0]){break ;};_aaeb ,_ :=_gbbg ._cacg .ReadByte ();_dfaba =append (_dfaba ,_aaeb );};return _bgg .MakeString (string (_dfaba )),nil ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbb *ContentCreator )Add_s ()*ContentCreator {_dba :=ContentStreamOperation {};_dba .Operand ="\u0073";_dbb ._ccg =append (_dbb ._ccg ,&_dba );return _dbb ;};func _fgdd (_dcae string )bool {_ ,_fecf :=_ecef [_dcae ];return _fecf };

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_afd *ContentCreator )Add_Tf (fontName _bgg .PdfObjectName ,fontSize float64 )*ContentCreator {_caga :=ContentStreamOperation {};_caga .Operand ="\u0054\u0066";_caga .Params =_gddf ([]_bgg .PdfObjectName {fontName });_caga .Params =append (_caga .Params ,_fffc ([]float64 {fontSize })...);_afd ._ccg =append (_afd ._ccg ,&_caga );return _afd ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gd *ContentCreator )Add_SCN_pattern (name _bgg .PdfObjectName ,c ...float64 )*ContentCreator {_bcb :=ContentStreamOperation {};_bcb .Operand ="\u0053\u0043\u004e";_bcb .Params =_fffc (c );_bcb .Params =append (_bcb .Params ,_bgg .MakeName (string (name )));_gd ._ccg =append (_gd ._ccg ,&_bcb );return _gd ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dbd *ContentCreator )Add_quote (textstr _bgg .PdfObjectString )*ContentCreator {_ab :=ContentStreamOperation {};_ab .Operand ="\u0027";_ab .Params =_bad ([]_bgg .PdfObjectString {textstr });_dbd ._ccg =append (_dbd ._ccg ,&_ab );return _dbd ;};

// WriteString outputs the object as it is to be written to file.
func (_befa *ContentStreamInlineImage )WriteString ()string {var _ada _f .Buffer ;_dadg :="";if _befa .BitsPerComponent !=nil {_dadg +="\u002f\u0042\u0050C\u0020"+_befa .BitsPerComponent .WriteString ()+"\u000a";};if _befa .ColorSpace !=nil {_dadg +="\u002f\u0043\u0053\u0020"+_befa .ColorSpace .WriteString ()+"\u000a";};if _befa .Decode !=nil {_dadg +="\u002f\u0044\u0020"+_befa .Decode .WriteString ()+"\u000a";};if _befa .DecodeParms !=nil {_dadg +="\u002f\u0044\u0050\u0020"+_befa .DecodeParms .WriteString ()+"\u000a";};if _befa .Filter !=nil {_dadg +="\u002f\u0046\u0020"+_befa .Filter .WriteString ()+"\u000a";};if _befa .Height !=nil {_dadg +="\u002f\u0048\u0020"+_befa .Height .WriteString ()+"\u000a";};if _befa .ImageMask !=nil {_dadg +="\u002f\u0049\u004d\u0020"+_befa .ImageMask .WriteString ()+"\u000a";};if _befa .Intent !=nil {_dadg +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_befa .Intent .WriteString ()+"\u000a";};if _befa .Interpolate !=nil {_dadg +="\u002f\u0049\u0020"+_befa .Interpolate .WriteString ()+"\u000a";};if _befa .Width !=nil {_dadg +="\u002f\u0057\u0020"+_befa .Width .WriteString ()+"\u000a";};_ada .WriteString (_dadg );_ada .WriteString ("\u0049\u0044\u0020");_ada .Write (_befa ._fedee );_ada .WriteString ("\u000a\u0045\u0049\u000a");return _ada .String ();};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_aeca *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cge :=handlerEntry {};_cge .Condition =condition ;_cge .Operand =operand ;_cge .Handler =handler ;_aeca ._dcaaf =append (_aeca ._dcaaf ,_cge );};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_afdb HandlerConditionEnum )All ()bool {return _afdb ==HandlerConditionEnumAllOperands };func _fffc (_dedf []float64 )[]_bgg .PdfObject {var _dddg []_bgg .PdfObject ;for _ ,_befeb :=range _dedf {_dddg =append (_dddg ,_bgg .MakeFloat (_befeb ));};return _dddg ;};func _gddf (_aeag []_bgg .PdfObjectName )[]_bgg .PdfObject {var _bffb []_bgg .PdfObject ;for _ ,_fde :=range _aeag {_bffb =append (_bffb ,_bgg .MakeName (string (_fde )));};return _bffb ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aea *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_eeaa :=ContentStreamOperation {};_eeaa .Operand ="\u0079";_eeaa .Params =_fffc ([]float64 {x1 ,y1 ,x3 ,y3 });_aea ._ccg =append (_aea ._ccg ,&_eeaa );return _aea ;};func (_cbe *ContentStreamProcessor )handleCommand_k (_cade *ContentStreamOperation ,_bcebg *_gc .PdfPageResources )error {_degg :=_gc .NewPdfColorspaceDeviceCMYK ();if len (_cade .Params )!=_degg .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cade .Params ),_degg );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdg ,_ffb :=_degg .ColorFromPdfObjects (_cade .Params );if _ffb !=nil {return _ffb ;};_cbe ._cdce .ColorspaceNonStroking =_degg ;_cbe ._cdce .ColorNonStroking =_cdg ;return nil ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bcf *ContentCreator )Add_b_starred ()*ContentCreator {_ead :=ContentStreamOperation {};_ead .Operand ="\u0062\u002a";_bcf ._ccg =append (_bcf ._ccg ,&_ead );return _bcf ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_dcaa *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_acc :=ContentStreamInlineImage {};for {_dcaa .skipSpaces ();_aafc ,_feg ,_febd :=_dcaa .parseObject ();if _febd !=nil {return nil ,_febd ;};if !_feg {_adge ,_ccgd :=_bgg .GetName (_aafc );if !_ccgd {_aad .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_aafc );return nil ,_d .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_aafc );};_cfe ,_dgb ,_faaf :=_dcaa .parseObject ();if _faaf !=nil {return nil ,_faaf ;};if _dgb {return nil ,_d .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_adge {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_acc .BitsPerComponent =_cfe ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_acc .ColorSpace =_cfe ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_acc .Decode =_cfe ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_acc .DecodeParms =_cfe ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_acc .Filter =_cfe ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_acc .Height =_cfe ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_acc .ImageMask =_cfe ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_acc .Intent =_cfe ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_acc .Interpolate =_cfe ;case "\u0057","\u0057\u0069\u0064t\u0068":_acc .Width =_cfe ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_aad .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_adge );default:return nil ,_d .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_adge );};};if _feg {_dabf ,_adf :=_aafc .(*_bgg .PdfObjectString );if !_adf {return nil ,_d .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _dabf .Str ()=="\u0045\u0049"{_aad .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_acc ,nil ;}else if _dabf .Str ()=="\u0049\u0044"{_aad .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_ebb ,_befe :=_dcaa ._cacg .Peek (1);if _befe !=nil {return nil ,_befe ;};if _bgg .IsWhiteSpace (_ebb [0]){_dcaa ._cacg .Discard (1);};_acc ._fedee =[]byte {};_deb :=0;var _afc []byte ;for {_fgff ,_cgd :=_dcaa ._cacg .ReadByte ();if _cgd !=nil {_aad .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_cgd ;};if _deb ==0{if _bgg .IsWhiteSpace (_fgff ){_afc =[]byte {};_afc =append (_afc ,_fgff );_deb =1;}else if _fgff =='E'{_afc =append (_afc ,_fgff );_deb =2;}else {_acc ._fedee =append (_acc ._fedee ,_fgff );};}else if _deb ==1{_afc =append (_afc ,_fgff );if _fgff =='E'{_deb =2;}else {_acc ._fedee =append (_acc ._fedee ,_afc ...);_afc =[]byte {};if _bgg .IsWhiteSpace (_fgff ){_deb =1;}else {_deb =0;};};}else if _deb ==2{_afc =append (_afc ,_fgff );if _fgff =='I'{_deb =3;}else {_acc ._fedee =append (_acc ._fedee ,_afc ...);_afc =[]byte {};_deb =0;};}else if _deb ==3{_afc =append (_afc ,_fgff );if _bgg .IsWhiteSpace (_fgff ){_fgdc ,_dfab :=_dcaa ._cacg .Peek (20);if _dfab !=nil &&_dfab !=_g .EOF {return nil ,_dfab ;};_efc :=NewContentStreamParser (string (_fgdc ));_dgd :=true ;for _gcd :=0;_gcd < 3;_gcd ++{_ccceg ,_cfcf ,_aef :=_efc .parseObject ();if _aef !=nil {if _aef ==_g .EOF {break ;};continue ;};if _cfcf &&!_fgdd (_ccceg .String ()){_dgd =false ;break ;};};if _dgd {if len (_acc ._fedee )> 100{_aad .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_acc ._fedee ),_acc ._fedee [:100]);}else {_aad .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_acc ._fedee ),_acc ._fedee );};return &_acc ,nil ;};};_acc ._fedee =append (_acc ._fedee ,_afc ...);_afc =[]byte {};_deb =0;};};};};};};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_be *ContentStreamOperations )Bytes ()[]byte {var _ef _f .Buffer ;for _ ,_bec :=range *_be {if _bec ==nil {continue ;};if _bec .Operand =="\u0042\u0049"{_ef .WriteString (_bec .Operand +"\u000a");_ef .WriteString (_bec .Params [0].WriteString ());}else {for _ ,_af :=range _bec .Params {_ef .WriteString (_af .WriteString ());_ef .WriteString ("\u0020");};_ef .WriteString (_bec .Operand +"\u000a");};};return _ef .Bytes ();};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_fadf *ContentCreator )SetStrokingColor (color _gc .PdfColor )*ContentCreator {switch _bfe :=color .(type ){case *_gc .PdfColorDeviceGray :_fadf .Add_G (_bfe .Val ());case *_gc .PdfColorDeviceRGB :_fadf .Add_RG (_bfe .R (),_bfe .G (),_bfe .B ());case *_gc .PdfColorDeviceCMYK :_fadf .Add_K (_bfe .C (),_bfe .M (),_bfe .Y (),_bfe .K ());default:_aad .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_bfe );};return _fadf ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_de *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_efe :=ContentStreamOperation {};_efe .Operand ="\u0054\u0044";_efe .Params =_fffc ([]float64 {tx ,ty });_de ._ccg =append (_de ._ccg ,&_efe );return _de ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_egd *ContentCreator )Add_Tstar ()*ContentCreator {_bab :=ContentStreamOperation {};_bab .Operand ="\u0054\u002a";_egd ._ccg =append (_egd ._ccg ,&_bab );return _egd ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gbd *ContentCreator )Add_B ()*ContentCreator {_da :=ContentStreamOperation {};_da .Operand ="\u0042";_gbd ._ccg =append (_gbd ._ccg ,&_da );return _gbd ;};func (_dgfb *ContentStreamProcessor )handleCommand_sc (_ddcc *ContentStreamOperation ,_gagf *_gc .PdfPageResources )error {_efbf :=_dgfb ._cdce .ColorspaceNonStroking ;if !_caff (_efbf ){if len (_ddcc .Params )!=_efbf .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ddcc .Params ),_efbf );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_cgbg ,_dcd :=_efbf .ColorFromPdfObjects (_ddcc .Params );if _dcd !=nil {return _dcd ;};_dgfb ._cdce .ColorNonStroking =_cgbg ;return nil ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bdb *ContentCreator )Add_Q ()*ContentCreator {_aec :=ContentStreamOperation {};_aec .Operand ="\u0051";_bdb ._ccg =append (_bdb ._ccg ,&_aec );return _bdb ;};func (_gbce *ContentStreamParser )skipSpaces ()(int ,error ){_bba :=0;for {_bgd ,_bca :=_gbce ._cacg .Peek (1);if _bca !=nil {return 0,_bca ;};if _bgg .IsWhiteSpace (_bgd [0]){_gbce ._cacg .ReadByte ();_bba ++;}else {break ;};};return _bba ,nil ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eff *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_egf :=ContentStreamOperation {};_egf .Operand ="\u0054\u0073";_egf .Params =_fffc ([]float64 {rise });_eff ._ccg =append (_eff ._ccg ,&_egf );return _eff ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dg *ContentCreator )Add_TJ (vals ..._bgg .PdfObject )*ContentCreator {_bcfd :=ContentStreamOperation {};_bcfd .Operand ="\u0054\u004a";_bcfd .Params =[]_bgg .PdfObject {_bgg .MakeArray (vals ...)};_dg ._ccg =append (_dg ._ccg ,&_bcfd );return _dg ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_bef *ContentCreator )Bytes ()[]byte {return _bef ._ccg .Bytes ()};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ccbf *ContentCreator )Add_quotes (textstr _bgg .PdfObjectString ,aw ,ac float64 )*ContentCreator {_dbe :=ContentStreamOperation {};_dbe .Operand ="\u0022";_dbe .Params =_fffc ([]float64 {aw ,ac });_dbe .Params =append (_dbe .Params ,_bad ([]_bgg .PdfObjectString {textstr })...);_ccbf ._ccg =append (_ccbf ._ccg ,&_dbe );return _ccbf ;};func (_bbcf *ContentStreamProcessor )getInitialColor (_gac _gc .PdfColorspace )(_gc .PdfColor ,error ){switch _acb :=_gac .(type ){case *_gc .PdfColorspaceDeviceGray :return _gc .NewPdfColorDeviceGray (0.0),nil ;case *_gc .PdfColorspaceDeviceRGB :return _gc .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_gc .PdfColorspaceDeviceCMYK :return _gc .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_gc .PdfColorspaceCalGray :return _gc .NewPdfColorCalGray (0.0),nil ;case *_gc .PdfColorspaceCalRGB :return _gc .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_gc .PdfColorspaceLab :_faac :=0.0;_ceeea :=0.0;_ccfe :=0.0;if _acb .Range [0]> 0{_faac =_acb .Range [0];};if _acb .Range [2]> 0{_ceeea =_acb .Range [2];};return _gc .NewPdfColorLab (_faac ,_ceeea ,_ccfe ),nil ;case *_gc .PdfColorspaceICCBased :if _acb .Alternate ==nil {_aad .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_acb .N );if _acb .N ==1{_aad .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _bbcf .getInitialColor (_gc .NewPdfColorspaceDeviceGray ());}else if _acb .N ==3{_aad .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _bbcf .getInitialColor (_gc .NewPdfColorspaceDeviceRGB ());}else if _acb .N ==4{_aad .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _bbcf .getInitialColor (_gc .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_a .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _bbcf .getInitialColor (_acb .Alternate );case *_gc .PdfColorspaceSpecialIndexed :if _acb .Base ==nil {return nil ,_a .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _bbcf .getInitialColor (_acb .Base );case *_gc .PdfColorspaceSpecialSeparation :if _acb .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _bbcf .getInitialColor (_acb .AlternateSpace );case *_gc .PdfColorspaceDeviceN :if _acb .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _bbcf .getInitialColor (_acb .AlternateSpace );case *_gc .PdfColorspaceSpecialPattern :return nil ,nil ;};_aad .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_gac );return nil ,_a .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bf *ContentCreator )Add_q ()*ContentCreator {_ea :=ContentStreamOperation {};_ea .Operand ="\u0071";_bf ._ccg =append (_bf ._ccg ,&_ea );return _bf ;};func _bad (_cbc []_bgg .PdfObjectString )[]_bgg .PdfObject {var _gce []_bgg .PdfObject ;for _ ,_cfda :=range _cbc {_gce =append (_gce ,_bgg .MakeString (_cfda .Str ()));};return _gce ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_babg *ContentCreator )Add_BMC (tag _bgg .PdfObjectName )*ContentCreator {_ccd :=ContentStreamOperation {};_ccd .Operand ="\u0042\u004d\u0043";_ccd .Params =_gddf ([]_bgg .PdfObjectName {tag });_babg ._ccg =append (_babg ._ccg ,&_ccd );return _babg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_cbfb *ContentStreamProcessor )Process (resources *_gc .PdfPageResources )error {_cbfb ._cdce .ColorspaceStroking =_gc .NewPdfColorspaceDeviceGray ();_cbfb ._cdce .ColorspaceNonStroking =_gc .NewPdfColorspaceDeviceGray ();_cbfb ._cdce .ColorStroking =_gc .NewPdfColorDeviceGray (0);_cbfb ._cdce .ColorNonStroking =_gc .NewPdfColorDeviceGray (0);_cbfb ._cdce .CTM =_dd .IdentityMatrix ();for _ ,_bede :=range _cbfb ._bffd {var _eab error ;switch _bede .Operand {case "\u0071":_cbfb ._aca .Push (_cbfb ._cdce );case "\u0051":if len (_cbfb ._aca )==0{_aad .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_cbfb ._cdce =_cbfb ._aca .Pop ();case "\u0043\u0053":_eab =_cbfb .handleCommand_CS (_bede ,resources );case "\u0063\u0073":_eab =_cbfb .handleCommand_cs (_bede ,resources );case "\u0053\u0043":_eab =_cbfb .handleCommand_SC (_bede ,resources );case "\u0053\u0043\u004e":_eab =_cbfb .handleCommand_SCN (_bede ,resources );case "\u0073\u0063":_eab =_cbfb .handleCommand_sc (_bede ,resources );case "\u0073\u0063\u006e":_eab =_cbfb .handleCommand_scn (_bede ,resources );case "\u0047":_eab =_cbfb .handleCommand_G (_bede ,resources );case "\u0067":_eab =_cbfb .handleCommand_g (_bede ,resources );case "\u0052\u0047":_eab =_cbfb .handleCommand_RG (_bede ,resources );case "\u0072\u0067":_eab =_cbfb .handleCommand_rg (_bede ,resources );case "\u004b":_eab =_cbfb .handleCommand_K (_bede ,resources );case "\u006b":_eab =_cbfb .handleCommand_k (_bede ,resources );case "\u0063\u006d":_eab =_cbfb .handleCommand_cm (_bede ,resources );};if _eab !=nil {_aad .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_bede .Operand ,_eab );_aad .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_bede .Operand );return _eab ;};for _ ,_gbcf :=range _cbfb ._dcaaf {var _ecc error ;if _gbcf .Condition .All (){_ecc =_gbcf .Handler (_bede ,_cbfb ._cdce ,resources );}else if _gbcf .Condition .Operand ()&&_bede .Operand ==_gbcf .Operand {_ecc =_gbcf .Handler (_bede ,_cbfb ._cdce ,resources );};if _ecc !=nil {_aad .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ecc );return _ecc ;};};};return nil ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bff *ContentCreator )Add_b ()*ContentCreator {_fbf :=ContentStreamOperation {};_fbf .Operand ="\u0062";_bff ._ccg =append (_bff ._ccg ,&_fbf );return _bff ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_daff :=ContentStreamProcessor {};_daff ._aca =GraphicStateStack {};_dcf :=GraphicsState {};_daff ._cdce =_dcf ;_daff ._dcaaf =[]handlerEntry {};_daff ._cgg =0;_daff ._bffd =ops ;return &_daff ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aaec *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_bb :=ContentStreamOperation {};_bb .Operand ="\u0072\u0065";_bb .Params =_fffc ([]float64 {x ,y ,width ,height });_aaec ._ccg =append (_aaec ._ccg ,&_bb );return _aaec ;};func _daf (_ggff *ContentStreamInlineImage )(_bgg .StreamEncoder ,error ){if _ggff .Filter ==nil {return _bgg .NewRawEncoder (),nil ;};_aeda ,_add :=_ggff .Filter .(*_bgg .PdfObjectName );if !_add {_cagg ,_fece :=_ggff .Filter .(*_bgg .PdfObjectArray );if !_fece {return nil ,_d .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _cagg .Len ()==0{return _bgg .NewRawEncoder (),nil ;};if _cagg .Len ()!=1{_afe ,_cced :=_edae (_ggff );if _cced !=nil {_aad .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_cced );return nil ,_cced ;};_aad .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_afe );return _afe ,nil ;};_abf :=_cagg .Get (0);_aeda ,_fece =_abf .(*_bgg .PdfObjectName );if !_fece {return nil ,_d .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_aeda {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _bgg .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _bgg .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _aac (_ggff );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _afgc (_ggff ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _dea (_ggff ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _bgg .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _bgg .NewRunLengthEncoder (),nil ;default:_aad .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_aeda );return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_abcg *ContentStreamParser )parseArray ()(*_bgg .PdfObjectArray ,error ){_agdg :=_bgg .MakeArray ();_abcg ._cacg .ReadByte ();for {_abcg .skipSpaces ();_dbc ,_gggb :=_abcg ._cacg .Peek (1);if _gggb !=nil {return _agdg ,_gggb ;};if _dbc [0]==']'{_abcg ._cacg .ReadByte ();break ;};_ggac ,_ ,_gggb :=_abcg .parseObject ();if _gggb !=nil {return _agdg ,_gggb ;};_agdg .Append (_ggac );};return _agdg ,nil ;};func (_edge *ContentStreamProcessor )handleCommand_rg (_bfgg *ContentStreamOperation ,_ebac *_gc .PdfPageResources )error {_fcee :=_gc .NewPdfColorspaceDeviceRGB ();if len (_bfgg .Params )!=_fcee .GetNumComponents (){_aad .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_aad .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bfgg .Params ),_fcee );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gffg ,_baf :=_fcee .ColorFromPdfObjects (_bfgg .Params );if _baf !=nil {return _baf ;};_edge ._cdce .ColorspaceNonStroking =_fcee ;_edge ._cdce .ColorNonStroking =_gffg ;return nil ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_gec *ContentStreamOperation ,_cbdcf GraphicsState ,_acdda *_gc .PdfPageResources )error ;

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_gg *ContentStreamParser )ExtractText ()(string ,error ){_ag ,_ce :=_gg .Parse ();if _ce !=nil {return "",_ce ;};_cbd :=false ;_cg ,_aadf :=float64 (-1),float64 (-1);_ccc :="";for _ ,_ac :=range *_ag {if _ac .Operand =="\u0042\u0054"{_cbd =true ;}else if _ac .Operand =="\u0045\u0054"{_cbd =false ;};if _ac .Operand =="\u0054\u0064"||_ac .Operand =="\u0054\u0044"||_ac .Operand =="\u0054\u002a"{_ccc +="\u000a";};if _ac .Operand =="\u0054\u006d"{if len (_ac .Params )!=6{continue ;};_eec ,_ge :=_ac .Params [4].(*_bgg .PdfObjectFloat );if !_ge {_ggd ,_afb :=_ac .Params [4].(*_bgg .PdfObjectInteger );if !_afb {continue ;};_eec =_bgg .MakeFloat (float64 (*_ggd ));};_dc ,_ge :=_ac .Params [5].(*_bgg .PdfObjectFloat );if !_ge {_fed ,_cgc :=_ac .Params [5].(*_bgg .PdfObjectInteger );if !_cgc {continue ;};_dc =_bgg .MakeFloat (float64 (*_fed ));};if _aadf ==-1{_aadf =float64 (*_dc );}else if _aadf > float64 (*_dc ){_ccc +="\u000a";_cg =float64 (*_eec );_aadf =float64 (*_dc );continue ;};if _cg ==-1{_cg =float64 (*_eec );}else if _cg < float64 (*_eec ){_ccc +="\u0009";_cg =float64 (*_eec );};};if _cbd &&_ac .Operand =="\u0054\u004a"{if len (_ac .Params )< 1{continue ;};_cce ,_fc :=_ac .Params [0].(*_bgg .PdfObjectArray );if !_fc {return "",_d .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ac .Params [0]);};for _ ,_ae :=range _cce .Elements (){switch _eeb :=_ae .(type ){case *_bgg .PdfObjectString :_ccc +=_eeb .Str ();case *_bgg .PdfObjectFloat :if *_eeb < -100{_ccc +="\u0020";};case *_bgg .PdfObjectInteger :if *_eeb < -100{_ccc +="\u0020";};};};}else if _cbd &&_ac .Operand =="\u0054\u006a"{if len (_ac .Params )< 1{continue ;};_fg ,_bgc :=_ac .Params [0].(*_bgg .PdfObjectString );if !_bgc {return "",_d .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ac .Params [0]);};_ccc +=_fg .Str ();};};return _ccc ,nil ;};func _caff (_cacd _gc .PdfColorspace )bool {_ ,_fgad :=_cacd .(*_gc .PdfColorspaceSpecialPattern );return _fgad ;};func (_cb *ContentStreamOperations )isWrapped ()bool {if len (*_cb )< 2{return false ;};_cf :=0;for _ ,_fe :=range *_cb {if _fe .Operand =="\u0071"{_cf ++;}else if _fe .Operand =="\u0051"{_cf --;}else {if _cf < 1{return false ;};};};return _cf ==0;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fee *ContentCreator )Add_EMC ()*ContentCreator {_cege :=ContentStreamOperation {};_cege .Operand ="\u0045\u004d\u0043";_fee ._ccg =append (_fee ._ccg ,&_cege );return _fee ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_egg *ContentCreator )Add_f ()*ContentCreator {_fgae :=ContentStreamOperation {};_fgae .Operand ="\u0066";_egg ._ccg =append (_egg ._ccg ,&_fgae );return _egg ;};func _edae (_dfff *ContentStreamInlineImage )(*_bgg .MultiEncoder ,error ){_fgb :=_bgg .NewMultiEncoder ();var _ecb *_bgg .PdfObjectDictionary ;var _agf []_bgg .PdfObject ;if _afbg :=_dfff .DecodeParms ;_afbg !=nil {_bbb ,_dca :=_afbg .(*_bgg .PdfObjectDictionary );if _dca {_ecb =_bbb ;};_bfcb ,_gbc :=_afbg .(*_bgg .PdfObjectArray );if _gbc {for _ ,_gbb :=range _bfcb .Elements (){if _acfa ,_ggc :=_gbb .(*_bgg .PdfObjectDictionary );_ggc {_agf =append (_agf ,_acfa );}else {_agf =append (_agf ,nil );};};};};_gcb :=_dfff .Filter ;if _gcb ==nil {return nil ,_d .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_edb ,_fgaea :=_gcb .(*_bgg .PdfObjectArray );if !_fgaea {return nil ,_d .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _aedb ,_abd :=range _edb .Elements (){_ggfg ,_agdf :=_abd .(*_bgg .PdfObjectName );if !_agdf {return nil ,_d .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _ddg _bgg .PdfObject ;if _ecb !=nil {_ddg =_ecb ;}else {if len (_agf )> 0{if _aedb >=len (_agf ){return nil ,_d .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_ddg =_agf [_aedb ];};};var _aeg *_bgg .PdfObjectDictionary ;if _dad ,_ccbe :=_ddg .(*_bgg .PdfObjectDictionary );_ccbe {_aeg =_dad ;};if *_ggfg ==_bgg .StreamEncodingFilterNameFlate ||*_ggfg =="\u0046\u006c"{_egdb ,_fcbe :=_afgc (_dfff ,_aeg );if _fcbe !=nil {return nil ,_fcbe ;};_fgb .AddEncoder (_egdb );}else if *_ggfg ==_bgg .StreamEncodingFilterNameLZW {_gfed ,_ccfb :=_dea (_dfff ,_aeg );if _ccfb !=nil {return nil ,_ccfb ;};_fgb .AddEncoder (_gfed );}else if *_ggfg ==_bgg .StreamEncodingFilterNameASCIIHex {_aace :=_bgg .NewASCIIHexEncoder ();_fgb .AddEncoder (_aace );}else if *_ggfg ==_bgg .StreamEncodingFilterNameASCII85 ||*_ggfg =="\u0041\u0038\u0035"{_faa :=_bgg .NewASCII85Encoder ();_fgb .AddEncoder (_faa );}else {_aad .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_ggfg );return nil ,_d .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _fgb ,nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _bgg .PdfObject ;ColorSpace _bgg .PdfObject ;Decode _bgg .PdfObject ;DecodeParms _bgg .PdfObject ;Filter _bgg .PdfObject ;Height _bgg .PdfObject ;ImageMask _bgg .PdfObject ;Intent _bgg .PdfObject ;Interpolate _bgg .PdfObject ;Width _bgg .PdfObject ;_fedee []byte ;_bda *_ece .ImageBase ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_eba :=ContentStreamOperation {};_eba .Operand ="\u0053\u0043\u004e";_eba .Params =_fffc (c );_fcf ._ccg =append (_fcf ._ccg ,&_eba );return _fcf ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_edd *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fec :=ContentStreamOperation {};_fec .Operand ="\u0076";_fec .Params =_fffc ([]float64 {x2 ,y2 ,x3 ,y3 });_edd ._ccg =append (_edd ._ccg ,&_fec );return _edd ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eedd *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_aaba :=ContentStreamOperation {};_aaba .Operand ="\u0072\u0067";_aaba .Params =_fffc ([]float64 {r ,g ,b });_eedd ._ccg =append (_eedd ._ccg ,&_aaba );return _eedd ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aece *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_fbb :=ContentStreamOperation {};_fbb .Operand ="\u006d";_fbb .Params =_fffc ([]float64 {x ,y });_aece ._ccg =append (_aece ._ccg ,&_fbb );return _aece ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fede *ContentCreator )Add_BT ()*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0042\u0054";_fede ._ccg =append (_fede ._ccg ,&_cga );return _fede ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bbf *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_fadb :=ContentStreamOperation {};_fadb .Operand ="\u0054\u0064";_fadb .Params =_fffc ([]float64 {tx ,ty });_bbf ._ccg =append (_bbf ._ccg ,&_fadb );return _bbf ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cag *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_agd :=ContentStreamOperation {};_agd .Operand ="\u006b";_agd .Params =_fffc ([]float64 {c ,m ,y ,k });_cag ._ccg =append (_cag ._ccg ,&_agd );return _cag ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_aae *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _aae .Add_cm (1,0,0,1,tx ,ty );};func _aac (_dab *ContentStreamInlineImage )(*_bgg .DCTEncoder ,error ){_bdfd :=_bgg .NewDCTEncoder ();_geda :=_f .NewReader (_dab ._fedee );_acf ,_eda :=_c .DecodeConfig (_geda );if _eda !=nil {_aad .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_eda );return nil ,_eda ;};switch _acf .ColorModel {case _eca .RGBAModel :_bdfd .BitsPerComponent =8;_bdfd .ColorComponents =3;case _eca .RGBA64Model :_bdfd .BitsPerComponent =16;_bdfd .ColorComponents =3;case _eca .GrayModel :_bdfd .BitsPerComponent =8;_bdfd .ColorComponents =1;case _eca .Gray16Model :_bdfd .BitsPerComponent =16;_bdfd .ColorComponents =1;case _eca .CMYKModel :_bdfd .BitsPerComponent =8;_bdfd .ColorComponents =4;case _eca .YCbCrModel :_bdfd .BitsPerComponent =8;_bdfd .ColorComponents =3;default:return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_bdfd .Width =_acf .Width ;_bdfd .Height =_acf .Height ;_aad .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_bdfd );return _bdfd ,nil ;};