//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_e "bufio";_ff "bytes";_gf "encoding/hex";_a "errors";_gb "fmt";_ae "github.com/unidoc/unipdf/v3/common";_cf "github.com/unidoc/unipdf/v3/core";_egg "github.com/unidoc/unipdf/v3/internal/imageutil";_be "github.com/unidoc/unipdf/v3/internal/transform";
_ge "github.com/unidoc/unipdf/v3/model";_eg "image/color";_d "image/jpeg";_fd "io";_b "math";_g "regexp";_c "strconv";);func (_ecbc *ContentStreamParser )parseNumber ()(_cf .PdfObject ,error ){return _cf .ParseNumber (_ecbc ._eaf );};

// HasUnclosedQ checks if all the `q` operator is properly closed by `Q` operator.
func (_de *ContentStreamOperations )HasUnclosedQ ()bool {_bc :=0;for _ ,_ad :=range *_de {if _ad .Operand =="\u0071"{_bc ++;}else if _ad .Operand =="\u0051"{_bc --;};};return _bc !=0;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;
Handler HandlerFunc ;};

// Operations returns the list of operations.
func (_caee *ContentCreator )Operations ()*ContentStreamOperations {return &_caee ._dgc };

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_gbe *ContentCreator )Add_W ()*ContentCreator {_ce :=ContentStreamOperation {};_ce .Operand ="\u0057";_gbe ._dgc =append (_gbe ._dgc ,&_ce );return _gbe ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;
);

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ecd *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_cbd :=ContentStreamOperation {};_cbd .Operand ="\u0054\u0063";_cbd .Params =_cfgb ([]float64 {charSpace });_ecd ._dgc =append (_ecd ._dgc ,&_cbd );return _ecd ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gcd *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gcd .CTM .Transform (x ,y );};func (_cffa *ContentStreamProcessor )handleCommand_SC (_beae *ContentStreamOperation ,_cbda *_ge .PdfPageResources )error {_fccb :=_cffa ._ddge .ColorspaceStroking ;
if len (_beae .Params )!=_fccb .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_beae .Params ),_fccb );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_edaa ,_deg :=_fccb .ColorFromPdfObjects (_beae .Params );if _deg !=nil {return _deg ;};_cffa ._ddge .ColorStroking =_edaa ;return nil ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_dgc ContentStreamOperations };

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ge .PdfColorspace ;ColorspaceNonStroking _ge .PdfColorspace ;ColorStroking _ge .PdfColor ;ColorNonStroking _ge .PdfColor ;CTM _be .Matrix ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ge .Image ,encoder _cf .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_cf .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_ffec :=ContentStreamInlineImage {};if img .ColorComponents ==1{_ffec .ColorSpace =_cf .MakeName ("\u0047");
}else if img .ColorComponents ==3{_ffec .ColorSpace =_cf .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_ffec .ColorSpace =_cf .MakeName ("\u0043\u004d\u0059\u004b");}else {_ae .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_ffec .BitsPerComponent =_cf .MakeInteger (img .BitsPerComponent );
_ffec .Width =_cf .MakeInteger (img .Width );_ffec .Height =_cf .MakeInteger (img .Height );_feda ,_cfa :=encoder .EncodeBytes (img .Data );if _cfa !=nil {return nil ,_cfa ;};_ffec ._aff =_feda ;_bbb :=encoder .GetFilterName ();if _bbb !=_cf .StreamEncodingFilterNameRaw {_ffec .Filter =_cf .MakeName (_bbb );
};return &_ffec ,nil ;};func (_fabc *ContentStreamParser )parseString ()(*_cf .PdfObjectString ,error ){_fabc ._eaf .ReadByte ();var _egec []byte ;_edc :=1;for {_abgf ,_eaaa :=_fabc ._eaf .Peek (1);if _eaaa !=nil {return _cf .MakeString (string (_egec )),_eaaa ;
};if _abgf [0]=='\\'{_fabc ._eaf .ReadByte ();_efae ,_gegf :=_fabc ._eaf .ReadByte ();if _gegf !=nil {return _cf .MakeString (string (_egec )),_gegf ;};if _cf .IsOctalDigit (_efae ){_fcb ,_cdec :=_fabc ._eaf .Peek (2);if _cdec !=nil {return _cf .MakeString (string (_egec )),_cdec ;
};var _egcf []byte ;_egcf =append (_egcf ,_efae );for _ ,_dcef :=range _fcb {if _cf .IsOctalDigit (_dcef ){_egcf =append (_egcf ,_dcef );}else {break ;};};_fabc ._eaf .Discard (len (_egcf )-1);_ae .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_egcf );
_fge ,_cdec :=_c .ParseUint (string (_egcf ),8,32);if _cdec !=nil {return _cf .MakeString (string (_egec )),_cdec ;};_egec =append (_egec ,byte (_fge ));continue ;};switch _efae {case 'n':_egec =append (_egec ,'\n');case 'r':_egec =append (_egec ,'\r');
case 't':_egec =append (_egec ,'\t');case 'b':_egec =append (_egec ,'\b');case 'f':_egec =append (_egec ,'\f');case '(':_egec =append (_egec ,'(');case ')':_egec =append (_egec ,')');case '\\':_egec =append (_egec ,'\\');};continue ;}else if _abgf [0]=='('{_edc ++;
}else if _abgf [0]==')'{_edc --;if _edc ==0{_fabc ._eaf .ReadByte ();break ;};};_daea ,_ :=_fabc ._eaf .ReadByte ();_egec =append (_egec ,_daea );};return _cf .MakeString (string (_egec )),nil ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_debe *ContentCreator )Add_BMC (tag _cf .PdfObjectName )*ContentCreator {_acc :=ContentStreamOperation {};_acc .Operand ="\u0042\u004d\u0043";_acc .Params =_edce ([]_cf .PdfObjectName {tag });_debe ._dgc =append (_debe ._dgc ,&_acc );return _debe ;
};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_gfc :=ContentStreamOperation {};_gfc .Operand ="\u0077";_gfc .Params =_cfgb ([]float64 {lineWidth });_gdd ._dgc =append (_gdd ._dgc ,&_gfc );return _gdd ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dab *ContentCreator )Add_gs (dictName _cf .PdfObjectName )*ContentCreator {_eba :=ContentStreamOperation {};_eba .Operand ="\u0067\u0073";_eba .Params =_edce ([]_cf .PdfObjectName {dictName });_dab ._dgc =append (_dab ._dgc ,&_eba );return _dab ;
};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gcgb *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_gfe :=ContentStreamOperation {};_gfe .Operand ="\u0073\u0063\u006e";_gfe .Params =_cfgb (c );_gcgb ._dgc =append (_gcgb ._dgc ,&_gfe );return _gcgb ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bfg *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_aab :=ContentStreamOperation {};_aab .Operand ="\u004a";_aab .Params =_edce ([]_cf .PdfObjectName {_cf .PdfObjectName (lineCapStyle )});_bfg ._dgc =append (_bfg ._dgc ,&_aab );return _bfg ;
};func (_efga *ContentStreamParser )parseArray ()(*_cf .PdfObjectArray ,error ){_eebf :=_cf .MakeArray ();_efga ._eaf .ReadByte ();for {_efga .skipSpaces ();_eae ,_bbaa :=_efga ._eaf .Peek (1);if _bbaa !=nil {return _eebf ,_bbaa ;};if _eae [0]==']'{_efga ._eaf .ReadByte ();
break ;};_dgb ,_ ,_bbaa :=_efga .parseObject ();if _bbaa !=nil {return _eebf ,_bbaa ;};_eebf .Append (_dgb );};return _eebf ,nil ;};func (_bbadc *ContentStreamParser )skipComments ()error {if _ ,_ebfac :=_bbadc .skipSpaces ();_ebfac !=nil {return _ebfac ;
};_bfa :=true ;for {_ccg ,_cdbc :=_bbadc ._eaf .Peek (1);if _cdbc !=nil {_ae .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cdbc .Error ());return _cdbc ;};if _bfa &&_ccg [0]!='%'{return nil ;};_bfa =false ;if (_ccg [0]!='\r')&&(_ccg [0]!='\n'){_bbadc ._eaf .ReadByte ();
}else {break ;};};return _bbadc .skipComments ();};func (_fdcb *ContentStreamProcessor )handleCommand_SCN (_bgad *ContentStreamOperation ,_ffeea *_ge .PdfPageResources )error {_bfab :=_fdcb ._ddge .ColorspaceStroking ;if !_cgc (_bfab ){if len (_bgad .Params )!=_bfab .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgad .Params ),_bfab );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_degf ,_aafg :=_bfab .ColorFromPdfObjects (_bgad .Params );if _aafg !=nil {return _aafg ;};_fdcb ._ddge .ColorStroking =_degf ;return nil ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_dca *ContentStreamOperation ,_ega GraphicsState ,_dba *_ge .PdfPageResources )error ;func (_degge *ContentStreamProcessor )handleCommand_sc (_gee *ContentStreamOperation ,_ggec *_ge .PdfPageResources )error {_bcdb :=_degge ._ddge .ColorspaceNonStroking ;
if !_cgc (_bcdb ){if len (_gee .Params )!=_bcdb .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gee .Params ),_bcdb );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_efeg ,_cbe :=_bcdb .ColorFromPdfObjects (_gee .Params );if _cbe !=nil {return _cbe ;};_degge ._ddge .ColorNonStroking =_efeg ;return nil ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gaf *ContentCreator )Add_s ()*ContentCreator {_aae :=ContentStreamOperation {};_aae .Operand ="\u0073";_gaf ._dgc =append (_gaf ._dgc ,&_aae );return _gaf ;};var _abce =_g .MustCompile ("\u005e\u002f\u007b\u0032\u002c\u007d");

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fbdb *ContentCreator )Add_Q ()*ContentCreator {_ga :=ContentStreamOperation {};_ga .Operand ="\u0051";_fbdb ._dgc =append (_fbdb ._dgc ,&_ga );return _fbdb ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_eaf *_e .Reader };func (_eddc *ContentStreamProcessor )handleCommand_CS (_gec *ContentStreamOperation ,_decd *_ge .PdfPageResources )error {if len (_gec .Params )< 1{_ae .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gec .Params )> 1{_ae .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_bcfe ,_ecbgf :=_gec .Params [0].(*_cf .PdfObjectName );if !_ecbgf {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_gbcf ,_eagb :=_eddc .getColorspace (string (*_bcfe ),_decd );if _eagb !=nil {return _eagb ;};_eddc ._ddge .ColorspaceStroking =_gbcf ;_eee ,_eagb :=_eddc .getInitialColor (_gbcf );
if _eagb !=nil {return _eagb ;};_eddc ._ddge .ColorStroking =_eee ;return nil ;};

// WriteString outputs the object as it is to be written to file.
func (_cdff *ContentStreamInlineImage )WriteString ()string {var _bdbeg _ff .Buffer ;_bdae :="";if _cdff .BitsPerComponent !=nil {_bdae +="\u002f\u0042\u0050C\u0020"+_cdff .BitsPerComponent .WriteString ()+"\u000a";};if _cdff .ColorSpace !=nil {_bdae +="\u002f\u0043\u0053\u0020"+_cdff .ColorSpace .WriteString ()+"\u000a";
};if _cdff .Decode !=nil {_bdae +="\u002f\u0044\u0020"+_cdff .Decode .WriteString ()+"\u000a";};if _cdff .DecodeParms !=nil {_bdae +="\u002f\u0044\u0050\u0020"+_cdff .DecodeParms .WriteString ()+"\u000a";};if _cdff .Filter !=nil {_bdae +="\u002f\u0046\u0020"+_cdff .Filter .WriteString ()+"\u000a";
};if _cdff .Height !=nil {_bdae +="\u002f\u0048\u0020"+_cdff .Height .WriteString ()+"\u000a";};if _cdff .ImageMask !=nil {_bdae +="\u002f\u0049\u004d\u0020"+_cdff .ImageMask .WriteString ()+"\u000a";};if _cdff .Intent !=nil {_bdae +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_cdff .Intent .WriteString ()+"\u000a";
};if _cdff .Interpolate !=nil {_bdae +="\u002f\u0049\u0020"+_cdff .Interpolate .WriteString ()+"\u000a";};if _cdff .Width !=nil {_bdae +="\u002f\u0057\u0020"+_cdff .Width .WriteString ()+"\u000a";};_bdbeg .WriteString (_bdae );_bdbeg .WriteString ("\u0049\u0044\u0020");
_bdbeg .Write (_cdff ._aff );_bdbeg .WriteString ("\u000a\u0045\u0049\u000a");return _bdbeg .String ();};func (_cfbd *ContentStreamProcessor )getInitialColor (_gddf _ge .PdfColorspace )(_ge .PdfColor ,error ){switch _ccbe :=_gddf .(type ){case *_ge .PdfColorspaceDeviceGray :return _ge .NewPdfColorDeviceGray (0.0),nil ;
case *_ge .PdfColorspaceDeviceRGB :return _ge .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ge .PdfColorspaceDeviceCMYK :return _ge .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ge .PdfColorspaceCalGray :return _ge .NewPdfColorCalGray (0.0),nil ;
case *_ge .PdfColorspaceCalRGB :return _ge .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ge .PdfColorspaceLab :_bde :=0.0;_dbgd :=0.0;_ccd :=0.0;if _ccbe .Range [0]> 0{_bde =_ccbe .Range [0];};if _ccbe .Range [2]> 0{_dbgd =_ccbe .Range [2];};return _ge .NewPdfColorLab (_bde ,_dbgd ,_ccd ),nil ;
case *_ge .PdfColorspaceICCBased :if _ccbe .Alternate ==nil {_ae .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_ccbe .N );
if _ccbe .N ==1{_ae .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _cfbd .getInitialColor (_ge .NewPdfColorspaceDeviceGray ());}else if _ccbe .N ==3{_ae .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _cfbd .getInitialColor (_ge .NewPdfColorspaceDeviceRGB ());}else if _ccbe .N ==4{_ae .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _cfbd .getInitialColor (_ge .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_a .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _cfbd .getInitialColor (_ccbe .Alternate );case *_ge .PdfColorspaceSpecialIndexed :if _ccbe .Base ==nil {return nil ,_a .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _cfbd .getInitialColor (_ccbe .Base );case *_ge .PdfColorspaceSpecialSeparation :if _ccbe .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _cfbd .getInitialColor (_ccbe .AlternateSpace );case *_ge .PdfColorspaceDeviceN :if _ccbe .AlternateSpace ==nil {return nil ,_a .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _cfbd .getInitialColor (_ccbe .AlternateSpace );case *_ge .PdfColorspaceSpecialPattern :return _ge .NewPdfColorPattern (),nil ;};_ae .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_gddf );
return nil ,_a .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cfg *ContentCreator )Add_g (gray float64 )*ContentCreator {_eea :=ContentStreamOperation {};_eea .Operand ="\u0067";_eea .Params =_cfgb ([]float64 {gray });_cfg ._dgc =append (_cfg ._dgc ,&_eea );return _cfg ;};func (_becd *ContentStreamProcessor )handleCommand_g (_agba *ContentStreamOperation ,_cadg *_ge .PdfPageResources )error {_fccg :=_ge .NewPdfColorspaceDeviceGray ();
if len (_agba .Params )!=_fccg .GetNumComponents (){_ae .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agba .Params ),_fccg );
return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dgg ,_ceeb :=_fccg .ColorFromPdfObjects (_agba .Params );if _ceeb !=nil {_ae .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fccg ,_agba ,_ceeb );
return _ceeb ;};_becd ._ddge .ColorspaceNonStroking =_fccg ;_becd ._ddge .ColorNonStroking =_dgg ;return nil ;};func (_dafa *ContentStreamProcessor )handleCommand_cm (_gedc *ContentStreamOperation ,_gcgg *_ge .PdfPageResources )error {if len (_gedc .Params )!=6{_ae .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_gedc .Params ));
return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eecd ,_eabc :=_cf .GetNumbersAsFloat (_gedc .Params );if _eabc !=nil {return _eabc ;
};_dbdf :=_be .NewMatrix (_eecd [0],_eecd [1],_eecd [2],_eecd [3],_eecd [4],_eecd [5]);_dafa ._ddge .CTM .Concat (_dbdf );return nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ebc *ContentCreator )Add_b ()*ContentCreator {_adab :=ContentStreamOperation {};_adab .Operand ="\u0062";_ebc ._dgc =append (_ebc ._dgc ,&_adab );return _ebc ;};func _cgc (_degg _ge .PdfColorspace )bool {_ ,_gfgd :=_degg .(*_ge .PdfColorspaceSpecialPattern );
return _gfgd ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_fea *ContentCreator )SetStrokingColor (color _ge .PdfColor )*ContentCreator {switch _cdf :=color .(type ){case *_ge .PdfColorDeviceGray :_fea .Add_G (_cdf .Val ());case *_ge .PdfColorDeviceRGB :_fea .Add_RG (_cdf .R (),_cdf .G (),_cdf .B ());case *_ge .PdfColorDeviceCMYK :_fea .Add_K (_cdf .C (),_cdf .M (),_cdf .Y (),_cdf .K ());
case *_ge .PdfColorPatternType2 :_fea .Add_CS (*_cf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_fea .Add_SCN_pattern (_cdf .PatternName );case *_ge .PdfColorPatternType3 :_fea .Add_CS (*_cf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_fea .Add_SCN_pattern (_cdf .PatternName );default:_ae .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_cdf );
};return _fea ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ebfa *ContentCreator )Add_EMC ()*ContentCreator {_fgbg :=ContentStreamOperation {};_fgbg .Operand ="\u0045\u004d\u0043";_ebfa ._dgc =append (_ebfa ._dgc ,&_fgbg );return _ebfa ;};func (_bgdb *ContentStreamProcessor )handleCommand_cs (_aec *ContentStreamOperation ,_afga *_ge .PdfPageResources )error {if len (_aec .Params )< 1{_ae .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _a .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_aec .Params )> 1{_ae .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _a .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dcf ,_efe :=_aec .Params [0].(*_cf .PdfObjectName );if !_efe {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_afcgb ,_cfdb :=_bgdb .getColorspace (string (*_dcf ),_afga );if _cfdb !=nil {return _cfdb ;};_bgdb ._ddge .ColorspaceNonStroking =_afcgb ;_gcda ,_cfdb :=_bgdb .getInitialColor (_afcgb );
if _cfdb !=nil {return _cfdb ;};_bgdb ._ddge .ColorNonStroking =_gcda ;return nil ;};

// Scale applies x-y scaling to the transformation matrix.
func (_fee *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fee .Add_cm (sx ,0,0,sy ,0,0);};func _aee (_cgcf []int64 )[]_cf .PdfObject {var _ceca []_cf .PdfObject ;for _ ,_ebfacg :=range _cgcf {_ceca =append (_ceca ,_cf .MakeInteger (_ebfacg ));
};return _ceca ;};func (_ffe *ContentStreamOperations )isWrapped ()bool {if len (*_ffe )< 2{return false ;};_fe :=0;for _ ,_af :=range *_ffe {if _af .Operand =="\u0071"{_fe ++;}else if _af .Operand =="\u0051"{_fe --;}else {if _fe < 1{return false ;};};
};return _fe ==0;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_bec *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_bec )==0{return _bec ;};if _bec .isWrapped (){return _bec ;};*_bec =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_bec ...);_ba :=0;for _ ,_ca :=range *_bec {if _ca .Operand =="\u0071"{_ba ++;
}else if _ca .Operand =="\u0051"{_ba --;};};for _ba > 0{*_bec =append (*_bec ,&ContentStreamOperation {Operand :"\u0051"});_ba --;};return _bec ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cdce *ContentCreator )Add_Tstar ()*ContentCreator {_eec :=ContentStreamOperation {};_eec .Operand ="\u0054\u002a";_cdce ._dgc =append (_cdce ._dgc ,&_eec );return _cdce ;};func (_eecg *ContentStreamProcessor )handleCommand_RG (_faga *ContentStreamOperation ,_abeb *_ge .PdfPageResources )error {_gdgg :=_ge .NewPdfColorspaceDeviceRGB ();
if len (_faga .Params )!=_gdgg .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_faga .Params ),_gdgg );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cecg ,_cddab :=_gdgg .ColorFromPdfObjects (_faga .Params );if _cddab !=nil {return _cddab ;};_eecg ._ddge .ColorspaceStroking =_gdgg ;_eecg ._ddge .ColorStroking =_cecg ;return nil ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_geg *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_gbf :=ContentStreamOperation {};_gbf .Operand ="\u0054\u0064";_gbf .Params =_cfgb ([]float64 {tx ,ty });_geg ._dgc =append (_geg ._dgc ,&_gbf );return _geg ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfe *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_begd :=ContentStreamOperation {};_begd .Operand ="\u0052\u0047";_begd .Params =_cfgb ([]float64 {r ,g ,b });_bfe ._dgc =append (_bfe ._dgc ,&_begd );return _bfe ;};func _bcd (_cdcc *ContentStreamInlineImage )(_cf .StreamEncoder ,error ){if _cdcc .Filter ==nil {return _cf .NewRawEncoder (),nil ;
};_gbeg ,_cgf :=_cdcc .Filter .(*_cf .PdfObjectName );if !_cgf {_fdg ,_gga :=_cdcc .Filter .(*_cf .PdfObjectArray );if !_gga {return nil ,_gb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _fdg .Len ()==0{return _cf .NewRawEncoder (),nil ;};if _fdg .Len ()!=1{_egbc ,_afcg :=_gfa (_cdcc );if _afcg !=nil {_ae .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_afcg );
return nil ,_afcg ;};_ae .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_egbc );return _egbc ,nil ;};_ffg :=_fdg .Get (0);_gbeg ,_gga =_ffg .(*_cf .PdfObjectName );if !_gga {return nil ,_gb .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_gbeg {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _cf .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _cf .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bgf (_cdcc );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _ffc (_cdcc ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _gage (_cdcc ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _cf .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _cf .NewRunLengthEncoder (),nil ;
default:_ae .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_gbeg );
return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_adf *ContentCreator )Add_scn_pattern (name _cf .PdfObjectName ,c ...float64 )*ContentCreator {_fbaff :=ContentStreamOperation {};_fbaff .Operand ="\u0073\u0063\u006e";_fbaff .Params =_cfgb (c );_fbaff .Params =append (_fbaff .Params ,_cf .MakeName (string (name )));
_adf ._dgc =append (_adf ._dgc ,&_fbaff );return _adf ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cda *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_bbd :=ContentStreamOperation {};_bbd .Operand ="\u006a";_bbd .Params =_edce ([]_cf .PdfObjectName {_cf .PdfObjectName (lineJoinStyle )});_cda ._dgc =append (_cda ._dgc ,&_bbd );
return _cda ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fdbb *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_bd :=ContentStreamOperation {};_bd .Operand ="\u0076";_bd .Params =_cfgb ([]float64 {x2 ,y2 ,x3 ,y3 });_fdbb ._dgc =append (_fdbb ._dgc ,&_bd );return _fdbb ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eaa *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_ceb :=ContentStreamOperation {};_ceb .Operand ="\u0072\u0067";_ceb .Params =_cfgb ([]float64 {r ,g ,b });_eaa ._dgc =append (_eaa ._dgc ,&_ceb );return _eaa ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_egff *ContentCreator )Add_W_starred ()*ContentCreator {_gdg :=ContentStreamOperation {};_gdg .Operand ="\u0057\u002a";_egff ._dgc =append (_egff ._dgc ,&_gdg );return _egff ;};func _deaa (_fbfa []_cf .PdfObjectString )[]_cf .PdfObject {var _geed []_cf .PdfObject ;
for _ ,_ebfe :=range _fbfa {_geed =append (_geed ,_cf .MakeString (_ebfe .Str ()));};return _geed ;};func (_afbbb *ContentStreamProcessor )handleCommand_k (_ffdc *ContentStreamOperation ,_bfgd *_ge .PdfPageResources )error {_bdgae :=_ge .NewPdfColorspaceDeviceCMYK ();
if len (_ffdc .Params )!=_bdgae .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ffdc .Params ),_bdgae );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gfca ,_ffgb :=_bdgae .ColorFromPdfObjects (_ffdc .Params );if _ffgb !=nil {return _ffgb ;};_afbbb ._ddge .ColorspaceNonStroking =_bdgae ;_afbbb ._ddge .ColorNonStroking =_gfca ;return nil ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ec *ContentCreator )Add_SCN_pattern (name _cf .PdfObjectName ,c ...float64 )*ContentCreator {_fcc :=ContentStreamOperation {};_fcc .Operand ="\u0053\u0043\u004e";_fcc .Params =_cfgb (c );_fcc .Params =append (_fcc .Params ,_cf .MakeName (string (name )));
_ec ._dgc =append (_ec ._dgc ,&_fcc );return _ec ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_cf .PdfObject ;Operand string ;};func (_fecg *ContentStreamProcessor )handleCommand_G (_gdga *ContentStreamOperation ,_aef *_ge .PdfPageResources )error {_cgac :=_ge .NewPdfColorspaceDeviceGray ();if len (_gdga .Params )!=_cgac .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdga .Params ),_cgac );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bbga ,_eabb :=_cgac .ColorFromPdfObjects (_gdga .Params );if _eabb !=nil {return _eabb ;};_fecg ._ddge .ColorspaceStroking =_cgac ;_fecg ._ddge .ColorStroking =_bbga ;return nil ;};

// String is same as Bytes() except returns as a string for convenience.
func (_bab *ContentCreator )String ()string {return string (_bab ._dgc .Bytes ())};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_agb *ContentCreator )Add_Tf (fontName _cf .PdfObjectName ,fontSize float64 )*ContentCreator {_acb :=ContentStreamOperation {};_acb .Operand ="\u0054\u0066";_acb .Params =_edce ([]_cf .PdfObjectName {fontName });_acb .Params =append (_acb .Params ,_cfgb ([]float64 {fontSize })...);
_agb ._dgc =append (_agb ._dgc ,&_acb );return _agb ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_bf *ContentStreamOperations )Bytes ()[]byte {var _aa _ff .Buffer ;for _ ,_cc :=range *_bf {if _cc ==nil {continue ;};if _cc .Operand =="\u0042\u0049"{_aa .WriteString (_cc .Operand +"\u000a");_aa .WriteString (_cc .Params [0].WriteString ());}else {for _ ,_bg :=range _cc .Params {_aa .WriteString (_bg .WriteString ());
_aa .WriteString ("\u0020");};_aa .WriteString (_cc .Operand +"\u000a");};};return _aa .Bytes ();};

// Parse parses all commands in content stream, returning a list of operation data.
func (_dbc *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_cdccf :=ContentStreamOperations {};for {_fdgf :=ContentStreamOperation {};for {_gdgb ,_bbadd ,_fecf :=_dbc .parseObject ();if _fecf !=nil {if _fecf ==_fd .EOF {return &_cdccf ,nil ;
};return &_cdccf ,_fecf ;};if _bbadd {_fdgf .Operand ,_ =_cf .GetStringVal (_gdgb );_cdccf =append (_cdccf ,&_fdgf );break ;}else {_fdgf .Params =append (_fdgf .Params ,_gdgb );};};if _fdgf .Operand =="\u0042\u0049"{_aea ,_eff :=_dbc .ParseInlineImage ();
if _eff !=nil {return &_cdccf ,_eff ;};_fdgf .Params =append (_fdgf .Params ,_aea );};};};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_acbf GraphicStateStack ;_aafae []*ContentStreamOperation ;_ddge GraphicsState ;_ebdg []handlerEntry ;_afe int ;};func _bgf (_deba *ContentStreamInlineImage )(*_cf .DCTEncoder ,error ){_dbd :=_cf .NewDCTEncoder ();_eda :=_ff .NewReader (_deba ._aff );
_bfcf ,_fae :=_d .DecodeConfig (_eda );if _fae !=nil {_ae .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_fae );return nil ,_fae ;};switch _bfcf .ColorModel {case _eg .RGBAModel :_dbd .BitsPerComponent =8;
_dbd .ColorComponents =3;case _eg .RGBA64Model :_dbd .BitsPerComponent =16;_dbd .ColorComponents =3;case _eg .GrayModel :_dbd .BitsPerComponent =8;_dbd .ColorComponents =1;case _eg .Gray16Model :_dbd .BitsPerComponent =16;_dbd .ColorComponents =1;case _eg .CMYKModel :_dbd .BitsPerComponent =8;
_dbd .ColorComponents =4;case _eg .YCbCrModel :_dbd .BitsPerComponent =8;_dbd .ColorComponents =3;default:return nil ,_a .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_dbd .Width =_bfcf .Width ;_dbd .Height =_bfcf .Height ;_ae .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_dbd );return _dbd ,nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cb *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_gagf :=ContentStreamOperation {};_gagf .Operand ="\u0072\u0065";_gagf .Params =_cfgb ([]float64 {x ,y ,width ,height });_cb ._dgc =append (_cb ._dgc ,&_gagf );return _cb ;
};

// GetColorSpace returns the colorspace of the inline image.
func (_fbab *ContentStreamInlineImage )GetColorSpace (resources *_ge .PdfPageResources )(_ge .PdfColorspace ,error ){if _fbab .ColorSpace ==nil {_ae .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _ge .NewPdfColorspaceDeviceGray (),nil ;};if _adca ,_fgbf :=_fbab .ColorSpace .(*_cf .PdfObjectArray );_fgbf {return _cfea (_adca );};_bga ,_eca :=_fbab .ColorSpace .(*_cf .PdfObjectName );if !_eca {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_fbab .ColorSpace ,_fbab .ColorSpace );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_bga =="\u0047"||*_bga =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ge .NewPdfColorspaceDeviceGray (),nil ;
}else if *_bga =="\u0052\u0047\u0042"||*_bga =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ge .NewPdfColorspaceDeviceRGB (),nil ;}else if *_bga =="\u0043\u004d\u0059\u004b"||*_bga =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ge .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_bga =="\u0049"||*_bga =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_a .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_ae .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_bga );
return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_aaed ,_aed :=resources .GetColorspaceByName (*_bga );if !_aed {_ae .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_bga );
return nil ,_a .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _aaed ,nil ;};};

// String returns `ops.Bytes()` as a string.
func (_fb *ContentStreamOperations )String ()string {return string (_fb .Bytes ())};func _cad (_fga string )bool {_ ,_gfg :=_cag [_fga ];return _gfg };

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_aag :=ContentStreamProcessor {};_aag ._acbf =GraphicStateStack {};_aad :=GraphicsState {};_aag ._ddge =_aad ;_aag ._ebdg =[]handlerEntry {};_aag ._afe =0;_aag ._aafae =ops ;
return &_aag ;};func (_dafe *ContentStreamInlineImage )String ()string {_gbc :=_gb .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_dafe ._aff ));if _dafe .BitsPerComponent !=nil {_gbc +="\u002d\u0020\u0042\u0050\u0043\u0020"+_dafe .BitsPerComponent .WriteString ()+"\u000a";
};if _dafe .ColorSpace !=nil {_gbc +="\u002d\u0020\u0043S\u0020"+_dafe .ColorSpace .WriteString ()+"\u000a";};if _dafe .Decode !=nil {_gbc +="\u002d\u0020\u0044\u0020"+_dafe .Decode .WriteString ()+"\u000a";};if _dafe .DecodeParms !=nil {_gbc +="\u002d\u0020\u0044P\u0020"+_dafe .DecodeParms .WriteString ()+"\u000a";
};if _dafe .Filter !=nil {_gbc +="\u002d\u0020\u0046\u0020"+_dafe .Filter .WriteString ()+"\u000a";};if _dafe .Height !=nil {_gbc +="\u002d\u0020\u0048\u0020"+_dafe .Height .WriteString ()+"\u000a";};if _dafe .ImageMask !=nil {_gbc +="\u002d\u0020\u0049M\u0020"+_dafe .ImageMask .WriteString ()+"\u000a";
};if _dafe .Intent !=nil {_gbc +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_dafe .Intent .WriteString ()+"\u000a";};if _dafe .Interpolate !=nil {_gbc +="\u002d\u0020\u0049\u0020"+_dafe .Interpolate .WriteString ()+"\u000a";};if _dafe .Width !=nil {_gbc +="\u002d\u0020\u0057\u0020"+_dafe .Width .WriteString ()+"\u000a";
};return _gbc ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gdb *ContentCreator )Add_Tr (render int64 )*ContentCreator {_fbe :=ContentStreamOperation {};_fbe .Operand ="\u0054\u0072";_fbe .Params =_aee ([]int64 {render });_gdb ._dgc =append (_gdb ._dgc ,&_fbe );return _gdb ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_fbf *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _fbf .Add_cm (1,0,0,1,tx ,ty );};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_acf *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_gde :=ContentStreamInlineImage {};for {_acf .skipSpaces ();_cdg ,_adbe ,_eeb :=_acf .parseObject ();if _eeb !=nil {return nil ,_eeb ;};if !_adbe {_bbg ,_bbdb :=_cf .GetName (_cdg );
if !_bbdb {_ae .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_cdg );
return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_cdg );
};_cbfb ,_cfcf ,_addf :=_acf .parseObject ();if _addf !=nil {return nil ,_addf ;};if _cfcf {return nil ,_gb .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_bbg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_gde .BitsPerComponent =_cbfb ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_gde .ColorSpace =_cbfb ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_gde .Decode =_cbfb ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_gde .DecodeParms =_cbfb ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_gde .Filter =_cbfb ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_gde .Height =_cbfb ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_gde .ImageMask =_cbfb ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_gde .Intent =_cbfb ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_gde .Interpolate =_cbfb ;
case "\u0057","\u0057\u0069\u0064t\u0068":_gde .Width =_cbfb ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ae .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_bbg );
default:return nil ,_gb .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_bbg );};};if _adbe {_fbde ,_fbaa :=_cdg .(*_cf .PdfObjectString );
if !_fbaa {return nil ,_gb .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _fbde .Str ()=="\u0045\u0049"{_ae .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_gde ,nil ;}else if _fbde .Str ()=="\u0049\u0044"{_ae .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_ace ,_gca :=_acf ._eaf .Peek (1);if _gca !=nil {return nil ,_gca ;};if _cf .IsWhiteSpace (_ace [0]){_acf ._eaf .Discard (1);};_gde ._aff =[]byte {};_cfcb :=0;var _cdb []byte ;for {_cde ,_egbg :=_acf ._eaf .ReadByte ();if _egbg !=nil {_ae .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_egbg ;};if _cfcb ==0{if _cf .IsWhiteSpace (_cde ){_cdb =[]byte {};_cdb =append (_cdb ,_cde );_cfcb =1;}else if _cde =='E'{_cdb =append (_cdb ,_cde );_cfcb =2;}else {_gde ._aff =append (_gde ._aff ,_cde );};}else if _cfcb ==1{_cdb =append (_cdb ,_cde );
if _cde =='E'{_cfcb =2;}else {_gde ._aff =append (_gde ._aff ,_cdb ...);_cdb =[]byte {};if _cf .IsWhiteSpace (_cde ){_cfcb =1;}else {_cfcb =0;};};}else if _cfcb ==2{_cdb =append (_cdb ,_cde );if _cde =='I'{_cfcb =3;}else {_gde ._aff =append (_gde ._aff ,_cdb ...);
_cdb =[]byte {};_cfcb =0;};}else if _cfcb ==3{_cdb =append (_cdb ,_cde );if _cf .IsWhiteSpace (_cde ){_afd ,_adfd :=_acf ._eaf .Peek (20);if _adfd !=nil &&_adfd !=_fd .EOF {return nil ,_adfd ;};_dag :=NewContentStreamParser (string (_afd ));_egeg :=true ;
for _fcd :=0;_fcd < 3;_fcd ++{_bbdf ,_egef ,_dbe :=_dag .parseObject ();if _dbe !=nil {if _dbe ==_fd .EOF {break ;};_egeg =false ;continue ;};if _egef &&!_cad (_bbdf .String ()){_egeg =false ;break ;};};if _egeg {if len (_gde ._aff )> 100{_ae .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_gde ._aff ),_gde ._aff [:100]);
}else {_ae .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_gde ._aff ),_gde ._aff );};return &_gde ,nil ;};};_gde ._aff =append (_gde ._aff ,_cdb ...);_cdb =[]byte {};
_cfcb =0;};};};};};};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eab *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_da :=ContentStreamOperation {};_da .Operand ="\u0063\u006d";_da .Params =_cfgb ([]float64 {a ,b ,c ,d ,e ,f });_eab ._dgc =append (_eab ._dgc ,&_da );return _eab ;};func (_dbgf *ContentStreamParser )parseOperand ()(*_cf .PdfObjectString ,error ){var _fcde []byte ;
for {_eag ,_ceba :=_dbgf ._eaf .Peek (1);if _ceba !=nil {return _cf .MakeString (string (_fcde )),_ceba ;};if _cf .IsDelimiter (_eag [0]){break ;};if _cf .IsWhiteSpace (_eag [0]){break ;};_affd ,_ :=_dbgf ._eaf .ReadByte ();_fcde =append (_fcde ,_affd );
};return _cf .MakeString (string (_fcde )),nil ;};func (_cdca *ContentStreamParser )parseBool ()(_cf .PdfObjectBool ,error ){_dcc ,_aabb :=_cdca ._eaf .Peek (4);if _aabb !=nil {return _cf .PdfObjectBool (false ),_aabb ;};if (len (_dcc )>=4)&&(string (_dcc [:4])=="\u0074\u0072\u0075\u0065"){_cdca ._eaf .Discard (4);
return _cf .PdfObjectBool (true ),nil ;};_dcc ,_aabb =_cdca ._eaf .Peek (5);if _aabb !=nil {return _cf .PdfObjectBool (false ),_aabb ;};if (len (_dcc )>=5)&&(string (_dcc [:5])=="\u0066\u0061\u006cs\u0065"){_cdca ._eaf .Discard (5);return _cf .PdfObjectBool (false ),nil ;
};return _cf .PdfObjectBool (false ),_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_ac :=&ContentCreator {};_ac ._dgc =ContentStreamOperations {};return _ac ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cfb *ContentCreator )Add_n ()*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u006e";_cfb ._dgc =append (_cfb ._dgc ,&_egb );return _cfb ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afc *ContentCreator )Add_G (gray float64 )*ContentCreator {_fbbd :=ContentStreamOperation {};_fbbd .Operand ="\u0047";_fbbd .Params =_cfgb ([]float64 {gray });_afc ._dgc =append (_afc ._dgc ,&_fbbd );return _afc ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fbaf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_cabg :=ContentStreamOperation {};_cabg .Operand ="\u0053\u0043\u004e";_cabg .Params =_cfgb (c );_fbaf ._dgc =append (_fbaf ._dgc ,&_cabg );return _fbaf ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gagb *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u0063";_eed .Params =_cfgb ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_gagb ._dgc =append (_gagb ._dgc ,&_eed );return _gagb ;
};func (_ecdf *ContentStreamProcessor )handleCommand_scn (_bdga *ContentStreamOperation ,_defe *_ge .PdfPageResources )error {_agcc :=_ecdf ._ddge .ColorspaceNonStroking ;if !_cgc (_agcc ){if len (_bdga .Params )!=_agcc .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bdga .Params ),_agcc );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_bdfa ,_ece :=_agcc .ColorFromPdfObjects (_bdga .Params );if _ece !=nil {_ae .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_bdga .Params ,_agcc );
return _ece ;};_ecdf ._ddge .ColorNonStroking =_bdfa ;return nil ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_cfe *ContentCreator )Add_Do (name _cf .PdfObjectName )*ContentCreator {_fgb :=ContentStreamOperation {};_fgb .Operand ="\u0044\u006f";_fgb .Params =_edce ([]_cf .PdfObjectName {name });_cfe ._dgc =append (_cfe ._dgc ,&_fgb );return _cfe ;};

// AddOperand adds a specified operand.
func (_feg *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_feg ._dgc =append (_feg ._dgc ,&op );return _feg ;};func (_ged *ContentStreamProcessor )getColorspace (_fbec string ,_afef *_ge .PdfPageResources )(_ge .PdfColorspace ,error ){switch _fbec {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ge .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ge .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ge .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ge .NewPdfColorspaceSpecialPattern (),nil ;
};_facf ,_cbc :=_afef .GetColorspaceByName (_cf .PdfObjectName (_fbec ));if _cbc {return _facf ,nil ;};switch _fbec {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ge .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ge .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _ge .NewPdfColorspaceLab (),nil ;};_ae .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_fbec );
return nil ,_gb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_fbec );};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fac *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_gcb :=ContentStreamOperation {};_gcb .Operand ="\u0054\u0077";_gcb .Params =_cfgb ([]float64 {wordSpace });_fac ._dgc =append (_fac ._dgc ,&_gcb );return _fac ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fc *ContentCreator )Add_S ()*ContentCreator {_bbc :=ContentStreamOperation {};_bbc .Operand ="\u0053";_fc ._dgc =append (_fc ._dgc ,&_bbc );return _fc ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_bff *ContentCreator )Add_sh (name _cf .PdfObjectName )*ContentCreator {_eaac :=ContentStreamOperation {};_eaac .Operand ="\u0073\u0068";_eaac .Params =_edce ([]_cf .PdfObjectName {name });_bff ._dgc =append (_bff ._dgc ,&_eaac );return _bff ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_deb *ContentCreator )Add_TL (leading float64 )*ContentCreator {_dcdd :=ContentStreamOperation {};_dcdd .Operand ="\u0054\u004c";_dcdd .Params =_cfgb ([]float64 {leading });_deb ._dgc =append (_deb ._dgc ,&_dcdd );return _deb ;};func (_ffea *ContentStreamProcessor )handleCommand_rg (_ffbg *ContentStreamOperation ,_cded *_ge .PdfPageResources )error {_gfcf :=_ge .NewPdfColorspaceDeviceRGB ();
if len (_ffbg .Params )!=_gfcf .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ffbg .Params ),_gfcf );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bdd ,_bdgf :=_gfcf .ColorFromPdfObjects (_ffbg .Params );if _bdgf !=nil {return _bdgf ;};_ffea ._ddge .ColorspaceNonStroking =_gfcf ;_ffea ._ddge .ColorNonStroking =_bdd ;return nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cba *ContentCreator )Add_TJ (vals ..._cf .PdfObject )*ContentCreator {_agef :=ContentStreamOperation {};_agef .Operand ="\u0054\u004a";_agef .Params =[]_cf .PdfObject {_cf .MakeArray (vals ...)};_cba ._dgc =append (_cba ._dgc ,&_agef );return _cba ;
};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_age *ContentCreator )Add_ET ()*ContentCreator {_bbad :=ContentStreamOperation {};_bbad .Operand ="\u0045\u0054";_age ._dgc =append (_age ._dgc ,&_bbad );return _age ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eb *ContentCreator )Add_q ()*ContentCreator {_acd :=ContentStreamOperation {};_acd .Operand ="\u0071";_eb ._dgc =append (_eb ._dgc ,&_acd );return _eb ;};func (_eaaaa *ContentStreamParser )parseHexString ()(*_cf .PdfObjectString ,error ){_eaaaa ._eaf .ReadByte ();
_afde :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _gcf []byte ;for {_eaaaa .skipSpaces ();_dbec ,_babf :=_eaaaa ._eaf .Peek (1);if _babf !=nil {return _cf .MakeString (""),_babf ;
};if _dbec [0]=='>'{_eaaaa ._eaf .ReadByte ();break ;};_dbbd ,_ :=_eaaaa ._eaf .ReadByte ();if _ff .IndexByte (_afde ,_dbbd )>=0{_gcf =append (_gcf ,_dbbd );};};if len (_gcf )%2==1{_gcf =append (_gcf ,'0');};_dagg ,_ :=_gf .DecodeString (string (_gcf ));
return _cf .MakeHexString (string (_dagg )),nil ;};

// GetEncoder returns the encoder of the inline image.
func (_fec *ContentStreamInlineImage )GetEncoder ()(_cf .StreamEncoder ,error ){return _bcd (_fec )};func (_gge *ContentStreamParser )skipSpaces ()(int ,error ){_acdb :=0;for {_cgb ,_fbfe :=_gge ._eaf .Peek (1);if _fbfe !=nil {return 0,_fbfe ;};if _cf .IsWhiteSpace (_cgb [0]){_gge ._eaf .ReadByte ();
_acdb ++;}else {break ;};};return _acdb ,nil ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_dae :=ContentStreamParser {};contentStr =string (_abce .ReplaceAll ([]byte (contentStr ),[]byte ("\u002f")));_ede :=_ff .NewBufferString (contentStr +"\u000a");_dae ._eaf =_e .NewReader (_ede );
return &_dae ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_add *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_efb :=_b .Cos (angle *_b .Pi /180.0);_gag :=_b .Sin (angle *_b .Pi /180.0);_aca :=-_b .Sin (angle *_b .Pi /180.0);_dc :=_b .Cos (angle *_b .Pi /180.0);return _add .Add_cm (_efb ,_gag ,_aca ,_dc ,0,0);
};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cea *ContentCreator )Add_cs (name _cf .PdfObjectName )*ContentCreator {_dcda :=ContentStreamOperation {};_dcda .Operand ="\u0063\u0073";_dcda .Params =_edce ([]_cf .PdfObjectName {name });_cea ._dgc =append (_cea ._dgc ,&_dcda );return _cea ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_ccaa *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_dec :=handlerEntry {};_dec .Condition =condition ;_dec .Operand =operand ;_dec .Handler =handler ;_ccaa ._ebdg =append (_ccaa ._ebdg ,_dec );
};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_abe *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u006d";_feb .Params =_cfgb ([]float64 {x ,y });_abe ._dgc =append (_abe ._dgc ,&_feb );return _abe ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_egc *ContentCreator )Add_b_starred ()*ContentCreator {_gcg :=ContentStreamOperation {};_gcg .Operand ="\u0062\u002a";_egc ._dgc =append (_egc ._dgc ,&_gcg );return _egc ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_ddbb HandlerConditionEnum )All ()bool {return _ddbb ==HandlerConditionEnumAllOperands };func (_gfba *ContentStreamParser )parseObject ()(_agde _cf .PdfObject ,_egd bool ,_bfd error ){_gfba .skipSpaces ();for {_bffg ,_cca :=_gfba ._eaf .Peek (2);
if _cca !=nil {return nil ,false ,_cca ;};_ae .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bffg ));if _bffg [0]=='%'{_gfba .skipComments ();continue ;}else if _bffg [0]=='/'{_ceg ,_agge :=_gfba .parseName ();
_ae .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_ceg );return &_ceg ,false ,_agge ;}else if _bffg [0]=='('{_ae .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_cgdb ,_fbef :=_gfba .parseString ();return _cgdb ,false ,_fbef ;
}else if _bffg [0]=='<'&&_bffg [1]!='<'{_ae .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_ccgf ,_abcc :=_gfba .parseHexString ();return _ccgf ,false ,_abcc ;}else if _bffg [0]=='['{_ae .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");
_cega ,_fgcf :=_gfba .parseArray ();return _cega ,false ,_fgcf ;}else if _cf .IsFloatDigit (_bffg [0])||(_bffg [0]=='-'&&_cf .IsFloatDigit (_bffg [1]))||(_bffg [0]=='+'&&_cf .IsFloatDigit (_bffg [1])){_ae .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_deee ,_ggf :=_gfba .parseNumber ();return _deee ,false ,_ggf ;}else if _bffg [0]=='<'&&_bffg [1]=='<'{_afdf ,_fcba :=_gfba .parseDict ();return _afdf ,false ,_fcba ;}else {_ae .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_bffg ,_ =_gfba ._eaf .Peek (5);_eac :=string (_bffg );_ae .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_eac );if (len (_eac )> 3)&&(_eac [:4]=="\u006e\u0075\u006c\u006c"){_fgag ,_ccad :=_gfba .parseNull ();
return &_fgag ,false ,_ccad ;}else if (len (_eac )> 4)&&(_eac [:5]=="\u0066\u0061\u006cs\u0065"){_cdd ,_addg :=_gfba .parseBool ();return &_cdd ,false ,_addg ;}else if (len (_eac )> 3)&&(_eac [:4]=="\u0074\u0072\u0075\u0065"){_edee ,_cdda :=_gfba .parseBool ();
return &_edee ,false ,_cdda ;};_cec ,_ddfa :=_gfba .parseOperand ();if _ddfa !=nil {return _cec ,false ,_ddfa ;};if len (_cec .String ())< 1{return _cec ,false ,ErrInvalidOperand ;};return _cec ,true ,nil ;};};};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fab *ContentCreator )Add_CS (name _cf .PdfObjectName )*ContentCreator {_cdc :=ContentStreamOperation {};_cdc .Operand ="\u0043\u0053";_cdc .Params =_edce ([]_cf .PdfObjectName {name });_fab ._dgc =append (_fab ._dgc ,&_cdc );return _fab ;};func (_aafa *ContentStreamParser )parseDict ()(*_cf .PdfObjectDictionary ,error ){_ae .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_fffa :=_cf .MakeDict ();_caaf ,_ :=_aafa ._eaf .ReadByte ();if _caaf !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_caaf ,_ =_aafa ._eaf .ReadByte ();if _caaf !='<'{return nil ,_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_aafa .skipSpaces ();_cdcf ,_fde :=_aafa ._eaf .Peek (2);if _fde !=nil {return nil ,_fde ;};_ae .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_cdcf ),string (_cdcf ));if (_cdcf [0]=='>')&&(_cdcf [1]=='>'){_ae .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_aafa ._eaf .ReadByte ();_aafa ._eaf .ReadByte ();break ;};_ae .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_agbb ,_fde :=_aafa .parseName ();_ae .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_agbb );
if _fde !=nil {_ae .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fde );return nil ,_fde ;};if len (_agbb )> 4&&_agbb [len (_agbb )-4:]=="\u006e\u0075\u006c\u006c"{_aeb :=_agbb [0:len (_agbb )-4];
_ae .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_agbb );_ae .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_aeb );
_aafa .skipSpaces ();_gdag ,_ :=_aafa ._eaf .Peek (1);if _gdag [0]=='/'{_fffa .Set (_aeb ,_cf .MakeNull ());continue ;};};_aafa .skipSpaces ();_eefc ,_ ,_fde :=_aafa .parseObject ();if _fde !=nil {return nil ,_fde ;};_fffa .Set (_agbb ,_eefc );_ae .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_agbb ,_eefc .String ());
};return _fffa ,nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aac *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_dbg :=ContentStreamOperation {};_dbg .Operand ="\u006c";_dbg .Params =_cfgb ([]float64 {x ,y });_aac ._dgc =append (_aac ._dgc ,&_dbg );return _aac ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abg *ContentCreator )Add_i (flatness float64 )*ContentCreator {_gbg :=ContentStreamOperation {};_gbg .Operand ="\u0069";_gbg .Params =_cfgb ([]float64 {flatness });_abg ._dgc =append (_abg ._dgc ,&_gbg );return _abg ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_beg *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_afb :=ContentStreamOperation {};_afb .Operand ="\u0053\u0043";_afb .Params =_cfgb (c );_beg ._dgc =append (_beg ._dgc ,&_afb );return _beg ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dcg *ContentCreator )Add_h ()*ContentCreator {_dcd :=ContentStreamOperation {};_dcd .Operand ="\u0068";_dcg ._dgc =append (_dcg ._dgc ,&_dcd );return _dcg ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_becf *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u0079";_fa .Params =_cfgb ([]float64 {x1 ,y1 ,x3 ,y3 });_becf ._dgc =append (_becf ._dgc ,&_fa );return _becf ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ebf *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_cgd :=ContentStreamOperation {};_cgd .Operand ="\u0054\u007a";_cgd .Params =_cfgb ([]float64 {scale });_ebf ._dgc =append (_ebf ._dgc ,&_cgd );return _ebf ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gda *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_gc :=ContentStreamOperation {};_gc .Operand ="\u004d";_gc .Params =_cfgb ([]float64 {miterlimit });_gda ._dgc =append (_gda ._dgc ,&_gc );return _gda ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_fdc *ContentCreator )Bytes ()[]byte {return _fdc ._dgc .Bytes ()};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_aeab HandlerConditionEnum )Operand ()bool {return _aeab ==HandlerConditionEnumOperand };

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gcc *ContentCreator )Add_ri (intent _cf .PdfObjectName )*ContentCreator {_fbb :=ContentStreamOperation {};_fbb .Operand ="\u0072\u0069";_fbb .Params =_edce ([]_cf .PdfObjectName {intent });_gcc ._dgc =append (_gcc ._dgc ,&_fbb );return _gcc ;};func (_fcae *ContentStreamProcessor )handleCommand_K (_efdgc *ContentStreamOperation ,_gaa *_ge .PdfPageResources )error {_ebac :=_ge .NewPdfColorspaceDeviceCMYK ();
if len (_efdgc .Params )!=_ebac .GetNumComponents (){_ae .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ae .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efdgc .Params ),_ebac );return _a .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bgfec ,_daef :=_ebac .ColorFromPdfObjects (_efdgc .Params );if _daef !=nil {return _daef ;};_fcae ._ddge .ColorspaceStroking =_ebac ;_fcae ._ddge .ColorStroking =_bgfec ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_ddd *ContentStreamInlineImage )ToImage (resources *_ge .PdfPageResources )(*_ge .Image ,error ){_dde ,_afbb :=_ddd .toImageBase (resources );if _afbb !=nil {return nil ,_afbb ;};_cfc ,_afbb :=_bcd (_ddd );if _afbb !=nil {return nil ,_afbb ;};_ddb ,_ffee :=_cf .GetDict (_ddd .DecodeParms );
if _ffee {_cfc .UpdateParams (_ddb );};_ae .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_cfc ,_cfc );_ae .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_ddd );
_fdd ,_afbb :=_cfc .DecodeBytes (_ddd ._aff );if _afbb !=nil {return nil ,_afbb ;};_cga :=&_ge .Image {Width :int64 (_dde .Width ),Height :int64 (_dde .Height ),BitsPerComponent :int64 (_dde .BitsPerComponent ),ColorComponents :_dde .ColorComponents ,Data :_fdd };
if len (_dde .Decode )> 0{for _aedd :=0;_aedd < len (_dde .Decode );_aedd ++{_dde .Decode [_aedd ]*=float64 ((int (1)<<uint (_dde .BitsPerComponent ))-1);};_cga .SetDecode (_dde .Decode );};return _cga ,nil ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_beb *ContentStreamInlineImage )IsMask ()(bool ,error ){if _beb .ImageMask !=nil {_efgb ,_cff :=_beb .ImageMask .(*_cf .PdfObjectBool );if !_cff {_ae .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_a .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_efgb ),nil ;};return false ,nil ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_efg *ContentCreator )SetNonStrokingColor (color _ge .PdfColor )*ContentCreator {switch _eaad :=color .(type ){case *_ge .PdfColorDeviceGray :_efg .Add_g (_eaad .Val ());case *_ge .PdfColorDeviceRGB :_efg .Add_rg (_eaad .R (),_eaad .G (),_eaad .B ());
case *_ge .PdfColorDeviceCMYK :_efg .Add_k (_eaad .C (),_eaad .M (),_eaad .Y (),_eaad .K ());case *_ge .PdfColorPatternType2 :_efg .Add_cs (*_cf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_efg .Add_scn_pattern (_eaad .PatternName );case *_ge .PdfColorPatternType3 :_efg .Add_cs (*_cf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_efg .Add_scn_pattern (_eaad .PatternName );default:_ae .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_eaad );
};return _efg ;};func _ffc (_daf *ContentStreamInlineImage ,_dcde *_cf .PdfObjectDictionary )(*_cf .FlateEncoder ,error ){_def :=_cf .NewFlateEncoder ();if _daf ._ddg !=nil {_def .SetImage (_daf ._ddg );};if _dcde ==nil {_cgdg :=_daf .DecodeParms ;if _cgdg !=nil {_ffd ,_aeg :=_cf .GetDict (_cgdg );
if !_aeg {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cgdg );return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");
};_dcde =_ffd ;};};if _dcde ==nil {return _def ,nil ;};_ae .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dcde .String ());_fabd :=_dcde .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");
if _fabd ==nil {_ae .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_bbe ,_ecb :=_fabd .(*_cf .PdfObjectInteger );if !_ecb {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fabd );
return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_def .Predictor =int (*_bbe );};_fabd =_dcde .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _fabd !=nil {_cge ,_cbg :=_fabd .(*_cf .PdfObjectInteger );if !_cbg {_ae .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_gb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_def .BitsPerComponent =int (*_cge );};if _def .Predictor > 1{_def .Columns =1;_fabd =_dcde .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _fabd !=nil {_ecf ,_dbb :=_fabd .(*_cf .PdfObjectInteger );if !_dbb {return nil ,_gb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_def .Columns =int (*_ecf );
};_def .Colors =1;_cef :=_dcde .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _cef !=nil {_edg ,_eaaf :=_cef .(*_cf .PdfObjectInteger );if !_eaaf {return nil ,_gb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_def .Colors =int (*_edg );};};return _def ,nil ;};func (_cfgc *ContentStreamParser )parseName ()(_cf .PdfObjectName ,error ){_ebe :="";_bdaf :=false ;for {_aaf ,_afbe :=_cfgc ._eaf .Peek (1);if _afbe ==_fd .EOF {break ;};if _afbe !=nil {return _cf .PdfObjectName (_ebe ),_afbe ;
};if !_bdaf {if _aaf [0]=='/'{_bdaf =true ;_cfgc ._eaf .ReadByte ();}else {_ae .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_aaf ,_aaf );return _cf .PdfObjectName (_ebe ),_gb .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aaf [0]);
};}else {if _cf .IsWhiteSpace (_aaf [0]){break ;}else if (_aaf [0]=='/')||(_aaf [0]=='[')||(_aaf [0]=='(')||(_aaf [0]==']')||(_aaf [0]=='<')||(_aaf [0]=='>'){break ;}else if _aaf [0]=='#'{_gdda ,_bca :=_cfgc ._eaf .Peek (3);if _bca !=nil {return _cf .PdfObjectName (_ebe ),_bca ;
};_cfgc ._eaf .Discard (3);_efc ,_bca :=_gf .DecodeString (string (_gdda [1:3]));if _bca !=nil {return _cf .PdfObjectName (_ebe ),_bca ;};_ebe +=string (_efc );}else {_gcbf ,_ :=_cfgc ._eaf .ReadByte ();_ebe +=string (_gcbf );};};};return _cf .PdfObjectName (_ebe ),nil ;
};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gbgf *ContentCreator )Add_f ()*ContentCreator {_dce :=ContentStreamOperation {};_dce .Operand ="\u0066";_gbgf ._dgc =append (_gbgf ._dgc ,&_dce );return _gbgf ;};var (ErrInvalidOperand =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
ErrEarlyExit =_a .New ("\u0074\u0065\u0072\u006di\u006e\u0061\u0074\u0065\u0020\u0070\u0072\u006f\u0063\u0065s\u0073 \u0065\u0061\u0072\u006c\u0079\u0020\u0065x\u0069\u0074"););

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abcd *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_fbc :=ContentStreamOperation {};_fbc .Operand ="\u004b";_fbc .Params =_cfgb ([]float64 {c ,m ,y ,k });_abcd ._dgc =append (_abcd ._dgc ,&_fbc );return _abcd ;};func _edce (_ecda []_cf .PdfObjectName )[]_cf .PdfObject {var _effe []_cf .PdfObject ;
for _ ,_bac :=range _ecda {_effe =append (_effe ,_cf .MakeName (string (_bac )));};return _effe ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_fg *ContentStreamParser )ExtractText ()(string ,error ){_ef ,_dd :=_fg .Parse ();if _dd !=nil {return "",_dd ;};_cae :=false ;_caa ,_egf :=float64 (-1),float64 (-1);_ab :="";for _ ,_ag :=range *_ef {if _ag .Operand =="\u0042\u0054"{_cae =true ;}else if _ag .Operand =="\u0045\u0054"{_cae =false ;
};if _ag .Operand =="\u0054\u0064"||_ag .Operand =="\u0054\u0044"||_ag .Operand =="\u0054\u002a"{_ab +="\u000a";};if _ag .Operand =="\u0054\u006d"{if len (_ag .Params )!=6{continue ;};_egfc ,_fdb :=_ag .Params [4].(*_cf .PdfObjectFloat );if !_fdb {_abc ,_ead :=_ag .Params [4].(*_cf .PdfObjectInteger );
if !_ead {continue ;};_egfc =_cf .MakeFloat (float64 (*_abc ));};_afg ,_fdb :=_ag .Params [5].(*_cf .PdfObjectFloat );if !_fdb {_gd ,_cd :=_ag .Params [5].(*_cf .PdfObjectInteger );if !_cd {continue ;};_afg =_cf .MakeFloat (float64 (*_gd ));};if _egf ==-1{_egf =float64 (*_afg );
}else if _egf > float64 (*_afg ){_ab +="\u000a";_caa =float64 (*_egfc );_egf =float64 (*_afg );continue ;};if _caa ==-1{_caa =float64 (*_egfc );}else if _caa < float64 (*_egfc ){_ab +="\u0009";_caa =float64 (*_egfc );};};if _cae &&_ag .Operand =="\u0054\u004a"{if len (_ag .Params )< 1{continue ;
};_efd ,_ee :=_ag .Params [0].(*_cf .PdfObjectArray );if !_ee {return "",_gb .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ag .Params [0]);
};for _ ,_ffb :=range _efd .Elements (){switch _db :=_ffb .(type ){case *_cf .PdfObjectString :_ab +=_db .Str ();case *_cf .PdfObjectFloat :if *_db < -100{_ab +="\u0020";};case *_cf .PdfObjectInteger :if *_db < -100{_ab +="\u0020";};};};}else if _cae &&_ag .Operand =="\u0054\u006a"{if len (_ag .Params )< 1{continue ;
};_adc ,_fbd :=_ag .Params [0].(*_cf .PdfObjectString );if !_fbd {return "",_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ag .Params [0]);
};_ab +=_adc .Str ();};};return _ab ,nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_cg *ContentCreator )Wrap (){_cg ._dgc .WrapIfNeeded ()};func _cfea (_bfdg _cf .PdfObject )(_ge .PdfColorspace ,error ){_affa ,_fcag :=_bfdg .(*_cf .PdfObjectArray );if !_fcag {_ae .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bfdg );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _affa .Len ()!=4{_ae .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_affa .Len ());
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fedb ,_fcag :=_affa .Get (0).(*_cf .PdfObjectName );if !_fcag {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_affa );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fedb !="\u0049"&&*_fedb !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ae .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_fedb );
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fedb ,_fcag =_affa .Get (1).(*_cf .PdfObjectName );if !_fcag {_ae .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_affa );
return nil ,_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fedb !="\u0047"&&*_fedb !="\u0052\u0047\u0042"&&*_fedb !="\u0043\u004d\u0059\u004b"&&*_fedb !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_fedb !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_fedb !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ae .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_fedb );
return nil ,_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bege :="";switch *_fedb {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bege ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bege ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_bege ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_ffa :=_cf .MakeArray (_cf .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_cf .MakeName (_bege ),_affa .Get (2),_affa .Get (3));return _ge .NewPdfColorspaceFromPdfObject (_ffa );};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bdg *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bda :=ContentStreamOperation {};_bda .Operand ="\u0054\u006d";_bda .Params =_cfgb ([]float64 {a ,b ,c ,d ,e ,f });_bdg ._dgc =append (_bdg ._dgc ,&_bda );return _bdg ;};

// Push pushes `gs` on the `gsStack`.
func (_aaad *GraphicStateStack )Push (gs GraphicsState ){*_aaad =append (*_aaad ,gs )};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ggbd *ContentCreator )Add_quotes (textstr _cf .PdfObjectString ,aw ,ac float64 )*ContentCreator {_bcf :=ContentStreamOperation {};_bcf .Operand ="\u0022";_bcf .Params =_cfgb ([]float64 {aw ,ac });_bcf .Params =append (_bcf .Params ,_deaa ([]_cf .PdfObjectString {textstr })...);
_ggbd ._dgc =append (_ggbd ._dgc ,&_bcf );return _ggbd ;};func (_dfg *ContentStreamParser )parseNull ()(_cf .PdfObjectNull ,error ){_ ,_gfef :=_dfg ._eaf .Discard (4);return _cf .PdfObjectNull {},_gfef ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gg *ContentCreator )Add_B_starred ()*ContentCreator {_addd :=ContentStreamOperation {};_addd .Operand ="\u0042\u002a";_gg ._dgc =append (_gg ._dgc ,&_addd );return _gg ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ada *ContentCreator )Add_f_starred ()*ContentCreator {_cbf :=ContentStreamOperation {};_cbf .Operand ="\u0066\u002a";_ada ._dgc =append (_ada ._dgc ,&_cbf );return _ada ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_adac *ContentCreator )Add_B ()*ContentCreator {_dee :=ContentStreamOperation {};_dee .Operand ="\u0042";_adac ._dgc =append (_adac ._dgc ,&_dee );return _adac ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gef *ContentCreator )Add_quote (textstr _cf .PdfObjectString )*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0027";_agc .Params =_deaa ([]_cf .PdfObjectString {textstr });_gef ._dgc =append (_gef ._dgc ,&_agc );return _gef ;
};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_bfac *ContentStreamProcessor )Process (resources *_ge .PdfPageResources )error {_bfac ._ddge .ColorspaceStroking =_ge .NewPdfColorspaceDeviceGray ();_bfac ._ddge .ColorspaceNonStroking =_ge .NewPdfColorspaceDeviceGray ();_bfac ._ddge .ColorStroking =_ge .NewPdfColorDeviceGray (0);
_bfac ._ddge .ColorNonStroking =_ge .NewPdfColorDeviceGray (0);_bfac ._ddge .CTM =_be .IdentityMatrix ();for _ ,_dage :=range _bfac ._aafae {var _ebfc error ;switch _dage .Operand {case "\u0071":_bfac ._acbf .Push (_bfac ._ddge );case "\u0051":if len (_bfac ._acbf )==0{_ae .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_bfac ._ddge =_bfac ._acbf .Pop ();case "\u0043\u0053":_ebfc =_bfac .handleCommand_CS (_dage ,resources );case "\u0063\u0073":_ebfc =_bfac .handleCommand_cs (_dage ,resources );case "\u0053\u0043":_ebfc =_bfac .handleCommand_SC (_dage ,resources );
case "\u0053\u0043\u004e":_ebfc =_bfac .handleCommand_SCN (_dage ,resources );case "\u0073\u0063":_ebfc =_bfac .handleCommand_sc (_dage ,resources );case "\u0073\u0063\u006e":_ebfc =_bfac .handleCommand_scn (_dage ,resources );case "\u0047":_ebfc =_bfac .handleCommand_G (_dage ,resources );
case "\u0067":_ebfc =_bfac .handleCommand_g (_dage ,resources );case "\u0052\u0047":_ebfc =_bfac .handleCommand_RG (_dage ,resources );case "\u0072\u0067":_ebfc =_bfac .handleCommand_rg (_dage ,resources );case "\u004b":_ebfc =_bfac .handleCommand_K (_dage ,resources );
case "\u006b":_ebfc =_bfac .handleCommand_k (_dage ,resources );case "\u0063\u006d":_ebfc =_bfac .handleCommand_cm (_dage ,resources );};if _ebfc !=nil {_ae .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_dage .Operand ,_ebfc );
_ae .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_dage .Operand );return _ebfc ;};for _ ,_fgce :=range _bfac ._ebdg {var _accb error ;if _fgce .Condition .All (){_accb =_fgce .Handler (_dage ,_bfac ._ddge ,resources );
}else if _fgce .Condition .Operand ()&&_dage .Operand ==_fgce .Operand {_accb =_fgce .Handler (_dage ,_bfac ._ddge ,resources );};if _accb !=nil {_ae .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_accb );
return _accb ;};};};return nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fed *ContentCreator )Add_BT ()*ContentCreator {_bcb :=ContentStreamOperation {};_bcb .Operand ="\u0042\u0054";_fed ._dgc =append (_fed ._dgc ,&_bcb );return _fed ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cee *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_efgc :=ContentStreamOperation {};_efgc .Operand ="\u0054\u0073";_efgc .Params =_cfgb ([]float64 {rise });_cee ._dgc =append (_cee ._dgc ,&_efgc );return _cee ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ed *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_fba :=ContentStreamOperation {};_fba .Operand ="\u0064";_fba .Params =[]_cf .PdfObject {};_fba .Params =append (_fba .Params ,_cf .MakeArrayFromIntegers64 (dashArray ));
_fba .Params =append (_fba .Params ,_cf .MakeInteger (dashPhase ));_ed ._dgc =append (_ed ._dgc ,&_fba );return _ed ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _cf .PdfObject ;ColorSpace _cf .PdfObject ;Decode _cf .PdfObject ;DecodeParms _cf .PdfObject ;Filter _cf .PdfObject ;Height _cf .PdfObject ;ImageMask _cf .PdfObject ;Intent _cf .PdfObject ;Interpolate _cf .PdfObject ;
Width _cf .PdfObject ;_aff []byte ;_ddg *_egg .ImageBase ;};func (_bge *ContentStreamInlineImage )toImageBase (_bea *_ge .PdfPageResources )(*_egg .ImageBase ,error ){if _bge ._ddg !=nil {return _bge ._ddg ,nil ;};_dafb :=_egg .ImageBase {};if _bge .Height ==nil {return nil ,_a .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_gba ,_adb :=_bge .Height .(*_cf .PdfObjectInteger );if !_adb {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_dafb .Height =int (*_gba );if _bge .Width ==nil {return nil ,_a .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_afff ,_adb :=_bge .Width .(*_cf .PdfObjectInteger );if !_adb {return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_dafb .Width =int (*_afff );_ccb ,_deaf :=_bge .IsMask ();if _deaf !=nil {return nil ,_deaf ;
};if _ccb {_dafb .BitsPerComponent =1;_dafb .ColorComponents =1;}else {if _bge .BitsPerComponent ==nil {_ae .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_dafb .BitsPerComponent =8;}else {_fbg ,_gac :=_bge .BitsPerComponent .(*_cf .PdfObjectInteger );if !_gac {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bge .BitsPerComponent );
return nil ,_a .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_dafb .BitsPerComponent =int (*_fbg );};if _bge .ColorSpace !=nil {_gfb ,_aaa :=_bge .GetColorSpace (_bea );if _aaa !=nil {return nil ,_aaa ;};_dafb .ColorComponents =_gfb .GetNumComponents ();
}else {_ae .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_dafb .ColorComponents =1;};};if _gefg ,_bdf :=_cf .GetArray (_bge .Decode );_bdf {_dafb .Decode ,_deaf =_gefg .ToFloat64Array ();if _deaf !=nil {return nil ,_deaf ;};};_bge ._ddg =&_dafb ;return _bge ._ddg ,nil ;};func _gfa (_dga *ContentStreamInlineImage )(*_cf .MultiEncoder ,error ){_ggab :=_cf .NewMultiEncoder ();
var _bgd *_cf .PdfObjectDictionary ;var _abb []_cf .PdfObject ;if _edd :=_dga .DecodeParms ;_edd !=nil {_ddf ,_debg :=_edd .(*_cf .PdfObjectDictionary );if _debg {_bgd =_ddf ;};_fgg ,_becfg :=_edd .(*_cf .PdfObjectArray );if _becfg {for _ ,_ecfe :=range _fgg .Elements (){if _cfd ,_febc :=_ecfe .(*_cf .PdfObjectDictionary );
_febc {_abb =append (_abb ,_cfd );}else {_abb =append (_abb ,nil );};};};};_cfgd :=_dga .Filter ;if _cfgd ==nil {return nil ,_gb .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fag ,_afcd :=_cfgd .(*_cf .PdfObjectArray );
if !_afcd {return nil ,_gb .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};
for _bcda ,_eef :=range _fag .Elements (){_fead ,_ege :=_eef .(*_cf .PdfObjectName );if !_ege {return nil ,_gb .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");
};var _ebd _cf .PdfObject ;if _bgd !=nil {_ebd =_bgd ;}else {if len (_abb )> 0{if _bcda >=len (_abb ){return nil ,_gb .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_ebd =_abb [_bcda ];};};var _ecbg *_cf .PdfObjectDictionary ;if _bdbe ,_eeg :=_ebd .(*_cf .PdfObjectDictionary );_eeg {_ecbg =_bdbe ;};if *_fead ==_cf .StreamEncodingFilterNameFlate ||*_fead =="\u0046\u006c"{_gegd ,_dea :=_ffc (_dga ,_ecbg );if _dea !=nil {return nil ,_dea ;
};_ggab .AddEncoder (_gegd );}else if *_fead ==_cf .StreamEncodingFilterNameLZW {_ebcc ,_agea :=_gage (_dga ,_ecbg );if _agea !=nil {return nil ,_agea ;};_ggab .AddEncoder (_ebcc );}else if *_fead ==_cf .StreamEncodingFilterNameASCIIHex {_fdf :=_cf .NewASCIIHexEncoder ();
_ggab .AddEncoder (_fdf );}else if *_fead ==_cf .StreamEncodingFilterNameASCII85 ||*_fead =="\u0041\u0038\u0035"{_bgfe :=_cf .NewASCII85Encoder ();_ggab .AddEncoder (_bgfe );}else {_ae .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_fead );
return nil ,_gb .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _ggab ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_agg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_dceb :=ContentStreamOperation {};_dceb .Operand ="\u0054\u0044";_dceb .Params =_cfgb ([]float64 {tx ,ty });_agg ._dgc =append (_agg ._dgc ,&_dceb );return _agg ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eeae *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_bbdc :=ContentStreamOperation {};_bbdc .Operand ="\u006b";_bbdc .Params =_cfgb ([]float64 {c ,m ,y ,k });_eeae ._dgc =append (_eeae ._dgc ,&_bbdc );return _eeae ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_daed *GraphicStateStack )Pop ()GraphicsState {_afdeb :=(*_daed )[len (*_daed )-1];*_daed =(*_daed )[:len (*_daed )-1];return _afdeb ;};func _gage (_ageff *ContentStreamInlineImage ,_cbb *_cf .PdfObjectDictionary )(*_cf .LZWEncoder ,error ){_bdc :=_cf .NewLZWEncoder ();
if _cbb ==nil {if _ageff .DecodeParms !=nil {_ecc ,_defd :=_cf .GetDict (_ageff .DecodeParms );if !_defd {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ageff .DecodeParms );
return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_cbb =_ecc ;};};if _cbb ==nil {return _bdc ,nil ;};_fgc :=_cbb .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _fgc !=nil {_fabf ,_gdbe :=_fgc .(*_cf .PdfObjectInteger );if !_gdbe {_ae .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_fgc );
return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_fabf !=0&&*_fabf !=1{return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_bdc .EarlyChange =int (*_fabf );}else {_bdc .EarlyChange =1;};_fgc =_cbb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _fgc !=nil {_fff ,_bdb :=_fgc .(*_cf .PdfObjectInteger );if !_bdb {_ae .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_fgc );
return nil ,_gb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_bdc .Predictor =int (*_fff );};_fgc =_cbb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _fgc !=nil {_gdgf ,_bfc :=_fgc .(*_cf .PdfObjectInteger );if !_bfc {_ae .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_gb .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_bdc .BitsPerComponent =int (*_gdgf );};if _bdc .Predictor > 1{_bdc .Columns =1;_fgc =_cbb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _fgc !=nil {_gafb ,_dff :=_fgc .(*_cf .PdfObjectInteger );if !_dff {return nil ,_gb .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_bdc .Columns =int (*_gafb );
};_bdc .Colors =1;_fgc =_cbb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _fgc !=nil {_fca ,_accg :=_fgc .(*_cf .PdfObjectInteger );if !_accg {return nil ,_gb .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_bdc .Colors =int (*_fca );};};_ae .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_cbb .String ());return _bdc ,nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ggb *ContentCreator )Add_Tj (textstr _cf .PdfObjectString )*ContentCreator {_caba :=ContentStreamOperation {};_caba .Operand ="\u0054\u006a";_caba .Params =_deaa ([]_cf .PdfObjectString {textstr });_ggb ._dgc =append (_ggb ._dgc ,&_caba );return _ggb ;
};func _cfgb (_beaf []float64 )[]_cf .PdfObject {var _gcbb []_cf .PdfObject ;for _ ,_becg :=range _beaf {_gcbb =append (_gcbb ,_cf .MakeFloat (_becg ));};return _gcbb ;};var _cag =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};
