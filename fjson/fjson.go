//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_g "encoding/json";_f "github.com/unidoc/unipdf/v3/core";_ge "github.com/unidoc/unipdf/v3/model";_e "io";_d "os";);

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_gg ,_db :=_d .Open (filePath );if _db !=nil {return nil ,_db ;};defer _gg .Close ();return LoadFromJSON (_gg );};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_bd []fieldValue };

// FieldValues implements model.FieldValueProvider interface.
func (_ag *FieldData )FieldValues ()(map[string ]_f .PdfObject ,error ){_bfc :=make (map[string ]_f .PdfObject );for _ ,_aefg :=range _ag ._bd {if len (_aefg .Value )> 0{_bfc [_aefg .Name ]=_f .MakeString (_aefg .Value );};};return _bfc ,nil ;};type fieldValue struct{Name string `json:"name"`;
Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _e .Reader )(*FieldData ,error ){var _gd FieldData ;_bf :=_g .NewDecoder (r ).Decode (&_gd ._bd );if _bf !=nil {return nil ,_bf ;};return &_gd ,nil ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _e .ReadSeeker )(*FieldData ,error ){_a ,_c :=_ge .NewPdfReader (rs );if _c !=nil {return nil ,_c ;};if _a .AcroForm ==nil {return nil ,nil ;};var _ac []fieldValue ;_ad :=_a .AcroForm .AllFields ();for _ ,_bg :=range _ad {var _da []string ;
_fg :=make (map[string ]struct{});_ae ,_eb :=_bg .FullName ();if _eb !=nil {return nil ,_eb ;};if _gdd ,_ba :=_bg .V .(*_f .PdfObjectString );_ba {_ac =append (_ac ,fieldValue {Name :_ae ,Value :_gdd .Decoded ()});continue ;};var _dab string ;for _ ,_ef :=range _bg .Annotations {_fb ,_dfc :=_f .GetName (_ef .AS );
if _dfc {_dab =_fb .String ();};_eg ,_ege :=_f .GetDict (_ef .AP );if !_ege {continue ;};_af ,_ :=_f .GetDict (_eg .Get ("\u004e"));for _ ,_ab :=range _af .Keys (){_dbg :=_ab .String ();if _ ,_bc :=_fg [_dbg ];!_bc {_da =append (_da ,_dbg );_fg [_dbg ]=struct{}{};
};};_fc ,_ :=_f .GetDict (_eg .Get ("\u0044"));for _ ,_aaf :=range _fc .Keys (){_bce :=_aaf .String ();if _ ,_aef :=_fg [_bce ];!_aef {_da =append (_da ,_bce );_fg [_bce ]=struct{}{};};};};_geb :=fieldValue {Name :_ae ,Value :_dab ,Options :_da };_ac =append (_ac ,_geb );
};_dfg :=FieldData {_bd :_ac };return &_dfg ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_aeg FieldData )JSON ()(string ,error ){_fa ,_acg :=_g .MarshalIndent (_aeg ._bd ,"","\u0020\u0020\u0020\u0020");return string (_fa ),_acg ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_cd ,_cc :=_d .Open (filePath );if _cc !=nil {return nil ,_cc ;};defer _cd .Close ();return LoadFromPDF (_cd );};