//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_b "encoding/json";_g "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/model";_bc "io";_c "os";);

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ed ,_ge :=_c .Open (filePath );if _ge !=nil {return nil ,_ge ;};defer _ed .Close ();return LoadFromJSON (_ed );};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _bc .ReadSeeker )(*FieldData ,error ){_cf ,_fb :=_f .NewPdfReader (rs );if _fb !=nil {return nil ,_fb ;};if _cf .AcroForm ==nil {return nil ,nil ;};var _cc []fieldValue ;_ba :=_cf .AcroForm .AllFields ();for _ ,_gg :=range _ba {var _ga []string ;
_fca :=make (map[string ]struct{});_fg ,_edd :=_gg .FullName ();if _edd !=nil {return nil ,_edd ;};if _ce ,_cfc :=_gg .V .(*_g .PdfObjectString );_cfc {_cc =append (_cc ,fieldValue {Name :_fg ,Value :_ce .Decoded ()});continue ;};var _gdg string ;for _ ,_gec :=range _gg .Annotations {_ccc ,_fa :=_g .GetName (_gec .AS );
if _fa {_gdg =_ccc .String ();};_bcc ,_dg :=_g .GetDict (_gec .AP );if !_dg {continue ;};_gf ,_ :=_g .GetDict (_bcc .Get ("\u004e"));for _ ,_bg :=range _gf .Keys (){_bf :=_bg .String ();if _ ,_bfc :=_fca [_bf ];!_bfc {_ga =append (_ga ,_bf );_fca [_bf ]=struct{}{};
};};_ee ,_ :=_g .GetDict (_bcc .Get ("\u0044"));for _ ,_ea :=range _ee .Keys (){_db :=_ea .String ();if _ ,_gdb :=_fca [_db ];!_gdb {_ga =append (_ga ,_db );_fca [_db ]=struct{}{};};};};_eeb :=fieldValue {Name :_fg ,Value :_gdg ,Options :_ga };_cc =append (_cc ,_eeb );
};_fgd :=FieldData {_d :_cc };return &_fgd ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _bc .Reader )(*FieldData ,error ){var _e FieldData ;_fc :=_b .NewDecoder (r ).Decode (&_e ._d );if _fc !=nil {return nil ,_fc ;};return &_e ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_d []fieldValue };type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// JSON returns the field data as a string in JSON format.
func (_cd FieldData )JSON ()(string ,error ){_baf ,_eef :=_b .MarshalIndent (_cd ._d ,"","\u0020\u0020\u0020\u0020");return string (_baf ),_eef ;};

// FieldValues implements model.FieldValueProvider interface.
func (_de *FieldData )FieldValues ()(map[string ]_g .PdfObject ,error ){_ebe :=make (map[string ]_g .PdfObject );for _ ,_cb :=range _de ._d {if len (_cb .Value )> 0{_ebe [_cb .Name ]=_g .MakeString (_cb .Value );};};return _ebe ,nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_ac ,_bgb :=_c .Open (filePath );if _bgb !=nil {return nil ,_bgb ;};defer _ac .Close ();return LoadFromPDF (_ac );};