//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_e "encoding/json";_f "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/model";_d "io";_g "os";);

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ff ,_ad :=_g .Open (filePath );if _ad !=nil {return nil ,_ad ;};defer _ff .Close ();return LoadFromJSON (_ff );};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _d .Reader )(*FieldData ,error ){var _dd FieldData ;_be :=_e .NewDecoder (r ).Decode (&_dd ._a );if _be !=nil {return nil ,_be ;};return &_dd ,nil ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _d .ReadSeeker )(*FieldData ,error ){_c ,_bb :=_df .NewPdfReader (rs );if _bb !=nil {return nil ,_bb ;};if _c .AcroForm ==nil {return nil ,nil ;};var _bf []fieldValue ;_fa :=_c .AcroForm .AllFields ();for _ ,_ga :=range _fa {var _cd []string ;_eb :=make (map[string ]struct{});_ea ,_ag :=_ga .FullName ();if _ag !=nil {return nil ,_ag ;};if _cf ,_fab :=_ga .V .(*_f .PdfObjectString );_fab {_bf =append (_bf ,fieldValue {Name :_ea ,Value :_cf .Decoded ()});continue ;};var _dg string ;for _ ,_ac :=range _ga .Annotations {_ae ,_cff :=_f .GetName (_ac .AS );if _cff {_dg =_ae .String ();};_af ,_dgg :=_f .GetDict (_ac .AP );if !_dgg {continue ;};_agb ,_ :=_f .GetDict (_af .Get ("\u004e"));for _ ,_fe :=range _agb .Keys (){_dc :=_fe .String ();if _ ,_cc :=_eb [_dc ];!_cc {_cd =append (_cd ,_dc );_eb [_dc ]=struct{}{};};};_ffgf ,_ :=_f .GetDict (_af .Get ("\u0044"));for _ ,_afb :=range _ffgf .Keys (){_de :=_afb .String ();if _ ,_ee :=_eb [_de ];!_ee {_cd =append (_cd ,_de );_eb [_de ]=struct{}{};};};};_fc :=fieldValue {Name :_ea ,Value :_dg ,Options :_cd };_bf =append (_bf ,_fc );};_eac :=FieldData {_a :_bf };return &_eac ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_gb FieldData )JSON ()(string ,error ){_ab ,_bc :=_e .MarshalIndent (_gb ._a ,"","\u0020\u0020\u0020\u0020");return string (_ab ),_bc ;};

// FieldValues implements model.FieldValueProvider interface.
func (_eg *FieldData )FieldValues ()(map[string ]_f .PdfObject ,error ){_da :=make (map[string ]_f .PdfObject );for _ ,_bd :=range _eg ._a {if len (_bd .Value )> 0{_da [_bd .Name ]=_f .MakeString (_bd .Value );};};return _da ,nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_ccg ,_gdg :=_g .Open (filePath );if _gdg !=nil {return nil ,_gdg ;};defer _ccg .Close ();return LoadFromPDF (_ccg );};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_a []fieldValue };